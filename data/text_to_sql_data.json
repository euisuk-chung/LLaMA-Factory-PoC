[
    {
        "instruction": "입력 텍스트: 각 영업사원이 판매한 목재의 총량은 무엇이며, 영업사원별로 정렬된 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT); INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South'); CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE); INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT salesperson_id, name, SUM(volume) as total_volume FROM timber_sales JOIN salesperson ON timber_sales.salesperson_id = salesperson.salesperson_id GROUP BY salesperson_id, name ORDER BY total_volume DESC;"
    },
    {
        "instruction": "입력 텍스트: equipment_maintenance 테이블에서 모든 고유 장비 유형과 해당하는 총 유지 보수 빈도를 나열하세요.\n\nDDL statements:\nCREATE TABLE equipment_maintenance (equipment_type VARCHAR(255), maintenance_frequency INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_type, SUM(maintenance_frequency) AS total_maintenance_frequency FROM equipment_maintenance GROUP BY equipment_type;"
    },
    {
        "instruction": "입력 텍스트: 남해양에서 발견되는 해양 생물 종은 몇 종인가요?\n\nDDL statements:\nCREATE TABLE marine_species (name VARCHAR(50), common_name VARCHAR(50), location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_species WHERE location = 'Southern Ocean';"
    },
    {
        "instruction": "입력 텍스트: trade_history 테이블에서 각 트레이더와 주식별 총 거래 가치와 평균 가격은 무엇인가요?\n\nDDL statements:\nCREATE TABLE trade_history (id INT, trader_id INT, stock VARCHAR(255), price DECIMAL(5,2), quantity INT, trade_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trader_id, stock, SUM(price * quantity) as total_trade_value, AVG(price) as avg_price FROM trade_history GROUP BY trader_id, stock;"
    },
    {
        "instruction": "입력 텍스트: 가장 높은 비용을 가진 에너지 효율 개선 업그레이드와 그 종류를 찾으세요.\n\nDDL statements:\nCREATE TABLE upgrades (id INT, cost FLOAT, type TEXT); INSERT INTO upgrades (id, cost, type) VALUES (1, 500, 'Insulation'), (2, 1000, 'HVAC'), (3, 1500, 'Lighting');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, cost FROM (SELECT type, cost, ROW_NUMBER() OVER (ORDER BY cost DESC) as rn FROM upgrades) sub WHERE rn = 1;"
    },
    {
        "instruction": "입력 텍스트: 유럽연합이 지난 3년간 인도적 지원에 사용한 총 지출액은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists defense; CREATE TABLE if not exists eu_humanitarian_assistance (id INT PRIMARY KEY, year INT, spending INT); INSERT INTO defense.eu_humanitarian_assistance (id, year, spending) VALUES (1, 2019, 1500), (2, 2020, 1800), (3, 2021, 2100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(spending) FROM defense.eu_humanitarian_assistance WHERE year BETWEEN 2019 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: 2월에 각 어종의 평균 수온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SpeciesWaterTemp (SpeciesID int, Date date, WaterTemp float); INSERT INTO SpeciesWaterTemp (SpeciesID, Date, WaterTemp) VALUES (1, '2022-02-01', 12.8), (1, '2022-02-02', 13.1), (2, '2022-02-01', 14.3), (2, '2022-02-02', 14.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SpeciesName, AVG(WaterTemp) as AvgTemp FROM SpeciesWaterTemp INNER JOIN FishSpecies ON SpeciesWaterTemp.SpeciesID = FishSpecies.SpeciesID WHERE MONTH(Date) = 2 GROUP BY SpeciesName;"
    },
    {
        "instruction": "입력 텍스트: 프로그램의 결과 데이터를 삭제하세요.\n\nDDL statements:\nCREATE TABLE Program_Outcomes (id INT, program_id INT, outcome_type VARCHAR, value INT, outcome_date DATE); INSERT INTO Program_Outcomes (id, program_id, outcome_type, value, outcome_date) VALUES (1, 1001, 'participants', 50, '2021-01-01'), (2, 1002, 'hours_donated', 1000, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Program_Outcomes WHERE program_id = 1002;"
    },
    {
        "instruction": "입력 텍스트: Green Line' 버스에서 승객들로부터 수집된 총 요금을 찾으세요.\n\nDDL statements:\nCREATE TABLE bus_routes (route_name VARCHAR(50), fare FLOAT); INSERT INTO bus_routes (route_name, fare) VALUES ('Green Line', 1.50), ('Red Line', 2.00), ('Blue Line', 1.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fare) FROM bus_routes WHERE route_name = 'Green Line';"
    },
    {
        "instruction": "입력 텍스트: 포괄적 주거 지역의 평균 주택 크기는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Inclusive_Housing (Property_ID INT, Inclusive VARCHAR(10), Property_Size INT); INSERT INTO Inclusive_Housing (Property_ID, Inclusive, Property_Size) VALUES (1, 'Yes', 900), (2, 'No', 1100), (3, 'Yes', 800), (4, 'No', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Property_Size) FROM Inclusive_Housing WHERE Inclusive = 'Yes';"
    },
    {
        "instruction": "입력 텍스트: 인도의 각 지구에서 농부들의 평균 소득은 얼마입니까?\n\nDDL statements:\nCREATE TABLE farmers_india (id INT, name VARCHAR(255), district_id INT, age INT, income INT); INSERT INTO farmers_india (id, name, district_id, age, income) VALUES (1, 'Farmer A', 1, 45, 50000); CREATE TABLE districts_india (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO districts_india (id, name, state) VALUES (1, 'District A', 'Maharashtra');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, AVG(f.income) FROM farmers_india f JOIN districts_india d ON f.district_id = d.id GROUP BY d.name;"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 연간 평균 해수면 온도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Ocean(id INT, region VARCHAR(20), temperature DECIMAL(5,2)); INSERT INTO Ocean(id, region, temperature) VALUES (1, 'Pacific', 20.5), (2, 'Atlantic', 18.3), (3, 'Indian', 23.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(temperature) FROM (SELECT temperature FROM Ocean WHERE region = 'Pacific' GROUP BY temperature, YEAR(STR_TO_DATE(region, '%Y'))) AS PacificAverage;"
    },
    {
        "instruction": "입력 텍스트: 호주에 있는 탄소 상쇄 프로젝트 'Initiative 1'의 종료 날짜를 '2025-12-31'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE carbon_offsets (initiative_id INT, initiative_name VARCHAR(255), country VARCHAR(255), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE carbon_offsets SET end_date = '2025-12-31' WHERE initiative_name = 'Initiative 1' AND country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 어떤 지역이 제품에 대한 지속 가능성 지표가 가장 높고 가장 낮은가요?\n\nDDL statements:\nCREATE TABLE sustainability_metrics (product_id INT, carbon_footprint INT, water_usage INT, waste_generation INT, region VARCHAR(50)); INSERT INTO sustainability_metrics (product_id, carbon_footprint, water_usage, waste_generation, region) VALUES (1, 10, 50, 20, 'Northeast'), (2, 15, 60, 30, 'Southwest'), (3, 8, 40, 15, 'Midwest'); CREATE TABLE products (product_id INT, product_name VARCHAR(50)); INSERT INTO products (product_id, product_name) VALUES (1, 'Lipstick'), (2, 'Eyeshadow'), (3, 'Blush');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(sustainability_metrics.carbon_footprint) as max_carbon_footprint, MAX(sustainability_metrics.water_usage) as max_water_usage, MAX(sustainability_metrics.waste_generation) as max_waste_generation FROM sustainability_metrics JOIN products ON sustainability_metrics.product_id = products.product_id GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: vehicle_safety_testing' 테이블과 그 기록들을 삭제하세요.\n\nDDL statements:\nCREATE TABLE vehicle_safety_testing (id INT PRIMARY KEY, vehicle_model VARCHAR(255), test_score FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DROP TABLE vehicle_safety_testing;"
    },
    {
        "instruction": "입력 텍스트: 해양 포유류와 조류의 연도별 보전 상태를 보여주세요.\n\nDDL statements:\nCREATE TABLE mammals (id INT, name VARCHAR(255), conservation_status VARCHAR(255), year INT); CREATE TABLE birds (id INT, name VARCHAR(255), conservation_status VARCHAR(255), year INT); CREATE VIEW combined AS SELECT 'Mammals' AS animal_group, * FROM mammals UNION ALL SELECT 'Birds', * FROM birds;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal_group, conservation_status, year, COUNT(*) FROM combined GROUP BY animal_group, conservation_status, year;"
    },
    {
        "instruction": "입력 텍스트: California'에 위치한 군사 기지의 이름과 종류는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Armed_Forces (base_id INT, base_name VARCHAR(50), base_location VARCHAR(50), base_type VARCHAR(50)); INSERT INTO Armed_Forces (base_id, base_name, base_location, base_type) VALUES (1, 'Fort Bragg', 'North Carolina', 'Army'); INSERT INTO Armed_Forces (base_id, base_name, base_location, base_type) VALUES (2, 'Camp Pendleton', 'California', 'Marines');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT base_name, base_type FROM Armed_Forces WHERE base_location = 'California';"
    },
    {
        "instruction": "입력 텍스트: artists_valuation' 테이블에 있는 각 예술가의 작품들의 총 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE artist (id INT, name VARCHAR(50)); INSERT INTO artist (id, name) VALUES (1, 'Picasso'), (2, 'Warhol'), (3, 'Basquiat'); CREATE TABLE artists_valuation (artist_id INT, valuation INT); INSERT INTO artists_valuation (artist_id, valuation) VALUES (1, 10000000), (1, 12000000), (2, 8000000), (2, 9000000), (3, 11000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, SUM(av.valuation) AS total_valuation FROM artist a JOIN artists_valuation av ON a.id = av.artist_id GROUP BY a.id, a.name;"
    },
    {
        "instruction": "입력 텍스트: 바이오센서 개발을 위한 펀딩을 받은 스타트업을 나열하세요.\n\nDDL statements:\nCREATE TABLE startups (id INT, name VARCHAR(50), domain VARCHAR(50), location VARCHAR(50)); INSERT INTO startups (id, name, domain, location) VALUES (1, 'SensBiotech', 'Biosensors', 'CA'); INSERT INTO startups (id, name, domain, location) VALUES (2, 'BioSignal', 'Bioinformatics', 'NY'); CREATE TABLE funding (id INT, startup_id INT, amount DECIMAL(10, 2), purpose VARCHAR(50)); INSERT INTO funding (id, startup_id, amount, purpose) VALUES (1, 1, 50000.00, 'Biosensor Development'); INSERT INTO funding (id, startup_id, amount, purpose) VALUES (2, 2, 30000.00, 'Data Analysis');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name FROM startups s JOIN funding f ON s.id = f.startup_id WHERE s.domain = 'Biosensors' AND f.purpose = 'Biosensor Development';"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 아프리카 국가들에게 비정부기구(NGO)가 제공한 인도적 지원의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE HumanitarianAssistance (Country VARCHAR(50), Organization VARCHAR(50), Amount INT, Year INT); INSERT INTO HumanitarianAssistance (Country, Organization, Amount, Year) VALUES ('Kenya', 'Doctors Without Borders', 2000000, 2018), ('Nigeria', 'International Rescue Committee', 3000000, 2019), ('South Africa', 'Oxfam', 1500000, 2020), ('Ethiopia', 'Save the Children', 2500000, 2017), ('Sudan', 'Care International', 1800000, 2016);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Amount) AS TotalAssistance, Country FROM HumanitarianAssistance WHERE Organization NOT IN ('Government', 'Military') AND Year BETWEEN 2016 AND 2020 GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 국가별로 발표된 자율 주행 연구 논문의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ResearchPapers (ID INT, Title VARCHAR(100), PublishedDate DATE, Author VARCHAR(50), Country VARCHAR(50)); INSERT INTO ResearchPapers (ID, Title, PublishedDate, Author, Country) VALUES (1, 'AD Research 1', '2022-01-15', 'A. Smith', 'USA'), (2, 'AD Research 2', '2022-03-20', 'B. Johnson', 'Canada'), (3, 'AD Research 3', '2021-12-12', 'C. Lee', 'South Korea'), (4, 'AD Research 4', '2022-05-08', 'D. Patel', 'India'), (5, 'AD Research 5', '2021-11-01', 'E. Chen', 'China');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, COUNT(*) as Total_Papers FROM ResearchPapers WHERE PublishedDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND Author LIKE '%autonomous%' GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: incident_responses 테이블에서 '진행 중' 상태를 제외한 보안 사건 유형과 해당 상태의 고유한 조합은 무엇인가요?\n\nDDL statements:\nCREATE TABLE incident_responses (incident VARCHAR(50), status VARCHAR(15)); INSERT INTO incident_responses (incident, status) VALUES ('Incident 1', 'Resolved'), ('Incident 2', 'In Progress'), ('Incident 3', 'Resolved'), ('Incident 4', 'In Progress'), ('Incident 5', 'Assessed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT incident, status FROM incident_responses WHERE status != 'In Progress' GROUP BY incident, status;"
    },
    {
        "instruction": "입력 텍스트: 일본에서 연도별로 진행된 유전 연구 프로젝트의 최대 개수는 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists genetic;CREATE TABLE if not exists genetic.projects (id INT PRIMARY KEY, name VARCHAR(100), start_date DATE);INSERT INTO genetic.projects (id, name, start_date) VALUES (1, 'ProjectX', '2018-01-01'), (2, 'ProjectY', '2020-05-15'), (3, 'ProjectZ', '2017-08-08'), (4, 'ProjectW', '2021-03-03'), (5, 'ProjectV', '2020-09-20'), (6, 'ProjectU', '2019-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT YEAR(start_date) AS year, MAX(COUNT(*)) AS projects_count FROM genetic.projects GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 2020년과 2021년 각 월에 완공된 건설 프로젝트는 몇 개였나요?\n\nDDL statements:\nCREATE TABLE project_timeline (id INT, project VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO project_timeline (id, project, start_date, end_date) VALUES (1, 'Office Building', '2019-12-20', '2021-04-30'), (2, 'Residential Apartments', '2021-03-01', '2022-08-01'), (3, 'School', '2020-06-15', '2021-10-15'), (4, 'Library', '2020-01-01', '2020-06-15'), (5, 'Park', '2021-01-01', '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT YEAR(start_date) AS year, MONTH(start_date) AS month, COUNT(*) AS projects FROM project_timeline WHERE end_date IS NOT NULL GROUP BY year, month;"
    },
    {
        "instruction": "입력 텍스트: LaborStatistics' 테이블에서 근로자별 주당 평균 노동 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE LaborStatistics (workerID INT, laborDate DATE, hourlyRate DECIMAL(10,2), hoursWorked DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(hourlyRate * hoursWorked * 5) AS AverageLaborCost FROM LaborStatistics;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 활동하는 모든 식량 정의 단체와 그들이 진행한 프로젝트 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE food_justice_orgs (org_id INT, org_name TEXT, country TEXT, num_projects INT); INSERT INTO food_justice_orgs (org_id, org_name, country, num_projects) VALUES (1, 'Org A', 'Kenya', 10), (2, 'Org B', 'Nigeria', 7), (3, 'Org C', 'South Africa', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT org_name, num_projects FROM food_justice_orgs WHERE country = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 몸무게가 500kg을 초과하는 모든 동물의 이름과 종을 검색하세요.\n\nDDL statements:\nCREATE TABLE animals (id INT, name VARCHAR(20), species VARCHAR(20), weight DECIMAL(5, 2)); INSERT INTO animals (id, name, species, weight) VALUES (1, 'Elephant', 'African', 6000), (2, 'Lion', 'African', 400), (3, 'Hippo', 'African', 3000), (4, 'Tiger', 'Asian', 300), (5, 'Crane', 'African', 100), (6, 'Rhinoceros', 'African', 2000), (7, 'Zebra', 'African', 450), (8, 'Giraffe', 'African', 1200), (9, 'Bear', 'Eurasian', 600), (10, 'Crocodile', 'Nile', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, species FROM animals WHERE weight > 500;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기 APAC 지역에서 가장 높은 가상 투어 참여도를 보인 호텔을 확인하세요.\n\nDDL statements:\nCREATE TABLE virtual_tour_stats (hotel_id INT, hotel_name TEXT, region TEXT, q1_2022_views INT); INSERT INTO virtual_tour_stats (hotel_id, hotel_name, region, q1_2022_views) VALUES (10, 'Hotel X', 'APAC', 500), (11, 'Hotel Y', 'APAC', 650);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_name, q1_2022_views FROM virtual_tour_stats WHERE region = 'APAC' ORDER BY q1_2022_views DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 우리의 정책 분석 데이터베이스에 따르면 모든 부서에서 공통적으로 적용되는 사이버 보안 정책은 무엇인가요?\n\nDDL statements:\nCREATE TABLE PolicyAnalysis (id INT, policy VARCHAR(100), department VARCHAR(50)); INSERT INTO PolicyAnalysis (id, policy, department) VALUES (1, 'Data Access Policy', 'Sales'), (2, 'Password Policy', 'Marketing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy FROM PolicyAnalysis GROUP BY policy HAVING COUNT(DISTINCT department) = (SELECT COUNT(DISTINCT department) FROM PolicyAnalysis);"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코 베이 지역에서 여성에 의해 설립된 회사는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, city TEXT, state TEXT, founder_gender TEXT); INSERT INTO companies (id, name, city, state, founder_gender) VALUES (1, 'Acme Inc', 'San Francisco', 'CA', 'female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies WHERE city='San Francisco' AND state='CA' AND founder_gender='female';"
    },
    {
        "instruction": "입력 텍스트: 2021년 하반기에 여성들에게 발급된 사회적 책임 대출의 총액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE socially_responsible_loans (id INT, value DECIMAL(10, 2), client_gender VARCHAR(10), date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(value) FROM socially_responsible_loans WHERE client_gender = 'female' AND date BETWEEN '2021-07-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 지구 표면으로부터 모든 위성의 최대 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, name VARCHAR(255), country_of_origin VARCHAR(255), avg_distance FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country_of_origin, MAX(avg_distance) FROM satellites GROUP BY country_of_origin;"
    },
    {
        "instruction": "입력 텍스트: 2022년도에 토론토 시의 모바일 고객들의 총 데이터 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mobile_usage (subscriber_id INT, data_usage FLOAT, city VARCHAR(20), year INT); INSERT INTO mobile_usage (subscriber_id, data_usage, city, year) VALUES (1, 3.5, 'Toronto', 2022), (2, 4.2, 'New York', 2022), (3, 3.8, 'Toronto', 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(data_usage) FROM mobile_usage WHERE city = 'Toronto' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: VesselC의 최대 화물 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, max_cargo_weight INT); INSERT INTO vessels (id, name, max_cargo_weight) VALUES (3, 'VesselC', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT max_cargo_weight FROM vessels WHERE name = 'VesselC';"
    },
    {
        "instruction": "입력 텍스트: 직원별 문화 역량 점수 중 최소 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE worker_scores (worker_id INT, score INT); INSERT INTO worker_scores (worker_id, score) VALUES (1, 95), (2, 88), (3, 72);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT worker_id, MIN(score) FROM worker_scores;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 지역에서 발생한 보안 사건의 총 건수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE incident_region(id INT, region VARCHAR(50), incidents INT, incident_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(incidents) as total_incidents FROM incident_region WHERE incident_date > DATE(NOW()) - INTERVAL 365 DATE GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 방위 외교 테이블에서 참가국이 '중국' 또는 '인도'인 모든 기록을 보여주세요.\n\nDDL statements:\nCREATE TABLE defense_diplomacy (diplomacy_id INT, event_name VARCHAR(50), participant_country VARCHAR(50), event_date DATE, event_description TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM defense_diplomacy WHERE participant_country IN ('China', 'India');"
    },
    {
        "instruction": "입력 텍스트: 2018년, 2019년, 2020년 미국의 군인 수는 총 몇 명이었나요?\n\nDDL statements:\nCREATE TABLE us_military_personnel (id INT, year INT, personnel INT); INSERT INTO us_military_personnel (id, year, personnel) VALUES (1, 2018, 2100000), (2, 2019, 2150000), (3, 2020, 2180000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(personnel) FROM us_military_personnel WHERE year IN (2018, 2019, 2020);"
    },
    {
        "instruction": "입력 텍스트: 테이블 prison에서 가장 어린 수감자의 이름과 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE prison (id INT, name TEXT, security_level TEXT, age INT); INSERT INTO prison (id, name, security_level, age) VALUES (1, 'John Doe', 'low_security', 25); INSERT INTO prison (id, name, security_level, age) VALUES (2, 'Jane Smith', 'medium_security', 35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, age FROM prison ORDER BY age LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 일본과 한국의 호텔 평균 별점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotel_ratings (country VARCHAR(50), stars FLOAT); INSERT INTO hotel_ratings (country, stars) VALUES ('Japan', 4.2), ('South Korea', 4.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(stars) FROM hotel_ratings WHERE country IN ('Japan', 'South Korea');"
    },
    {
        "instruction": "입력 텍스트: 각 언어별로 주간 기준으로 게시된 기사의 총 단어 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Articles (id INT, language TEXT, publish_date DATE, word_count INT); INSERT INTO Articles (id, language, publish_date, word_count) VALUES (1, 'Language 1', '2023-01-01', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT language, DATE_TRUNC('week', publish_date) as week, SUM(word_count) as total_word_count FROM Articles GROUP BY language, week ORDER BY week;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 독감 백신을 맞은 환자들의 평균 연령이 카운티별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE vaccinations (patient_id INT, county VARCHAR(20), vaccine VARCHAR(20)); INSERT INTO vaccinations (patient_id, county, vaccine) VALUES (1, 'Los Angeles', 'Flu'), (2, 'San Francisco', 'Flu'), (3, 'San Diego', 'Flu'); CREATE TABLE patients (patient_id INT, age INT); INSERT INTO patients (patient_id, age) VALUES (1, 45), (2, 30), (3, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.county, AVG(p.age) as avg_age FROM vaccinations v INNER JOIN patients p ON v.patient_id = p.patient_id WHERE vaccine = 'Flu' AND county = 'California' GROUP BY v.county;"
    },
    {
        "instruction": "입력 텍스트: 2021 제네바 모터쇼에서 가장 마력이 높은 차량은 무엇이었나요?\n\nDDL statements:\nCREATE TABLE geneva_motor_show (year INT, make VARCHAR(50), model VARCHAR(50), horsepower INT); INSERT INTO geneva_motor_show (year, make, model, horsepower) VALUES (2021, 'Koenigsegg', 'Jesko', 1600), (2021, 'Bugatti', 'Chiron Super Sport', 1578), (2021, 'Rimac', 'Nevera', 1914), (2021, 'Pagani', 'Huayra BC', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT make, model, MAX(horsepower) FROM geneva_motor_show WHERE year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 관광 분야에서 경제 다양화를 위한 이니셔티브의 수와 그 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE economic_diversification (id INT, initiative_name TEXT, budget INT, category TEXT, start_year INT); INSERT INTO economic_diversification (id, initiative_name, budget, category, start_year) VALUES (1, 'Cultural Festival', 30000, 'Tourism', 2019), (2, 'Eco-Lodge Development', 50000, 'Tourism', 2020), (3, 'Agri-Tourism Program', 40000, 'Tourism', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, start_year, COUNT(*), SUM(budget) FROM economic_diversification WHERE start_year >= 2019 GROUP BY category, start_year;"
    },
    {
        "instruction": "입력 텍스트: 안전 등급이 4.5 이상인 전기 자동차 모델은 무엇인가요?\n\nDDL statements:\nCREATE TABLE VehicleModels (Model VARCHAR(255), Manufacturer VARCHAR(255), SafetyRating FLOAT); INSERT INTO VehicleModels (Model, Manufacturer, SafetyRating) VALUES ('Model S', 'Tesla', 5.1), ('Model 3', 'Tesla', 4.9), ('Prius', 'Toyota', 4.6), ('Civic', 'Honda', 4.4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Model FROM VehicleModels WHERE SafetyRating > 4.5;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 스포츠별 웰빙 프로그램에 참여한 운동선수는 몇 명이며, 어떤 스포츠가 가장 많은 참가자를 보유하고 있나요?\n\nDDL statements:\nCREATE TABLE wellbeing_programs (athlete_id INT, sport VARCHAR(50), program_date DATE); INSERT INTO wellbeing_programs (athlete_id, sport, program_date) VALUES (1, 'Soccer', '2022-01-01'), (2, 'Basketball', '2022-01-02'), (3, 'Football', '2022-01-03'), (4, 'Soccer', '2022-01-04'), (5, 'Baseball', '2022-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sport, COUNT(DISTINCT athlete_id) AS participants FROM wellbeing_programs WHERE program_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY sport ORDER BY participants DESC;"
    },
    {
        "instruction": "입력 텍스트: 여성이 이끄는 우주 임무의 총 수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE space_missions (id INT, name VARCHAR(255), leader VARCHAR(255), year INT); INSERT INTO space_missions (id, name, leader, year) VALUES (1, 'Mars Rover', 'Dr. Jessica Watkins', 2022); INSERT INTO space_missions (id, name, leader, year) VALUES (2, 'ISS Expedition', 'Anousheh Ansari', 2023);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM space_missions WHERE leader IN (SELECT name FROM astronauts WHERE gender = 'Female');"
    },
    {
        "instruction": "입력 텍스트: 보스턴에서 화재 발생 시 평균 대응 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE boston_emergency_response (id INT, incident_type TEXT, response_time INT); INSERT INTO boston_emergency_response (id, incident_type, response_time) VALUES  (1, 'Fire', 120), (2, 'Medical', 150), (3, 'Police', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) FROM boston_emergency_response WHERE incident_type = 'Fire';"
    },
    {
        "instruction": "입력 텍스트: 재활용 재료로 만들어진 제품의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE products(product_id INT, is_recycled BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) as percentage FROM products WHERE is_recycled = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티에 있는 접근성 기능을 구현하지 않은 공동 소유 부동산의 공동 소유자를 나열하세요.\n\nDDL statements:\nCREATE TABLE CoOwners (CoOwnerID int, PropertyID int, City varchar(20)); CREATE TABLE Properties (PropertyID int, Accessibility varchar(5)); INSERT INTO CoOwners (CoOwnerID, PropertyID, City) VALUES (1, 1, 'New York City'); INSERT INTO Properties (PropertyID, Accessibility) VALUES (1, 'No'); INSERT INTO CoOwners (CoOwnerID, PropertyID, City) VALUES (2, 2, 'New York City'); INSERT INTO Properties (PropertyID, Accessibility) VALUES (2, 'Yes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CoOwners.CoOwnerID, Properties.City FROM CoOwners INNER JOIN Properties ON CoOwners.PropertyID = Properties.PropertyID WHERE Properties.City = 'New York City' AND Properties.Accessibility = 'No';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 순환 경제 모델을 가진 브랜드가 창출한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE BrandRevenue (brand VARCHAR(255), revenue DECIMAL(10,2), year INT, circular_model BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM BrandRevenue WHERE circular_model = TRUE AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: auto_show' 테이블에서 가장 높은 안전 등급을 가진 자율 주행 차량은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, RANK() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank = 1;"
    },
    {
        "instruction": "입력 텍스트: Westwood'에 위치한 식당들의 평균 식품 안전 점검 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(255), Region varchar(255)); CREATE TABLE Inspections (InspectionID int, RestaurantID int, InspectionScore int, InspectionDate date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(I.InspectionScore) as AvgInspectionScore FROM Restaurants R INNER JOIN Inspections I ON R.RestaurantID = I.RestaurantID WHERE R.Region = 'Westwood';"
    },
    {
        "instruction": "입력 텍스트: 미국의 각 주에는 몇 개의 병원이 있나요?\n\nDDL statements:\nCREATE TABLE Hospitals (HospitalID INT, HospitalName VARCHAR(255), State VARCHAR(255)); INSERT INTO Hospitals (HospitalID, HospitalName, State) VALUES (1, 'Alaska General Hospital', 'Alaska'), (2, 'Bama Healthcare', 'Alabama'), (3, 'California Care', 'California'), (4, 'Delaware Hospital', 'Delaware'), (5, 'Florida Medical Center', 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, COUNT(*) FROM Hospitals GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: Americas' 지역의 교육 프로그램에 참여하고 있는 모든 동물의 이름과 서식지는 무엇인가요?\n\nDDL statements:\nCREATE TABLE AnimalEducation (id INT, animal_id INT, program_id INT); INSERT INTO AnimalEducation (id, animal_id, program_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, h.name FROM Animals a INNER JOIN AnimalEducation ae ON a.id = ae.animal_id INNER JOIN EducationPrograms e ON ae.program_id = e.id INNER JOIN Coordinators c ON e.coordinator_id = c.id INNER JOIN Habitat h ON a.habitat_id = h.id WHERE c.region = 'Americas';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 시작된 방위 프로젝트와 관련된 위험 수준을 나열하세요(해당하는 경우).\n\nDDL statements:\nCREATE TABLE DefenseProjects (id INT, project_name VARCHAR(50), start_date DATE, risk_level INT); INSERT INTO DefenseProjects (id, project_name, start_date, risk_level) VALUES (1, 'Project G', '2019-01-01', 3), (2, 'Project H', '2018-06-15', 5), (3, 'Project I', '2019-12-31', NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, risk_level FROM DefenseProjects WHERE start_date >= '2019-01-01' AND start_date <= '2019-12-31' AND risk_level IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 국가별 섬유류 폐기물 총 발생량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE textile_waste (country VARCHAR(50), year INT, amount INT); INSERT INTO textile_waste (country, year, amount) VALUES ('Bangladesh', 2021, 50000), ('Vietnam', 2021, 40000), ('India', 2021, 30000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(amount) as total_textile_waste FROM textile_waste WHERE year = 2021 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2020년 1월에 군사 장비 유지 보수 요청이 몇 건이었나요?\n\nDDL statements:\nCREATE TABLE maintenance_requests (request_id INT, date DATE, type VARCHAR(255)); INSERT INTO maintenance_requests (request_id, date, type) VALUES (1, '2020-01-01', 'equipment'); INSERT INTO maintenance_requests (request_id, date, type) VALUES (2, '2020-01-15', 'facility');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM maintenance_requests WHERE date BETWEEN '2020-01-01' AND '2020-01-31' AND type = 'equipment';"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 원자재를 공급하지 않은 모든 공급업체와 그들의 연락처 정보를 나열하세요.\n\nDDL statements:\nCREATE TABLE Suppliers (supplier_id INT, supplier_name VARCHAR(20), contact_name VARCHAR(20), contact_phone VARCHAR(15), last_supply DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Suppliers.* FROM Suppliers LEFT JOIN (SELECT supplier_id FROM Raw_Materials WHERE supply_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY supplier_id) AS RM ON Suppliers.supplier_id = RM.supplier_id WHERE RM.supplier_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 지역별 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(100), Region varchar(50), Country varchar(50), DonationDate date, AmountDonated decimal(10,2)); INSERT INTO Donors (DonorID, DonorName, Region, Country, DonationDate, AmountDonated) VALUES (1, 'John Doe', 'North America', 'USA', '2022-01-01', 500.00), (2, 'Jane Smith', 'North America', 'Canada', '2021-01-01', 300.00), (3, 'Ali Khan', 'Asia', 'Pakistan', '2022-03-01', 250.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, SUM(AmountDonated) as TotalDonated FROM Donors GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 발사된 모든 위성의 이름을 표시합니다.\n\nDDL statements:\nCREATE TABLE satellites (id INT, name TEXT, country TEXT, launch_date DATE); INSERT INTO satellites (id, name, country, launch_date) VALUES (1, 'Sentinel-1A', 'France', '2012-04-03'); INSERT INTO satellites (id, name, country, launch_date) VALUES (2, 'Sentinel-1B', 'France', '2014-04-22'); INSERT INTO satellites (id, name, country, launch_date) VALUES (3, 'USA-202', 'USA', '2011-03-24'); INSERT INTO satellites (id, name, country, launch_date) VALUES (4, 'INSAT-3A', 'India', '2003-04-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM satellites WHERE launch_date < '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 1월'에 가상 투어에 참여한 고유 사용자 수를 계산하세요?\n\nDDL statements:\nCREATE TABLE user_activity (user_id INT, activity_date DATE); INSERT INTO user_activity (user_id, activity_date) VALUES (1, '2023-01-01'), (2, '2023-01-05'), (3, '2023-01-07'), (4, '2023-01-10'), (5, '2023-01-12');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT user_id) FROM user_activity WHERE EXTRACT(MONTH FROM activity_date) = 1;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에서 VR을 사용하는 플레이어들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(20)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'France'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 30, 'Female', 'France'); CREATE TABLE VRUsers (PlayerID INT, VRDevice VARCHAR(20)); INSERT INTO VRUsers (PlayerID, VRDevice) VALUES (1, 'Oculus');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Players JOIN VRUsers ON Players.PlayerID = VRUsers.PlayerID WHERE Country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 북미 보호 프로그램에서 동물들의 총 개체 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE conservation_programs (id INT, program_name VARCHAR(255), location VARCHAR(255)); CREATE TABLE animal_populations (id INT, program_id INT, animal_type VARCHAR(255), population INT); INSERT INTO conservation_programs (id, program_name, location) VALUES (1, 'Yellowstone National Park', 'USA'), (2, 'Banff National Park', 'Canada'), (3, 'Everglades National Park', 'USA'); INSERT INTO animal_populations (id, program_id, animal_type, population) VALUES (1, 1, 'Bison', 5000), (2, 1, 'Elk', 7000), (3, 2, 'Moose', 3000), (4, 3, 'Alligator', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(animal_populations.population) FROM conservation_programs INNER JOIN animal_populations ON conservation_programs.id = animal_populations.program_id WHERE conservation_programs.location = 'USA' OR conservation_programs.location = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 온대 우림에서 지름이 50cm를 초과하는 나무 종은 몇 종류인가요?\n\nDDL statements:\nCREATE TABLE biomes (biome_id INT PRIMARY KEY, name VARCHAR(50), area_km2 FLOAT); INSERT INTO biomes (biome_id, name, area_km2) VALUES (1, 'Tropical Rainforest', 15000000.0), (2, 'Temperate Rainforest', 250000.0), (3, 'Boreal Forest', 12000000.0); CREATE TABLE trees (tree_id INT PRIMARY KEY, species VARCHAR(50), biome_id INT, dbh FLOAT, FOREIGN KEY (biome_id) REFERENCES biomes(biome_id)); INSERT INTO trees (tree_id, species, biome_id, dbh) VALUES (1, 'Douglas Fir', 2, 60.0), (2, 'Western Hemlock', 2, 45.0), (3, 'Red Alder', 2, 30.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT species) FROM trees JOIN biomes ON trees.biome_id = biomes.biome_id WHERE trees.dbh > 50.0 AND biomes.name = 'Temperate Rainforest';"
    },
    {
        "instruction": "입력 텍스트: 공정 노동 관행에 동의한 브랜드들이 미국에서 조달한 면화의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE cotton_source (brand VARCHAR(255), country VARCHAR(255), quantity INT); INSERT INTO cotton_source (brand, country, quantity) VALUES ('BrandA', 'USA', 1500), ('BrandB', 'USA', 2000), ('BrandC', 'China', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM cotton_source WHERE country = 'USA' AND brand IN (SELECT brand FROM fair_labor WHERE commitment = 'yes');"
    },
    {
        "instruction": "입력 텍스트: 이탈리아에 기반을 둔 스튜디오에서 가장 높은 평점을 받은 상위 3개 영화의 제목과 장르를 평점이 높은 순으로 찾아주세요.\n\nDDL statements:\nCREATE TABLE movies (title VARCHAR(255), genre VARCHAR(255), studio VARCHAR(255), rating FLOAT); INSERT INTO movies (title, genre, studio, rating) VALUES ('Movie19', 'Action', 'Italy Studio1', 8.5), ('Movie20', 'Drama', 'Italy Studio2', 9.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title, genre FROM (SELECT title, genre, studio, rating, ROW_NUMBER() OVER (PARTITION BY studio ORDER BY rating DESC) as rank FROM movies WHERE studio LIKE '%Italy%') subquery WHERE rank <= 3 ORDER BY rating DESC;"
    },
    {
        "instruction": "입력 텍스트: 인구 성장률이 가장 높은 상위 3개의 해양 생물 종을 나열하세요.\n\nDDL statements:\nCREATE TABLE marine_species (id INT, name VARCHAR(255), population_size INT, growth_rate DECIMAL(4,2)); INSERT INTO marine_species (id, name, population_size, growth_rate) VALUES (1, 'Clownfish', 10000, 0.05), (2, 'Sea Turtle', 5000, 0.10), (3, 'Dolphin', 20000, 0.02);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, growth_rate FROM (SELECT name, growth_rate, ROW_NUMBER() OVER (ORDER BY growth_rate DESC) rn FROM marine_species) t WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2016년 이후 중국에 설치된 풍력 터빈의 최소 에너지 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wind_turbines (id INT, installation_year INT, energy_production FLOAT, country VARCHAR(50)); INSERT INTO wind_turbines (id, installation_year, energy_production, country) VALUES (1, 2005, 2.8, 'China'), (2, 2008, 3.5, 'India'), (3, 2012, 4.2, 'Germany'), (4, 2015, 4.5, 'China'), (5, 2016, 4.7, 'China'), (6, 2017, 5.0, 'China');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(energy_production) FROM wind_turbines WHERE installation_year > 2016 AND country = 'China';"
    },
    {
        "instruction": "입력 텍스트: \"Legislation\" 테이블에 ID가 4이고, 설명이 \"기후 변화 법안\", 상태가 \"초안\"인 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE Legislation (ID INT, Description TEXT, Status VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Legislation (ID, Description, Status) VALUES (4, 'Climate Change Act', 'Draft');"
    },
    {
        "instruction": "입력 텍스트: 40세 이상 기부자들의 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, DonationAmount DECIMAL(10,2), Age INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(DonationAmount) FROM Donors WHERE Age >= 40;"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 미국에서 유기농 치킨 제품의 리콜은 몇 번 있었나요?\n\nDDL statements:\nCREATE TABLE recalls(id INT, product VARCHAR(30), reason VARCHAR(30), state VARCHAR(20), date DATE); INSERT INTO recalls(id, product, reason, state, date) VALUES (1, 'Organic Chicken Breast', 'contamination', 'California', '2021-01-01'); INSERT INTO recalls(id, product, reason, state, date) VALUES (2, 'Organic Chicken Wings', 'mislabeling', 'Texas', '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM recalls WHERE product LIKE 'Organic Chicken%' AND date BETWEEN '2020-01-01' AND '2022-12-31';"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 사이버 보안 작전에 참여하는 군인의 총 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE MilitaryCyberOps (Id INT, Region VARCHAR(50), Personnel INT, Year INT); INSERT INTO MilitaryCyberOps (Id, Region, Personnel, Year) VALUES (1, 'Asia', 200, 2021); INSERT INTO MilitaryCyberOps (Id, Region, Personnel, Year) VALUES (2, 'Europe', 300, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Personnel) FROM MilitaryCyberOps WHERE Region = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: resource_extraction' 테이블에서 '금'과 '은' 자원에 대해 추출된 총 자원량과 각각의 추출 날짜를 표시하세요.\n\nDDL statements:\nCREATE TABLE resource_extraction (resource_type VARCHAR(50), extraction_date DATE, quantity INT); INSERT INTO resource_extraction (resource_type, extraction_date, quantity) VALUES ('gold', '2022-01-01', 100), ('silver', '2022-01-05', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT resource_type, SUM(quantity) as total_quantity, extraction_date FROM resource_extraction WHERE resource_type IN ('gold', 'silver') GROUP BY resource_type, extraction_date;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시에 있는 50층 이상의 모든 건물의 이름, 높이, 층수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Buildings (id INT, name VARCHAR(100), height FLOAT, num_stories INT, city VARCHAR(50)); INSERT INTO Buildings (id, name, height, num_stories, city) VALUES (1, 'Empire State Building', 381, 102, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, height, num_stories FROM Buildings WHERE city = 'New York' AND num_stories > 50;"
    },
    {
        "instruction": "입력 텍스트: \"재생 에너지\" 분야에서 직원 수가 50명을 초과하는 공장의 수를 계산합니다.\n\nDDL statements:\nCREATE TABLE factories (id INT, sector TEXT, employee_count INT); INSERT INTO factories (id, sector, employee_count) VALUES (1, 'renewable energy', 60), (2, 'renewable energy', 40), (3, 'oil', 70), (4, 'coal', 80), (5, 'renewable energy', 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM factories WHERE sector = 'renewable energy' HAVING employee_count > 50;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 티켓 판매량이 50000장을 초과하는 스포츠 이벤트는 몇 개가 열렸습니까?\n\nDDL statements:\nCREATE TABLE sports_events (event_id INT, year INT, tickets_sold INT); INSERT INTO sports_events (event_id, year, tickets_sold) VALUES (1, 2017, 60000), (2, 2018, 80000), (3, 2017, 55000), (4, 2019, 52000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sports_events WHERE year = 2019 AND tickets_sold > 50000;"
    },
    {
        "instruction": "입력 텍스트: 여성 창업자가 있는 회사들의 총 펀딩 금액을 보여주세요.\n\nDDL statements:\nCREATE TABLE companies (company_id INT, company_name VARCHAR(255), founding_year INT, founder_gender VARCHAR(10));CREATE TABLE funding_rounds (funding_round_id INT, company_id INT, funding_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fr.funding_amount) FROM companies c INNER JOIN funding_rounds fr ON c.company_id = fr.company_id WHERE c.founder_gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 영국과 프랑스에서 운영되는 차량 안전 검사 기관은 어디인가요?\n\nDDL statements:\nCREATE TABLE SafetyOrgs (name VARCHAR(20), country VARCHAR(10)); INSERT INTO SafetyOrgs (name, country) VALUES ('Euro NCAP', 'UK'); INSERT INTO SafetyOrgs (name, country) VALUES ('ADAC', 'Germany'); INSERT INTO SafetyOrgs (name, country) VALUES ('UTAC', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM SafetyOrgs WHERE country IN ('UK', 'France');"
    },
    {
        "instruction": "입력 텍스트: 2018년에 케냐에서 수행된 모든 인도주의 지원 임무를 삭제하세요.\n\nDDL statements:\nCREATE TABLE humanitarian_assistance (mission_id INT, country_id INT, year INT, FOREIGN KEY (country_id) REFERENCES country(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM humanitarian_assistance WHERE country_id = (SELECT id FROM country WHERE name = 'Kenya') AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 휠체어 접근 가능한 부동산 중에서 매물 가격이 $800,000 이상인 것의 개수를 세어주세요.\n\nDDL statements:\nCREATE TABLE properties (id INT, city VARCHAR(20), listing_price INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, listing_price, wheelchair_accessible) VALUES (1, 'New York', 900000, true); INSERT INTO properties (id, city, listing_price, wheelchair_accessible) VALUES (2, 'New York', 700000, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM properties WHERE city = 'New York' AND listing_price > 800000 AND wheelchair_accessible = true;"
    },
    {
        "instruction": "입력 텍스트: 편의점에서 구할 수 있는 글루텐 프리 식사의 최소 제공 크기는 얼마인가요?\n\nDDL statements:\nCREATE TABLE MealTypes (meal_id INT, meal_name VARCHAR(255), meal_type VARCHAR(255), serving_size INT, store_type VARCHAR(255)); INSERT INTO MealTypes (meal_id, meal_name, meal_type, serving_size, store_type) VALUES (1, 'Chicken Salad', 'Gluten-free', 250, 'Convenience Store'), (2, 'Beef Stew', 'Vegetarian', 300, 'Convenience Store'), (3, 'Pork Chops', 'Standard', 400, 'Convenience Store');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(serving_size) FROM MealTypes WHERE meal_type = 'Gluten-free' AND store_type = 'Convenience Store';"
    },
    {
        "instruction": "입력 텍스트: 구조 공학' 부서에서 사용된 지속 가능한 관행 중 10,000달러 이상 드는 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SustainablePractices (PracticeID INT, PracticeName VARCHAR(50), Description VARCHAR(255), Department VARCHAR(50), Cost DECIMAL(10,2)); INSERT INTO SustainablePractices (PracticeID, PracticeName, Description, Department, Cost) VALUES (5, 'Green Roof', 'Installing a green roof to reduce energy consumption and improve air quality.', 'Structural Engineering', 12000.00), (6, 'Rainwater Harvesting', 'Collecting and storing rainwater for irrigation and non-potable uses.', 'Structural Engineering', 8000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SustainablePractices.PracticeName FROM SustainablePractices WHERE SustainablePractices.Department = 'Structural Engineering' AND SustainablePractices.Cost > 10000.00;"
    },
    {
        "instruction": "입력 텍스트: \"PolicyImpact\" 테이블에 새로운 정책 영향 기록을 추가합니다.\n\nDDL statements:\nCREATE TABLE PolicyImpact (ID INT, Policy TEXT, Impact TEXT, StartDate DATE, EndDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO PolicyImpact (ID, Policy, Impact, StartDate, EndDate) VALUES (3001, 'Body Cameras for Police Officers', 'Reduction in use-of-force incidents by 25%', '2021-01-01', '2022-12-31');"
    },
    {
        "instruction": "입력 텍스트: 2021년 2월 평일에 '레드 라인'에서 수집된 평균 요금은 얼마였습니까?\n\nDDL statements:\nCREATE SCHEMA trans schemas.trans; CREATE TABLE red_line (route_id INT, fare FLOAT, date DATE); INSERT INTO red_line (route_id, fare, date) VALUES (102, 3.00, '2021-02-01'), (102, 3.00, '2021-02-02'), (102, 3.00, '2021-02-03'), (102, 3.00, '2021-02-04'), (102, 3.00, '2021-02-05'), (102, 3.00, '2021-02-06'), (102, 3.00, '2021-02-07');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fare) FROM red_line WHERE route_id = 102 AND EXTRACT(DAY FROM date) BETWEEN 2 AND 6 AND EXTRACT(MONTH FROM date) = 2;"
    },
    {
        "instruction": "입력 텍스트: 2000년부터 2010년 사이에 개봉한 액션 및 드라마 영화의 평균 제작 예산을 구하세요.\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(100), genre VARCHAR(50), release_year INT, production_budget INT); INSERT INTO movies (id, title, genre, release_year, production_budget) VALUES (1, 'MovieA', 'Action', 2005, 15000000); INSERT INTO movies (id, title, genre, release_year, production_budget) VALUES (2, 'MovieB', 'Action', 2002, 20000000); INSERT INTO movies (id, title, genre, release_year, production_budget) VALUES (3, 'MovieC', 'Drama', 2008, 12000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_budget) FROM movies WHERE genre IN ('Action', 'Drama') AND release_year BETWEEN 2000 AND 2010;"
    },
    {
        "instruction": "입력 텍스트: 동부 지역의 탱크 중 최대 생산 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Production (tank VARCHAR(20), capacity INT, location VARCHAR(20)); INSERT INTO Production (tank, capacity, location) VALUES ('Tank3', 100000, 'Eastern'), ('Tank4', 150000, 'Western');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(capacity) FROM Production WHERE location = 'Eastern';"
    },
    {
        "instruction": "입력 텍스트: 생산량이 없는 것을 포함하여 모든 필드와 해당하는 생산 비율을 나열하세요.\n\nDDL statements:\nCREATE TABLE fields_production (field_id INT, production_rate FLOAT); INSERT INTO fields_production (field_id, production_rate) VALUES (1, 1000.0), (2, 2000.0), (3, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.field_id, f.field_name, fp.production_rate FROM fields f LEFT JOIN fields_production fp ON f.field_id = fp.field_id;"
    },
    {
        "instruction": "입력 텍스트: Gourmet Greens' 레스토랑에서 특정 날짜에 오후 5시 이전에 소진된(재고가 0인) 메뉴 항목을 확인하세요.\n\nDDL statements:\nCREATE TABLE menu_items (id INT, restaurant_id INT, name VARCHAR(50), available INT, available_time TIME); INSERT INTO menu_items (id, restaurant_id, name, available, available_time) VALUES (1, 3, 'Kale Salad', 10, '12:00:00'), (2, 3, 'Beet Burger', 15, '12:00:00'), (3, 3, 'Carrot Fries', 20, '12:00:00'), (4, 3, 'Quinoa Bowl', 30, '12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM menu_items WHERE restaurant_id = 3 AND available_time < '17:00:00' GROUP BY name HAVING SUM(available) = 0;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 호주에서 생산된 희토류 원소는 무엇인가요?\n\nDDL statements:\nCREATE TABLE production (country VARCHAR(255), REE VARCHAR(255), amount INT, year INT); INSERT INTO production (country, REE, amount, year) VALUES ('Australia', 'Neodymium', 100, 2020); INSERT INTO production (country, REE, amount, year) VALUES ('Australia', 'Praseodymium', 150, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT REE FROM production WHERE country = 'Australia' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 건강 근로자를 위한 문화 역량 훈련 기록을 보여주세요.\n\nDDL statements:\nCREATE TABLE CulturalCompetencyTraining (TrainingID INT PRIMARY KEY, MHW_ID INT, TrainingName TEXT, TrainingDate DATE); INSERT INTO CulturalCompetencyTraining (TrainingID, MHW_ID, TrainingName, TrainingDate) VALUES (1, 123, 'Cultural Competency 101', '2021-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CulturalCompetencyTraining.TrainingID, CulturalCompetencyTraining.MHW_ID, CulturalCompetencyTraining.TrainingName, CulturalCompetencyTraining.TrainingDate, CommunityHealthWorker.Name FROM CulturalCompetencyTraining INNER JOIN CommunityHealthWorker ON CulturalCompetencyTraining.MHW_ID = CommunityHealthWorker.WorkerID;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 회사들에게 수여된 방위 계약의 비율을 계산하세요.\n\nDDL statements:\nCREATE TABLE contract_states (company_name TEXT, contract_id INT, state TEXT); INSERT INTO contract_states (company_name, contract_id, state) VALUES ('Lockheed Martin', 1, 'California'), ('Boeing', 2, 'Washington'), ('Raytheon', 3, 'Massachusetts'), ('Northrop Grumman', 4, 'California'), ('General Dynamics', 5, 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, (COUNT(*)::FLOAT / (SELECT COUNT(*) FROM contract_states)) * 100 AS percentage FROM contract_states GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 런던에서 전기 차량의 평균 속도를 찾으세요?\n\nDDL statements:\nCREATE TABLE vehicle_speed (id INT, type VARCHAR(20), city VARCHAR(20), speed INT); INSERT INTO vehicle_speed (id, type, city, speed) VALUES (1, 'electric', 'New York', 50), (2, 'electric', 'London', 60), (3, 'gasoline', 'New York', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(speed) FROM vehicle_speed WHERE type = 'electric' AND city IN ('New York', 'London');"
    },
    {
        "instruction": "입력 텍스트: 가장 많은 작품을 가진 상위 10명의 예술가는 누구인가요?\n\nDDL statements:\nCREATE TABLE Artists (id INT, name TEXT); CREATE TABLE Artworks (id INT, artist_id INT, name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, COUNT(*) as artworks_count FROM Artists a JOIN Artworks aw ON a.id = aw.artist_id GROUP BY a.name ORDER BY artworks_count DESC LIMIT 10;"
    },
    {
        "instruction": "입력 텍스트: 텍사스와 오클라호마에 있는 산업 고객의 총 물 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE industrial_customers (customer_id INT, location VARCHAR(255), water_consumption FLOAT); INSERT INTO industrial_customers (customer_id, location, water_consumption) VALUES (1, 'Dallas', 2000), (2, 'Houston', 2500), (3, 'Tulsa', 1800), (4, 'Oklahoma_City', 2200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(water_consumption) FROM industrial_customers WHERE location IN ('Texas', 'Oklahoma');"
    },
    {
        "instruction": "입력 텍스트: 이동 편의를 위한 프로그램과 그 예산을 나열하세요.\n\nDDL statements:\nCREATE TABLE Programs (Program VARCHAR(20), Budget INT, Type VARCHAR(20)); INSERT INTO Programs (Program, Budget, Type) VALUES ('Wheelchair Ramp', 30000, 'Mobility'); INSERT INTO Programs (Program, Budget, Type) VALUES ('Prosthetic Services', 40000, 'Mobility');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Program, Budget FROM Programs WHERE Type = 'Mobility';"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다 양국의 우주비행사가 참여한 우주 임무 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE SpaceMissions (mission_name VARCHAR(30), astronaut_nationality VARCHAR(20)); INSERT INTO SpaceMissions (mission_name, astronaut_nationality) VALUES ('Mission1', 'US'); INSERT INTO SpaceMissions (mission_name, astronaut_nationality) VALUES ('Mission1', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name FROM SpaceMissions WHERE astronaut_nationality IN ('US', 'Canada') GROUP BY mission_name HAVING COUNT(DISTINCT astronaut_nationality) = 2;"
    },
    {
        "instruction": "입력 텍스트: 세계의 모든 해양보호구역의 평균 수심은 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name VARCHAR(255), location VARCHAR(255), avg_depth FLOAT); INSERT INTO marine_protected_areas (name, location, avg_depth) VALUES ('MPA 1', 'Pacific Ocean', 123.4), ('MPA 2', 'Atlantic Ocean', 567.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(avg_depth) FROM marine_protected_areas;"
    },
    {
        "instruction": "입력 텍스트: 남부 지역에서 석유와 가스 유형별로 총 생산량을 계산하세요.\n\nDDL statements:\nCREATE TABLE production (well_id INT, type VARCHAR(10), region VARCHAR(50), quantity INT); INSERT INTO production (well_id, type, region, quantity) VALUES (1, 'Oil', 'Northern', 1000), (2, 'Gas', 'Southern', 2000), (3, 'Oil', 'Southern', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, SUM(quantity) as total_production FROM production WHERE region = 'Southern' GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 중국과 일본에 있는 전기차는 총 몇 대인가요?\n\nDDL statements:\nCREATE TABLE electric_vehicles (country VARCHAR(50), num_vehicles INT); INSERT INTO electric_vehicles (country, num_vehicles) VALUES ('China', 1140000), ('Japan', 850000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_vehicles) FROM electric_vehicles WHERE country IN ('China', 'Japan');"
    },
    {
        "instruction": "입력 텍스트: 미국 각 주에서 2015년 이전에 건설된 녹색 건물의 최대 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE green_buildings_us (id INT, state VARCHAR(20), construction_year INT, type VARCHAR(20)); INSERT INTO green_buildings_us (id, state, construction_year, type) VALUES (1, 'California', 2014, 'residential'), (2, 'California', 2012, 'commercial'), (3, 'Oregon', 2016, 'residential'), (4, 'Washington', 2013, 'residential');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MAX(cnt) FROM (SELECT state, COUNT(*) AS cnt FROM green_buildings_us WHERE construction_year < 2015 GROUP BY state) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: City G'에서 2018년 이후에 시행된 모든 스마트 시티 계획을 나열하세요.\n\nDDL statements:\nCREATE TABLE SmartCities (CityID INT, CityName VARCHAR(255), InitiativeName VARCHAR(255), StartDate DATE); INSERT INTO SmartCities (CityID, CityName, InitiativeName, StartDate) VALUES (1, 'City G', 'Smart Transportation', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CityName, InitiativeName, StartDate FROM SmartCities WHERE CityName = 'City G' AND StartDate > '2018-12-31';"
    },
    {
        "instruction": "입력 텍스트: 인도' 요리 카테고리의 요리들 중 최대 및 최소 조리 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Dishes (id INT, cuisine VARCHAR(255), cooking_time INT); INSERT INTO Dishes (id, cuisine, cooking_time) VALUES (1, 'Indian', 45), (2, 'Indian', 30), (3, 'Indian', 60), (4, 'Mexican', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, MIN(cooking_time) as min_cooking_time, MAX(cooking_time) as max_cooking_time FROM Dishes WHERE cuisine = 'Indian' GROUP BY cuisine;"
    },
    {
        "instruction": "입력 텍스트: african_region_table'의 모든 평화유지 작전에 대한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE african_region_table (id INT, operation_name VARCHAR(100), country VARCHAR(50), budget INT); INSERT INTO african_region_table (id, operation_name, country, budget) VALUES (1, 'Operation Artemis', 'France', 12500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM african_region_table;"
    },
    {
        "instruction": "입력 텍스트: 파리'의 새로운 대중교통 시간표를 추가하세요\n\nDDL statements:\nCREATE TABLE if not exists new_schedules (schedule_id serial, city varchar(20), departure_time time); INSERT INTO new_schedules (city, departure_time) VALUES ('paris', '07:05:00'), ('paris', '07:20:00'), ('paris', '07:35:00'), ('paris', '07:50:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO schedules (city, departure_time) SELECT * FROM new_schedules WHERE city = 'paris';"
    },
    {
        "instruction": "입력 텍스트: co_ownership' 테이블에서 공동 소유자 수별로 그룹화된 공동 소유 부동산의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE co_ownership (co_id INT, property_id INT, num_owners INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT num_owners, COUNT(*) as num_properties FROM co_ownership GROUP BY num_owners;"
    },
    {
        "instruction": "입력 텍스트: 우주 분야에서 각 국가별로 발사된 위성은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, country VARCHAR(255), launch_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS launched_satellites FROM satellites GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: quick_service' 스키마의 비건 메뉴 아이템에 대한 총 수익을 찾으세요.\n\nDDL statements:\nCREATE TABLE quick_service.menu_items (menu_item_id INT, category TEXT, price DECIMAL); INSERT INTO quick_service.menu_items (menu_item_id, category, price) VALUES (1, 'Vegan Burger', 7.50), (2, 'Fruit Bowl', 4.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) FROM quick_service.menu_items WHERE category = 'Vegan Burger' OR category = 'Fruit Bowl';"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 50달러 이상 기부하지 않은 모든 기부자의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, donation_date DATE, amount_donated DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM donors WHERE id NOT IN (SELECT id FROM donors WHERE amount_donated > 50 AND donation_date > DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH));"
    },
    {
        "instruction": "입력 텍스트: \"cybersecurity_incidents\" 테이블에서 특정 사이버 보안 사건의 설명을 업데이트합니다\n\nDDL statements:\nCREATE TABLE cybersecurity_incidents (id INT, year INT, type VARCHAR(255), country VARCHAR(255), description TEXT); INSERT INTO cybersecurity_incidents (id, year, type, country, description) VALUES (1, 2018, 'Data Breach', 'US', 'Unauthorized access to sensitive personal information');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE cybersecurity_incidents SET description = 'Unauthorized access to highly sensitive personal information' WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: 2022년 다양한 지역에서의 호텔업계 AI 도입률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE ai_adoption (region VARCHAR(20), adoption_percentage DECIMAL(5,2), adoption_date DATE); INSERT INTO ai_adoption (region, adoption_percentage, adoption_date) VALUES ('North America', 45, '2022-01-01'), ('Europe', 40, '2022-01-01'), ('Asia', 50, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, adoption_percentage FROM ai_adoption WHERE adoption_date = '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티의 주거 부문에서 발생하는 총 폐기물 양은 얼마입니까?\n\nDDL statements:\nCREATE TABLE waste_generation_city_v2 (sector VARCHAR(20), city VARCHAR(20), waste_quantity INT); INSERT INTO waste_generation_city_v2 (sector, city, waste_quantity) VALUES ('residential', 'New York City', 2500), ('commercial', 'New York City', 3000), ('residential', 'Los Angeles', 2200), ('commercial', 'Los Angeles', 2700), ('residential', 'Miami', 1500), ('commercial', 'Miami', 1900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT waste_quantity FROM waste_generation_city_v2 WHERE sector = 'residential' AND city = 'New York City';"
    },
    {
        "instruction": "입력 텍스트: labor_statistics 테이블의 레코드를 업데이트하여 job_category가 'Electricity'인 경우 hourly_wage를 hourly_wage * 1.05로 설정하세요.\n\nDDL statements:\nCREATE TABLE labor_statistics (id INT, job_category VARCHAR(20), hourly_wage DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE labor_statistics SET hourly_wage = hourly_wage * 1.05 WHERE job_category = 'Electricity';"
    },
    {
        "instruction": "입력 텍스트: 지중해의 모든 해양 생물 연구 데이터 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE marine_life_data (id INT, species TEXT, population INT, location TEXT); INSERT INTO marine_life_data (id, species, population, location) VALUES (1, 'Dolphin', 50, 'Mediterranean'); INSERT INTO marine_life_data (id, species, population, location) VALUES (2, 'Turtle', 25, 'Mediterranean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM marine_life_data WHERE location = 'Mediterranean';"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 인도적 지원을 받은 국가들을 찾으세요.\n\nDDL statements:\nCREATE TABLE Humanitarian_Assistance (Country VARCHAR(100), Quarter INT, Year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT Country FROM Humanitarian_Assistance WHERE Quarter = 3 AND Year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 구현된 재생 가능 에너지 프로젝트의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE projects (project_id INT, name TEXT, capacity INT, implementation_date DATE); INSERT INTO projects (project_id, name, capacity, implementation_date) VALUES (1, 'Solar Farm', 5000, '2021-01-01'), (2, 'Wind Turbine', 3000, '2020-01-01'), (3, 'Geothermal Plant', 4000, '2021-01-01'), (4, 'Hydro Plant', 6000, '2019-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM projects WHERE implementation_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 주어진 도시에서 문화 행사의 평균 참석자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE CulturalEvents (id INT, name VARCHAR(50), city VARCHAR(50), attendance INT); INSERT INTO CulturalEvents (id, name, city, attendance) VALUES (1, 'Theater Play', 'New York', 500), (2, 'Art Exhibit', 'New York', 300), (3, 'Music Concert', 'Los Angeles', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(attendance) FROM CulturalEvents WHERE city = 'New York';"
    },
    {
        "instruction": "입력 텍스트: ArtistsDemographics' 테이블에 있는 아티스트들을 나이 순으로 내림차순으로 정렬하고, 상위 2명을 반환하세요.\n\nDDL statements:\nCREATE TABLE ArtistsDemographics (ArtistID INT, Age INT, Gender VARCHAR(10), Nationality VARCHAR(50)); INSERT INTO ArtistsDemographics (ArtistID, Age, Gender, Nationality) VALUES (1, 45, 'Male', 'American'), (2, 34, 'Female', 'Canadian'), (3, 50, 'Male', 'British'), (4, 35, 'Female', 'Mexican'), (5, 40, 'Non-binary', 'Australian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistID, Age, Gender, Nationality FROM (SELECT ArtistID, Age, Gender, Nationality, ROW_NUMBER() OVER (ORDER BY Age DESC) AS Rank FROM ArtistsDemographics) AS Subquery WHERE Rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서의 군사 장비 판매 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE EquipmentSales (id INT PRIMARY KEY, country VARCHAR(50), equipment_type VARCHAR(50), sale_price DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sale_price) FROM EquipmentSales WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 현재 운영 중인 정찰 위성은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE IntelligenceSatellites (Name VARCHAR(50), Country VARCHAR(50), Operational BOOLEAN); INSERT INTO IntelligenceSatellites (Name, Country, Operational) VALUES ('USA-123', 'USA', true), ('USA-456', 'USA', false), ('China-789', 'China', true), ('China-321', 'China', true), ('Russia-987', 'Russia', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM IntelligenceSatellites WHERE Operational = true;"
    },
    {
        "instruction": "입력 텍스트: volunteers' 테이블에서 모든 단체들과 해당하는 자원봉사자 정보를 나열하고, 각 자원봉사자가 기여한 시간 수를 함께 보여주세요.\n\nDDL statements:\nCREATE TABLE volunteers (volunteer_id INT, volunteer_name TEXT, hours_contributed INT, org_id INT); CREATE TABLE organizations (org_id INT, org_name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organizations.org_name, volunteers.volunteer_name, SUM(volunteers.hours_contributed) as total_hours FROM volunteers INNER JOIN organizations ON volunteers.org_id = organizations.org_id GROUP BY organizations.org_name, volunteers.volunteer_name;"
    },
    {
        "instruction": "입력 텍스트: 멕시코 만' 지역에 있는 우물의 최대 생산율(bbl/일)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wells (well_id INT, region VARCHAR(20), production_rate FLOAT); INSERT INTO wells (well_id, region, production_rate) VALUES (1, 'Gulf of Mexico', 2500), (2, 'Gulf of Mexico', 3000), (3, 'Houston', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(production_rate) FROM wells WHERE region = 'Gulf of Mexico';"
    },
    {
        "instruction": "입력 텍스트: 각 위치에서 해저 지도 데이터의 최대 깊이는 얼마이며, 각 위치에는 몇 개의 연구소가 있습니까?\n\nDDL statements:\nCREATE TABLE ocean_floor_mapping (id INT, location TEXT, depth FLOAT); CREATE TABLE marine_life_research_stations (id INT, station_name TEXT, location TEXT, depth FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ocean_floor_mapping.location, MAX(ocean_floor_mapping.depth), COUNT(marine_life_research_stations.id) FROM ocean_floor_mapping INNER JOIN marine_life_research_stations ON ocean_floor_mapping.location = marine_life_research_stations.location GROUP BY ocean_floor_mapping.location;"
    },
    {
        "instruction": "입력 텍스트: 야생 서식지별 낙엽수의 총 바이오매스는 얼마인가요?\n\nDDL statements:\nCREATE TABLE tree_types (id INT, name VARCHAR(255)); INSERT INTO tree_types (id, name) VALUES (1, 'Deciduous'), (2, 'Evergreen'); CREATE TABLE trees (id INT, biomass INT, tree_type_id INT); INSERT INTO trees (id, biomass, tree_type_id) VALUES (1, 1000, 1), (2, 800, 2); CREATE TABLE wildlife_habitats (id INT, name VARCHAR(255)); INSERT INTO wildlife_habitats (id, name) VALUES (1, 'Forest'), (2, 'Grassland'); CREATE TABLE tree_habitat_associations (tree_id INT, habitat_id INT); INSERT INTO tree_habitat_associations (tree_id, habitat_id) VALUES (1, 1), (2, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.name habitat, SUM(t.biomass) total_biomass FROM trees t JOIN tree_habitat_associations tha ON t.id = tha.tree_id JOIN wildlife_habitats h ON tha.habitat_id = h.id JOIN tree_types tt ON t.tree_type_id = tt.id WHERE tt.name = 'Deciduous' GROUP BY h.name;"
    },
    {
        "instruction": "입력 텍스트: 공정 무역 인증을 받은 상위 2개 공급업체에서 가장 많이 사용되는 지속 가능한 재료는 무엇인가요?\n\nDDL statements:\nCREATE TABLE fair_trade_suppliers (id INT PRIMARY KEY, name VARCHAR(50), material VARCHAR(50), quantity INT); INSERT INTO fair_trade_suppliers (id, name, material, quantity) VALUES (1, 'Fair Trade Farms', 'Organic Cotton', 2000), (2, 'Green Earth', 'Hemp', 1500), (3, 'Sustainable Source', 'Bamboo', 1000), (4, 'Eco Harvest', 'Recycled Polyester', 2500), (5, 'Ethical Textiles', 'Tencel', 1200), (6, 'Fair Trade Farms', 'Wool', 1000), (7, 'Green Earth', 'Silk', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material, SUM(quantity) as total_quantity FROM fair_trade_suppliers WHERE name IN ('Fair Trade Farms', 'Green Earth') GROUP BY material ORDER BY total_quantity DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스 내에서 주당 600단위 이상의 과일과 채소를 공급하는 공급업체의 최소 지속 가능성 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ProduceSupplier (SupplierID INT, SustainabilityRating INT, UnitsPerWeek INT); INSERT INTO ProduceSupplier VALUES (1, 85, 550), (2, 70, 400), (3, 90, 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(SustainabilityRating) FROM ProduceSupplier WHERE UnitsPerWeek > 600;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 어느 항구에서 처리한 화물의 최대 중량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ports(id INT, name VARCHAR(50), type VARCHAR(50), region VARCHAR(50)); CREATE TABLE cargo_handling(port_id INT, cargo_type VARCHAR(50), tonnage INT, handling_date DATE); INSERT INTO ports VALUES (1, 'Port of Los Angeles', 'Seaport', 'Pacific'); INSERT INTO cargo_handling VALUES (1, 'Bulk', 50000, '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(cargo_handling.tonnage) FROM cargo_handling INNER JOIN ports ON cargo_handling.port_id = ports.id WHERE ports.region = 'Pacific' AND cargo_handling.handling_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 좌석 수가 100개를 초과하는 레스토랑의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Restaurants (restaurant_id INT, name VARCHAR(255), seating_capacity INT, revenue DECIMAL(10,2)); INSERT INTO Restaurants (restaurant_id, name, seating_capacity, revenue) VALUES (1, 'Restaurant A', 150, 5000.00), (2, 'Restaurant B', 50, 6000.00), (3, 'Restaurant C', 200, 4000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM Restaurants WHERE seating_capacity > 100;"
    },
    {
        "instruction": "입력 텍스트: 성별에 따른 접종 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vaccinations(id INT, patient_id INT, gender TEXT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) FROM vaccinations GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: Location1과 Location2에서 모두 제공되지만 Location3에서는 제공되지 않는 메뉴 항목은 무엇인가요?\n\nDDL statements:\nCREATE TABLE menu_items(menu_item VARCHAR(255), location VARCHAR(255)); INSERT INTO menu_items(menu_item, location) VALUES ('Burger', 'Location1'), ('Pizza', 'Location2'), ('Pasta', 'Location1'), ('Salad', 'Location2'), ('Burger', 'Location3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT menu_item FROM menu_items WHERE location = 'Location1' INTERSECT SELECT menu_item FROM menu_items WHERE location = 'Location2' EXCEPT SELECT menu_item FROM menu_items WHERE location = 'Location3';"
    },
    {
        "instruction": "입력 텍스트: policyholders' 테이블을 변경하여 'age' 열이 1세 이상 120세 이하가 되도록 제약 조건을 추가하세요.\n\nDDL statements:\nCREATE TABLE if not exists policyholders (policyholder_id INT PRIMARY KEY, name VARCHAR(255), age INT, gender VARCHAR(10), policy_type VARCHAR(50), premium DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: ALTER TABLE policyholders ADD CONSTRAINT age_range CHECK (age >= 1 AND age <= 120);"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 미국 지역에서 구매된 동물 실험을 하지 않은 인증 제품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE product (product_id INT, product_name TEXT, is_cruelty_free BOOLEAN); CREATE TABLE purchase (purchase_id INT, product_id INT, purchase_date DATE, region TEXT); INSERT INTO product VALUES (1, 'Lipstick', true), (2, 'Moisturizer', false); INSERT INTO purchase VALUES (1, 1, '2022-01-10', 'US'), (2, 2, '2022-01-15', 'CA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.product_name FROM purchase p JOIN product pr ON p.product_id = pr.product_id WHERE pr.is_cruelty_free = true AND p.purchase_date >= '2022-02-01' AND p.region = 'US';"
    },
    {
        "instruction": "입력 텍스트: 에너지 분야에서 창업한 베테랑에 의한 스타트업의 최대 창립 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE startups(id INT, name TEXT, industry TEXT, founding_date DATE, founder_veteran BOOLEAN); INSERT INTO startups(id, name, industry, founding_date, founder_veteran) VALUES (1, 'EnergyVeteran', 'Energy', '2022-05-15', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(founding_date) FROM startups WHERE industry = 'Energy' AND founder_veteran = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 각 판매 채널을 통해 판매된 상품의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (id INT, item_id INT, sales_channel VARCHAR(255), quantity INT, price DECIMAL(10, 2)); INSERT INTO sales (id, item_id, sales_channel, quantity, price) VALUES (1, 101, 'online', 50, 15.00), (2, 102, 'retail', 75, 20.00), (3, 103, 'online', 80, 18.00), (4, 104, 'retail', 60, 22.00), (5, 105, 'online', 90, 16.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sales_channel, AVG(price) FROM sales GROUP BY sales_channel;"
    },
    {
        "instruction": "입력 텍스트: research_grants' 테이블에서 3건 미만의 연구 보조금을 받은 부서를 제외하고, 부서별로 수여된 연구 보조금의 평균 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE research_grants (id INT, department VARCHAR(255), amount FLOAT); INSERT INTO research_grants (id, department, amount) VALUES (1, 'Computer Science', 100000), (2, 'Computer Science', 200000), (3, 'Statistics', 150000), (4, 'Philosophy', 250000), (5, 'English', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(grant_avg) FROM (SELECT department, AVG(amount) AS grant_avg FROM research_grants GROUP BY department HAVING COUNT(*) >= 3) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: 바이오테크 산업에서 단독 창업자에 의해 설립된 회사의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founding_date DATE, industry TEXT, headquarters TEXT, founder_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM company WHERE founder_count = 1 AND industry = 'biotech';"
    },
    {
        "instruction": "입력 텍스트: 지역별 보건 의료 종사자의 평균 나이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE healthcare_workers (id INT, name VARCHAR(50), age INT, region VARCHAR(50)); INSERT INTO healthcare_workers (id, name, age, region) VALUES (1, 'John Doe', 35, 'Northeast');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(age) as avg_age FROM healthcare_workers GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: ingredient_sources' 테이블에서 'Retinol'의 원재료 소스 위치를 'Australia'에서 'Canada'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE ingredient_sources (ingredient VARCHAR(100), source_location VARCHAR(100)); INSERT INTO ingredient_sources (ingredient, source_location) VALUES ('Retinol', 'Australia'), ('Hyaluronic Acid', 'USA'), ('Vitamin C', 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE ingredient_sources SET source_location = 'Canada' WHERE ingredient = 'Retinol';"
    },
    {
        "instruction": "입력 텍스트: 최근 6개월 동안 콜로라도 주에 있는 평균 도매 주문 수량이 가장 높은 약국들과 그에 해당하는 평균 도매 주문 수량을 확인하세요.\n\nDDL statements:\nCREATE TABLE dispensaries (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(255), location VARCHAR(255)); CREATE TABLE wholesale_orders (id INT PRIMARY KEY, dispensary_id INT, strain_id INT, quantity INT, order_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dispensaries.name, AVG(wholesale_orders.quantity) as avg_quantity FROM dispensaries INNER JOIN wholesale_orders ON dispensaries.id = wholesale_orders.dispensary_id WHERE dispensaries.state = 'Colorado' AND wholesale_orders.order_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND CURRENT_DATE GROUP BY dispensaries.id ORDER BY avg_quantity DESC LIMIT 10;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 건축 프로젝트 중에서 기간이 120일을 초과하는 모든 프로젝트를 나열하시오.\n\nDDL statements:\nCREATE TABLE Project_Timelines (id INT, project_name VARCHAR(255), timeline INT, is_sustainable BOOLEAN); INSERT INTO Project_Timelines (id, project_name, timeline, is_sustainable) VALUES (1, 'Green Building', 180, TRUE), (2, 'Solar Panel Installation', 120, TRUE), (3, 'Traditional Construction', 240, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM Project_Timelines WHERE is_sustainable = TRUE AND timeline > 120;"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 각 월별 평균 해수면 온도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ocean_temperature (location VARCHAR(255), date DATE, temperature FLOAT); INSERT INTO ocean_temperature (location, date, temperature) VALUES ('Pacific Ocean', '2021-01-01', 20.5), ('Pacific Ocean', '2021-02-01', 21.2), ('Pacific Ocean', '2021-03-01', 22.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM date) AS month, AVG(temperature) AS avg_temperature FROM ocean_temperature WHERE location = 'Pacific Ocean' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: donations' 테이블과 'campaigns' 테이블에서 모든 기부 내역과 해당 캠페인을 나열합니다.\n\nDDL statements:\nCREATE TABLE donations (donation_id INT, donation_amount DECIMAL, donation_date DATE); CREATE TABLE campaigns (campaign_id INT, campaign_name TEXT, start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT donations.donation_id, donations.donation_amount, donations.donation_date, campaigns.campaign_name FROM donations INNER JOIN campaigns ON donations.donation_date BETWEEN campaigns.start_date AND campaigns.end_date;"
    },
    {
        "instruction": "입력 텍스트: 이탈리아 차량의 최소 안전 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Safety_Testing (year INT, make VARCHAR(50), model VARCHAR(50), rating FLOAT); INSERT INTO Safety_Testing (year, make, model, rating) VALUES (2022, 'Fiat', '500', 4.3); INSERT INTO Safety_Testing (year, make, model, rating) VALUES (2022, 'Alfa Romeo', 'Giulia', 4.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(rating) FROM Safety_Testing WHERE make = 'Italian';"
    },
    {
        "instruction": "입력 텍스트: 남극 지역에서 기후 연구를 수행한 연구원들은 누구인가요?\n\nDDL statements:\nCREATE TABLE ClimateResearch (id INT PRIMARY KEY, researcher_id INT, location VARCHAR(100), start_date DATE, end_date DATE); INSERT INTO ClimateResearch (id, researcher_id, location, start_date, end_date) VALUES (1, 2, 'Antarctic', '2022-01-01', '2022-02-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name FROM Researchers r JOIN ClimateResearch cr ON r.id = cr.researcher_id WHERE cr.location = 'Antarctic';"
    },
    {
        "instruction": "입력 텍스트: humanitarian_aid' 테이블에 'Country Z' 국가와 '2017년'에 대한 새로운 기록을 추가하고, aid_amount는 5000000으로 설정하세요.\n\nDDL statements:\nCREATE TABLE humanitarian_aid (country VARCHAR(50), year INT, aid_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO humanitarian_aid (country, year, aid_amount) VALUES ('Country Z', 2017, 5000000);"
    },
    {
        "instruction": "입력 텍스트: 우울증을 주 진단으로 받은 환자 중 적어도 한 번의 치료 세션에 참석한 환자는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE patients (id INT, name TEXT, age INT, condition TEXT, therapy_sessions INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM patients WHERE condition = 'depression' AND therapy_sessions > 0;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 서비스를 받지 않은 버스는 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE Vehicles(type TEXT, last_service DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type FROM Vehicles WHERE last_service < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 야외 운동에 참여한 총 운동 횟수와 고유 회원 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE workouts (id INT, member_id INT, workout_type VARCHAR(50), duration INT, date DATE); INSERT INTO workouts (id, member_id, workout_type, duration, date) VALUES (1, 1, 'Cycling', 60, '2022-03-10'), (2, 3, 'Yoga', 45, '2022-03-15'), (3, 2, 'Running', 30, '2022-02-20'), (4, 4, 'Hiking', 120, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) AS total_workouts, COUNT(DISTINCT member_id) AS unique_members FROM workouts w WHERE w.workout_type LIKE '%Outdoor%' AND w.date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: SpaceX에서 제조한 모든 우주선의 총 질량(kg)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE spacecraft (id INT, name VARCHAR(50), manufacturer VARCHAR(50), mass FLOAT); INSERT INTO spacecraft (id, name, manufacturer, mass) VALUES (3, 'Starship', 'SpaceX', 1250000.0); INSERT INTO spacecraft (id, name, manufacturer, mass) VALUES (4, 'Crew Dragon', 'SpaceX', 12000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(mass) FROM spacecraft WHERE manufacturer = 'SpaceX';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 위치하고 위험에 처한 자연 유산 명소는 어디인가요?\n\nDDL statements:\nCREATE TABLE HeritageSites (SiteID INT PRIMARY KEY, Name VARCHAR(100), Category VARCHAR(50), Status VARCHAR(20), Region VARCHAR(50)); INSERT INTO HeritageSites (SiteID, Name, Category, Status, Region) VALUES (1, 'Victoria Falls', 'Natural', 'Vulnerable', 'Africa'), (2, 'Grand Canyon', 'Natural', 'Not Endangered', 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name FROM HeritageSites WHERE Category = 'Natural' AND Status = 'Vulnerable' AND Region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 바다의 평균 산성도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ocean_acidification (location TEXT, acidity FLOAT); INSERT INTO ocean_acidification (location, acidity) VALUES ('Caribbean Sea', 8.2), ('Pacific Ocean', 8.1), ('Atlantic Ocean', 8.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(acidity) FROM ocean_acidification;"
    },
    {
        "instruction": "입력 텍스트: 2021년 기준 중국의 전기차 총 수량(천 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE electric_vehicles (id INT, country TEXT, year INT, number_thousands FLOAT); INSERT INTO electric_vehicles (id, country, year, number_thousands) VALUES (1, 'China', 2020, 1500.1), (2, 'China', 2021, 1800.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(number_thousands) FROM electric_vehicles WHERE country = 'China' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 사건 결과별 총 청구 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Cases (CaseID int, Outcome varchar(10), BillingID int); INSERT INTO Cases VALUES (1, 'Won', 1), (2, 'Won', 2), (3, 'Lost', 3), (4, 'Lost', 4); CREATE TABLE Billing (BillingID int, Amount decimal(10,2)); INSERT INTO Billing VALUES (1, 500.00), (2, 750.00), (3, 300.00), (4, 600.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT C.Outcome, SUM(B.Amount) as TotalBilling FROM Cases C JOIN Billing B ON C.BillingID = B.BillingID GROUP BY C.Outcome;"
    },
    {
        "instruction": "입력 텍스트: 사회 선한 목적을 위한 기술 프로젝트 중 교육을 다루는 프로젝트의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE social_good_education (id INT, project_education VARCHAR(10)); INSERT INTO social_good_education (id, project_education) VALUES (1, 'yes'), (2, 'no'), (3, 'yes'), (4, 'yes'), (5, 'no'), (6, 'yes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM social_good_education) AS percentage FROM social_good_education WHERE project_education = 'yes';"
    },
    {
        "instruction": "입력 텍스트: 아시아에 있는 재정적으로 능력 있는 개인은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE financial_capability (id INT, individual_id INT, financially_capable BOOLEAN, country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM financial_capability WHERE financially_capable = TRUE AND country LIKE 'Asia%';"
    },
    {
        "instruction": "입력 텍스트: 각 메뉴 카테고리별 총 매출액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menu (category VARCHAR(255), sales FLOAT); INSERT INTO menu (category, sales) VALUES ('Appetizers', 5000.00), ('Entrees', 12000.00), ('Desserts', 6000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, SUM(sales) FROM menu GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 각 주에 있는 커뮤니티 보건 센터는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE community_health_centers (center_id INT, center_name TEXT, state TEXT); INSERT INTO community_health_centers (center_id, center_name, state) VALUES (1, 'Hawaii Health & Human Services', 'HI'), (2, 'New York City Health & Hospitals', 'NY');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM community_health_centers GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 영국에서 총 인용 횟수로 본 상위 3개의 바이오센서 기술 특허는 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists biosensor;CREATE TABLE if not exists biosensor.patents (id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(50), total_citations INT);INSERT INTO biosensor.patents (id, name, location, total_citations) VALUES (1, 'PatentX', 'UK', 150), (2, 'PatentY', 'USA', 200), (3, 'PatentZ', 'Canada', 120), (4, 'PatentW', 'UK', 170), (5, 'PatentV', 'France', 180), (6, 'PatentU', 'UK', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, total_citations FROM biosensor.patents WHERE location = 'UK' GROUP BY name ORDER BY total_citations DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 범죄 유형별로 저질러진 범죄는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE crimes (category VARCHAR(255), count INT); INSERT INTO crimes (category, count) VALUES ('Theft', 50), ('Assault', 30), ('Vandalism', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, SUM(count) OVER (PARTITION BY category) FROM crimes;"
    },
    {
        "instruction": "입력 텍스트: recall_reports' 테이블에서 'recalled'가 몇 번 나타났습니까?\n\nDDL statements:\nCREATE TABLE recall_reports (report_id INT, report TEXT); INSERT INTO recall_reports (report_id, report) VALUES (1, 'The product has been recalled due to contamination.'), (2, 'No recalls have been issued for this product.'), (3, 'The company has issued a recall for this product.');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as recall_count FROM recall_reports WHERE report LIKE '%recalled%';"
    },
    {
        "instruction": "입력 텍스트: 2020년 디지털 격차에 가장 큰 영향을 미친 상위 2개의 요인은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Digital_Divide (contributor VARCHAR(50), year INT, impact INT); INSERT INTO Digital_Divide (contributor, year, impact) VALUES ('Income Inequality', 2020, 8), ('Education Disparity', 2020, 7), ('Rural Internet Access', 2020, 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT contributor FROM Digital_Divide WHERE year = 2020 ORDER BY impact DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 러시아에서 개발한 새로운 군사 기술에 대한 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE military_tech (id INT, name VARCHAR(255), country VARCHAR(255), status VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO military_tech (id, name, country, status) VALUES (4, 'T-14 Armata', 'Russia', 'active');"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 fish_stock 테이블과 acidification_data 테이블을 고려할 때 어류 자원과 해양 산성화 수준 사이의 상관관계는 무엇인가요?\n\nDDL statements:\nCREATE TABLE fish_stock (date DATE, ocean TEXT, fish_population INTEGER); INSERT INTO fish_stock (date, ocean, fish_population) VALUES ('2018-01-01', 'Atlantic', 500000); INSERT INTO fish_stock (date, ocean, fish_population) VALUES ('2018-02-01', 'Atlantic', 495000); CREATE TABLE acidification_data (date DATE, ocean TEXT, acidification_level FLOAT); INSERT INTO acidification_data (date, ocean, acidification_level) VALUES ('2018-01-01', 'Atlantic', 8.2); INSERT INTO acidification_data (date, ocean, acidification_level) VALUES ('2018-02-01', 'Atlantic', 8.15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT correlation(fish_stock.fish_population, acidification_data.acidification_level) FROM fish_stock INNER JOIN acidification_data ON fish_stock.date = acidification_data.date AND fish_stock.ocean = acidification_data.ocean WHERE fish_stock.ocean = 'Atlantic';"
    },
    {
        "instruction": "입력 텍스트: 각 제조사가 데이터베이스에 보유한 항공기는 몇 대인가요?\n\nDDL statements:\nCREATE TABLE aircraft_manufacturer (id INTEGER, name TEXT); INSERT INTO aircraft_manufacturer (id, name) VALUES (1, 'Boeing'), (2, 'Airbus'), (3, 'Embraer'); CREATE TABLE aircraft (id INTEGER, manufacturer_id INTEGER, model TEXT); INSERT INTO aircraft (id, manufacturer_id, model) VALUES (1, 1, '747'), (2, 1, '777'), (3, 2, 'A320'), (4, 2, 'A350'), (5, 3, 'ERJ-145');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT manufacturer_id, COUNT(*) FROM aircraft GROUP BY manufacturer_id;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 의류로부터 지난 1년간의 총 수익을 찾으세요.\n\nDDL statements:\nCREATE TABLE Sales(id INT, garment_id INT, sale_price FLOAT, sale_date DATE, is_sustainable BOOLEAN); INSERT INTO Sales(id, garment_id, sale_price, sale_date, is_sustainable) VALUES (1, 1, 100, '2022-01-01', true); INSERT INTO Sales(id, garment_id, sale_price, sale_date, is_sustainable) VALUES (2, 2, 75, '2022-02-15', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sale_price) FROM Sales WHERE is_sustainable = true AND sale_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 성별의 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), Age INT, Gender VARCHAR(10), DonationAmount DECIMAL(10,2)); INSERT INTO Donors (DonorID, DonorName, Age, Gender, DonationAmount) VALUES (5, 'Surae', 45, 'Female', 600.00), (6, 'Jamal', 50, 'Male', 800.00), (7, 'Priya', 32, 'Female', 700.00), (8, 'Thanh', 48, 'Male', 900.00), (9, 'Amira', 38, 'Female', 550.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Gender, SUM(DonationAmount) FROM Donors GROUP BY Gender;"
    },
    {
        "instruction": "입력 텍스트: 인도양에서 해상법을 준수하지 않는 어선의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE indian_ocean_fishingvessels (id INT, is_commercial BOOLEAN, is_compliant BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN is_commercial = TRUE AND is_compliant = FALSE THEN 1 ELSE 0 END) FROM indian_ocean_fishingvessels;"
    },
    {
        "instruction": "입력 텍스트: 생산 현장 A의 안전 점수를 95로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE production_sites(id INT, site_name TEXT, safety_score INT); INSERT INTO production_sites (id, site_name, safety_score) VALUES (1, 'Site A', 90), (2, 'Site B', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE production_sites SET safety_score = 95 WHERE site_name = 'Site A';"
    },
    {
        "instruction": "입력 텍스트: ArtifactAnalysis' 테이블에서 평균 유물 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ArtifactAnalysis (ID INT, Archeologist VARCHAR(50), Artifact VARCHAR(50), AnalysisDate DATE, ArtifactAge INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(ArtifactAge) FROM ArtifactAnalysis;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 약물로 치료된 독특한 정신 건강 상태의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE treatments (id INT, condition_id INT, medication BOOLEAN, region VARCHAR(50)); INSERT INTO treatments (id, condition_id, medication, region) VALUES (1, 1, TRUE, 'Asia'), (2, 1, FALSE, 'Europe'), (3, 2, TRUE, 'Asia'), (4, 2, TRUE, 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(DISTINCT condition_id) FROM treatments WHERE medication = TRUE GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 열린 모든 오토쇼 정보를 연도와 참석자 수를 포함하여 나열하세요.\n\nDDL statements:\nCREATE TABLE AutoShows (Year INT, Country VARCHAR(255), Attendees INT); INSERT INTO AutoShows (Year, Country, Attendees) VALUES (2018, 'US', 50000), (2019, 'US', 60000), (2020, 'US', 70000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Year, Attendees FROM AutoShows WHERE Country = 'US';"
    },
    {
        "instruction": "입력 텍스트: 파키스탄 펀자브 주에서 프로젝트 유형과 연도별로 계산한 농촌 인프라 프로젝트의 평균 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE projects_pakistan (project_id INT, province TEXT, project_type TEXT, year INT, cost FLOAT); INSERT INTO projects_pakistan (project_id, province, project_type, year, cost) VALUES (1, 'Punjab', 'Roads', 2018, 500000), (2, 'Punjab', 'Bridges', 2019, 700000), (3, 'Punjab', 'Irrigation', 2020, 600000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, year, AVG(cost) as avg_cost FROM projects_pakistan WHERE province = 'Punjab' GROUP BY project_type, year;"
    },
    {
        "instruction": "입력 텍스트: 총 몇 개의 음악 이벤트가 개최되었나요?\n\nDDL statements:\nCREATE TABLE MusicEvents (id INT, year INT, event_type VARCHAR(20)); INSERT INTO MusicEvents (id, year, event_type) VALUES (1, 2017, 'Music'), (2, 2018, 'Music'), (3, 2019, 'Music'), (4, 2020, 'Music');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM MusicEvents;"
    },
    {
        "instruction": "입력 텍스트: 저소득 국가 출신 기부자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50)); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (1, 'John Doe', 'United States'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (2, 'Jane Smith', 'Bangladesh'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (3, 'Alice Johnson', 'India');CREATE TABLE CountryIncome (Country varchar(50), IncomeLevel varchar(20)); INSERT INTO CountryIncome (Country, IncomeLevel) VALUES ('United States', 'High-income'); INSERT INTO CountryIncome (Country, IncomeLevel) VALUES ('Bangladesh', 'Low-income'); INSERT INTO CountryIncome (Country, IncomeLevel) VALUES ('India', 'Lower-middle-income');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Donors INNER JOIN CountryIncome ON Donors.Country = CountryIncome.Country WHERE CountryIncome.IncomeLevel = 'Low-income';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 모바일 게임으로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GameSales (GameID INT, GameType VARCHAR(10), Revenue INT, SaleDate DATE); INSERT INTO GameSales (GameID, GameType, Revenue, SaleDate) VALUES (1, 'Mobile', 1000, '2022-01-01'), (2, 'PC', 2000, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Revenue) FROM GameSales WHERE GameType = 'Mobile' AND SaleDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 진행 중인 해양 보호 활동의 총 개수와 이 중 비정부 기구가 주도하는 활동은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE marine_conservation (initiative_name TEXT, ocean TEXT, leader TEXT); INSERT INTO marine_conservation (initiative_name, ocean, leader) VALUES ('Initiative C', 'Atlantic Ocean', 'Greenpeace'); INSERT INTO marine_conservation (initiative_name, ocean, leader) VALUES ('Initiative D', 'Atlantic Ocean', 'World Wildlife Fund');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) AS total_initiatives, SUM(leader = 'Greenpeace' OR leader = 'World Wildlife Fund') AS ngo_led_initiatives FROM marine_conservation WHERE ocean = 'Atlantic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 회사의 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Company (id INT, name VARCHAR(50), HQ VARCHAR(50), diversity_score FLOAT); CREATE TABLE Investment (id INT, company_id INT, investor VARCHAR(50), investment_amount FLOAT, investment_date DATE); INSERT INTO Company (id, name, HQ, diversity_score) VALUES (4, 'Delta Inc', 'USA', 65.8); INSERT INTO Investment (id, company_id, investor, investment_amount, investment_date) VALUES (4, 4, 'Kleiner Perkins', 10000000, '2019-08-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Company.name, SUM(Investment.investment_amount) as total_investment FROM Company JOIN Investment ON Company.id = Investment.company_id WHERE YEAR(Investment.investment_date) = 2019 GROUP BY Company.name;"
    },
    {
        "instruction": "입력 텍스트: 텍스트: TX 지역의 각 커뮤니티 보건 근로자별로 고유한 건강 형평성 지표의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE health_equity_metrics (metric_id INT, worker_id INT, name VARCHAR(50)); INSERT INTO health_equity_metrics (metric_id, worker_id, name) VALUES (1, 1, 'Accessibility'), (2, 1, 'Quality of Care'), (3, 2, 'Accessibility'), (4, 2, 'Quality of Care'), (5, 2, 'Language Proficiency');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT worker_id, COUNT(DISTINCT metric_id) FROM health_equity_metrics WHERE state = 'TX' GROUP BY worker_id;"
    },
    {
        "instruction": "입력 텍스트: 일본 출신 플레이어의 평균 K/D 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE games (id INT, player_id INT, kills INT, deaths INT); INSERT INTO players VALUES (1, 'Hiroshi Tanaka', 'Japan'); INSERT INTO players VALUES (2, 'Sophia Lee', 'USA'); INSERT INTO games VALUES (1, 1, 12, 6); INSERT INTO games VALUES (2, 1, 18, 4); INSERT INTO games VALUES (3, 2, 7, 3); INSERT INTO games VALUES (4, 2, 10, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player_id, AVG(kills/deaths) as K_D_ratio FROM players INNER JOIN games ON players.id = games.player_id WHERE country = 'Japan' GROUP BY player_id;"
    },
    {
        "instruction": "입력 텍스트: 2021년과 2022년에 미국에서 발행된 사회 정의 이슈 관련 기사들의 분기별 평균 단어 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE articles (id INT, title TEXT, category TEXT, publish_date DATE, location TEXT, word_count INT); INSERT INTO articles (id, title, category, publish_date, location, word_count) VALUES (1, 'Social Justice Issue 1', 'social_justice', '2021-01-01', 'USA', 800), (2, 'Social Justice Issue 2', 'social_justice', '2022-06-05', 'USA', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(word_count) OVER (PARTITION BY EXTRACT(YEAR_QUARTER FROM publish_date)) AS avg_word_count FROM articles WHERE category = 'social_justice' AND location = 'USA' AND YEAR(publish_date) BETWEEN 2021 AND 2022;"
    },
    {
        "instruction": "입력 텍스트: Urban' 지역에 있는, 용량이 5000톤 이상인 재활용 센터는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE RecyclingCenters (id INT, area VARCHAR(20), capacity INT); INSERT INTO RecyclingCenters (id, area, capacity) VALUES (1, 'Urban', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM RecyclingCenters WHERE area = 'Urban' AND capacity > 5000;"
    },
    {
        "instruction": "입력 텍스트: 메인 벨트에서 발견된 소행성은 총 몇 개인가요?\n\nDDL statements:\nCREATE TABLE asteroids (id INT, name VARCHAR(255), belt VARCHAR(255)); CREATE VIEW main_belt_asteroids AS SELECT * FROM asteroids WHERE belt = 'Main Belt';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM main_belt_asteroids;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 도시 지역과 농촌 지역에서 이루어진 대중교통 여행 횟수는 얼마나 되나요?\n\nDDL statements:\nCREATE TABLE Areas (id INT, type VARCHAR(50)); INSERT INTO Areas (id, type) VALUES (1, 'Urban'), (2, 'Rural'); CREATE TABLE Transportation_Trips (area_id INT, year INT, trips INT); INSERT INTO Transportation_Trips (area_id, year, trips) VALUES (1, 2020, 1000000), (2, 2020, 500000), (1, 2021, 1200000), (2, 2021, 600000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT A.type, SUM(TT.trips) as Total_Trips FROM Transportation_Trips TT JOIN Areas A ON TT.area_id = A.id WHERE TT.year = 2020 GROUP BY A.type;"
    },
    {
        "instruction": "입력 텍스트: 공급업체별 지속 가능한 노동 관행에 참여하는 근로자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE labor_practices (id INT, supplier VARCHAR(255), practice VARCHAR(255), num_workers INT); INSERT INTO labor_practices (id, supplier, practice, num_workers) VALUES (1, 'Supplier A', 'Fair Trade', 50), (2, 'Supplier B', 'Living Wage', 75), (3, 'Supplier C', 'Fair Trade', 100), (4, 'Supplier D', 'Living Wage', 125), (5, 'Supplier E', 'Fair Trade', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier, SUM(num_workers) FROM labor_practices GROUP BY supplier;"
    },
    {
        "instruction": "입력 텍스트: artifacts'라는 이름의 테이블을 'id', 'artifact_type', 'material', 'analysis_date' 열과 함께 생성하세요.\n\nDDL statements:\nCREATE TABLE excavations (id INT, location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE artifacts (id INT, artifact_type VARCHAR(255), material VARCHAR(255), analysis_date DATE);"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 대서양과 인도양에서 진행된 심해 탐사는 몇 번이었나요?\n\nDDL statements:\nCREATE TABLE deep_sea_expeditions (country TEXT, year INT, ocean TEXT); INSERT INTO deep_sea_expeditions (country, year, ocean) VALUES ('USA', 2010, 'Atlantic'), ('Brazil', 2011, 'Atlantic'), ('South Africa', 2012, 'Atlantic'), ('India', 2013, 'Atlantic'), ('France', 2014, 'Atlantic'), ('UK', 2015, 'Atlantic'), ('Germany', 2016, 'Atlantic'), ('Norway', 2017, 'Atlantic'), ('Spain', 2018, 'Atlantic'), ('Italy', 2019, 'Atlantic'), ('USA', 2010, 'Indian'), ('China', 2011, 'Indian'), ('Japan', 2012, 'Indian'), ('Indonesia', 2013, 'Indian'), ('Australia', 2014, 'Indian'), ('Canada', 2015, 'Indian'), ('Russia', 2016, 'Indian'), ('Malaysia', 2017, 'Indian'), ('Thailand', 2018, 'Indian'), ('Philippines', 2019, 'Indian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM deep_sea_expeditions WHERE ocean IN ('Atlantic', 'Indian') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: Northwest' 지역에 있는 다리들의 지난 5년간 평균 연간 강수량과 총 연간 유지비용을 계산하세요.\n\nDDL statements:\nCREATE TABLE BridgeRainfall (    BridgeID INT,    Year INT,    Rainfall DECIMAL(10, 2),    MaintenanceCost DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Rainfall) as AvgAnnualRainfall, SUM(MaintenanceCost) as TotalAnnualMaintenanceCost  FROM BridgeRainfall  WHERE Region = 'Northwest' AND Year >= YEAR(CURRENT_DATE) - 5 GROUP BY Year;"
    },
    {
        "instruction": "입력 텍스트: 새로운 종 'Kob'에 대한 새로운 기록을 fish_species 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE fish_species (species_id INT, species VARCHAR(50), conservation_status VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fish_species (species_id, species, conservation_status) VALUES (10, 'Kob', 'Least Concern');"
    },
    {
        "instruction": "입력 텍스트: AB' 지역에서 가장 나이가 적은 커뮤니티 보건 근로자의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE CommunityHealthWorkersCanada (WorkerID INT, Age INT, Gender VARCHAR(1), Province VARCHAR(2)); INSERT INTO CommunityHealthWorkersCanada (WorkerID, Age, Gender, Province) VALUES (1, 35, 'F', 'ON'), (2, 40, 'M', 'QC'), (3, 45, 'F', 'BC'), (4, 50, 'M', 'AB');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM CommunityHealthWorkersCanada WHERE WorkerID = (SELECT WorkerID FROM (SELECT WorkerID, ROW_NUMBER() OVER (PARTITION BY Province ORDER BY Age ASC) rn FROM CommunityHealthWorkersCanada) t WHERE t.rn = 1 AND t.Province = 'AB');"
    },
    {
        "instruction": "입력 텍스트: 주택 정책에 대한 피드백을 제공한 사람은 누구인가요?\n\nDDL statements:\nCREATE TABLE Policy_Feedback (Feedback_ID INT PRIMARY KEY, Council_ID INT, Policy_Area VARCHAR(30), Feedback VARCHAR(100)); INSERT INTO Policy_Feedback (Feedback_ID, Council_ID, Policy_Area, Feedback) VALUES (1, 1, 'Housing', 'More affordable housing needed'), (2, 2, 'Transportation', 'Improve public transportation'), (3, 3, 'Education', 'Increase funding for schools');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Council_ID FROM Policy_Feedback WHERE Policy_Area = 'Housing';"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역 사회 교육 프로그램의 모든 동물 개체 수를 나열합니다\n\nDDL statements:\nCREATE TABLE community_education_programs (id INT, program_name VARCHAR(255), location VARCHAR(255)); CREATE TABLE animal_populations (id INT, program_id INT, animal_type VARCHAR(255), population INT); INSERT INTO community_education_programs (id, program_name, location) VALUES (1, 'African Wildlife Initiative', 'Africa'), (2, 'Lion Guardians', 'Kenya'), (3, 'Gorilla Doctors', 'Rwanda'); INSERT INTO animal_populations (id, program_id, animal_type, population) VALUES (1, 1, 'Lion', 300), (2, 1, 'Elephant', 500), (3, 2, 'Lion', 200), (4, 3, 'Gorilla', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT community_education_programs.program_name, animal_populations.animal_type, animal_populations.population FROM community_education_programs INNER JOIN animal_populations ON community_education_programs.id = animal_populations.program_id WHERE community_education_programs.location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 사용자 7의 모든 게임에 대한 중앙값 점수를 계산하세요\n\nDDL statements:\nCREATE TABLE game_scores (user_id INT, game_name VARCHAR(10), score INT); INSERT INTO game_scores (user_id, game_name, score) VALUES (7, 'B', 200), (7, 'C', 150), (7, 'A', 300), (7, 'D', 250), (7, 'D', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(score) FROM (SELECT score FROM game_scores WHERE user_id = 7 ORDER BY score LIMIT 2 OFFSET 2) AS median_scores;"
    },
    {
        "instruction": "입력 텍스트: 비윤리적인 노동 관행을 가진 공장에 있는 모든 기계의 기계 ID, 유형, 유지 보수 일정을 나열하시오.\n\nDDL statements:\nCREATE TABLE machines (machine_id INT, type TEXT, schedule TEXT); CREATE TABLE factories (factory_id INT, practices TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT machines.machine_id, machines.type, machines.schedule FROM machines INNER JOIN factories ON machines.factory_id = factories.factory_id WHERE factories.practices = 'unethical';"
    },
    {
        "instruction": "입력 텍스트: 미국 서부 지역 사용자들의 60분을 초과하는 세션 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE sessions (id INT, user_id INT, duration INT, region VARCHAR(10)); INSERT INTO sessions (id, user_id, duration, region) VALUES (1, 1, 45, 'West'), (2, 2, 75, 'East'), (3, 3, 62, 'Midwest'), (4, 1, 70, 'West'), (5, 2, 80, 'East');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sessions WHERE duration > 60 AND region = 'West';"
    },
    {
        "instruction": "입력 텍스트: ID가 2인 제품을 삭제하세요\n\nDDL statements:\nCREATE TABLE products (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); INSERT INTO products (id, name, category, price) VALUES (1, 'Nourishing Face Cream', 'Organic', 25.99), (2, 'Revitalizing Serum', 'Natural', 34.99), (3, 'Soothing Eye Cream', 'Organic', 19.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM products WHERE id = 2;"
    },
    {
        "instruction": "입력 텍스트: 베트남에 공정 무역 인증을 받은 공장은 몇 개가 있나요?\n\nDDL statements:\nCREATE TABLE FairTradeCertification (factory VARCHAR(50), certification VARCHAR(50)); INSERT INTO FairTradeCertification VALUES ('Factory1', 'Fair Trade'), ('Factory2', 'Not Certified'), ('Factory3', 'Fair Trade'), ('Factory4', 'Not Certified');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM FairTradeCertification WHERE certification = 'Fair Trade';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 매달 보고된 AI 안전 사고의 평균 건수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE incidents_by_month (incident_date DATE, incident_region TEXT, incident_count INTEGER); INSERT INTO incidents_by_month (incident_date, incident_region, incident_count) VALUES ('2021-01-01', 'Africa', 3), ('2021-02-01', 'Africa', 2), ('2021-03-01', 'Africa', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(incident_count) FROM incidents_by_month WHERE incident_region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: \"projects\" 테이블에서 예산이 1000만 달러 미만인 공공 교통 프로젝트의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE projects (project_id INT, project_name VARCHAR(50), budget DECIMAL(10, 2), area VARCHAR(50)); INSERT INTO projects (project_id, project_name, budget, area) VALUES (1, 'ProjectT', 9000000.00, 'Urban'), (2, 'ProjectU', 7000000.00, 'Urban'), (3, 'ProjectV', 5000000.00, 'Urban');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM projects WHERE budget < 10000000.00;"
    },
    {
        "instruction": "입력 텍스트: 평균 기부금액이 가장 높은 상위 3가지 원인은 무엇인가요?\n\nDDL statements:\nCREATE TABLE DonationsByCause (DonationID int, DonorID int, Amount float, Cause varchar(255)); INSERT INTO DonationsByCause VALUES (1,1,500000,'Education'); INSERT INTO DonationsByCause VALUES (2,2,300000,'Health'); INSERT INTO DonationsByCause VALUES (3,1,700000,'Environment');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Cause, AVG(Amount) as AverageDonation FROM DonationsByCause GROUP BY Cause ORDER BY AverageDonation DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 사람이 소유한 부동산의 총 면적은 얼마인가요?\n\nDDL statements:\nCREATE TABLE property (id INT, sqft INT, owner_id INT); CREATE TABLE person (id INT, name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT person.name, SUM(property.sqft) FROM person INNER JOIN property ON person.id = property.owner_id GROUP BY person.name;"
    },
    {
        "instruction": "입력 텍스트: 각 부서에서 가장 많은 직원 수는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Position VARCHAR(20), Age INT); INSERT INTO Employees (EmployeeID, Department, Position, Age) VALUES (1, 'Mining', 'Engineer', 35), (2, 'Mining', 'Engineer', 40), (3, 'HR', 'Engineer', 32); CREATE TABLE Department (Department VARCHAR(20), DepartmentHead VARCHAR(20)); INSERT INTO Department (Department, DepartmentHead) VALUES ('Mining', 'John'), ('HR', 'Jane'), ('IT', 'Peter');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(CountPerDept) FROM (SELECT Department, COUNT(*) AS CountPerDept FROM Employees GROUP BY Department) AS Subquery;"
    },
    {
        "instruction": "입력 텍스트: 아프리카와 남아메리카에서 VR 기술을 채택한 플레이어는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE players (player_id INT, age INT, platform VARCHAR(20), region VARCHAR(50)); INSERT INTO players (player_id, age, platform, region) VALUES (1, 25, 'PC', 'North America'), (2, 30, 'PSVR', 'Europe'), (3, 22, 'Oculus', 'Asia'), (4, 28, 'PC', 'Asia'), (5, 34, 'PSVR', 'South America'), (6, 32, 'Oculus', 'Africa'); CREATE TABLE vr_tech (player_id INT, vr_platform VARCHAR(20)); INSERT INTO vr_tech (player_id, vr_platform) VALUES (1, 'Oculus'), (3, 'PSVR'), (5, 'PSVR'), (6, 'Oculus');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 'Africa' AS continent, COUNT(DISTINCT p.player_id) AS num_players FROM players p JOIN vr_tech v ON p.player_id = v.player_id WHERE p.region = 'Africa' UNION ALL SELECT 'South America' AS continent, COUNT(DISTINCT p.player_id) AS num_players FROM players p JOIN vr_tech v ON p.player_id = v.player_id WHERE p.region = 'South America';"
    },
    {
        "instruction": "입력 텍스트: AutonomousDriving 테이블에서 'High-Speed Autopilot' 테스트에 통과한 차량의 자율 주행 테스트 결과를 보여주세요.\n\nDDL statements:\nCREATE TABLE AutonomousDriving (Id INT, Vehicle VARCHAR(50), Test VARCHAR(50), Result VARCHAR(50)); INSERT INTO AutonomousDriving (Id, Vehicle, Test, Result) VALUES (1, 'Tesla Model S', 'High-Speed Autopilot', 'Passed'), (2, 'Waymo', 'High-Speed Autopilot', 'Passed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Vehicle FROM AutonomousDriving WHERE Test = 'High-Speed Autopilot' AND Result = 'Passed';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 평생교육 프로그램에 등록한 학생 수는 얼마나 됩니까?\n\nDDL statements:\nCREATE TABLE students_enrollment (id INT, student_id INT, country VARCHAR(255), enrollment_date DATE); INSERT INTO students_enrollment (id, student_id, country, enrollment_date) VALUES (1, 1, 'USA', '2021-08-01'), (2, 2, 'Canada', '2021-07-15'), (3, 3, 'USA', '2020-10-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(DISTINCT student_id) FROM students_enrollment WHERE enrollment_date >= DATEADD(year, -1, GETDATE()) GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: Artworks'와 'Exhibitions' 테이블에 있는 작품들의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artworks (ArtworkID INT, Title TEXT); INSERT INTO Artworks (ArtworkID, Title) VALUES (1, 'Guernica'), (2, 'The Starry Night'); CREATE TABLE Exhibitions (ExhibitionID INT, Title TEXT); INSERT INTO Exhibitions (ExhibitionID, Title) VALUES (1, 'Documenta'), (2, 'Venice Biennale');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Artworks UNION ALL SELECT COUNT(*) FROM Exhibitions;"
    },
    {
        "instruction": "입력 텍스트: 2020년 기준 일본과 한국에서 저장된 배터리의 총 에너지는 얼마입니까?\n\nDDL statements:\nCREATE TABLE battery_storage (id INT, country VARCHAR(255), year INT, energy_stored INT); INSERT INTO battery_storage (id, country, year, energy_stored) VALUES (1, 'Japan', 2020, 7000), (2, 'South Korea', 2020, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(energy_stored) FROM battery_storage WHERE country IN ('Japan', 'South Korea') AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이후에 박물관 컬렉션에 추가된 예술품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ArtPieces (ArtPieceID INT, Name TEXT, YearAdded INT); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (1, 'Starry Night', 1889); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (2, 'The Persistence of Memory', 1931); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (3, 'Guernica', 1937); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (4, 'The Starry Night Over the Rhone', 1888); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (5, 'Girl with a Pearl Earring', 1665);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name FROM ArtPieces WHERE YearAdded > 2000;"
    },
    {
        "instruction": "입력 텍스트: 인도-태평양 지역에 있는 고래상어(Rhincodon typus)의 수를 세어주세요.\n\nDDL statements:\nCREATE TABLE whale_sharks (id INT, species TEXT, region TEXT, count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(count) FROM whale_sharks WHERE species = 'Rhincodon typus' AND region = 'Indo-Pacific';"
    },
    {
        "instruction": "입력 텍스트: 2016년 러시아의 이터븀 총 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE YtterbiumProduction (country VARCHAR(20), year INT, quantity INT); INSERT INTO YtterbiumProduction (country, year, quantity) VALUES ('Russia', 2016, 60), ('Russia', 2017, 65);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM YtterbiumProduction WHERE country = 'Russia' AND year = 2016;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 'USA'에서 개인 기부자들이 기부한 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO donors (donor_id, donor_name, donation_amount, donation_date) VALUES (1, 'John Doe', 500, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE donor_name NOT IN (SELECT donor_name FROM donors WHERE donation_date < '2021-01-01' OR donation_date > '2021-12-31') AND donation_date BETWEEN '2021-01-01' AND '2021-12-31' AND donor_country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 호주 출신 사용자들의 총 운동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Workout (user_id INT, workout_duration INT, country VARCHAR(50)); INSERT INTO Workout (user_id, workout_duration, country) VALUES (1, 30, 'Australia'), (2, 40, 'USA'), (3, 50, 'Australia'), (4, 60, 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(workout_duration) FROM Workout WHERE country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 인구가 5,000,000명을 초과하는 도시는 어디인가요?\n\nDDL statements:\nCREATE TABLE cities (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), population INT, continent VARCHAR(50)); INSERT INTO cities (id, name, country, population, continent) VALUES (1, 'Cairo', 'Egypt', 9100000, 'Africa'); INSERT INTO cities (id, name, country, population, continent) VALUES (2, 'Lagos', 'Nigeria', 21000000, 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cities.name, cities.population FROM cities WHERE cities.continent = 'Africa' AND cities.population > 5000000;"
    },
    {
        "instruction": "입력 텍스트: Booking.com'에서 '파리'에 있는 호텔들의 평균 등급은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Hotels (hotel_id INT, name TEXT, city TEXT, rating FLOAT); INSERT INTO Hotels (hotel_id, name, city, rating) VALUES (1, 'Hotel Ritz', 'Paris', 4.8), (2, 'Hotel George V', 'Paris', 4.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM Hotels WHERE city = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 각 요리 유형별 수익 분석과 각 요리 유형을 제공하는 레스토랑 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(255), Cuisine varchar(255)); CREATE TABLE MenuItems (MenuID int, MenuName varchar(255), RestaurantID int, Sales int);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT R.Cuisine, SUM(M.Sales) as TotalRevenue, COUNT(DISTINCT R.RestaurantID) as RestaurantCount FROM Restaurants R INNER JOIN MenuItems M ON R.RestaurantID = M.RestaurantID GROUP BY R.Cuisine;"
    },
    {
        "instruction": "입력 텍스트: 2022년 'California'에서 'California Arts Council'에 의해 지원된 예술 및 문화 프로그램의 총 자금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Funding (funding_source VARCHAR(20), region VARCHAR(20), total_funding DECIMAL(10,2)); INSERT INTO Funding (funding_source, region, total_funding) VALUES ('California Arts Council', 'California', 120000, 'Arts Foundation', 'California', 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(total_funding) FROM Funding WHERE funding_source = 'California Arts Council' AND region = 'California' AND YEAR(event_date) = 2022"
    },
    {
        "instruction": "입력 텍스트: 교육 학부에서 제공되는 지원 프로그램 중 법학부에서도 제공되지 않는 프로그램을 고유하게 표시합니다.\n\nDDL statements:\nCREATE TABLE EducationPrograms (ProgramID INT, ProgramName VARCHAR(50)); CREATE TABLE LawPrograms (ProgramID INT, ProgramName VARCHAR(50)); INSERT INTO EducationPrograms VALUES (1, 'Tutoring Program'), (2, 'Mentoring Program'), (3, 'Accessible Learning Resources'), (4, 'Diversity Workshops'); INSERT INTO LawPrograms VALUES (2, 'Mentoring Program'), (3, 'Accessible Learning Resources'), (5, 'Legal Clinics');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProgramName FROM EducationPrograms WHERE ProgramName NOT IN (SELECT ProgramName FROM LawPrograms);"
    },
    {
        "instruction": "입력 텍스트: AutonomousVehicles' 테이블에 3대의 자율주행 택시에 대한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE AutonomousVehicles (taxi_id INT, model VARCHAR(20), production_year INT, PRIMARY KEY (taxi_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO AutonomousVehicles (taxi_id, model, production_year) VALUES (100, 'RoboTaxi X1', 2020), (101, 'AutoCab Z5', 2021), (102, 'E-Hailer S7', 2022);"
    },
    {
        "instruction": "입력 텍스트: 북미에서 위험에 처한 언어와 관련된 문화적 관습은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Languages (id INT, language TEXT, status TEXT); INSERT INTO Languages (id, language, status) VALUES (1, 'Cherokee Language', 'At Risk'); CREATE TABLE CulturalPractices (id INT, language_id INT, practice TEXT); INSERT INTO CulturalPractices (id, language_id, practice) VALUES (1, 1, 'Powwow');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT L.language, CP.practice FROM Languages L INNER JOIN CulturalPractices CP ON L.id = CP.language_id WHERE L.status = 'At Risk';"
    },
    {
        "instruction": "입력 텍스트: 가족 사건에 대한 총 청구 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE family_cases (case_id INT, billing_amount DECIMAL(10,2)); INSERT INTO family_cases (case_id, billing_amount) VALUES (1, 1000.00), (2, 2500.50), (3, 500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(billing_amount) FROM family_cases WHERE case_type = 'family';"
    },
    {
        "instruction": "입력 텍스트: 영국에 있는 남성 독자들 사이에서 가장 선호하는 상위 5개 뉴스 카테고리를 찾아주세요.\n\nDDL statements:\nCREATE TABLE readers (id INT, name VARCHAR(50), preferred_category VARCHAR(20)); CREATE TABLE readership (reader_id INT, article_id INT, gender VARCHAR(10), country VARCHAR(50)); INSERT INTO readers (id, name, preferred_category) VALUES (1, 'John Doe', 'Sports'); INSERT INTO readership (reader_id, article_id, gender, country) VALUES (1, 1, 'Male', 'UK');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.preferred_category, COUNT(*) FROM readers r JOIN readership re ON r.id = re.reader_id WHERE re.gender = 'Male' AND re.country = 'UK' GROUP BY r.preferred_category ORDER BY COUNT(*) DESC LIMIT 5"
    },
    {
        "instruction": "입력 텍스트: green_vehicles' 테이블에 있는 전기차들의 총 마력은 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_vehicles (make VARCHAR(50), model VARCHAR(50), year INT, horsepower DECIMAL(5,1));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(horsepower) FROM green_vehicles WHERE make = 'Tesla' OR make = 'Rivian';"
    },
    {
        "instruction": "입력 텍스트: 직경이 10cm 미만인 우주 잔해를 삭제하세요.\n\nDDL statements:\nCREATE TABLE space_debris (id INT, name VARCHAR(50), diameter FLOAT); INSERT INTO space_debris VALUES (1, 'Debris-1', 5.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM space_debris WHERE diameter < 10;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 모바일 고객과 브로드밴드 고객의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE mobile_customers_global (customer_id INT, country VARCHAR(50)); CREATE TABLE broadband_customers_global (customer_id INT, country VARCHAR(50)); INSERT INTO mobile_customers_global (customer_id, country) VALUES (16, 'US'), (17, 'CA'), (18, 'MX'), (19, 'CA'), (20, 'US'); INSERT INTO broadband_customers_global (customer_id, country) VALUES (21, 'US'), (22, 'CA'), (23, 'MX'), (24, 'CA'), (25, 'US');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(DISTINCT mobile_customers_global.customer_id) + COUNT(DISTINCT broadband_customers_global.customer_id) FROM mobile_customers_global FULL OUTER JOIN broadband_customers_global ON mobile_customers_global.country = broadband_customers_global.country GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 메이크업의 각 서브카테고리별 제품 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE makeup_products (product_id INTEGER, product_subcategory VARCHAR(20)); INSERT INTO makeup_products (product_id, product_subcategory) VALUES (1, 'Lipstick'), (2, 'Eyeshadow'), (3, 'Mascara'), (4, 'Foundation'), (5, 'Blush');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_subcategory, COUNT(*) FROM makeup_products GROUP BY product_subcategory;"
    },
    {
        "instruction": "입력 텍스트: 각 아티스트별로 가장 이른 작품 5개(작품 생성 날짜 기준)를 확인하세요.\n\nDDL statements:\nCREATE TABLE Artists (id INT, name TEXT); CREATE TABLE Artworks (id INT, artist_id INT, name TEXT, creation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist_id, name, creation_date FROM (SELECT artist_id, name, creation_date, ROW_NUMBER() OVER (PARTITION BY artist_id ORDER BY creation_date ASC) as rn FROM Artworks) t WHERE rn <= 5;"
    },
    {
        "instruction": "입력 텍스트: 최근 30일 동안 북미에서 활동한 위협 행위자들은 누구이며, 그들이 관련된 사건의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE incidents (id INT, date DATE, category VARCHAR(20), source_ip VARCHAR(15), target_ip VARCHAR(15)); CREATE TABLE threat_actors (id INT, date DATE, type VARCHAR(20), location VARCHAR(30)); INSERT INTO incidents (id, date, category, source_ip, target_ip) VALUES (1, '2021-01-01', 'malware', '192.168.1.100', '8.8.8.8'); INSERT INTO threat_actors (id, date, type, location) VALUES (1, '2021-01-01', 'APT', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT threat_actors.type, COUNT(*) as incident_count FROM threat_actors JOIN incidents ON threat_actors.date = incidents.date WHERE threat_actors.location = 'North America' AND incidents.date >= (CURRENT_DATE - INTERVAL '30' DAY) GROUP BY threat_actors.type;"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 재난 구호 프로그램에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), FocusArea TEXT, StartDate DATE, EndDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget) FROM Programs WHERE FocusArea = 'Disaster Relief' AND StartDate <= GETDATE() AND EndDate >= DATEADD(year, -2, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: \"산악\" 지역에서 데이터 사용량이 가장 낮은 하위 2개 주의 총 데이터 사용량을 찾으세요.\n\nDDL statements:\nCREATE TABLE state_usage (state VARCHAR(10), total_data_usage INT); INSERT INTO state_usage (state, total_data_usage) VALUES ('NV', 15000), ('UT', 12000), ('CO', 10000), ('WY', 8000), ('ID', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(total_data_usage) FROM (SELECT state, total_data_usage FROM state_usage WHERE state IN (SELECT state FROM state_usage WHERE total_data_usage = (SELECT MIN(total_data_usage) FROM state_usage) ORDER BY RAND() LIMIT 2) ORDER BY total_data_usage DESC) subquery GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2019년 아시아에서 가장 많은 티켓 판매를 기록한 록 콘서트는 어떤 것입니까?\n\nDDL statements:\nCREATE TABLE TicketSales (ConcertID INT, Title VARCHAR(255), Genre VARCHAR(255), Venue VARCHAR(255), Country VARCHAR(255), Year INT, TicketSales INT); INSERT INTO TicketSales VALUES (1, 'Woodstock', 'Rock', 'Bethel Woods Center for the Arts', 'USA', 1969, 500000); INSERT INTO TicketSales VALUES (2, 'Live Aid', 'Rock', 'Multiple', 'UK', 1985, 170000); INSERT INTO TicketSales VALUES (3, 'Reading Festival', 'Rock', 'Richfield Avenue', 'UK', 2019, 100000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Title, MAX(TicketSales) FROM TicketSales WHERE Genre = 'Rock' AND Country = 'Asia' AND Year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 2019년 나이지리아의 경제 다양화 투자 총액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE economic_diversification (project_id INT, country TEXT, project TEXT, investment INT, year INT); INSERT INTO economic_diversification (project_id, country, project, investment, year) VALUES (1, 'Nigeria', 'Renewable energy', 1000000, 2018), (2, 'Nigeria', 'Education', 1200000, 2019), (3, 'Nigeria', 'Healthcare', 1400000, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment) FROM economic_diversification WHERE country = 'Nigeria' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 우울증 회복 프로그램을 완료한 환자들의 평균 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, age INT, condition VARCHAR(50), country VARCHAR(50)); INSERT INTO patients (patient_id, age, condition, country) VALUES (1, 35, 'Depression', 'Canada'); CREATE TABLE recovery_program (program_id INT, patient_id INT, completion_date DATE); INSERT INTO recovery_program (program_id, patient_id, completion_date) VALUES (1, 1, '2020-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(patients.age) FROM patients JOIN recovery_program ON patients.patient_id = recovery_program.patient_id WHERE patients.condition = 'Depression' AND patients.country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 시골 보건 시스템에서 이동 진료소를 제외한 고유한 보건 시설 유형을 나열하세요.\n\nDDL statements:\nCREATE TABLE Hospitals (ID INT, Name TEXT, Location TEXT, Type TEXT); INSERT INTO Hospitals VALUES (1, 'Rural General Hospital', 'Smalltown', 'Hospital'); INSERT INTO Hospitals VALUES (2, 'Rural Health Clinic', 'Village', 'Clinic'); INSERT INTO Hospitals VALUES (3, 'Mobile Medical Unit', 'Rural Area', 'Clinic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT Type FROM Hospitals WHERE Type != 'Mobile Clinic';"
    },
    {
        "instruction": "입력 텍스트: corporate' 부서에 있는 변호사들의 최대 청구 요율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE attorneys (id INT, name VARCHAR(50), department VARCHAR(50), billing_rate DECIMAL(5,2)); INSERT INTO attorneys (id, name, department, billing_rate) VALUES (1, 'John Doe', 'corporate', 400.00), (2, 'Jane Smith', 'corporate', 450.00), (3, 'Bob Johnson', 'litigation', 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(billing_rate) FROM attorneys WHERE department = 'corporate';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 댐들의 최대 유수량을 댐 유형과 저수지 용량별로 분류하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Dams (id INT, state VARCHAR(2), dam_type VARCHAR(10), reservoir_capacity FLOAT, water_flow_rate FLOAT); INSERT INTO Dams (id, state, dam_type, reservoir_capacity, water_flow_rate) VALUES (1, 'CA', 'Concrete', 1000000, 5000), (2, 'CA', 'Earth', 500000, 3000), (3, 'CA', 'Rockfill', 800000, 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dam_type, reservoir_capacity, MAX(water_flow_rate) FROM Dams WHERE state = 'CA' GROUP BY dam_type, reservoir_capacity;"
    },
    {
        "instruction": "입력 텍스트: 일본이 발사한 위성은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Satellite_Launches (Launch_ID INT, Country VARCHAR(50), Satellite_Name VARCHAR(50), Launch_Year INT, PRIMARY KEY (Launch_ID)); INSERT INTO Satellite_Launches (Launch_ID, Country, Satellite_Name, Launch_Year) VALUES (1, 'Japan', 'H-II Transfer Vehicle-7', 2015), (2, 'Japan', 'EGS', 2020), (3, 'Japan', 'KhalifaSat', 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Satellite_Launches WHERE Country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 건강 보험 정책에 대한 평균 청구 금액이 가장 높은 상위 3개 도시를 확인하세요.\n\nDDL statements:\nCREATE TABLE claims (claim_id INT, policy_id INT, claim_amount DECIMAL(10,2), city VARCHAR(50), policy_type VARCHAR(50)); CREATE TABLE policies (policy_id INT, policy_holder_id INT, policy_type VARCHAR(50), issue_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.city, AVG(claim_amount) FROM claims c JOIN policies p ON c.policy_id = p.policy_id WHERE policy_type = 'health' GROUP BY c.city ORDER BY AVG(claim_amount) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 북극해의 최소 표면 염분을 구하세요.\n\nDDL statements:\nCREATE TABLE ocean_salinity (id INT, location TEXT, salinity REAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(salinity) FROM ocean_salinity WHERE location = 'Arctic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 역물류 분야에서 'VendorW'의 가장 이른 거래 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE Vendors (VendorID VARCHAR(20), VendorName VARCHAR(20)); INSERT INTO Vendors (VendorID, VendorName) VALUES ('X', 'VendorX'), ('W', 'VendorW'); CREATE TABLE ReverseLogisticsTransactions (TransactionID INT, VendorID VARCHAR(20), TransactionStatus VARCHAR(20), TransactionDate DATE); INSERT INTO ReverseLogisticsTransactions (TransactionID, VendorID, TransactionStatus, TransactionDate) VALUES (4, 'W', 'Returned', '2022-01-04');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(ReverseLogisticsTransactions.TransactionDate) AS EarliestTransactionDate FROM ReverseLogisticsTransactions JOIN Vendors ON ReverseLogisticsTransactions.VendorID = Vendors.VendorID WHERE Vendors.VendorName = 'VendorW';"
    },
    {
        "instruction": "입력 텍스트: 2020년 케냐에서 여성이 주도하는 농업 프로젝트가 받은 자금의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Agricultural_Projects (Project_ID INT, Project_Name TEXT, Location TEXT, Funding_Received DECIMAL, Led_By TEXT, Year INT); INSERT INTO Agricultural_Projects (Project_ID, Project_Name, Location, Funding_Received, Led_By, Year) VALUES (1, 'Precision Farming Initiative', 'Kenya', 50000, 'Women', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Funding_Received) FROM Agricultural_Projects WHERE Led_By = 'Women' AND Year = 2020 AND Location = 'Kenya';"
    },
    {
        "instruction": "입력 텍스트: 자동차 산업에서 \"Tesla\" 브랜드를 언급한 독일 내 게시물의 지난 달 동안의 좋아요와 댓글 수의 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE posts (id INT, user_id INT, brand_mentioned VARCHAR(255), likes INT, comments INT, post_time DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(likes + comments) FROM posts WHERE brand_mentioned = 'Tesla' AND industry = 'automotive' AND country = 'Germany' AND post_time > DATE_SUB(NOW(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 베테랑으로 식별되는 직원들의 최대 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), VeteranStatus VARCHAR(10), Salary INT); INSERT INTO Employees (EmployeeID, Gender, VeteranStatus, Salary) VALUES (1, 'Male', 'Veteran', 80000); INSERT INTO Employees (EmployeeID, Gender, VeteranStatus, Salary) VALUES (2, 'Female', 'Non-veteran', 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Salary) FROM Employees WHERE VeteranStatus = 'Veteran';"
    },
    {
        "instruction": "입력 텍스트: CompanyZ'가 2017년부터 2019년 사이에 진행한 임상 시험은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE sponsor_trials(sponsor_name TEXT, trial_id INT, trial_year INT); INSERT INTO sponsor_trials(sponsor_name, trial_id, trial_year) VALUES('CompanyZ', 1, 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sponsor_trials WHERE sponsor_name = 'CompanyZ' AND trial_year BETWEEN 2017 AND 2019;"
    },
    {
        "instruction": "입력 텍스트: 데이터셋 전체에서 'Organic Cotton'과 'Recycled Polyester'를 제외한 각 재료가 사용된 횟수를 가장 많이 사용된 것부터 가장 적게 사용된 순으로 보여주세요.\n\nDDL statements:\nCREATE TABLE Materials (Material VARCHAR(50), Quantity INT);INSERT INTO Materials (Material, Quantity) VALUES ('Organic Cotton', 5000), ('Recycled Polyester', 2500), ('Hemp', 1500), ('Tencel', 1800), ('Organic Silk', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Material, SUM(Quantity) as TotalQuantity FROM Materials WHERE Material NOT IN ('Organic Cotton', 'Recycled Polyester') GROUP BY Material ORDER BY TotalQuantity DESC;"
    },
    {
        "instruction": "입력 텍스트: 금융 부문에서 발견된 가장 흔한 취약점 유형 상위 5가지는 무엇인가요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, sector VARCHAR(255), vulnerability VARCHAR(255)); INSERT INTO vulnerabilities (id, sector, vulnerability) VALUES (1, 'finance', 'SQL injection'), (2, 'finance', 'Cross-site scripting'), (3, 'finance', 'Buffer overflow'), (4, 'finance', 'Code injection'), (5, 'finance', 'Path traversal');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vulnerability, COUNT(*) as count FROM vulnerabilities WHERE sector = 'finance' GROUP BY vulnerability ORDER BY count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 모든 지속 가능한 재료 유형의 평균 생산 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE materials (material_id INT, material_name VARCHAR(50), production_cost DECIMAL(10,2)); INSERT INTO materials (material_id, material_name, production_cost) VALUES (1, 'Organic Cotton', 2.50), (2, 'Recycled Polyester', 3.25), (3, 'Hemp', 1.80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_cost) FROM materials WHERE material_name IN ('Organic Cotton', 'Recycled Polyester', 'Hemp');"
    },
    {
        "instruction": "입력 텍스트: 2020년 EU ETS에서의 평균 탄소 가격(€/톤)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE eu_ets (id INT, date DATE, price FLOAT); INSERT INTO eu_ets (id, date, price) VALUES (1, '2020-01-01', 25.3), (2, '2020-01-02', 26.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM eu_ets WHERE date BETWEEN '2020-01-01' AND '2020-12-31';"
    },
    {
        "instruction": "입력 텍스트: 두 개 이상의 국가들이 공동으로 수행한 정보 작전들과 그들의 주요 목표, 그리고 각 작전에 참여한 인원 수를 조사합니다.\n\nDDL statements:\nCREATE TABLE joint_operations (country1 VARCHAR(255), country2 VARCHAR(255), operation_name VARCHAR(255), operation_date DATE, primary_objective VARCHAR(255), personnel_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country1, country2, primary_objective, COUNT(*) as num_personnel FROM joint_operations GROUP BY country1, country2, primary_objective;"
    },
    {
        "instruction": "입력 텍스트: 유기농 화장품 라인에서 립스틱의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Organic_Cosmetics (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), revenue DECIMAL(10,2)); INSERT INTO Organic_Cosmetics (product_id, product_name, category, price, revenue) VALUES (1, 'Lipstick 1', 'Lipsticks', 15.99, 0), (2, 'Lipstick 2', 'Lipsticks', 15.99, 0), (3, 'Lipstick 3', 'Lipsticks', 18.99, 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM Organic_Cosmetics WHERE category = 'Lipsticks';"
    },
    {
        "instruction": "입력 텍스트: 모든 오염 방지 계획과 그 완료 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE pollution_control_initiatives (initiative_id INT, name TEXT, start_date DATE, completion_date DATE); INSERT INTO pollution_control_initiatives (initiative_id, name, start_date, completion_date) VALUES (1, 'Project A', '2018-01-01', '2019-01-01'), (2, 'Project B', '2019-07-01', '2020-07-01'), (3, 'Project C', '2020-03-15', '2021-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, completion_date FROM pollution_control_initiatives;"
    },
    {
        "instruction": "입력 텍스트: 인도와 브라질의 고객들이 진행한 거래의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10,2), country VARCHAR(50)); INSERT INTO transactions (id, customer_id, amount, country) VALUES (1, 101, 500.00, 'India'), (2, 102, 350.00, 'Brazil'), (3, 103, 700.00, 'India'), (4, 104, 600.00, 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM transactions WHERE country IN ('India', 'Brazil');"
    },
    {
        "instruction": "입력 텍스트: 각 회원의 운동 중 평균 심박수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE wearable_metrics (member_id INT, heart_rate INT, workout_date DATE, workout_duration TIME); INSERT INTO wearable_metrics (member_id, heart_rate, workout_date, workout_duration) VALUES (1, 120, '2022-01-01', '01:00:00'), (1, 130, '2022-01-02', '01:30:00'), (2, 140, '2022-01-01', '02:00:00'), (2, 150, '2022-01-03', '01:15:00'), (3, 160, '2022-01-02', '01:00:00'), (3, 170, '2022-01-03', '01:30:00'), (3, 180, '2022-01-04', '02:00:00'), (4, 190, '2022-01-04', '01:15:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT member_id, AVG(heart_rate) FROM wearable_metrics GROUP BY member_id;"
    },
    {
        "instruction": "입력 텍스트: 북부' 지역에서 휠체어 접근 가능한 모든 노선을 나열하세요.\n\nDDL statements:\nCREATE TABLE Routes (id INT, region VARCHAR(10), wheelchair_accessible BOOLEAN); INSERT INTO Routes (id, region, wheelchair_accessible) VALUES (1, 'north', true), (2, 'north', false), (3, 'south', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Routes.id, Routes.region FROM Routes WHERE Routes.region = 'north' AND Routes.wheelchair_accessible = true;"
    },
    {
        "instruction": "입력 텍스트: 도시별 재생 가능 에너지 프로젝트의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE renewable_energy_projects (project_id INT, project_name VARCHAR(50), city VARCHAR(50), installed_capacity FLOAT); INSERT INTO renewable_energy_projects (project_id, project_name, city, installed_capacity) VALUES (1, 'Solar Farm 1', 'CityA', 10000.0), (2, 'Wind Farm 1', 'CityB', 15000.0), (3, 'Hydro Plant 1', 'CityA', 20000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(installed_capacity) FROM renewable_energy_projects GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: Paintings' 테이블에서 'Guernica'라는 그림을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Paintings (PaintingID INT, Title VARCHAR(50), ArtistID INT, YearCreated INT); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (1, 'Starry Night', 1, 1889); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (2, 'Guernica', 2, 1937);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Paintings WHERE Title = 'Guernica';"
    },
    {
        "instruction": "입력 텍스트: 큐비즘' 양식으로 작업한 화가들의 이름과 국적은 무엇인가요?\n\nDDL statements:\nCREATE TABLE artists (id INT, name TEXT, nationality TEXT); INSERT INTO artists (id, name, nationality) VALUES (1, 'Picasso', 'Spanish'), (2, 'Braque', 'French'), (3, 'Gris', 'Spanish'); CREATE TABLE artwork_styles (id INT, artwork_id INT, style TEXT); INSERT INTO artwork_styles (id, artwork_id, style) VALUES (1, 1, 'Cubism'), (2, 2, 'Cubism'), (3, 3, 'Futurism');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artists.name, artists.nationality FROM artists INNER JOIN artwork_styles ON artists.id = (SELECT artist_id FROM artworks WHERE artwork_styles.id = artwork_id AND style = 'Cubism' LIMIT 1) WHERE artwork_styles.style = 'Cubism';"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드가 국가별로 협력하는 순환 공급망 파트너는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Brands (id INT, brand VARCHAR(255), country VARCHAR(255)); INSERT INTO Brands (id, brand, country) VALUES (1, 'BrandA', 'USA'), (2, 'BrandB', 'Canada'), (3, 'BrandC', 'Mexico'); CREATE TABLE CircularSupplyChain (id INT, brand_id INT, partner_id INT, partner VARCHAR(255), country VARCHAR(255)); INSERT INTO CircularSupplyChain (id, brand_id, partner_id, partner, country) VALUES (1, 1, 1, 'Partner1', 'USA'), (2, 1, 2, 'Partner2', 'USA'), (3, 2, 3, 'Partner3', 'Canada'), (4, 2, 4, 'Partner4', 'Canada'), (5, 3, 5, 'Partner5', 'Mexico'), (6, 3, 6, 'Partner6', 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country, b.brand, COUNT(DISTINCT c.partner_id) AS partner_count FROM CircularSupplyChain c JOIN Brands b ON c.brand_id = b.id GROUP BY c.country, b.brand;"
    },
    {
        "instruction": "입력 텍스트: bike_stations 테이블에서 도시 지역에 위치한 정류장 당 평균 자전거 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE bike_stations (id INT, location VARCHAR(20), num_bikes INT, urban VARCHAR(5)); INSERT INTO bike_stations (id, location, num_bikes, urban) VALUES (1, 'Station A', 20, 'Yes'), (2, 'Station B', 30, 'Yes'), (3, 'Station C', 15, 'No'), (4, 'Station D', 25, 'No');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_bikes) FROM bike_stations WHERE urban = 'Yes';"
    },
    {
        "instruction": "입력 텍스트: ID 5인 직원의 이메일을 'new.email@example.com'으로 변경하세요\n\nDDL statements:\nCREATE TABLE staff_members (staff_id INT, email VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE staff_members SET email = 'new.email@example.com' WHERE staff_id = 5;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 주별로 접수된 정신 건강 동등성 불만 사항은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE MentalHealthParity (ComplaintID INT, State VARCHAR(25), FilingDate DATE); INSERT INTO MentalHealthParity (ComplaintID, State, FilingDate) VALUES (1, 'California', '2020-01-01'), (2, 'New York', '2020-02-01'), (3, 'Texas', '2020-03-01'), (4, 'Florida', '2020-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, COUNT(*) as ComplaintCount FROM MentalHealthParity WHERE YEAR(FilingDate) = 2020 GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 1일에 뉴욕에 거주하는 고객이 진행한 모든 거래 내역을 나열하세요.\n\nDDL statements:\nCREATE TABLE transaction (id INT, customer_id INT, transaction_date DATE, amount DECIMAL(10, 2)); INSERT INTO transaction (id, customer_id, transaction_date, amount) VALUES (1, 1, '2022-01-01', 100.00), (2, 3, '2022-01-02', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM transaction WHERE transaction_date = '2022-01-01' AND customer_id IN (SELECT id FROM customer WHERE address LIKE 'New York%');"
    },
    {
        "instruction": "입력 텍스트: 각 지역의 평균 용존 산소 농도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE region (region_id INT, region_name TEXT); INSERT INTO region (region_id, region_name) VALUES (1, 'North Atlantic'), (2, 'South Atlantic'), (3, 'Indian Ocean'); CREATE TABLE measurement (measurement_id INT, region_id INT, dissolved_oxygen FLOAT); INSERT INTO measurement (measurement_id, region_id, dissolved_oxygen) VALUES (1, 1, 6.5), (2, 1, 6.8), (3, 2, 7.1), (4, 2, 6.9), (5, 3, 7.3), (6, 3, 7.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region_id, AVG(dissolved_oxygen) FROM measurement GROUP BY region_id;"
    },
    {
        "instruction": "입력 텍스트: 올해 영어학과 소속 교수진 중 'Journal of English Language and Literature'에 게재한 인원은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Publications (PublicationID INT, Title VARCHAR(100), Author VARCHAR(50), Year INT, Journal VARCHAR(50), FacultyID INT); CREATE TABLE Faculty (FacultyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), Rank VARCHAR(10), Gender VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(p.FacultyID) as 'Number of Faculty Members' FROM Publications p JOIN Faculty f ON p.FacultyID = f.FacultyID WHERE f.Department = 'English' AND p.Journal = 'Journal of English Language and Literature' AND p.Year = YEAR(GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 노선별 버스 청소 간격의 최소 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE buses (id INT, route_id INT, clean_date DATE); INSERT INTO buses (id, route_id, clean_date) VALUES (1, 101, '2022-01-01'), (2, 102, '2022-01-02'), (3, 103, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT route_id, MIN(DATEDIFF('day', LAG(clean_date) OVER (PARTITION BY route_id ORDER BY clean_date), clean_date)) FROM buses GROUP BY route_id;"
    },
    {
        "instruction": "입력 텍스트: labor_unions' 및 'safety_records' 테이블에서 이름이 'C'로 시작하는 노조의 평균 안전 점수와 회원 수를 계산합니다.\n\nDDL statements:\nCREATE TABLE labor_unions (id INT, union_name VARCHAR(50), members INT); CREATE TABLE safety_records (id INT, union_id INT, safety_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(s.safety_score) AS avg_safety_score, AVG(l.members) AS avg_members FROM labor_unions l JOIN safety_records s ON l.id = s.union_id WHERE l.union_name LIKE 'C%';"
    },
    {
        "instruction": "입력 텍스트: 2019년 이후 아프리카에서 공정 무역 인증 제품의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, product_id INT, sale_date DATE, price DECIMAL(5,2), is_fair_trade BOOLEAN);INSERT INTO sales (sale_id, product_id, sale_date, price, is_fair_trade) VALUES (1, 1, '2019-01-01', 20.00, true), (2, 2, '2020-02-01', 30.00, false), (3, 3, '2021-03-01', 40.00, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) as total_revenue FROM sales WHERE is_fair_trade = true AND YEAR(sale_date) >= 2019 AND location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 2021년 9월 중 지중해에서의 모든 선박의 최대 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vessel_performance (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), speed FLOAT, location VARCHAR(50), timestamp DATETIME); INSERT INTO vessel_performance (id, name, type, speed, location, timestamp) VALUES (1, 'VesselG', 'Cargo', 18.2, 'Mediterranean Sea', '2021-09-01 10:00:00'), (2, 'VesselH', 'Tanker', 20.1, 'Mediterranean Sea', '2021-09-01 11:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(speed) FROM vessel_performance WHERE location = 'Mediterranean Sea' AND timestamp BETWEEN '2021-09-01' AND '2021-09-30';"
    },
    {
        "instruction": "입력 텍스트: 20세기에 전시된 작품들의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artworks (artwork_id INT, title VARCHAR(50), year_made INT, artist_id INT, price FLOAT); INSERT INTO Artworks (artwork_id, title, year_made, artist_id, price) VALUES (1, 'Still Life with Flowers', 1612, 1, 1000.0); ; CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), start_date DATE, end_date DATE, artwork_id INT); INSERT INTO Exhibitions (exhibition_id, exhibition_name, start_date, end_date, artwork_id) VALUES (1, 'Flower Exhibition', '2000-01-01', '2000-12-31', 1); ;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Exhibitions ON Artworks.artwork_id = Exhibitions.artwork_id WHERE Exhibitions.start_date BETWEEN '1900-01-01' AND '1999-12-31';"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 재료를 5개 이상 사용하는 회사들의 총 생산 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE companies (company_id INT, name TEXT, num_sustainable_materials INT, production_cost FLOAT); INSERT INTO companies (company_id, name, num_sustainable_materials, production_cost) VALUES (1, 'GreenFashions', 6, 15000); INSERT INTO companies (company_id, name, num_sustainable_materials, production_cost) VALUES (2, 'EcoFabrics', 3, 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production_cost) FROM companies WHERE num_sustainable_materials > 5;"
    },
    {
        "instruction": "입력 텍스트: 우주에서 가장 많은 우주인을 보유한 상위 3개국은 어디인가요?\n\nDDL statements:\nCREATE TABLE Astronauts (name TEXT, nationality TEXT, missions INTEGER); INSERT INTO Astronauts (name, nationality, missions) VALUES ('Neil Armstrong', 'USA', 2), ('Buzz Aldrin', 'USA', 2), ('Peggy Whitson', 'USA', 3), ('Yuri Gagarin', 'Russia', 1), ('Valentina Tereshkova', 'Russia', 2), ('Takao Doi', 'Japan', 2), ('Soichi Noguchi', 'Japan', 3), ('Sunita Williams', 'India', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT nationality, COUNT(*) AS missions_count FROM Astronauts GROUP BY nationality ORDER BY missions_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 남아프리카와 케냐의 양식장에서 생산된 해산물의 최대 생산량(톤 단위)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SeafoodSouthAfricaKenya (id INT, country VARCHAR(50), year INT, tons_produced INT); INSERT INTO SeafoodSouthAfricaKenya (id, country, year, tons_produced) VALUES (1, 'South Africa', 2020, 2000), (2, 'Kenya', 2020, 2100), (3, 'South Africa', 2020, 2200), (4, 'Kenya', 2020, 2300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(tons_produced) FROM SeafoodSouthAfricaKenya WHERE country IN ('South Africa', 'Kenya') AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 사용자들에 의해 가장 높은 평가를 받은 오픈 교육 자료는 무엇인가요?\n\nDDL statements:\nCREATE TABLE open_pedagogy (resource_id INT, rating INT, user_id INT); INSERT INTO open_pedagogy (resource_id, rating, user_id) VALUES (1, 5, 100), (2, 4, 100), (3, 3, 101), (4, 5, 102);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT resource_id, MAX(rating) as highest_rating FROM open_pedagogy GROUP BY resource_id ORDER BY highest_rating DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 회사의 모든 고유 부서를 나열하십시오.\n\nDDL statements:\nCREATE TABLE Employees (id INT, name VARCHAR(100), department VARCHAR(50), country VARCHAR(50)); INSERT INTO Employees (id, name, department, country) VALUES (1, 'John Doe', 'IT', 'United States'), (2, 'Jane Smith', 'Marketing', 'Canada'), (3, 'Mike Johnson', 'IT', 'France'), (4, 'Sara Connor', 'HR', 'United States'), (5, 'David Brown', 'Finance', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT department FROM Employees;"
    },
    {
        "instruction": "입력 텍스트: 해당 연도별 작물 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE crops_year (id INT, name VARCHAR(50), year INT, production INT); INSERT INTO crops_year (id, name, year, production) VALUES (1, 'Rice', 2020, 5000), (2, 'Wheat', 2020, 7000), (3, 'Soybean', 2020, 3000), (4, 'Barley', 2020, 4000), (5, 'Rice', 2019, 6000), (6, 'Wheat', 2019, 8000), (7, 'Soybean', 2019, 4000), (8, 'Barley', 2019, 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, SUM(production) as total_production FROM crops_year GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: CarbonOffsetInitiatives' 테이블에서 'RegionC' 지역의 이니셔티브들의 총 탄소 상쇄량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE CarbonOffsetInitiatives (id INT, initiative_name VARCHAR(50), location VARCHAR(50), carbon_offset_tons INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(carbon_offset_tons) FROM CarbonOffsetInitiatives WHERE location = 'RegionC';"
    },
    {
        "instruction": "입력 텍스트: 어떤 공장에 직업 개발 프로그램에 참여하는 근로자가 없나요?\n\nDDL statements:\nCREATE TABLE factories(factory_id INT, name TEXT, location TEXT); CREATE TABLE workers(worker_id INT, name TEXT, salary DECIMAL, factory_id INT, program TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name FROM factories f LEFT JOIN workers w ON f.factory_id = w.factory_id WHERE w.program IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2020년도 국가별 공급망에서의 최소 및 최대 직원 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE SupplyChainEmployees (employee_count INT, country VARCHAR(255), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MIN(employee_count), MAX(employee_count) FROM SupplyChainEmployees WHERE year = 2020 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 영국에서 기술 뉴스를 선호하는 남성 및 여성 독자의 비율을 구하세요.\n\nDDL statements:\nCREATE TABLE readers (id INT, age INT, gender VARCHAR(10), country VARCHAR(50), news_preference VARCHAR(50)); INSERT INTO readers (id, age, gender, country, news_preference) VALUES (1, 35, 'Male', 'UK', 'Technology'), (2, 45, 'Female', 'UK', 'Technology');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, PERCENTAGE := (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM readers WHERE country = 'UK' AND news_preference = 'Technology')) percentage FROM readers WHERE country = 'UK' AND news_preference = 'Technology' GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에는 몇 개의 항구가 있습니까?\n\nDDL statements:\nCREATE TABLE ports (port_code CHAR(3), port_name VARCHAR(20)); INSERT INTO ports (port_code, port_name) VALUES ('LA', 'Los Angeles'), ('NY', 'New York'), ('MIA', 'Miami'), ('HOU', 'Houston'), ('SFO', 'San Francisco');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ports.port_code) as port_count FROM ports;"
    },
    {
        "instruction": "입력 텍스트: human_resources' 테이블에서 'Engineering' 부서에 몇 명의 직원이 근무하고 있나요?\n\nDDL statements:\nCREATE TABLE human_resources (id INT, name VARCHAR(50), role VARCHAR(50), department VARCHAR(50)); INSERT INTO human_resources (id, name, role, department) VALUES (1, 'John Doe', 'Manager', 'Human Resources'), (2, 'Jane Smith', 'Employee', 'Human Resources'), (3, 'Bob Johnson', 'Engineer', 'Engineering'), (4, 'Alice Williams', 'Engineer', 'Engineering');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM human_resources WHERE department = 'Engineering';"
    },
    {
        "instruction": "입력 텍스트: 로코코' 운동에서 만들어진 작품 중 가장 이른 해는 언제인가요?\n\nDDL statements:\nCREATE TABLE Artworks (id INT, creation_year INT, movement VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(creation_year) FROM Artworks WHERE movement = 'Rococo';"
    },
    {
        "instruction": "입력 텍스트: Platinum' 멤버십을 가진 모든 회원을 나열하시오.\n\nDDL statements:\nCREATE TABLE member_details (member_id INT, membership VARCHAR(10)); INSERT INTO member_details (member_id, membership) VALUES (1, 'Gold'), (2, 'Platinum'), (3, 'Silver'), (4, 'Platinum'), (5, 'Gold');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT member_id FROM member_details WHERE membership = 'Platinum';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 출신으로 기부 금액이 100달러를 초과하는 기부자들이 기부한 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, state TEXT, donation_amount DECIMAL); INSERT INTO donors (id, name, state, donation_amount) VALUES (1, 'John Doe', 'New York', 120.00), (2, 'Jane Smith', 'New York', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE state = 'New York' AND donation_amount > 100;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 캘리포니아 주에서 이루어진 탄소 배출 상쇄 프로그램의 평균 탄소 상쇄량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE carbon_offset_programs (id INT, name VARCHAR(50), state VARCHAR(50), offset_quantity INT, start_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(offset_quantity) FROM carbon_offset_programs WHERE state = 'California' AND start_year >= 2015;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 국가들의 1인당 최소 폐기물 발생량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE WasteGeneration (country VARCHAR(255), waste_generation_kg_per_capita DECIMAL(5,2), region VARCHAR(255)); INSERT INTO WasteGeneration (country, waste_generation_kg_per_capita, region) VALUES ('Nigeria', 0.7, 'Africa'), ('Egypt', 1.9, 'Africa'), ('South Africa', 2.8, 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(waste_generation_kg_per_capita) FROM WasteGeneration WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 비건 요리 중에서 음식 비용이 가장 높은 메뉴 아이템은 무엇인가요?\n\nDDL statements:\nCREATE TABLE menu_items (menu_item_id INT, dish_type VARCHAR(255), food_cost DECIMAL(5,2)); INSERT INTO menu_items (menu_item_id, dish_type, food_cost) VALUES (1, 'Vegan', 3.50), (2, 'Vegetarian', 2.50), (3, 'Vegan', 4.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dish_type, MAX(food_cost) FROM menu_items WHERE dish_type = 'Vegan';"
    },
    {
        "instruction": "입력 텍스트: 각 연령대별 평균 티켓 가격은 얼마였나요?\n\nDDL statements:\nCREATE TABLE tickets (ticket_id INT, age_group VARCHAR(10), price DECIMAL(5,2)); INSERT INTO tickets (ticket_id, age_group, price) VALUES (1, 'Adult', 20.00), (2, 'Child', 15.00), (3, 'Senior', 10.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT age_group, AVG(price) as avg_price FROM tickets GROUP BY age_group;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 건축 실천 사례와 그 설명을 나열하세요\n\nDDL statements:\nCREATE TABLE sustainable_practices (id INT, practice VARCHAR(50), description TEXT); INSERT INTO sustainable_practices (id, practice, description) VALUES (1, 'Green Roofs', 'Roofs covered with vegetation'), (2, 'Solar Panels', 'Roofs equipped with solar panels'), (3, 'Rainwater Harvesting', 'Collecting and storing rainwater for later use');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT practice, description FROM sustainable_practices;"
    },
    {
        "instruction": "입력 텍스트: 2022년도 각 의류 카테고리별 총 수익의 백분율을 구하세요.\n\nDDL statements:\nCREATE TABLE category_revenue (category VARCHAR(255), sale_date DATE, revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, (SUM(revenue) / (SELECT SUM(revenue) FROM category_revenue WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31')) * 100 FROM category_revenue WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 인도와 독일에 위치한 모든 IoT 센서를 나열합니다.\n\nDDL statements:\nCREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), location VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, location, Farm_id) VALUES (1, 'Soil Moisture', 'India', 1), (2, 'Temperature', 'Germany', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sensor_type FROM IoT_Sensors WHERE location IN ('India', 'Germany');"
    },
    {
        "instruction": "입력 텍스트: 2021년에 라틴 아메리카 및 카리브해 국가들에게 기후 적응 프로젝트를 위해 제공된 평균 기후 재정은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (country VARCHAR(50), year INT, sector VARCHAR(50), adaptation BOOLEAN, amount FLOAT); INSERT INTO climate_finance (country, year, sector, adaptation, amount) VALUES ('Brazil', 2021, 'Adaptation', true, 5000000), ('Colombia', 2021, 'Adaptation', true, 4000000), ('Peru', 2021, 'Adaptation', true, 3000000), ('Argentina', 2021, 'Adaptation', true, 6000000), ('Mexico', 2021, 'Adaptation', true, 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM climate_finance WHERE country IN ('Brazil', 'Colombia', 'Peru', 'Argentina', 'Mexico') AND year = 2021 AND adaptation = true;"
    },
    {
        "instruction": "입력 텍스트: 어떤 양식장이 '캐나다'에 위치해 있나요?\n\nDDL statements:\nCREATE TABLE Aquaculture_farms (id INT, name TEXT, country TEXT); INSERT INTO Aquaculture_farms (id, name, country) VALUES (1, 'Farm A', 'Denmark'), (2, 'Farm B', 'Canada'), (3, 'Farm C', 'Japan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Aquaculture_farms WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: training_programs'라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE training_programs (id INT PRIMARY KEY, program_name VARCHAR(50), start_date DATE, end_date DATE, department VARCHAR(50), trainer VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE training_programs (id INT PRIMARY KEY, program_name VARCHAR(50), start_date DATE, end_date DATE, department VARCHAR(50), trainer VARCHAR(50));"
    },
    {
        "instruction": "입력 텍스트: 브로드밴드 인터넷 다운로드 속도가 가장 빠른 상위 3개 국가를 나열하세요.\n\nDDL statements:\nCREATE TABLE network_infrastructure (country VARCHAR(20), download_speed FLOAT); INSERT INTO network_infrastructure (country, download_speed) VALUES ('USA', 100), ('Canada', 120), ('Mexico', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, download_speed FROM network_infrastructure ORDER BY download_speed DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기와 3분기에 등록한 자원봉사자 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE volunteer_registration (id INT, name VARCHAR(50), registration_date DATE); INSERT INTO volunteer_registration (id, name, registration_date) VALUES (1, 'Alice', '2023-01-05'); INSERT INTO volunteer_registration (id, name, registration_date) VALUES (2, 'Bob', '2023-02-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(QUARTER FROM registration_date) as quarter, COUNT(DISTINCT name) as volunteers_joined FROM volunteer_registration WHERE registration_date BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY quarter HAVING quarter IN (1, 3);"
    },
    {
        "instruction": "입력 텍스트: 플랫폼에서 동남아시아 출신 크리에이터들이 제작한 비디오의 총 시청 시간은 몇 분입니까?\n\nDDL statements:\nCREATE TABLE Videos (id INT, title VARCHAR(255), content_creator_name VARCHAR(100), content_creator_region VARCHAR(50), length INT); INSERT INTO Videos (id, title, content_creator_name, content_creator_region, length) VALUES (1, 'Video1', 'Creator1', 'Southeast Asia', 12), (2, 'Video2', 'Creator2', 'Europe', 15), (3, 'Video3', 'Creator3', 'Southeast Asia', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(length) FROM Videos WHERE content_creator_region = 'Southeast Asia';"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 인프라 구조에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Budget (Year INT, Category VARCHAR(255), Amount INT); INSERT INTO Budget (Year, Category, Amount) VALUES (2020, 'Education', 5000000), (2020, 'Infrastructure', 10000000), (2021, 'Education', 6000000), (2021, 'Infrastructure', 12000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Amount) FROM Budget WHERE Year = 2020 AND Category = 'Infrastructure';"
    },
    {
        "instruction": "입력 텍스트: 소셜 미디어 데이터베이스에서 게시물 수가 가장 많은 상위 3개 국가를 나열하세요.\n\nDDL statements:\nCREATE TABLE user (user_id INT, username VARCHAR(20), posts INT, country VARCHAR(20)); INSERT INTO user (user_id, username, posts, country) VALUES (1, 'user1', 10, 'United States'), (2, 'user2', 20, 'Canada'), (3, 'user3', 30, 'United States'), (4, 'user4', 40, 'Mexico'), (5, 'user5', 50, 'Canada'), (6, 'user6', 60, 'Brazil'), (7, 'user7', 70, 'Brazil'), (8, 'user8', 80, 'Brazil'), (9, 'user9', 90, 'India'), (10, 'user10', 100, 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(posts) as total_posts FROM user GROUP BY country ORDER BY total_posts DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 동쪽' 지역에 있는 재생 에너지 농장 중 효율이 30% 이상인 곳은 어디인가요?\n\nDDL statements:\nCREATE TABLE wind_farms (id INT, name VARCHAR(50), region VARCHAR(50), capacity FLOAT, efficiency FLOAT); INSERT INTO wind_farms (id, name, region, capacity, efficiency) VALUES (1, 'Windfarm A', 'East', 120.3, 0.32); CREATE TABLE solar_farms (id INT, name VARCHAR(50), region VARCHAR(50), capacity FLOAT, efficiency FLOAT); INSERT INTO solar_farms (id, name, region, capacity, efficiency) VALUES (1, 'Solarfarm A', 'East', 180.5, 0.35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, efficiency FROM wind_farms WHERE region = 'East' UNION SELECT name, efficiency FROM solar_farms WHERE region = 'East' HAVING efficiency > 0.3;"
    },
    {
        "instruction": "입력 텍스트: 각 양식장에서 기록된 용존 산소 농도의 최대 수치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Farm (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE Measurement (id INT, farm_id INT, dissolved_oxygen FLOAT, timestamp TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, MAX(m.dissolved_oxygen) FROM Farm f JOIN Measurement m ON f.id = m.farm_id GROUP BY f.name;"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 호주와 뉴질랜드에서 판매된 '어드벤처' 장르 게임의 총 수익과 판매된 게임 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE game_sales (id INT, game_name VARCHAR(50), genre VARCHAR(50), sale_date DATE, revenue DECIMAL(10,2), quantity INT); INSERT INTO game_sales (id, game_name, genre, sale_date, revenue, quantity) VALUES (1, 'Game G', 'Adventure', '2022-07-10', 30.00, 2); INSERT INTO game_sales (id, game_name, genre, sale_date, revenue, quantity) VALUES (2, 'Game H', 'Adventure', '2022-07-15', 50.00, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(game_sales.revenue) AS total_revenue, SUM(game_sales.quantity) AS num_games_sold FROM game_sales WHERE game_sales.genre = 'Adventure' AND game_sales.sale_date >= DATEADD(month, -3, GETDATE()) AND (game_sales.country = 'Australia' OR game_sales.country = 'New Zealand');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 각 멤버십 유형별 평균 운동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, name TEXT, membership_type TEXT, state TEXT); CREATE TABLE workouts (id INT, user_id INT, duration INT); INSERT INTO users (id, name, membership_type, state) VALUES (1, 'John Doe', 'Premium', 'NY'), (2, 'Jane Smith', 'Basic', 'CA'); INSERT INTO workouts (id, user_id, duration) VALUES (1, 1, 60), (2, 1, 30), (3, 2, 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT users.membership_type, AVG(workouts.duration) AS avg_duration FROM users JOIN workouts ON users.id = workouts.user_id WHERE users.state = 'NY' GROUP BY users.membership_type;"
    },
    {
        "instruction": "입력 텍스트: 유기농과 비유기농 과일을 모두 공급한 공급업체 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, supplier_name TEXT);CREATE TABLE inventory (product_id INT, product_name TEXT, category TEXT, is_organic BOOLEAN);INSERT INTO suppliers VALUES (1, 'Supplier A'), (2, 'Supplier B'), (3, 'Supplier C'), (4, 'Supplier D');INSERT INTO inventory VALUES (100, 'Apples', 'Fruits', TRUE), (101, 'Bananas', 'Fruits', FALSE), (102, 'Oranges', 'Fruits', TRUE), (103, 'Pears', 'Fruits', FALSE), (104, 'Grapes', 'Fruits', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT supplier_name FROM inventory INNER JOIN suppliers ON TRUE WHERE category = 'Fruits' AND is_organic IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 2022년 뉴욕 주의 매립지 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfill_capacity (state VARCHAR(20), year INT, capacity_cubic_meters BIGINT); INSERT INTO landfill_capacity (state, year, capacity_cubic_meters) VALUES ('New York', 2021, 9876543), ('New York', 2023, 10567890);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT capacity_cubic_meters FROM landfill_capacity WHERE state = 'New York' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 2021년 10월 1일에 1600m³ 이상의 폐수를 처리한 폐수 처리장은 어디인가요?\n\nDDL statements:\nCREATE TABLE WastewaterTreatment (Id INT, Plant VARCHAR(50), Wastewater DECIMAL(5,2), Date DATE); INSERT INTO WastewaterTreatment (Id, Plant, Wastewater, Date) VALUES (1, 'Denver Plant', 1800.5, '2021-10-01'); INSERT INTO WastewaterTreatment (Id, Plant, Wastewater, Date) VALUES (2, 'Colorado Springs Plant', 1400.3, '2021-10-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Plant, SUM(Wastewater) FROM WastewaterTreatment WHERE Date = '2021-10-01' GROUP BY Plant HAVING SUM(Wastewater) > 1600;"
    },
    {
        "instruction": "입력 텍스트: 2018년에 개봉하고 등급이 8 이상인 영화의 총 제작 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MovieBudgets (movie_id INT, release_date DATE, production_budget DECIMAL(7,2)); INSERT INTO MovieBudgets (movie_id, release_date, production_budget) VALUES (1, '2018-01-01', 25000000.00), (2, '2019-05-15', 18000000.00), (3, '2018-09-22', 12000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production_budget) FROM MovieBudgets INNER JOIN Movies ON MovieBudgets.movie_id = Movies.movie_id WHERE release_date >= '2018-01-01' AND release_date < '2019-01-01' AND rating >= 8;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 CrossFit 수업에 참여한 고유 회원 수와 총 운동 횟수를 나열하세요.\n\nDDL statements:\nCREATE TABLE workouts (id INT, member_id INT, workout_type VARCHAR(20), workout_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT id) as total_members, COUNT(*) as total_workouts FROM workouts WHERE workout_type = 'CrossFit' AND workout_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 2022년 기준으로 가장 오래 지속된 우주 임무를 나열하세요.\n\nDDL statements:\nCREATE TABLE SpaceMissions (id INT, mission_name VARCHAR(255), country VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO SpaceMissions (id, mission_name, country, start_date, end_date) VALUES (1, 'International Space Station', 'United States', '1998-11-02', '2022-02-28'); INSERT INTO SpaceMissions (id, mission_name, country, start_date, end_date) VALUES (2, 'Apollo 17', 'United States', '1972-12-07', '1972-12-19');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name, TIMESTAMPDIFF(YEAR, start_date, COALESCE(end_date, CURDATE())) as 'Mission Duration (Years)' FROM SpaceMissions WHERE end_date IS NULL OR end_date >= '2022-01-01' ORDER BY 'Mission Duration (Years)' DESC"
    },
    {
        "instruction": "입력 텍스트: 유기농 화장품을 가장 많이 구매한 상위 3명의 고객 이름과 국가를 가져오세요.\n\nDDL statements:\nCREATE TABLE customers (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE purchases (id INT, customer_id INT, product_id INT, quantity INT); CREATE TABLE products (id INT, name VARCHAR(50), organic BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customers.name, customers.country FROM customers JOIN purchases ON customers.id = purchases.customer_id JOIN products ON purchases.product_id = products.id WHERE products.organic = TRUE GROUP BY customers.id ORDER BY SUM(purchases.quantity) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 40세 이상의 남성 팬 수를 구하세요.\n\nDDL statements:\nCREATE TABLE fans (id INT PRIMARY KEY, name VARCHAR(100), age INT, gender VARCHAR(10), favorite_team VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM fans WHERE gender = 'Male' AND age > 40;"
    },
    {
        "instruction": "입력 텍스트: 평균 이상의 온도 상승을 보인 유전 연구 실험을 확인하세요.\n\nDDL statements:\nCREATE SCHEMA if not exists genetics;CREATE TABLE if not exists genetics.experiments (id INT, experiment_name VARCHAR(255), temperature_delta INT); INSERT INTO genetics.experiments (id, experiment_name, temperature_delta) VALUES (1, 'CRISPR-Cas9', 15), (2, 'Gene Editing', 22), (3, 'Genetic Fusion', 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT experiment_name, temperature_delta FROM genetics.experiments WHERE temperature_delta > (SELECT AVG(temperature_delta) FROM genetics.experiments);"
    },
    {
        "instruction": "입력 텍스트: 친환경 데님 재킷'이 각 매장별로 판매된 총 수량은 무엇이며, 가장 많이 판매된 순으로 순위를 매겨주세요?\n\nDDL statements:\nCREATE TABLE Stores (store_id INT, store_name VARCHAR(50)); INSERT INTO Stores VALUES (1, 'Store A'), (2, 'Store B'), (3, 'Store C'); CREATE TABLE Sales (sale_id INT, product_name VARCHAR(50), store_id INT, quantity_sold INT); INSERT INTO Sales VALUES (1, 'Eco-Friendly Denim Jacket', 1, 30), (2, 'Eco-Friendly Denim Jacket', 2, 45), (3, 'Eco-Friendly Denim Jacket', 3, 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT store_id, store_name, SUM(quantity_sold) as total_sold FROM Sales JOIN Stores ON Sales.store_id = Stores.store_id WHERE product_name = 'Eco-Friendly Denim Jacket' GROUP BY store_id, store_name ORDER BY total_sold DESC;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 있는 공장들의 평균 배출 수준은 얼마인가요?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT, emissions INT); INSERT INTO factories (factory_id, name, location, emissions) VALUES (1, 'Factory A', 'Texas', 120), (2, 'Factory B', 'California', 100), (3, 'Factory C', 'Texas', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(f.emissions) FROM factories f WHERE f.location = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 각 대학원생이 받은 연구 보조금의 고유 개수와 각각의 금액을 받은 총액이 많은 순으로 내림차순으로 확인하세요.\n\nDDL statements:\nCREATE TABLE grad_students (id INT, name VARCHAR(50));CREATE TABLE research_grants (id INT, grant_id INT, amount INT, student_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT rg.student_id, COUNT(DISTINCT rg.grant_id) AS num_grants, SUM(rg.amount) AS total_amount FROM research_grants rg GROUP BY rg.student_id ORDER BY total_amount DESC;"
    },
    {
        "instruction": "입력 텍스트: 안전 사고가 한 번도 발생하지 않은 선박을 찾으세요.\n\nDDL statements:\nCREATE TABLE Vessels (ID INT, Name VARCHAR(50), Type VARCHAR(50)); CREATE TABLE SafetyIncidents (ID INT, VesselID INT, Location VARCHAR(50), IncidentType VARCHAR(50)); INSERT INTO Vessels (ID, Name, Type) VALUES (1, 'Ocean Titan', 'Cargo'); INSERT INTO SafetyIncidents (ID, VesselID, Location, IncidentType) VALUES (1, 1, 'Caribbean Sea', 'Collision'); INSERT INTO SafetyIncidents (ID, VesselID, Location, IncidentType) VALUES (2, 2, 'Caribbean Sea', 'Grounding');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.ID, v.Name, v.Type FROM Vessels v LEFT JOIN SafetyIncidents si ON v.ID = si.VesselID WHERE si.ID IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 도시 지역에 있는 제공자들의 평균 정신 건강 동등 점수는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Areas (area_id INT, area_type TEXT); CREATE TABLE Providers (provider_id INT, provider_parity_score INT, area_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(provider_parity_score) as avg_parity_score FROM Providers p JOIN Areas a ON p.area_id = a.area_id WHERE a.area_type = 'urban';"
    },
    {
        "instruction": "입력 텍스트: 2022년 일본 도쿄의 관광 지역 경제 영향을 찾아보세요.\n\nDDL statements:\nCREATE TABLE local_impact_japan (year INT, location TEXT, economic_impact INT); INSERT INTO local_impact_japan (year, location, economic_impact) VALUES (2019, 'Tokyo', 15000), (2022, 'Tokyo', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT economic_impact FROM local_impact_japan WHERE location = 'Tokyo' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 일본에서 심리치료를 6개월 받은 환자 중 얼마나 많은 비율의 환자가 개선을 경험했나요?\n\nDDL statements:\nCREATE TABLE patients (id INT, country VARCHAR(255), start_date DATE); CREATE TABLE treatments (id INT, patient_id INT, type VARCHAR(255), start_date DATE); CREATE TABLE outcomes (id INT, patient_id INT, treatment_id INT, improvement BOOLEAN, follow_up_date DATE); INSERT INTO patients (id, country) VALUES (1, 'Japan'), (2, 'Japan'); INSERT INTO treatments (id, patient_id, type) VALUES (1, 1, 'psychotherapy'), (2, 2, 'psychotherapy'); INSERT INTO outcomes (id, patient_id, treatment_id, improvement, follow_up_date) VALUES (1, 1, 1, true, '2021-08-01'), (2, 1, 1, true, '2021-07-01'), (3, 2, 2, false, '2021-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(DISTINCT CASE WHEN outcomes.follow_up_date < patients.start_date + INTERVAL '6 month' AND outcomes.improvement THEN patients.id END) / COUNT(DISTINCT patients.id) AS percentage FROM patients JOIN treatments ON patients.id = treatments.patient_id JOIN outcomes ON treatments.id = outcomes.treatment_id WHERE patients.country = 'Japan' AND treatments.type = 'psychotherapy';"
    },
    {
        "instruction": "입력 텍스트: 의료 긴급 상황과 절도를 제외한 긴급 사건 및 범죄 보고의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE emergency_incidents (id INT, incident_type VARCHAR(255)); INSERT INTO emergency_incidents (id, incident_type) VALUES (1, 'Medical Emergency'), (2, 'Fire'), (3, 'Traffic Accident'); CREATE TABLE crime_reports (id INT, report_type VARCHAR(255)); INSERT INTO crime_reports (id, report_type) VALUES (1, 'Theft'), (2, 'Vandalism'), (3, 'Assault');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT incident_type as event_type FROM emergency_incidents WHERE incident_type NOT IN ('Medical Emergency') UNION ALL SELECT report_type FROM crime_reports WHERE report_type NOT IN ('Theft');"
    },
    {
        "instruction": "입력 텍스트: 호주의 주별 평균 농촌 병원 수와 20개 이상의 농촌 병원이 있는 주는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE rural_hospitals (hospital_id INT, hospital_name VARCHAR(100), province VARCHAR(50), num_staff INT); INSERT INTO rural_hospitals (hospital_id, hospital_name, province, num_staff) VALUES (1, 'Hospital A', 'New South Wales', 30), (2, 'Hospital B', 'New South Wales', 40), (3, 'Hospital C', 'Queensland', 50), (4, 'Hospital D', 'Queensland', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_staff) AS avg_rural_hospitals_per_province, COUNT(*) FILTER (WHERE num_staff > 20) AS provinces_with_more_than_20_hospitals FROM ( SELECT province, COUNT(*) AS num_staff FROM rural_hospitals GROUP BY province ) subquery;"
    },
    {
        "instruction": "입력 텍스트: 버스 시스템의 각 노선별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE routes (route_id INT, route_name VARCHAR(255)); INSERT INTO routes VALUES (1, 'Route 1A'); INSERT INTO routes VALUES (2, 'Route 2B'); CREATE TABLE fares (fare_id INT, route_id INT, fare_amount DECIMAL(5,2)); INSERT INTO fares VALUES (1, 1, 2.50); INSERT INTO fares VALUES (2, 1, 3.00); INSERT INTO fares VALUES (3, 2, 1.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.route_name, SUM(f.fare_amount) as total_revenue FROM routes r JOIN fares f ON r.route_id = f.route_id GROUP BY r.route_name;"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 시스템 내 공공 병원의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE healthcare_system (id INT, hospital_name TEXT, type TEXT, budget INT);INSERT INTO healthcare_system (id, hospital_name, type, budget) VALUES (1, 'HospitalA', 'Public', 5000000), (2, 'HospitalB', 'Private', 3000000), (3, 'HospitalC', 'Public', 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM healthcare_system WHERE type = 'Public';"
    },
    {
        "instruction": "입력 텍스트: 미국에 위치한 사용자들이 지난 한 달 동안 작성한 게시물의 평균 좋아요 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, location VARCHAR(50)); CREATE TABLE posts (id INT, user_id INT, likes INT, created_at DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(posts.likes) FROM posts INNER JOIN users ON posts.user_id = users.id WHERE users.location = 'United States' AND posts.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: City' 카테고리에 있는 호텔을 위해 이루어진 OTA 예약의 최대 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE otas (ota_id INT, hotel_id INT, bookings INT); CREATE TABLE hotels (hotel_id INT, name TEXT, category TEXT); INSERT INTO otas (ota_id, hotel_id, bookings) VALUES (1, 1, 100), (2, 2, 150), (3, 3, 200), (4, 4, 75); INSERT INTO hotels (hotel_id, name, category) VALUES (1, 'Hotel A', 'City'), (2, 'Hotel B', 'City'), (3, 'Hotel C', 'City'), (4, 'Hotel D', 'Boutique');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(otas.bookings) FROM otas INNER JOIN hotels ON otas.hotel_id = hotels.hotel_id WHERE hotels.category = 'City';"
    },
    {
        "instruction": "입력 텍스트: 2020'년에 건강검진을 받은 모든 우주비행사와 그들의 건강 상태를 나열하세요.\n\nDDL statements:\nCREATE TABLE Astronauts (id INT, name VARCHAR(255), medical_checkup_date DATE, medical_status VARCHAR(50)); INSERT INTO Astronauts (id, name, medical_checkup_date, medical_status) VALUES (1, 'Mark Watney', '2020-05-01', 'Healthy'), (2, 'Melissa Lewis', '2019-12-15', 'Sick');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, medical_status FROM Astronauts WHERE medical_checkup_date >= '2020-01-01' AND medical_checkup_date < '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: 특정 우물의 월별 생산 추세는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE production (prod_id INT, well_id INT, prod_date DATE, production_rate FLOAT); INSERT INTO production (prod_id, well_id, prod_date, production_rate) VALUES (1, 1, '2020-01-01', 1000), (2, 1, '2020-02-01', 1100), (3, 1, '2020-03-01', 1200), (4, 1, '2020-04-01', 1300), (5, 1, '2020-05-01', 1400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT prod_date, production_rate, LAG(production_rate, 1) OVER (ORDER BY prod_date) AS previous_month_rate FROM production WHERE well_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 300칼로리가 넘는 제품 중에서 1번 매장으로 배송된 제품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Distributors (DistributorID varchar(10), DistributorName varchar(20)); INSERT INTO Distributors VALUES ('A', 'Distributor A'); CREATE TABLE Stores (StoreID int, StoreName varchar(10)); INSERT INTO Stores VALUES (1, 'Store 1'); CREATE TABLE Deliveries (DeliveryID int, DeliveryDate date, ProduceID varchar(10), StoreID int, DistributorID varchar(10)); INSERT INTO Deliveries VALUES (1, '2022-01-02', 'P001', 1, 'A'); CREATE TABLE Food (ProduceID varchar(10), FoodName varchar(20), Calories int); INSERT INTO Food VALUES ('P001', 'Product 1', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FoodName FROM Food INNER JOIN Deliveries ON Food.ProduceID = Deliveries.ProduceID WHERE Food.Calories > 300 AND Deliveries.StoreID = 1;"
    },
    {
        "instruction": "입력 텍스트: 오레곤 주의 각 농촌 클리닉에 몇 명의 일반의가 있습니까?\n\nDDL statements:\nCREATE TABLE doctors (doctor_id INT, clinic_id INT, specialty VARCHAR(50)); INSERT INTO doctors (doctor_id, clinic_id, specialty) VALUES (1, 1, 'General Practitioner'), (2, 1, 'Surgeon'), (3, 2, 'General Practitioner'), (4, 3, 'Surgeon'); CREATE TABLE rural_clinics (clinic_id INT, state VARCHAR(2)); INSERT INTO rural_clinics (clinic_id, state) VALUES (1, 'Oregon'), (2, 'Oregon'), (3, 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.clinic_id, COUNT(d.doctor_id) AS general_practitioners_count FROM doctors d JOIN rural_clinics r ON d.clinic_id = r.clinic_id WHERE r.state = 'Oregon' AND specialty = 'General Practitioner' GROUP BY r.clinic_id;"
    },
    {
        "instruction": "입력 텍스트: football_matches' 테이블에 있는 축구 선수들의 이름과 총 득점을 내림차순으로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE football_teams (team_id INT, team_name VARCHAR(50));CREATE VIEW football_matches AS SELECT player_id, team_id, SUM(points) AS total_points FROM football_player_scores GROUP BY player_id, team_id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT football_teams.team_name, football_matches.total_points, basketball_players.name FROM football_teams INNER JOIN football_matches ON football_teams.team_id = football_matches.team_id INNER JOIN basketball_players ON basketball_players.player_id = football_matches.player_id ORDER BY football_matches.total_points DESC;"
    },
    {
        "instruction": "입력 텍스트: 지난 60일 동안 평균 위험 점수보다 높은 위험 점수를 가진 시스템의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE systems (system_id INT, risk_score INT, last_updated DATETIME); INSERT INTO systems (system_id, risk_score, last_updated) VALUES (1, 8, '2022-01-01'), (2, 5, '2022-01-05'), (3, 10, '2022-01-03'), (4, 6, '2022-01-04'), (5, 15, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM systems WHERE last_updated >= DATEADD(day, -60, GETDATE())) AS pct_above_avg FROM systems s WHERE risk_score > (SELECT AVG(risk_score) FROM systems WHERE last_updated >= DATEADD(day, -60, GETDATE()));"
    },
    {
        "instruction": "입력 텍스트: 2023년에 아시아 우주비행사들이 수행한 우주 임무는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Missions (ID INT, Astronaut VARCHAR(255), Year INT); CREATE TABLE Astronauts (ID INT, Name VARCHAR(255), Region VARCHAR(255)); INSERT INTO Missions (ID, Astronaut, Year) VALUES (1, 'Li', 2023), (2, 'Choi', 2023), (3, 'Johnson', 2023); INSERT INTO Astronauts (ID, Name, Region) VALUES (1, 'Li', 'Asia'), (2, 'Choi', 'Asia'), (3, 'Johnson', 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Missions INNER JOIN Astronauts ON Missions.Astronaut = Astronauts.Name WHERE Region = 'Asia' AND Year = 2023;"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년 사이에 뉴욕에서 주거용 건물에 발급된 모든 건축 허가증과 노동 통계를 나열하시오.\n\nDDL statements:\nCREATE TABLE Building_Permits (Permit_ID INT, Building_Type VARCHAR(50), Issue_Date DATE); CREATE TABLE Residential_Buildings (Building_ID INT, Building_Type VARCHAR(50)); CREATE TABLE Labor_Statistics (Permit_ID INT, Worker_Count INT, Year INT); INSERT INTO Building_Permits (Permit_ID, Building_Type, Issue_Date) VALUES (1, 'Residential', '2018-01-01'), (2, 'Residential', '2019-07-01'); INSERT INTO Residential_Buildings (Building_ID, Building_Type) VALUES (1, 'Residential'), (2, 'Residential'); INSERT INTO Labor_Statistics (Permit_ID, Worker_Count, Year) VALUES (1, 15, 2018), (2, 20, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Building_Permits.Permit_ID, Building_Type, Issue_Date, Worker_Count, Year FROM Building_Permits INNER JOIN Residential_Buildings ON Building_Permits.Building_Type = Residential_Buildings.Building_Type INNER JOIN Labor_Statistics ON Building_Permits.Permit_ID = Labor_Statistics.Permit_ID WHERE Issue_Date BETWEEN '2018-01-01' AND '2020-12-31';"
    },
    {
        "instruction": "입력 텍스트: 여성 팬들을 위한 뷰를 생성하세요\n\nDDL statements:\nCREATE TABLE fans (id INT PRIMARY KEY, name VARCHAR(100), age INT, gender VARCHAR(10), city VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW female_fans AS SELECT * FROM fans WHERE gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 기술 분야에서 소수 집단에 속하는 커뮤니티의 자원봉사자가 우리 프로그램에 몇 명 참여했습니까?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, Community TEXT, Year INT, Hours DECIMAL(5,2)); INSERT INTO Volunteers (VolunteerID, VolunteerName, Community, Year, Hours) VALUES (1, 'Alice', 'Women in Tech', 2019, 25.50), (2, 'Bob', 'Minorities in STEM', 2018, 30.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(VolunteerID) FROM Volunteers WHERE Community IN ('Women in Tech', 'Minorities in STEM') AND Year = 2019;"
    },
    {
        "instruction": "입력 텍스트: R02' 노선의 평균 배송 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE deliveries (id INT, delivery_date DATE, route_id VARCHAR(5), delivery_time INT); INSERT INTO deliveries (id, delivery_date, route_id, delivery_time) VALUES (1, '2022-01-02', 'R01', 300), (2, '2022-01-10', 'R02', 450), (3, '2022-01-15', 'R03', 250), (4, '2022-01-20', 'R02', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(delivery_time) FROM deliveries WHERE route_id = 'R02';"
    },
    {
        "instruction": "입력 텍스트: 2020-01-01 이후 아시아 태평양 지역의 모든 알고리즘 공정성 사건을 나열합니다.\n\nDDL statements:\nCREATE TABLE algorithmic_fairness_incidents (incident_id INT PRIMARY KEY, incident_date DATE, region VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM algorithmic_fairness_incidents WHERE incident_date >= '2020-01-01' AND region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: Artworks' 테이블에서 프랑스 출신 작가의 작품 중 최대 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artworks (id INT, value DECIMAL(10,2), artist_id INT); CREATE TABLE Artists (id INT, name VARCHAR(255), nationality VARCHAR(255)); INSERT INTO Artists (id, name, nationality) VALUES (1, 'Claude Monet', 'France'); INSERT INTO Artworks (id, value, artist_id) VALUES (1, 8000, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(value) FROM Artworks INNER JOIN Artists ON Artworks.artist_id = Artists.id WHERE Artists.nationality = 'France';"
    },
    {
        "instruction": "입력 텍스트: 각 팀의 선수들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(255)); CREATE TABLE players (player_id INT, player_name VARCHAR(255), team_id INT, age INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT t.team_name, AVG(p.age) as avg_age FROM players p JOIN teams t ON p.team_id = t.team_id GROUP BY t.team_name;"
    },
    {
        "instruction": "입력 텍스트: 인도에 있는 유네스코 세계 유산은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE world_heritage_sites (site_id INT, site_name VARCHAR(100), country VARCHAR(100), is_unesco_site BOOLEAN); INSERT INTO world_heritage_sites (site_id, site_name, country, is_unesco_site) VALUES (1, 'Taj Mahal', 'India', true); INSERT INTO world_heritage_sites (site_id, site_name, country, is_unesco_site) VALUES (2, 'Hampi', 'India', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM world_heritage_sites WHERE country = 'India' AND is_unesco_site = true;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 각 동물 종류별로 얼마나 많은 동물이 재활 센터에 입소했나요?\n\nDDL statements:\nCREATE TABLE animal_species (species_id INT, species_name VARCHAR(50));CREATE TABLE rehab_centers (center_id INT, center_name VARCHAR(50));CREATE TABLE animal_rehab (animal_id INT, species_id INT, center_id INT, rehab_date DATE); INSERT INTO animal_species (species_id, species_name) VALUES (1, 'Raccoon'), (2, 'Opossum'), (3, 'Squirrel'); INSERT INTO rehab_centers (center_id, center_name) VALUES (1, 'Rehab Center A'), (2, 'Rehab Center B'); INSERT INTO animal_rehab (animal_id, species_id, center_id, rehab_date) VALUES (101, 1, 1, '2021-01-01'), (102, 2, 1, '2021-03-01'), (103, 3, 2, '2021-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.species_name, COUNT(a.animal_id) AS total_admitted FROM animal_species s JOIN animal_rehab a ON s.species_id = a.species_id WHERE YEAR(a.rehab_date) = 2021 GROUP BY s.species_name;"
    },
    {
        "instruction": "입력 텍스트: 어떤 우주 기관이 5개 이상의 위성을 발사했으며 각각의 총 임무 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Agency_Satellites (Agency VARCHAR(50), Satellite_Name VARCHAR(50), Launch_Date DATETIME); CREATE TABLE Missions (Mission_ID INT, Mission_Name VARCHAR(50), Astronaut_Name VARCHAR(50), Agency VARCHAR(50), Start_Date DATETIME, End_Date DATETIME); INSERT INTO Agency_Satellites (Agency, Satellite_Name, Launch_Date) VALUES ('NASA', 'Spitzer Space Telescope', '2003-08-25'), ('ESA', 'Gaia', '2013-12-19'), ('CNES', 'Pléiades 1A', '2009-12-17'); INSERT INTO Missions (Mission_ID, Mission_Name, Agency, Start_Date, End_Date) VALUES (1, 'Mars Science Laboratory', 'NASA', '2011-11-26', '2018-11-02'), (2, 'Rosetta', 'ESA', '2004-03-02', '2016-09-30'), (3, 'COROT', 'CNES', '2006-12-27', '2012-11-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.Agency, COUNT(a.Satellite_Name) AS Number_Of_Satellites, DATEDIFF(day, MIN(m.Start_Date), MAX(m.End_Date)) * 1.0 / 30 AS Total_Mission_Duration_Months FROM Agency_Satellites a INNER JOIN Missions m ON a.Agency = m.Agency GROUP BY a.Agency HAVING COUNT(a.Satellite_Name) > 5;"
    },
    {
        "instruction": "입력 텍스트: vehicle_safety 테이블에서 안전 등급이 5 미만인 'Ford Fusion'을 삭제하세요.\n\nDDL statements:\nCREATE TABLE vehicle_safety (id INT PRIMARY KEY, make VARCHAR(50), model VARCHAR(50), safety_rating FLOAT); INSERT INTO vehicle_safety (id, make, model, safety_rating) VALUES (1, 'Audi', 'A4', 5.2), (2, 'BMW', '3 Series', 5.0), (3, 'Ford', 'Fusion', 4.7), (4, 'Volkswagen', 'Golf', 4.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM vehicle_safety WHERE make = 'Ford' AND model = 'Fusion' AND safety_rating < 5;"
    },
    {
        "instruction": "입력 텍스트: Donors' 테이블에 있는 각 기부자 유형별 최대 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (id INT, name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50), type VARCHAR(10), donation_amount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, MAX(donation_amount) FROM Donors GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: Accessories' 품목을 모두 판매하여 얻은 총 수익을 찾으세요.\n\nDDL statements:\nCREATE TABLE RetailerG (item VARCHAR(20), price INT, quantity INT); INSERT INTO RetailerG VALUES ('Accessories', 20, 30), ('Accessories', 15, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * quantity) FROM RetailerG WHERE item = 'Accessories';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서의 건설 프로젝트 평균 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE project_timeline (id INT, project_id INT, start_date DATE, end_date DATE); INSERT INTO project_timeline (id, project_id, start_date, end_date) VALUES (1, 1, '2021-01-01', '2021-06-30'); INSERT INTO project_timeline (id, project_id, start_date, end_date) VALUES (2, 2, '2021-03-01', '2021-08-31'); INSERT INTO project_timeline (id, project_id, start_date, end_date) VALUES (3, 3, '2021-05-01', '2021-11-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(end_date, start_date)) as avg_duration_days FROM project_timeline WHERE project_id IN (SELECT id FROM projects WHERE state = 'New York');"
    },
    {
        "instruction": "입력 텍스트: 각 부품 유형과 제조사별로 마지막 검사와 다음 예정된 검사 사이의 평균 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE InspectionData (PartID INT, Type VARCHAR(50), Manufacturer VARCHAR(50), LastInspection DATE, NextInspection DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT InspectionData.Type, InspectionData.Manufacturer, AVG(DATEDIFF(day, InspectionData.LastInspection, InspectionData.NextInspection)) as AvgTimeBetweenInspections FROM InspectionData GROUP BY InspectionData.Type, InspectionData.Manufacturer;"
    },
    {
        "instruction": "입력 텍스트: 나이지리아의 지역별 농촌 인프라 프로젝트의 3년 이동 평균은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE rural_projects (region TEXT, year INT, num_projects INT); INSERT INTO rural_projects (region, year, num_projects) VALUES ('North', 2017, 10), ('North', 2018, 15), ('North', 2019, 12), ('North', 2020, 18), ('North', 2021, 21), ('South', 2017, 15), ('South', 2018, 18), ('South', 2019, 16), ('South', 2020, 20), ('South', 2021, 23), ('East', 2017, 12), ('East', 2018, 14), ('East', 2019, 17), ('East', 2020, 22), ('East', 2021, 25), ('West', 2017, 18), ('West', 2018, 20), ('West', 2019, 23), ('West', 2020, 24), ('West', 2021, 27);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, year, AVG(num_projects) OVER (PARTITION BY region ORDER BY year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_average FROM rural_projects WHERE region IN ('North', 'South', 'East', 'West');"
    },
    {
        "instruction": "입력 텍스트: NYC에 있는 백신 미접종자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE individual (age INT, city TEXT, vaccination_status TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM individual i WHERE i.city = 'NYC' AND i.vaccination_status = 'unvaccinated';"
    },
    {
        "instruction": "입력 텍스트: 2022-04-15'에 'Tasty Delights'를 위한 'Excellent' 등급의 새로운 식품 안전 검사 기록을 이미 존재하지 않는 경우에만 삽입하세요.\n\nDDL statements:\nCREATE TABLE food_safety_inspections (restaurant_id INT, inspection_date DATE, result VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO food_safety_inspections (restaurant_id, inspection_date, result) SELECT 6, '2022-04-15', 'Excellent' FROM (SELECT 1 FROM food_safety_inspections WHERE restaurant_id = 6 AND inspection_date = '2022-04-15') AS dummy WHERE NOT EXISTS (SELECT 1 FROM food_safety_inspections WHERE restaurant_id = 6 AND inspection_date = '2022-04-15');"
    },
    {
        "instruction": "입력 텍스트: field5'에서 습도 수준이 80%를 초과한 횟수는 몇 번입니까?\n\nDDL statements:\nCREATE TABLE field5 (id INT, moisture FLOAT); INSERT INTO field5 (id, moisture) VALUES (1, 78.2), (2, 82.1), (3, 79.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM field5 WHERE moisture > 80;"
    },
    {
        "instruction": "입력 텍스트: 안전 테스트에 참여한 비자율주행 차량의 평균 도시 교통 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Vehicle (id INT, name TEXT, is_autonomous BOOLEAN, is_electric BOOLEAN, city_traffic_speed FLOAT); CREATE TABLE SafetyTesting (id INT, vehicle_id INT); INSERT INTO Vehicle (id, name, is_autonomous, is_electric, city_traffic_speed) VALUES (1, 'Model S', false, true, 15.3), (2, 'Camry', false, false, 18.9), (3, 'Bolt', false, true, 13.2), (4, 'Tesla', true, false, 22.0); INSERT INTO SafetyTesting (id, vehicle_id) VALUES (1, 1), (2, 3), (4, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Vehicle.city_traffic_speed) FROM Vehicle INNER JOIN SafetyTesting ON Vehicle.id = SafetyTesting.vehicle_id WHERE Vehicle.is_autonomous = false;"
    },
    {
        "instruction": "입력 텍스트: 각 유산지에서 수행된 전통 예술 유형을 보여주세요.\n\nDDL statements:\nCREATE TABLE ArtsHeritage (SiteName VARCHAR(30), ArtType VARCHAR(20)); INSERT INTO ArtsHeritage VALUES ('Head-Smashed-In Buffalo Jump', 'Medicine Wheel'), ('Chichen Itza', 'Maya Dance'); CREATE TABLE HeritageSites (SiteName VARCHAR(30), Country VARCHAR(20)); INSERT INTO HeritageSites VALUES ('Head-Smashed-In Buffalo Jump', 'Canada'), ('Chichen Itza', 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.SiteName, a.ArtType FROM HeritageSites h JOIN ArtsHeritage a ON h.SiteName = a.SiteName;"
    },
    {
        "instruction": "입력 텍스트: 2019년부터 2021년 사이 태평양 북서부 지역의 평균 탄소 흡수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE carbon_sequestration (id INT, location VARCHAR(255), trees_absorbed FLOAT, year INT); INSERT INTO carbon_sequestration (id, location, trees_absorbed, year) VALUES (1, 'Seattle, WA', 5000.0, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, AVG(trees_absorbed) FROM carbon_sequestration WHERE year BETWEEN 2019 AND 2021 AND location LIKE '%Pacific Northwest%' GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 총 지원금액을 기준으로 상위 5개 분야를 찾으세요?\n\nDDL statements:\nCREATE TABLE Grants (GrantID INT, Sector TEXT, Amount DECIMAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Sector, SUM(Amount) OVER (PARTITION BY Sector ORDER BY SUM(Amount) DESC) AS TotalAmount, RANK() OVER (ORDER BY SUM(Amount) DESC) AS Rank FROM Grants GROUP BY Sector ORDER BY Rank;"
    },
    {
        "instruction": "입력 텍스트: 2020년 이글 포드 셰일 플레이에서 가장 높은 가스 생산량을 기록한 우물은 무엇인가요?\n\nDDL statements:\nCREATE TABLE well (well_id INT, well_name TEXT, shale_play TEXT, gas_production_2020 FLOAT); INSERT INTO well (well_id, well_name, shale_play, gas_production_2020) VALUES (1, 'Well A', 'Eagle Ford', 9000), (2, 'Well B', 'Eagle Ford', 11000), (3, 'Well C', 'Eagle Ford', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT well_name, MAX(gas_production_2020) as max_gas_production FROM well WHERE shale_play = 'Eagle Ford' GROUP BY well_name;"
    },
    {
        "instruction": "입력 텍스트: media_database'에서 'NPR' 출처의 기사와 팟캐스트는 무엇인가요?\n\nDDL statements:\nCREATE TABLE media_database (id INT, type VARCHAR(10), title VARCHAR(50), length FLOAT, source VARCHAR(50)); INSERT INTO media_database (id, type, title, length, source) VALUES (1, 'article', 'Sample NPR Article 1', 5.5, 'NPR'); INSERT INTO media_database (id, type, title, length, source) VALUES (2, 'podcast', 'Sample NPR Podcast 1', 35.2, 'NPR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM media_database WHERE (type = 'article' OR type = 'podcast') AND source = 'NPR';"
    },
    {
        "instruction": "입력 텍스트: 각 대학 유형별로 등록된 장애 학생 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE students_disabilities (id INT, student_id INT, university_type TEXT, disability_type TEXT); INSERT INTO students_disabilities (id, student_id, university_type, disability_type) VALUES (1, 1, 'Urban', 'Visual Impairment'), (2, 1, 'Urban', 'Learning Disability'), (3, 2, 'Suburban', 'Mobility Impairment'), (4, 3, 'Rural', 'Visual Impairment');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT university_type, COUNT(DISTINCT student_id) FROM students_disabilities GROUP BY university_type;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 군사 기지의 이름과 위치, 그리고 그들의 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE MilitaryBases (id INT, name VARCHAR(255), location VARCHAR(255), country VARCHAR(255), base_type VARCHAR(255)); INSERT INTO MilitaryBases (id, name, location, country, base_type) VALUES (1, 'Camp Lemonnier', 'Djibouti, Africa', 'Djibouti', 'Air Base'), (2, 'Naval Base Rota', 'Spain, Europe', 'Spain', 'Naval Base'), (3, 'Camp Smith', 'Hawaii, USA', 'USA', 'Army Base');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN country = 'Djibouti' THEN 1 ELSE 0 END) as total_bases, STRING_AGG(name, ', ') as base_names, STRING_AGG(location, ', ') as base_locations, base_type FROM MilitaryBases WHERE country = 'Djibouti' GROUP BY base_type;"
    },
    {
        "instruction": "입력 텍스트: 각 학군의 학교에 등록된 학생 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE school_enrollment (student_id INT, district_id INT, school_id INT); INSERT INTO school_enrollment (student_id, district_id, school_id) VALUES (1, 101, 1001), (2, 101, 1002), (3, 102, 2001), (4, 102, 2002), (5, 103, 3001); CREATE TABLE school_districts (district_id INT, district_name TEXT); INSERT INTO school_districts (district_id, district_name) VALUES (101, 'District A'), (102, 'District B'), (103, 'District C'); CREATE VIEW district_enrollment AS SELECT d.district_name, COUNT(s.student_id) as enrollment FROM school_enrollment s JOIN school_districts d ON s.district_id = d.district_id GROUP BY d.district_name;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_name, enrollment FROM district_enrollment;"
    },
    {
        "instruction": "입력 텍스트: 각 음악 콘서트마다 미국에서 온 관객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Concerts (id INT, title VARCHAR(255), location VARCHAR(255), viewers INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) as US_viewers FROM Concerts WHERE location LIKE '%United States%' GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 각 레코드 레이블에서 발매된 노래는 몇 곡인가요?\n\nDDL statements:\nCREATE TABLE songs (id INT, title VARCHAR(255), artist VARCHAR(255), label VARCHAR(255), release_date DATE); INSERT INTO songs (id, title, artist, label, release_date) VALUES (1, 'Song1', 'Artist1', 'Label1', '2021-01-01'), (2, 'Song2', 'Artist2', 'Label2', '2021-02-01'), (3, 'Song3', 'Artist3', 'Label1', '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT label, COUNT(*) as song_count FROM songs WHERE YEAR(release_date) = 2021 GROUP BY label;"
    },
    {
        "instruction": "입력 텍스트: 인도의 각 주별로 분류된 농촌 클리닉의 평균 병상 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE rural_clinics (clinic_id INT, state VARCHAR(50), no_of_beds INT); INSERT INTO rural_clinics VALUES (1, 'Assam', 20), (2, 'Assam', 15), (3, 'Bihar', 10), (4, 'Bihar', 12); CREATE TABLE rural_hospitals (hospital_id INT, state VARCHAR(50), no_of_beds INT); INSERT INTO rural_hospitals VALUES (1, 'Assam', 500), (2, 'Assam', 600), (3, 'Bihar', 400), (4, 'Bihar', 450);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(r.no_of_beds) as avg_beds FROM (SELECT state, no_of_beds, ROW_NUMBER() OVER (PARTITION BY state ORDER BY no_of_beds DESC) as clinic_rank FROM rural_clinics) r WHERE r.clinic_rank = 1;"
    },
    {
        "instruction": "입력 텍스트: 각 문화별로 발굴된 유적지에 따라 가장 오래된 유물의 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ancient_cultures (id INT, culture VARCHAR(50)); CREATE TABLE ancient_artifacts (id INT, artifact_name VARCHAR(50), age INT, excavation_site VARCHAR(50), culture_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT excavation_site, MAX(age) OVER (PARTITION BY culture_id) as oldest_artifact_age FROM ancient_artifacts JOIN ancient_cultures ON ancient_artifacts.culture_id = ancient_cultures.id GROUP BY excavation_site, culture_id;"
    },
    {
        "instruction": "입력 텍스트: 최소 한 명의 여성 창업자가 있는 스타트업의 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investments (company_id INT, funding_amount INT); INSERT INTO investments (company_id, funding_amount) VALUES (1, 5000000); INSERT INTO investments (company_id, funding_amount) VALUES (2, 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding_amount) FROM investments JOIN companies ON investments.company_id = companies.id WHERE companies.founder_gender = 'female';"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 공립학교와 사립학교의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE states (name VARCHAR(255), schools_count INT); CREATE TABLE schools (name VARCHAR(255), state VARCHAR(255), school_type VARCHAR(255)); INSERT INTO states (name) VALUES ('California'), ('Texas'), ('New York'), ('Florida'), ('Illinois'); INSERT INTO schools (name, state, school_type) VALUES ('School A', 'California', 'Public'), ('School B', 'California', 'Private'), ('School C', 'Texas', 'Public'), ('School D', 'Texas', 'Public');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(school_type = 'Public') as public_schools, SUM(school_type = 'Private') as private_schools FROM schools GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 우리 소매 사업에 가장 많은 순환 공급망 제품을 제공한 공급업체는 어디인가요?\n\nDDL statements:\nCREATE TABLE suppliers (id INT, supplier_name VARCHAR(50), total_supply INT); CREATE TABLE circular_supply_chain_products (id INT, product_id INT, supplier_id INT); INSERT INTO suppliers (id, supplier_name, total_supply) VALUES (1, 'GreenVest', 2000), (2, 'EcoFarms', 1500), (3, 'CircularWear', 1200); INSERT INTO circular_supply_chain_products (id, product_id, supplier_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2), (4, 4, 2), (5, 5, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_name, SUM(total_supply) FROM suppliers JOIN circular_supply_chain_products ON suppliers.id = circular_supply_chain_products.supplier_id GROUP BY supplier_name ORDER BY SUM(total_supply) DESC;"
    },
    {
        "instruction": "입력 텍스트: 유럽 출신 남성 작가들이 만든 작품의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE artworks (id INT, artist VARCHAR(100), collection VARCHAR(50), gender VARCHAR(10), artworks INT); INSERT INTO artworks (id, artist, collection, gender, artworks) VALUES (1, 'Marc', 'European Collection', 'Male', 5), (2, 'Nina', 'Asian Collection', 'Female', 10), (3, 'Oliver', 'European Collection', 'Male', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(artworks) FROM artworks WHERE collection LIKE '%Europe%' AND gender = 'Male';"
    },
    {
        "instruction": "입력 텍스트: Rotterdam'에서 각 선박 대리점이 하루에 처리하는 컨테이너의 총 중량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE port (port_id INT, name TEXT, created_at DATETIME);CREATE TABLE ship_agent (ship_agent_id INT, port_id INT, name TEXT);CREATE TABLE container (container_id INT, ship_agent_id INT, weight INT, created_at DATETIME);INSERT INTO port VALUES (5, 'Rotterdam', '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ship_agent.name, SUM(container.weight) FROM ship_agent JOIN port ON ship_agent.port_id = port.port_id JOIN container ON ship_agent.ship_agent_id = container.ship_agent_id WHERE port.name = 'Rotterdam' GROUP BY ship_agent.name, DATE(container.created_at);"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 판매된 육류 제품의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Regions (RegionID INT, RegionName VARCHAR(50));CREATE TABLE Products (ProductID INT, ProductName VARCHAR(50), Meat BOOLEAN, QuantitySold INT); INSERT INTO Regions VALUES (1, 'Northeast'), (2, 'Southeast'); INSERT INTO Products VALUES (1, 'Chicken Breast', true, 100), (2, 'Tofu', false, 150), (3, 'Ground Beef', true, 200), (4, 'Fish Fillet', true, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.RegionName, p.ProductName, SUM(p.QuantitySold) as TotalQuantitySold FROM Regions r JOIN Products p ON r.RegionID = 1 GROUP BY r.RegionName, p.ProductName HAVING p.Meat = true;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 동안의 브로드밴드 요금제별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE broadband_plans (id INT, name VARCHAR(50), price DECIMAL(5,2)); INSERT INTO broadband_plans (id, name, price) VALUES (1, 'PlanX', 60.00), (2, 'PlanY', 75.00); CREATE TABLE broadband_revenue (date DATE, plan_id INT, amount DECIMAL(5,2)); INSERT INTO broadband_revenue (date, plan_id, amount) VALUES ('2022-01-01', 1, 300.00), ('2022-01-01', 2, 450.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT bp.name, SUM(br.amount) as total_revenue FROM broadband_plans bp INNER JOIN broadband_revenue br ON bp.id = br.plan_id WHERE br.date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY bp.name;"
    },
    {
        "instruction": "입력 텍스트: 지난 365일 동안 여러 건의 보험 청구를 제출한 모든 보험 가입자를 나열합니다.\n\nDDL statements:\nCREATE TABLE Policyholders (PolicyholderID INT, LastClaimDate DATE); CREATE TABLE Claims (ClaimID INT, PolicyholderID INT, ClaimDate DATE); INSERT INTO Policyholders (PolicyholderID, LastClaimDate) VALUES (1, '2021-02-01'), (2, '2022-02-15'), (3, NULL); INSERT INTO Claims (ClaimID, PolicyholderID, ClaimDate) VALUES (1, 1, '2022-01-01'), (2, 1, '2022-01-15'), (3, 2, '2022-02-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Policyholders.PolicyholderID, Policyholders.LastClaimDate, COUNT(Claims.ClaimID) AS NumberOfClaims FROM Policyholders LEFT JOIN Claims ON Policyholders.PolicyholderID = Claims.PolicyholderID WHERE Claims.ClaimDate BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) AND CURRENT_DATE() GROUP BY Policyholders.PolicyholderID HAVING COUNT(Claims.ClaimID) > 1;"
    },
    {
        "instruction": "입력 텍스트: 플레이어 인구 통계를 위한 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE player_demographics (player_id INT PRIMARY KEY, age INT, gender VARCHAR(10), location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE player_demographics_new AS SELECT * FROM player_demographics WHERE 1=2;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 외부 소스로부터 보고된 고위험 취약점의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, severity TEXT, source TEXT, reported_date DATE); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (1, 'high', 'external', '2021-10-05'); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (2, 'medium', 'internal', '2021-10-07'); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (3, 'high', 'external', '2021-11-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'high' AND reported_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND source = 'external';"
    },
    {
        "instruction": "입력 텍스트: oil_production' 테이블에서 2020년도의 총 석유 생산량을 계산하세요.\n\nDDL statements:\nCREATE TABLE oil_production (well_id INT, year INT, oil_volume FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(oil_volume) FROM oil_production WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 레드 라인' 노선의 비성수기 시간대별 평균 승객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Routes (RouteID int, RouteName varchar(255), Region varchar(255)); INSERT INTO Routes (RouteID, RouteName, Region) VALUES (1, 'North', 'East'), (2, 'South', 'Central'), (3, 'West', 'West'), (4, 'Red Line', 'East'); CREATE TABLE Trips (TripID int, RouteID int, Passengers int, TripDateTime datetime); CREATE TABLE PeakHours (PeakHourID int, StartTime time, EndTime time); INSERT INTO PeakHours (PeakHourID, StartTime, EndTime) VALUES (1, '06:00', '09:00'), (2, '16:00', '19:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Passengers) FROM Routes JOIN Trips ON Routes.RouteID = Trips.RouteID JOIN PeakHours ON Trips.TripDateTime BETWEEN PeakHours.StartTime AND PeakHours.EndTime WHERE Routes.RouteName = 'Red Line' AND NOT (PeakHours.StartTime BETWEEN '06:00' AND '09:00' OR PeakHours.StartTime BETWEEN '16:00' AND '19:00');"
    },
    {
        "instruction": "입력 텍스트: 유럽의 제조 공장별로 지난 12개월 동안의 평균 안전 사고 발생률을 확인하세요.\n\nDDL statements:\nCREATE TABLE SafetyIncidents (IncidentID INT, PlantID INT, IncidentDate DATE); INSERT INTO SafetyIncidents (IncidentID, PlantID, IncidentDate) VALUES (1, 101, '2020-06-15'), (2, 102, '2020-07-22'), (3, 101, '2021-02-03'), (4, 103, '2021-04-10'); CREATE TABLE ManufacturingPlants (PlantID INT, PlantLocation VARCHAR(50)); INSERT INTO ManufacturingPlants (PlantID, PlantLocation) VALUES (101, 'London'), (102, 'Paris'), (103, 'Berlin');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(COUNT(DISTINCT PlantID)) AS AvgSafetyIncidentRate FROM SafetyIncidents JOIN ManufacturingPlants ON SafetyIncidents.PlantID = ManufacturingPlants.PlantID WHERE IncidentDate >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY PlantLocation;"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 우주 프로그램 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE space_programs (program_id INT PRIMARY KEY, country VARCHAR(50), year INT, cost FLOAT); INSERT INTO space_programs (program_id, country, year, cost) VALUES (1, 'USA', 2020, 60000000000), (2, 'China', 2019, 12000000000), (3, 'Russia', 2021, 8000000000), (4, 'USA', 2019, 55000000000), (5, 'India', 2020, 2500000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(cost) AS total_cost FROM space_programs GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 어떤 재료의 최대 수량을 찾아주세요.\n\nDDL statements:\nCREATE TABLE inventory (id INT, ingredient_id INT, quantity INT); INSERT INTO inventory (id, ingredient_id, quantity) VALUES (1, 1, 50), (2, 2, 200), (3, 3, 100), (4, 4, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(quantity) FROM inventory;"
    },
    {
        "instruction": "입력 텍스트: 광산 회사의 광산별 평균 물 소비량을 계산하세요.\n\nDDL statements:\nCREATE TABLE mines (id INT, name VARCHAR(255), location VARCHAR(255), water_consumption INT); INSERT INTO mines (id, name, location, water_consumption) VALUES (1, 'Mine A', 'USA', 500000), (2, 'Mine B', 'Canada', 600000), (3, 'Mine C', 'USA', 400000), (4, 'Mine D', 'USA', 450000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(m.water_consumption) as avg_water_consumption FROM mines m;"
    },
    {
        "instruction": "입력 텍스트: 년도별 작물의 평균 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE crops_year (id INT, name VARCHAR(50), year INT, production INT); INSERT INTO crops_year (id, name, year, production) VALUES (1, 'Rice', 2020, 5000), (2, 'Wheat', 2020, 7000), (3, 'Soybean', 2020, 3000), (4, 'Barley', 2020, 4000), (5, 'Rice', 2019, 6000), (6, 'Wheat', 2019, 8000), (7, 'Soybean', 2019, 4000), (8, 'Barley', 2019, 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, AVG(production) as avg_production FROM crops_year GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 창의적 AI 애플리케이션 중에서 평균 설명 가능성 점수보다 높은 설명 가능성 점수를 가진 애플리케이션은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Creative_AI (app_name TEXT, explainability_score INT); INSERT INTO Creative_AI (app_name, explainability_score) VALUES ('AI Painter', 75), ('AI Poet', 82), ('AI Music Composer', 78);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT app_name FROM Creative_AI WHERE explainability_score > (SELECT AVG(explainability_score) FROM Creative_AI);"
    },
    {
        "instruction": "입력 텍스트: 장르와 분기별로 영화와 TV 쇼의 총 마케팅 예산은 얼마였나요?\n\nDDL statements:\nCREATE TABLE MarketingBudget (title VARCHAR(255), genre VARCHAR(255), quarter INT, budget FLOAT); INSERT INTO MarketingBudget (title, genre, quarter, budget) VALUES ('Movie1', 'Action', 1, 100000), ('TVShow1', 'Comedy', 2, 150000), ('Movie2', 'Drama', 3, 120000), ('TVShow2', 'Action', 4, 140000), ('Movie3', 'Comedy', 1, 90000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT genre, quarter, SUM(budget) FROM MarketingBudget GROUP BY genre, quarter;"
    },
    {
        "instruction": "입력 텍스트: 각 게임 장르에서 높은 점수를 달성한 플레이어 수는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE PlayerScores (PlayerID INT, GameID INT, HighScore INT); INSERT INTO PlayerScores (PlayerID, GameID, HighScore) VALUES (1, 1, 1000), (2, 2, 2000), (3, 1, 1500), (4, 3, 2500), (5, 2, 2200), (6, 1, 3000), (7, 4, 3500), (8, 3, 3000), (9, 2, 3300), (10, 5, 4000);   CREATE TABLE GameGenres (GameID INT, Genre VARCHAR(50)); INSERT INTO GameGenres (GameID, Genre) VALUES (1, 'Action'), (2, 'Strategy'), (3, 'RPG'), (4, 'Simulation'), (5, 'Puzzle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, COUNT(*) as PlayerCount FROM PlayerScores INNER JOIN GameGenres ON PlayerScores.GameID = GameGenres.GameID WHERE HighScore >= (SELECT AVG(HighScore) FROM PlayerScores) GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: Spacecrafts 테이블에 새로운 우주선을 추가하세요.\n\nDDL statements:\nCREATE TABLE Spacecrafts (Sid INT, Name VARCHAR, Manufacturer VARCHAR, Launch_Date DATE, Status VARCHAR);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH new_spacecraft AS (VALUES (1, 'New Horizons 2', 'NASA', '2025-01-01', 'Active')) INSERT INTO Spacecrafts (Sid, Name, Manufacturer, Launch_Date, Status) SELECT * FROM new_spacecraft;"
    },
    {
        "instruction": "입력 텍스트: 서부 및 동남아시아 지역의 의료 제공자 총 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE west_providers (region VARCHAR(255), provider VARCHAR(255)); INSERT INTO west_providers (region, provider) VALUES ('Western', 'General Practitioner'); INSERT INTO west_providers (region, provider) VALUES ('Western', 'Nurse Practitioner'); CREATE TABLE southeast_providers (region VARCHAR(255), provider VARCHAR(255)); INSERT INTO southeast_providers (region, provider) VALUES ('Southeast', 'Community Health Worker'); INSERT INTO southeast_providers (region, provider) VALUES ('Southeast', 'Public Health Nurse');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM west_providers UNION ALL SELECT COUNT(*) FROM southeast_providers;"
    },
    {
        "instruction": "입력 텍스트: 각 유형별로 1건 이상 발생한 사이버 보안 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE CyberSecurityIncidents (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), year INT); INSERT INTO CyberSecurityIncidents (id, name, type, year) VALUES (1, 'Heartbleed', 'Vulnerability', 2014); INSERT INTO CyberSecurityIncidents (id, name, type, year) VALUES (2, 'WannaCry', 'Ransomware', 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) FROM CyberSecurityIncidents GROUP BY type HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC;"
    },
    {
        "instruction": "입력 텍스트: 이스포츠 이벤트의 고유 게임 장르를 나열하세요.\n\nDDL statements:\nCREATE TABLE Events (EventID INT, Name VARCHAR(100), Country VARCHAR(50), Participants INT, Genre VARCHAR(50)); INSERT INTO Events (EventID, Name, Country, Participants, Genre) VALUES (1, 'Event1', 'USA', 500, 'Action'), (2, 'Event2', 'Canada', 400, 'Adventure'), (3, 'Event3', 'England', 600, 'Simulation'), (4, 'Event4', 'France', 300, 'Strategy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT Genre FROM Events;"
    },
    {
        "instruction": "입력 텍스트: 각 대륙에서 탄소 흡수 지역의 평균 면적은 헥타르 단위로 얼마인가요?\n\nDDL statements:\nCREATE TABLE carbon_sequestration (id INT, continent VARCHAR(255), site_name VARCHAR(255), area FLOAT); INSERT INTO carbon_sequestration (id, continent, site_name, area) VALUES (1, 'North America', 'Site E', 30000.0), (2, 'North America', 'Site F', 40000.0), (3, 'South America', 'Site G', 50000.0), (4, 'South America', 'Site H', 60000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, AVG(area) FROM carbon_sequestration GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: carbon_offsets' 테이블에 있는 탄소 상쇄 이니셔티브는 총 몇 개입니까?\n\nDDL statements:\nCREATE TABLE if not exists carbon_offsets (initiative_id INT, initiative_name VARCHAR(255), location VARCHAR(255), offset_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM carbon_offsets WHERE offset_amount IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 미국 출신 기부자들이 기부한 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, country TEXT, amount_donated DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount_donated) FROM donors WHERE country = 'US';"
    },
    {
        "instruction": "입력 텍스트: 북부와 남부 지역의 석탄 광산 노동 생산성을 비교하세요.\n\nDDL statements:\nCREATE TABLE labor_productivity (mine_type VARCHAR(20), region VARCHAR(20), productivity FLOAT); INSERT INTO labor_productivity (mine_type, region, productivity) VALUES ('Coal', 'North', 2.8), ('Coal', 'North', 2.9), ('Coal', 'South', 3.1), ('Coal', 'South', 3.0), ('Gold', 'North', 3.4), ('Gold', 'South', 3.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(productivity) FROM labor_productivity WHERE mine_type = 'Coal' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: LGBTQ+에 속하는 사람들이 설립한 바이오테크 분야의 회사들이 받은 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founders_lgbtq BOOLEAN, funding FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding) FROM companies WHERE founders_lgbtq = true AND industry = 'biotech';"
    },
    {
        "instruction": "입력 텍스트: 대륙별 평균 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (donor_id INT, donation_amount INT, continent VARCHAR(50)); INSERT INTO Donors (donor_id, donation_amount, continent) VALUES (13, 30, 'Europe'), (14, 80, 'Asia'), (15, 50, 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, AVG(donation_amount) FROM Donors GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 부서의 예산은 얼마였나요?\n\nDDL statements:\nCREATE TABLE Budget (id INT, department VARCHAR(50), category VARCHAR(50), amount FLOAT, budget_date DATE); INSERT INTO Budget (id, department, category, amount, budget_date) VALUES (1, 'Operations', 'Salaries', 50000, '2019-01-01'); INSERT INTO Budget (id, department, category, amount, budget_date) VALUES (2, 'Marketing', 'Advertising', 30000, '2019-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, SUM(amount) as total_budget FROM Budget WHERE YEAR(budget_date) = 2019 GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에는 병원이 몇 개 있나요?\n\nDDL statements:\nCREATE TABLE Hospitals (ID INT, Name VARCHAR(100), State VARCHAR(50)); INSERT INTO Hospitals (ID, Name, State) VALUES (1, 'MD Anderson Cancer Center', 'Texas'), (2, 'Baylor University Medical Center', 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Hospitals WHERE State = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 2회 이상 기부한 기부자들 중 최소 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT PRIMARY KEY, donation_amount DECIMAL(10, 2), donation_date DATE, first_donation_date DATE); INSERT INTO donors (donor_id, donation_amount, donation_date, first_donation_date) VALUES (1, 250, '2021-01-01', '2020-01-01'), (2, 750, '2021-01-03', '2019-01-01'), (3, 900, '2021-02-05', '2021-01-01'), (4, 400, '2021-03-01', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(donation_amount) FROM donors WHERE YEAR(donation_date) = 2021 AND donor_id IN (SELECT donor_id FROM donors GROUP BY donor_id HAVING COUNT(*) > 2);"
    },
    {
        "instruction": "입력 텍스트: 민사 법 분야 사건의 최대 청구 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE cases (case_id INT, category VARCHAR(20), billing_amount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(billing_amount) FROM cases WHERE category = 'civil';"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 열리는 임시 전시회의 최대 방문객 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Exhibitions (id INT, city VARCHAR(50), visitors INT, exhibition_type VARCHAR(50)); INSERT INTO Exhibitions (id, city, visitors, exhibition_type) VALUES (1, 'Tokyo', 4000, 'temporary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(visitors) FROM Exhibitions WHERE city = 'Tokyo' AND exhibition_type = 'temporary';"
    },
    {
        "instruction": "입력 텍스트: 2022년 7월 동안 'Denver Post'와 'San Francisco Chronicle'에서 주말을 제외하고 매일 발행된 기사의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE DP_Articles(id INT, title VARCHAR(50), publication DATE, category VARCHAR(20));CREATE TABLE SFC_Articles(id INT, title VARCHAR(50), publication DATE, category VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END AS DayType, COUNT(*) FROM DP_Articles WHERE publication BETWEEN '2022-07-01' AND '2022-07-31' AND DATEPART(dw, publication) NOT IN (1,7) GROUP BY CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END UNION ALL SELECT CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END AS DayType, COUNT(*) FROM SFC_Articles WHERE publication BETWEEN '2022-07-01' AND '2022-07-31' AND DATEPART(dw, publication) NOT IN (1,7) GROUP BY CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END;"
    },
    {
        "instruction": "입력 텍스트: 셀틱스 경기에서 가장 많은 3점 슛을 성공시킨 팀은 어디인가요?\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(50)); INSERT INTO teams (team_id, team_name) VALUES (1, 'Celtics'); CREATE TABLE games (game_id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, home_team_three_point INT, away_team_three_point INT); INSERT INTO games (game_id, home_team_id, away_team_id, home_team_score, away_team_score, home_team_three_point, away_team_three_point) VALUES (1, 1, 2, 100, 90, 12, 10), (2, 2, 1, 80, 85, 15, 11), (3, 1, 3, 110, 105, 13, 14), (4, 4, 1, 70, 75, 9, 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT home_team_three_point, away_team_three_point, (home_team_three_point + away_team_three_point) as total_three_point FROM games WHERE home_team_id = (SELECT team_id FROM teams WHERE team_name = 'Celtics') OR away_team_id = (SELECT team_id FROM teams WHERE team_name = 'Celtics') ORDER BY total_three_point DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: Roads' 테이블에 'Rainbow Road'라는 이름의 도로를 새로운 레코드로 추가하세요. 이 도로의 ID는 4이며, 'Auckland, New Zealand'에 위치해 있고, '1985-07-20'에 추가되었습니다.\n\nDDL statements:\nCREATE TABLE Roads (ID INT, Name VARCHAR(50), Location VARCHAR(50), DateAdded DATE); INSERT INTO Roads (ID, Name, Location, DateAdded) VALUES (1, 'Highway 1', 'San Francisco, CA', '1937-05-27'); INSERT INTO Roads (ID, Name, Location, DateAdded) VALUES (2, 'Country Road 32', 'Gravel', '1967-03-21');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Roads (ID, Name, Location, DateAdded) VALUES (4, 'Rainbow Road', 'Auckland, New Zealand', '1985-07-20');"
    },
    {
        "instruction": "입력 텍스트: 우울증에 대한 가장 일반적인 치료 방법은 무엇인가요?\n\nDDL statements:\nCREATE TABLE treatments (id INT, patient_id INT, approach TEXT); CREATE TABLE conditions (id INT, name TEXT); INSERT INTO conditions (id, name) VALUES (1, 'Depression');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT approach, COUNT(*) as count FROM treatments JOIN conditions ON treatments.approach = conditions.name WHERE conditions.id = 1 GROUP BY approach ORDER BY count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 샤리아 준수 금융에서 가장 많은 금융을 제공받은 상위 3개국의 고객들에 대한 샤리아 준수 금융의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE shariah_financing(client_id INT, country VARCHAR(25), amount FLOAT);INSERT INTO shariah_financing(client_id, country, amount) VALUES (1, 'Malaysia', 5000), (2, 'UAE', 7000), (3, 'Indonesia', 6000), (4, 'Saudi Arabia', 8000), (5, 'Malaysia', 9000), (6, 'UAE', 10000), (7, 'Indonesia', 11000), (8, 'Saudi Arabia', 12000), (9, 'Malaysia', 13000), (10, 'UAE', 14000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(amount) as total_financing FROM shariah_financing WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY SUM(amount) DESC) as rank FROM shariah_financing GROUP BY country) WHERE rank <= 3) GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년에 'El País'에서 스페인어로 출판된 기사의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE articles_es (id INT, title VARCHAR(100), publication_date DATE, publisher VARCHAR(50), language VARCHAR(50)); INSERT INTO articles_es (id, title, publication_date, publisher, language) VALUES (1, 'Article1', '2019-01-01', 'El País', 'Spanish'), (2, 'Article2', '2020-02-01', 'El País', 'Spanish'), (3, 'Article3', '2021-03-01', 'El País', 'Spanish');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM articles_es WHERE publication_date BETWEEN '2019-01-01' AND '2020-12-31' AND publisher = 'El País' AND language = 'Spanish';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 제작되고 시즌이 10개를 초과하는 TV 프로그램은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE TV_Shows (show_id INT, title TEXT, country TEXT, seasons INT); INSERT INTO TV_Shows (show_id, title, country, seasons) VALUES (1, 'ShowC', 'USA', 8), (2, 'ShowD', 'Canada', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM TV_Shows WHERE country = 'Canada' AND seasons > 10;"
    },
    {
        "instruction": "입력 텍스트: 댐 건설' 분야에서 가장 비용이 많이 드는 상위 5개 프로젝트를 보여주세요.\n\nDDL statements:\nCREATE TABLE project_info (id INT, name VARCHAR(50), category VARCHAR(50), cost INT); INSERT INTO project_info (id, name, category, cost) VALUES (1, 'Test1', 'Dam Construction', 5000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM (SELECT * FROM project_info WHERE category = 'Dam Construction' ORDER BY cost DESC) subquery LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 해당 날짜에 런던 대중교통 시스템의 모든 버스가 이동한 총 거리는 얼마입니까?\n\nDDL statements:\nCREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(daily_distance) FROM london_buses WHERE date = '2022-03-01';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 플랫폼별로 게임을 플레이한 플레이어 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE PlayerGameHistory (PlayerGameID INT, PlayerID INT, GameID INT, PlayDate DATE, Platform VARCHAR(10)); INSERT INTO PlayerGameHistory (PlayerGameID, PlayerID, GameID, PlayDate, Platform) VALUES (1, 1, 1, '2022-02-01', 'PC'); INSERT INTO PlayerGameHistory (PlayerGameID, PlayerID, GameID, PlayDate, Platform) VALUES (2, 2, 2, '2022-02-05', 'Console');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Platform, COUNT(DISTINCT PlayerID) as PlayersLastWeek FROM PlayerGameHistory WHERE PlayDate >= '2022-02-01' GROUP BY Platform"
    },
    {
        "instruction": "입력 텍스트: 미국에서 운영되는 AI 시스템에 보고된 알고리즘 공정성 문제가 몇 건인지, 문제 수에 따라 내림차순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE ai_systems (system_id INT, system_name VARCHAR(50), country VARCHAR(50)); INSERT INTO ai_systems (system_id, system_name, country) VALUES (1, 'AISystem1', 'USA'), (2, 'AISystem2', 'Canada'), (3, 'AISystem3', 'Mexico'), (4, 'AISystem4', 'Brazil'); CREATE TABLE fairness_reports (report_id INT, system_id INT, issue_count INT); INSERT INTO fairness_reports (report_id, system_id, issue_count) VALUES (1, 1, 5), (2, 2, 3), (3, 3, 7), (4, 4, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.system_name, SUM(fr.issue_count) as total_issues FROM ai_systems a JOIN fairness_reports fr ON a.system_id = fr.system_id WHERE a.country = 'USA' GROUP BY a.system_name ORDER BY total_issues DESC;"
    },
    {
        "instruction": "입력 텍스트: 카리브 해에는 얼마나 많은 해양 생물 종이 있나요?\n\nDDL statements:\nCREATE TABLE CaribbeanSea (species_name TEXT, population INT); INSERT INTO CaribbeanSea (species_name, population) VALUES ('Manatee', 6500), ('Coral', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(species_name) FROM CaribbeanSea WHERE species_name != 'Coral';"
    },
    {
        "instruction": "입력 텍스트: community_development' 테이블에서 참가자가 가장 많은 커뮤니티 개발 프로그램의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE community_development (id INT, initiative_name VARCHAR(50), number_of_participants INT); INSERT INTO community_development VALUES (1, 'Youth Skills Training', 100), (2, 'Women Empowerment', 120), (3, 'Elderly Care', 80), (4, 'Environmental Conservation', 150), (5, 'Cultural Preservation', 110);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name FROM community_development WHERE number_of_participants = (SELECT MAX(number_of_participants) FROM community_development);"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 보건 근로자들의 언어별 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE community_health_workers (id INT, name VARCHAR(50), language VARCHAR(50)); INSERT INTO community_health_workers (id, name, language) VALUES (1, 'Juan Garcia', 'Spanish'), (2, 'James Smith', 'English'), (3, 'Sophia Nguyen', 'Vietnamese');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT language, COUNT(*) as count FROM community_health_workers GROUP BY language;"
    },
    {
        "instruction": "입력 텍스트: 다가오는 주에 재생 에너지 부서에서 유지 보수가 필요한 기계는 몇 대입니까?\n\nDDL statements:\nCREATE TABLE machines(id INT, name TEXT, department TEXT, last_maintenance DATE, next_maintenance DATE);INSERT INTO machines(id, name, department, last_maintenance, next_maintenance) VALUES (1, 'Machine A', 'Renewable Energy', '2021-09-01', '2021-11-05'), (2, 'Machine B', 'Renewable Energy', '2021-08-15', '2022-01-03'), (3, 'Machine C', 'Mechanical Engineering', '2021-10-01', '2021-12-05'), (4, 'Machine D', 'Electrical Engineering', '2021-07-01', '2021-09-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, COUNT(*) as machines_need_maintenance FROM machines WHERE next_maintenance <= DATE_ADD(CURRENT_DATE, INTERVAL 1 WEEK) AND department = 'Renewable Energy' GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 2018년 이후 소수 커뮤니티 출신 학생 중 평생교육 프로그램에 등록한 학생은 몇 명인가요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, enrollment_date DATE, underrepresented_community INT); INSERT INTO students (student_id, enrollment_date, underrepresented_community) VALUES (1, '2018-09-01', 1), (2, '2019-01-15', 0), (3, '2020-06-01', 1), (4, '2021-02-28', 0), (5, '2018-12-31', 1); CREATE TABLE programs (program_id INT, program_type VARCHAR(20)); INSERT INTO programs (program_id, program_type) VALUES (1, 'Lifelong Learning'), (2, 'Short Course'), (3, 'Workshop'), (4, 'Certification'), (5, 'Degree Program');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM students WHERE underrepresented_community = 1 AND enrollment_date >= '2018-01-01' AND program_id IN (SELECT program_id FROM programs WHERE program_type = 'Lifelong Learning');"
    },
    {
        "instruction": "입력 텍스트: 각 나라의 식사별 평균 칼로리 함량을 평균이 가장 높은 순으로 정렬해서 알려주세요.\n\nDDL statements:\nCREATE TABLE Meals (meal_id INT, meal_name TEXT, country_id INT, caloric_content FLOAT); CREATE TABLE Countries (country_id INT, country_name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Countries.country_name, AVG(Meals.caloric_content) as avg_caloric_content FROM Meals INNER JOIN Countries ON Meals.country_id = Countries.country_id GROUP BY Countries.country_name ORDER BY avg_caloric_content DESC;"
    },
    {
        "instruction": "입력 텍스트: employee_demographics'에서 각 지역별 직원 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE employee_demographics (id INT PRIMARY KEY, employee_id INT, name VARCHAR(255), department VARCHAR(255), region VARCHAR(255)); INSERT INTO employee_demographics (id, employee_id, name, department, region) VALUES (1, 101, 'Jamal Johnson', 'Marketing', 'Northwest'), (2, 102, 'Sofia Garcia', 'IT', 'Northeast');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM employee_demographics GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 접수된 시민 피드백 기록의 총 수를 피드백 유형별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Feedback (Year INT, Type VARCHAR(20), Records INT); INSERT INTO Feedback (Year, Type, Records) VALUES (2022, 'Online', 12000), (2022, 'In-Person', 8000), (2022, 'Phone', 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Type, SUM(Records) FROM Feedback WHERE Year = 2022 GROUP BY Type;"
    },
    {
        "instruction": "입력 텍스트: 건물의 최대 설계 기준 하중 용량은 몇 톤입니까?\n\nDDL statements:\nCREATE TABLE design_standards (id INT, structure_type VARCHAR(255), load_capacity_tonnes FLOAT); INSERT INTO design_standards (id, structure_type, load_capacity_tonnes) VALUES (1, 'Building', 500.0), (2, 'Bridge', 800.0), (3, 'Tunnel', 600.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(load_capacity_tonnes) FROM design_standards WHERE structure_type = 'Building';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 지속 가능한 의류 아이템 생산에 사용된 각각의 원단 종류별 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE FabricInventory (InventoryID INT, ItemID INT, FabricType TEXT, Quantity INT); INSERT INTO FabricInventory (InventoryID, ItemID, FabricType, Quantity) VALUES (1, 1, 'Organic Cotton', 3), (2, 1, 'Hemp', 2), (3, 2, 'Recycled Polyester', 4), (4, 3, 'Organic Cotton', 5), (5, 4, 'Tencel', 6), (6, 5, 'Conventional Cotton', 7), (7, 6, 'Organic Cotton', 8), (8, 6, 'Hemp', 3), (9, 7, 'Recycled Polyester', 9); CREATE TABLE ClothingItems (ItemID INT, ItemName TEXT, ProductionDate DATE, Sustainable BOOLEAN); INSERT INTO ClothingItems (ItemID, ItemName, ProductionDate, Sustainable) VALUES (1, 'Organic Cotton Dress', '2021-01-01', true), (2, 'Recycled Polyester Skirt', '2021-02-01', true), (3, 'Organic Cotton Pants', '2021-03-01', true), (4, 'Tencel Jacket', '2021-04-01', true), (5, 'Conventional Cotton Shirt', '2021-05-01', false), (6, 'Sustainable Denim Jeans', '2021-06-01', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FabricType, SUM(Quantity) as TotalQuantity FROM FabricInventory JOIN ClothingItems ON FabricInventory.ItemID = ClothingItems.ItemID WHERE ProductionDate BETWEEN '2021-01-01' AND '2021-12-31' AND Sustainable = true GROUP BY FabricType;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 생산된 제품들의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, price DECIMAL, country_of_origin TEXT); INSERT INTO products (product_id, product_name, price, country_of_origin) VALUES (1, 'T-Shirt', 20, 'USA'), (2, 'Jeans', 50, 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM products WHERE country_of_origin = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년까지 지속적으로 디스프로슘 생산량이 증가한 회사를 확인하세요.\n\nDDL statements:\nCREATE TABLE DysprosiumProduction (Company VARCHAR(50), Year INT, Production FLOAT); INSERT INTO DysprosiumProduction(Company, Year, Production) VALUES ('CompanyA', 2018, 75.3), ('CompanyA', 2019, 82.7), ('CompanyA', 2020, 90.1), ('CompanyB', 2018, 63.9), ('CompanyB', 2019, 68.1), ('CompanyB', 2020, 73.8), ('CompanyC', 2018, 86.4), ('CompanyC', 2019, 88.2), ('CompanyC', 2020, 89.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Company FROM (SELECT Company, Production, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Year) as rn, LAG(Production) OVER (PARTITION BY Company ORDER BY Year) as prev_prod FROM DysprosiumProduction) t WHERE rn > 1 AND prev_prod < Production GROUP BY Company HAVING COUNT(*) = 3;"
    },
    {
        "instruction": "입력 텍스트: 어떤 유전 연구가 800만 달러 이상의 예산을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE research (name TEXT, budget FLOAT); INSERT INTO research (name, budget) VALUES ('ResearchA', 7000000), ('ResearchB', 9000000), ('ResearchC', 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM research WHERE budget > 8000000;"
    },
    {
        "instruction": "입력 텍스트: 지난 10년간 지중해의 평균 수염도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mediterranean_salinity (year INT, salinity FLOAT); INSERT INTO mediterranean_salinity (year, salinity) VALUES (2012, 38.4), (2013, 38.3), (2014, 38.5), (2015, 38.6), (2016, 38.7), (2017, 38.8), (2018, 38.9), (2019, 39.0), (2020, 39.1), (2021, 39.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salinity) FROM mediterranean_salinity WHERE year BETWEEN (SELECT EXTRACT(YEAR FROM NOW()) - 10) AND EXTRACT(YEAR FROM NOW());"
    },
    {
        "instruction": "입력 텍스트: 재활용 프로그램에 참여하는 도시들의 평균 폐기물 발생량보다 많은 폐기물을 발생시키는 도시들을 확인하세요.\n\nDDL statements:\nCREATE TABLE Cities (CityID INT, CityName VARCHAR(50), WasteGeneration FLOAT); INSERT INTO Cities VALUES (1, 'CityA', 1200), (2, 'CityB', 1800), (3, 'CityC', 1500); CREATE TABLE RecyclingProgram (CityID INT); INSERT INTO RecyclingProgram VALUES (1), (2), (3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CityName, WasteGeneration FROM Cities WHERE WasteGeneration > (SELECT AVG(Cities.WasteGeneration) FROM Cities INNER JOIN RecyclingProgram ON Cities.CityID = RecyclingProgram.CityID);"
    },
    {
        "instruction": "입력 텍스트: 2023년 하반기 중동 지역에서 지속 가능한 관광 등급이 가장 낮은 여행지는 어디인가요?\n\nDDL statements:\nCREATE TABLE SustainabilityRatings (DestinationID INT, Destination VARCHAR(50), SustainabilityRating INT, Country VARCHAR(50)); INSERT INTO SustainabilityRatings (DestinationID, Destination, SustainabilityRating, Country) VALUES (1, 'Desert Retreat', 2, 'United Arab Emirates'), (2, 'Ancient Ruins', 3, 'Israel'), (3, 'Historic City', 4, 'Turkey');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Destination, SUM(SustainabilityRating) AS TotalRating FROM SustainabilityRatings WHERE Country = 'United Arab Emirates' OR Country = 'Israel' OR Country = 'Turkey' AND SustainabilityRating < 5 GROUP BY Destination ORDER BY TotalRating ASC;"
    },
    {
        "instruction": "입력 텍스트: rural_infrastructure' 테이블에서 농업 혁신 프로젝트의 최대 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rural_infrastructure (id INT, name VARCHAR(50), type VARCHAR(50), budget FLOAT); INSERT INTO rural_infrastructure (id, name, type, budget) VALUES (1, 'Solar Irrigation', 'Agricultural Innovation', 150000.00), (2, 'Wind Turbines', 'Rural Infrastructure', 200000.00), (3, 'Drip Irrigation', 'Agricultural Innovation', 110000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(budget) FROM rural_infrastructure WHERE type = 'Agricultural Innovation';"
    },
    {
        "instruction": "입력 텍스트: ID '12345'인 유권자의 등록 날짜를 '2022-01-01'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE voting_data (voter_id INT, name VARCHAR(100), age INT, state VARCHAR(50), registration_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE voting_data SET registration_date = '2022-01-01' WHERE voter_id = 12345;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 개최된 전시회의 평균 방문객 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE exhibitions (id INT, country VARCHAR(50), visitor_count INT); INSERT INTO exhibitions (id, country, visitor_count) VALUES (1, 'USA', 300), (2, 'Canada', 200), (3, 'Mexico', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(visitor_count) FROM exhibitions GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 창의적 AI 알고리즘의 설명 가능성 점수가 대륙별로 어떻게 분포되어 있나요?\n\nDDL statements:\nCREATE TABLE creative_ai_algorithm_explainability_scores (issue_id INT PRIMARY KEY, ai_algorithm_id INT, explainability_score FLOAT, continent VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, AVG(explainability_score) AS avg_explainability_score FROM creative_ai_algorithm_explainability_scores GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 현재 달 독일의 총 강수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE iot_sensors (id INT, location VARCHAR(50), precipitation FLOAT, reading_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(precipitation) FROM iot_sensors WHERE location = 'Germany' AND reading_time BETWEEN DATE_FORMAT(NOW(), '%Y-%m-01') AND LAST_DAY(NOW());"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 양식장 유형별로 분류된 평균 용존 산소 농도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE aquaculture_sites (site_id INT, country VARCHAR(50), farm_type VARCHAR(50), dissolved_oxygen FLOAT); INSERT INTO aquaculture_sites VALUES (1, 'Norway', 'Freshwater', 7.5), (2, 'Norway', 'Marine', 8.2), (3, 'Canada', 'Freshwater', 6.8), (4, 'Canada', 'Marine', 8.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, farm_type, AVG(dissolved_oxygen) AS avg_dissolved_oxygen FROM aquaculture_sites GROUP BY country, farm_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 시각 장애가 있는 학생들 중 얼마나 많은 학생이 편의 제공을 받았습니까?\n\nDDL statements:\nCREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Accommodations INNER JOIN Students ON Accommodations.student = Students.id WHERE disability = 'visual impairment' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 각 후원자별 기부금의 누적 합계는 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, supporter INT, amount FLOAT); INSERT INTO donations (id, supporter, amount) VALUES (1, 1, 50.00), (2, 2, 100.00), (3, 3, 150.00), (4, 4, 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supporter, amount, SUM(amount) OVER (ORDER BY supporter) AS running_total FROM donations;"
    },
    {
        "instruction": "입력 텍스트: 국가별 인도주의 지원 작전에서 200명 이상의 인원을 보유한 국가의 평균 군인 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE HumanitarianAssistanceOperations (id INT, country VARCHAR(50), military_personnel INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(military_personnel) FROM HumanitarianAssistanceOperations GROUP BY country HAVING COUNT(*) > 200;"
    },
    {
        "instruction": "입력 텍스트: 각 해양 보호 프로젝트의 총 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE conservation_projects (id INT, name VARCHAR(20), co2_emissions INT); INSERT INTO conservation_projects (id, name, co2_emissions) VALUES (1, 'Coral Reef Restoration', 250), (2, 'Mangrove Forest Protection', 180), (3, 'Seagrass Meadows Conservation', 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, SUM(co2_emissions) FROM conservation_projects GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 브라질 사용자의 최대 운동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Workout (user_id INT, workout_duration INT, country VARCHAR(50)); INSERT INTO Workout (user_id, workout_duration, country) VALUES (1, 30, 'Brazil'), (2, 40, 'USA'), (3, 50, 'Brazil'), (4, 60, 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(workout_duration) FROM Workout WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 소수 민족 출신 직원의 총 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE employee (employee_id INT, employee_name TEXT, gender TEXT, ethnicity TEXT); INSERT INTO employee (employee_id, employee_name, gender, ethnicity) VALUES (1, 'John Doe', 'Male', 'Caucasian'), (2, 'Jane Smith', 'Female', 'African American'), (3, 'Alice Johnson', 'Female', 'Hispanic'), (4, 'Bob Brown', 'Male', 'Asian'), (5, 'Emily Davis', 'Female', 'Native American'), (6, 'Michael Lee', 'Male', 'Asian'), (7, 'Jessica Kim', 'Female', 'Asian'), (8, 'David Nguyen', 'Male', 'Asian'), (9, 'Grace Park', 'Female', 'Asian'), (10, 'Daniel Kim', 'Male', 'Asian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(e.employee_id) as total_employees FROM employee e WHERE e.ethnicity IN ('African American', 'Hispanic', 'Native American');"
    },
    {
        "instruction": "입력 텍스트: 2016년 DrugC의 총 판매액은 얼마였나요?\n\nDDL statements:\nCREATE TABLE PharmaSales (DrugName TEXT, Year INTEGER, Sales INTEGER); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugA', 2015, 5000000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugA', 2016, 5500000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugB', 2015, 6000000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugB', 2016, 6500000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugC', 2017, 7000000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugC', 2016, 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Sales) FROM PharmaSales WHERE DrugName = 'DrugC' AND Year = 2016;"
    },
    {
        "instruction": "입력 텍스트: 주중 각 요일별 최대 911 통화량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE call_volume (cvid INT, call_date DATE, call_count INT, day_of_week VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT day_of_week, MAX(call_count) FROM call_volume GROUP BY day_of_week;"
    },
    {
        "instruction": "입력 텍스트: 2000년부터 2010년 사이에 캘리포니아를 제외한 각 주에서 건설된 폐수 처리장의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE wastewater_plants(state VARCHAR(20), year INT, num_plants INT); INSERT INTO wastewater_plants VALUES ('California', 2000, 15), ('California', 2001, 17), ('California', 2002, 19), ('Nevada', 2000, 5), ('Nevada', 2001, 6), ('Nevada', 2002, 7), ('Arizona', 2000, 8), ('Arizona', 2001, 9), ('Arizona', 2002, 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM wastewater_plants WHERE state != 'California' AND year BETWEEN 2000 AND 2010 GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 오리건 주에서 시간당 건설 노동 비용의 최대 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE labor_costs (id INT, task VARCHAR(50), cost FLOAT, state VARCHAR(50)); INSERT INTO labor_costs (id, task, cost, state) VALUES (1, 'Concrete Work', 50.00, 'Oregon'); INSERT INTO labor_costs (id, task, cost, state) VALUES (2, 'Electrical Work', 60.50, 'Oregon');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(cost) FROM labor_costs WHERE state = 'Oregon'"
    },
    {
        "instruction": "입력 텍스트: 가장 많이 본 애니메이션 영화 상위 3개를 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE movie (id INT, title VARCHAR(50), genre VARCHAR(20), viewers INT); INSERT INTO movie (id, title, genre, viewers) VALUES (1, 'Movie1', 'Animation', 150000), (2, 'Movie2', 'Action', 250000), (3, 'Movie3', 'Animation', 200000), (4, 'Movie4', 'Drama', 100000), (5, 'Movie5', 'Animation', 220000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title FROM movie WHERE genre = 'Animation' ORDER BY viewers DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 남중국해' 스키마에 있는 우물의 최대 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE SouthChinaSea.wells (well_id INT, depth FLOAT); INSERT INTO SouthChinaSea.wells (well_id, depth) VALUES (1, 1200.5), (2, 1800.3), (3, 2050.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(depth) FROM SouthChinaSea.wells;"
    },
    {
        "instruction": "입력 텍스트: 각 원인별로 몇 명의 고유 기부자가 있습니까?\n\nDDL statements:\nCREATE TABLE unique_donors (donor_id INT, cause_id INT); INSERT INTO unique_donors (donor_id, cause_id) VALUES (1, 1), (1, 2), (2, 2), (3, 3), (3, 3), (4, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cause_id, COUNT(DISTINCT donor_id) AS unique_donors FROM unique_donors GROUP BY cause_id;"
    },
    {
        "instruction": "입력 텍스트: 50,000톤 미만의 용량을 가진 모든 선박을 나열하시오.\n\nDDL statements:\nCREATE TABLE vessel_capacity (id INT, vessel_id INT, capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.name FROM vessel_capacity vc JOIN vessel v ON vc.vessel_id = v.id WHERE vc.capacity < 50000;"
    },
    {
        "instruction": "입력 텍스트: 저궤도(LEO)에서 10년 이상 활동한 모든 우주 임무를 삭제하세요.\n\nDDL statements:\nCREATE TABLE leo_missions (id INT, name VARCHAR(50), type VARCHAR(50), orbit VARCHAR(50), years_active INT); INSERT INTO leo_missions (id, name, type, orbit, years_active) VALUES (1, 'Mission1', 'Communication', 'LEO', 8), (2, 'Mission2', 'Observation', 'LEO', 11), (3, 'Mission3', 'Navigation', 'LEO', 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM leo_missions WHERE orbit = 'LEO' AND years_active > 10;"
    },
    {
        "instruction": "입력 텍스트: global_tournament' 테이블에서 일본 출신 선수들의 평균 점수는 얼마였습니까?\n\nDDL statements:\nCREATE TABLE global_tournament (player_id INT, player_name TEXT, score INT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(score) as avg_score FROM global_tournament WHERE country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 팝 아티스트의 앨범당 평균 트랙 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE artists (id INT, name VARCHAR(255), genre VARCHAR(255)); CREATE TABLE albums (id INT, artist_id INT, title VARCHAR(255), num_tracks INT); INSERT INTO artists (id, name, genre) VALUES (1, 'Taylor Swift', 'Pop'), (2, 'BTS', 'Pop'), (3, 'Ed Sheeran', 'Pop'); INSERT INTO albums (id, artist_id, title, num_tracks) VALUES (1, 1, 'Lover', 18), (2, 1, 'Fearless', 13), (3, 2, 'BE', 14), (4, 3, 'Divide', 16);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_tracks) FROM albums WHERE genre = 'Pop' GROUP BY artist_id;"
    },
    {
        "instruction": "입력 텍스트: 재활용' 인증과 '공정 무역' 인증을 받은 제품들 중 최대 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(255), certification VARCHAR(255), quantity INT);INSERT INTO products VALUES (1,'Product A','recycled',5),(2,'Product B','fair_trade',10),(3,'Product C','organic',15),(4,'Product D','recycled',20),(5,'Product E','fair_trade',25),(6,'Product F','recycled, fair_trade',30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(quantity) FROM products WHERE certification IN ('recycled', 'fair_trade') GROUP BY certification HAVING COUNT(DISTINCT certification) = 2"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 각 기부자 유형별로 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), DonorType VARCHAR(50));  CREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL(10,2), DonationDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Donors.DonorType, SUM(Donations.DonationAmount) FROM Donors INNER JOIN Donations ON Donors.DonorID = Donations.DonorID WHERE Donations.DonationDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY Donors.DonorType;"
    },
    {
        "instruction": "입력 텍스트: 에코하우징 개발 단지 내의 공동 소유주를 찾아주세요.\n\nDDL statements:\nCREATE TABLE EcoHousing (property_id INT, coowner_name TEXT, units_owned INT); INSERT INTO EcoHousing (property_id, coowner_name, units_owned) VALUES (1, 'John Doe', 2), (1, 'Jane Smith', 3); CREATE TABLE Property (property_id INT, development_name TEXT); INSERT INTO Property (property_id, development_name) VALUES (1, 'EcoHousing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT coowner_name FROM EcoHousing JOIN Property ON EcoHousing.property_id = Property.property_id WHERE development_name = 'EcoHousing';"
    },
    {
        "instruction": "입력 텍스트: 2016년부터 2019년 사이에 과테말라에서 도입된 농업 혁신 기술은 무엇인가요?\n\nDDL statements:\nCREATE TABLE agricultural_innovations (innovation_id INT, country TEXT, innovation TEXT, implementation_year INT); INSERT INTO agricultural_innovations (innovation_id, country, innovation, implementation_year) VALUES (1, 'Guatemala', 'Precision agriculture', 2016), (2, 'Guatemala', 'Drip irrigation', 2017), (3, 'Guatemala', 'Vertical farming', 2018), (4, 'Guatemala', 'Automated harvesting', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT innovation FROM agricultural_innovations WHERE country = 'Guatemala' AND implementation_year BETWEEN 2016 AND 2019;"
    },
    {
        "instruction": "입력 텍스트: 여러 나라의 우주비행사가 참여한 모든 우주 미션을 찾으세요.\n\nDDL statements:\nCREATE TABLE missions (mission_name VARCHAR(50), country1 VARCHAR(50), country2 VARCHAR(50)); INSERT INTO missions (mission_name, country1, country2) VALUES ('Apollo-Soyuz Test Project', 'USA', 'Russia'), ('Gemini 12', 'USA', 'None'), ('Shenzhou 5', 'China', 'None');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name FROM missions WHERE country1 != country2;"
    },
    {
        "instruction": "입력 텍스트: fans' 테이블에서 'Canada' 출신 팬의 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE fans (fan_id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO fans (fan_id, name, country) VALUES (1, 'Alice Johnson', 'Canada'); INSERT INTO fans (fan_id, name, country) VALUES (2, 'Bob Smith', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM fans WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 발생하고 심각도 수준이 7 이상인 모든 사이버 보안 사고를 날짜 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE cybersecurity_incidents(incident_id INT, incident_date DATE, severity INT); INSERT INTO cybersecurity_incidents(incident_id, incident_date, severity) VALUES (1, '2019-01-01', 8), (2, '2019-05-15', 5), (3, '2019-12-31', 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM cybersecurity_incidents WHERE YEAR(incident_date) = 2019 AND severity > 7 ORDER BY incident_date;"
    },
    {
        "instruction": "입력 텍스트: 2022년 6월 '팔라펠 랩'의 재료 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Ingredients (ingredient_id INT, ingredient_name TEXT, dish_id INT, cost FLOAT); INSERT INTO Ingredients (ingredient_id, ingredient_name, dish_id, cost) VALUES (1, 'Falafel', 3, 3.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM Ingredients WHERE dish_id IN (SELECT dish_id FROM Dishes WHERE dish_name = 'Falafel Wrap') AND ingredient_name NOT IN ('Hummus', 'Pita Bread');"
    },
    {
        "instruction": "입력 텍스트: 2020년에 배출량이 가장 많은 상위 3개국의 총 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Co2Emissions (country VARCHAR(50), year INT, co2_emission FLOAT); INSERT INTO Co2Emissions (country, year, co2_emission) VALUES ('United States', 2020, 5134.3), ('China', 2020, 10458.8), ('India', 2020, 2718.6), ('United States', 2019, 5035.1), ('China', 2019, 10380.6), ('India', 2019, 2648.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(co2_emission) as total_emission FROM (SELECT country, co2_emission FROM Co2Emissions WHERE year = 2020 ORDER BY co2_emission DESC LIMIT 3) t;"
    },
    {
        "instruction": "입력 텍스트: 북극 지역에서 매우 위험한 상태에 처한 모든 멸종 위기 종의 총 개체 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Endangered_Species (ID INT, Name VARCHAR(50), Population INT, Status VARCHAR(50), Region VARCHAR(50)); INSERT INTO Endangered_Species VALUES (1, 'Snowy Owl', 1000, 'Least Concern', 'Arctic'); INSERT INTO Endangered_Species VALUES (2, 'Gyrfalcon', 2000, 'Least Concern', 'Arctic'); INSERT INTO Endangered_Species VALUES (3, 'Peregrine Falcon', 1500, 'Critically Endangered', 'Arctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Population) FROM Endangered_Species WHERE Status = 'Critically Endangered';"
    },
    {
        "instruction": "입력 텍스트: storage 테이블에 있는 각 에너지 저장 기술별 총 에너지 저장 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE storage (id INT, name VARCHAR(50), type VARCHAR(50), capacity INT, location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, SUM(capacity) as total_capacity FROM storage GROUP BY type ORDER BY total_capacity DESC;"
    },
    {
        "instruction": "입력 텍스트: 2021년 상반기 중 가장 높은 비용과 가장 낮은 비용을 기록한 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE programs (program_id INT, program_name TEXT, program_expenses FLOAT, program_date DATE); INSERT INTO programs (program_id, program_name, program_expenses, program_date) VALUES (1, 'Education', 8000, '2021-01-01'); INSERT INTO programs (program_id, program_name, program_expenses, program_date) VALUES (2, 'Health', 5000, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name, program_expenses FROM (SELECT program_name, program_expenses, ROW_NUMBER() OVER (ORDER BY program_expenses DESC) AS high_expense, ROW_NUMBER() OVER (ORDER BY program_expenses ASC) AS low_expense FROM programs WHERE EXTRACT(YEAR FROM program_date) = 2021 AND EXTRACT(MONTH FROM program_date) BETWEEN 1 AND 6) AS subquery WHERE high_expense = 1 OR low_expense = 1;"
    },
    {
        "instruction": "입력 텍스트: 2019년 애리조나 주의 건강 형평성 지표를 삭제하세요\n\nDDL statements:\nCREATE TABLE health_equity_metrics (state VARCHAR(2), year INT, accessibility FLOAT, affordability FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM health_equity_metrics WHERE state = 'AZ' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: \"Simulation\" 카테고리에 속한 각 게임의 평균 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GameStats (GameID int, GameName varchar(50), Category varchar(50), Playtime decimal(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Category, AVG(Playtime) OVER(PARTITION BY Category) as AvgPlaytime FROM GameStats;"
    },
    {
        "instruction": "입력 텍스트: 123번 글을 좋아한 모든 사용자의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, age INT, gender TEXT); INSERT INTO users (id, age, gender) VALUES (1, 25, 'Female'), (2, 35, 'Male'), (3, 45, 'Non-binary'); CREATE TABLE likes (user_id INT, article_id INT); INSERT INTO likes (user_id, article_id) VALUES (1, 123), (2, 123), (3, 456);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(users.age) FROM users INNER JOIN likes ON users.id = likes.user_id WHERE likes.article_id = 123;"
    },
    {
        "instruction": "입력 텍스트: 대마초 판매 총수익이 가장 높은 상위 5개 주는 무엇인가요?\n\nDDL statements:\nCREATE TABLE States (state VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO States (state, revenue) VALUES ('CA', 1200000), ('CO', 800000), ('WA', 700000), ('OR', 600000), ('MI', 500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(revenue) as total_revenue FROM States GROUP BY state ORDER BY total_revenue DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 공정 무역 인증을 받은 공장이 가장 많은 나라는 어디인가요?\n\nDDL statements:\nCREATE TABLE factories (id INT, name VARCHAR(50), country VARCHAR(50), certified BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS factory_count FROM factories WHERE certified = TRUE GROUP BY country ORDER BY factory_count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 주어진 위치에서 운행하는 모든 대중교통 시스템을 나열합니다\n\nDDL statements:\nCREATE TABLE public_transportation (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW public_transportation_by_location AS SELECT location, GROUP_CONCAT(name) as transportation_systems FROM public_transportation GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 영구농법을 사용하는 모든 토착 식량 시스템을 나열하시오.\n\nDDL statements:\nCREATE TABLE Indigenous_Food_Systems (System_ID INT, Country VARCHAR(20), Farming_Method VARCHAR(20)); INSERT INTO Indigenous_Food_Systems (System_ID, Country, Farming_Method) VALUES (1001, 'Spain', 'Permaculture'), (1002, 'France', 'Permaculture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Indigenous_Food_Systems WHERE Country IN ('Spain', 'France') AND Farming_Method = 'Permaculture';"
    },
    {
        "instruction": "입력 텍스트: 성별에 따른 건강 형평성 지표 점수의 최소값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, gender VARCHAR(10), health_equity_metric_score INT); INSERT INTO patients (patient_id, gender, health_equity_metric_score) VALUES (1, 'Female', 75), (2, 'Male', 80), (3, 'Female', 60), (4, 'Non-binary', 90), (5, 'Male', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, MIN(health_equity_metric_score) FROM patients GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 사회 공헌 프로젝트 중에서 가장 예산이 높은 기술은 무엇인가요?\n\nDDL statements:\nCREATE TABLE social_good_projects (id INT, project_name TEXT, budget INT); INSERT INTO social_good_projects (id, project_name, budget) VALUES (1, 'Smart Energy Grids', 900000), (2, 'AI for Disaster Response', 700000), (3, 'Accessible Technology Initiative', 800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, budget FROM social_good_projects ORDER BY budget DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 샤리아 준수 금융 상품들과 그 설명을 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE shariah_compliant_products (product_id INT, product_name TEXT, description TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_name, description  FROM shariah_compliant_products;"
    },
    {
        "instruction": "입력 텍스트: news_reporting' 테이블에서 '스포츠' 카테고리에 속하는 기사들의 평균 단어 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE news_reporting (article_id INT, author VARCHAR(50), title VARCHAR(100), published_date DATE, category VARCHAR(30), word_count INT, author_gender VARCHAR(10)); INSERT INTO news_reporting (article_id, author, title, published_date, category, word_count, author_gender) VALUES (1, 'Aisha Jones', 'Article 7', '2021-01-07', 'Sports', 600, 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(word_count) AS avg_word_count FROM news_reporting WHERE category = 'Sports';"
    },
    {
        "instruction": "입력 텍스트: 남부 지역 고객들이 가장 선호하는 디저트 상위 5개를 나열하세요.\n\nDDL statements:\nCREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, region VARCHAR(50)); CREATE TABLE order_details (order_id INT, menu_id INT, quantity_sold INT); CREATE TABLE menu (menu_id INT, menu_name VARCHAR(255), menu_category VARCHAR(50)); INSERT INTO orders (order_id, customer_id, order_date, region) VALUES (1, 1, '2022-01-01', 'South'), (2, 2, '2022-01-02', 'North'), (3, 3, '2022-01-03', 'South'); INSERT INTO order_details (order_id, menu_id, quantity_sold) VALUES (1, 1, 10), (1, 2, 5), (2, 2, 8), (2, 3, 12), (3, 4, 20); INSERT INTO menu (menu_id, menu_name, menu_category) VALUES (1, 'Chocolate Cake', 'Dessert'), (2, 'Cheese Cake', 'Dessert'), (3, 'Beef Burger', 'Main Course'), (4, 'Ice Cream', 'Dessert');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT menu_name, SUM(quantity_sold) as total_quantity FROM order_details o JOIN orders ON o.order_id = orders.order_id JOIN menu m ON o.menu_id = m.menu_id WHERE region = 'South' AND menu_category = 'Dessert' GROUP BY menu_name ORDER BY total_quantity DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 어떤 공장들이 4차 산업 혁명 기술을 도입하였고 아메리카에 위치해 있습니까?\n\nDDL statements:\nCREATE TABLE factories (name TEXT, region TEXT, industry_4_0 BOOLEAN); INSERT INTO factories (name, region, industry_4_0) VALUES ('Delta Manufacturing', 'Americas', TRUE), ('Epsilon Robotics', 'Europe', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM factories WHERE region = 'Americas' AND industry_4_0 = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2021년 8월 하반기에 \"Field4\"에서 각 센서 아이디별로 평균 강수량(밀리미터 단위)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Field4_Precip (sensor_id INT, sensor_reading DATE, precip FLOAT); INSERT INTO Field4_Precip (sensor_id, sensor_reading, precip) VALUES (1, '2021-08-15', 5.2), (2, '2021-08-16', 7.0), (1, '2021-08-17', 4.9), (2, '2021-08-17', 6.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sensor_id, AVG(precip) FROM Field4_Precip WHERE sensor_reading BETWEEN '2021-08-16' AND '2021-08-31' GROUP BY sensor_id;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, Name TEXT, Country TEXT, TotalDonation FLOAT); INSERT INTO Donors (DonorID, Name, Country, TotalDonation) VALUES (1, 'John Smith', 'USA', 500.00), (2, 'Jane Doe', 'Canada', 350.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, SUM(TotalDonation) FROM Donors GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 콜롬비아에 있는 IoT 센서 중 지난 주 동안 데이터를 보내지 않은 센서의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE iot_sensors (id INT, sensor_type VARCHAR(50), location VARCHAR(50), last_data_received DATE); INSERT INTO iot_sensors (id, sensor_type, location, last_data_received) VALUES (1, 'Temperature', 'Colombia', '2022-04-15'), (2, 'Humidity', 'Colombia', '2022-04-18'), (3, 'Soil Moisture', 'Colombia', '2022-04-19'), (4, 'Temperature', 'Colombia', '2022-04-20'), (5, 'Humidity', 'Colombia', '2022-04-21');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM iot_sensors WHERE last_data_received <= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"
    },
    {
        "instruction": "입력 텍스트: 라벤더' 성분을 포함하고 '비건' 및 '크루얼티-프리'로 표시된 뷰티 제품을 나열하세요.\n\nDDL statements:\nCREATE TABLE IngredientsVeganCrueltyFree (product_id INT, ingredient TEXT, is_vegan BOOLEAN, is_cruelty_free BOOLEAN); INSERT INTO IngredientsVeganCrueltyFree (product_id, ingredient, is_vegan, is_cruelty_free) VALUES (1, 'aloe vera', true, true), (2, 'almond oil', false, false), (3, 'coconut oil', true, true), (4, 'lavender', false, true), (5, 'lavender', true, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_id, ingredient FROM IngredientsVeganCrueltyFree WHERE ingredient = 'lavender' AND is_vegan = true AND is_cruelty_free = true;"
    },
    {
        "instruction": "입력 텍스트: 공과대학의 각 학과별로 평균적으로 수여된 연구 보조금의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE college (id INT, name VARCHAR(255)); INSERT INTO college (id, name) VALUES (1, 'College of Engineering'); CREATE TABLE departments (id INT, name VARCHAR(255), college_id INT, PRIMARY KEY (id), FOREIGN KEY (college_id) REFERENCES college(id)); INSERT INTO departments (id, name, college_id) VALUES (1, 'Mechanical Engineering', 1), (2, 'Electrical Engineering', 1); CREATE TABLE grants (id INT, department_id INT, PRIMARY KEY (id), FOREIGN KEY (department_id) REFERENCES departments(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(g.count) FROM (SELECT COUNT(grants.id) AS count FROM grants GROUP BY grants.department_id) AS g;"
    },
    {
        "instruction": "입력 텍스트: 공동 소유 부동산이 10개 이상 있는 도시의 이름과 각 도시별 공동 소유 부동산의 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE co_ownerships (id INT, city VARCHAR(255), co_ownership BOOLEAN); INSERT INTO co_ownerships (id, city, co_ownership) VALUES (1, 'Los Angeles', true), (2, 'Los Angeles', true), (3, 'San Diego', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) FROM co_ownerships WHERE co_ownership = true GROUP BY city HAVING COUNT(*) > 10;"
    },
    {
        "instruction": "입력 텍스트: 시애틀 시에 설치된 풍력 발전 프로젝트의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wind_projects (project_id INT, project_name VARCHAR(255), city VARCHAR(255), state VARCHAR(255), capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM wind_projects WHERE city = 'Seattle';"
    },
    {
        "instruction": "입력 텍스트: 지난 10년간 멕시코만에서 어종별 총 생물량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_biomass (id INT, species TEXT, location TEXT, year INT, biomass INT); INSERT INTO fish_biomass (id, species, location, year, biomass) VALUES (1, 'Tuna', 'Gulf of Mexico', 2012, 25000), (2, 'Mackerel', 'Gulf of Mexico', 2012, 18000), (3, 'Tuna', 'Gulf of Mexico', 2013, 27000), (4, 'Mackerel', 'Gulf of Mexico', 2013, 19000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, species, SUM(biomass) biomass FROM fish_biomass WHERE year BETWEEN 2011 AND 2021 GROUP BY location, species;"
    },
    {
        "instruction": "입력 텍스트: 2020년 북극 지역에서 기록된 최저 기온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE temperature_data (id INT, region VARCHAR(50), year INT, temperature DECIMAL); INSERT INTO temperature_data (id, region, year, temperature) VALUES (1, 'Arctic', 2020, -25.6); INSERT INTO temperature_data (id, region, year, temperature) VALUES (2, 'Antarctic', 2019, -35.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(temperature) FROM temperature_data WHERE region = 'Arctic' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: SupportPrograms' 테이블에서 지원 프로그램의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SupportPrograms (program_id INT, program_name VARCHAR(255), cost DECIMAL(10, 2)); INSERT INTO SupportPrograms (program_id, program_name, cost) VALUES (2001, 'Buddy Program', 1500.00), (2002, 'Mentorship Program', 2500.00), (2003, 'Tutoring Program', 3500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM SupportPrograms;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 총 운임 요금이 가장 높은 상위 3개의 고객사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE CustomersRegion (CustomerID INT, CustomerName VARCHAR(255), Region VARCHAR(50), TotalFreightCharges DECIMAL(10, 2)); INSERT INTO CustomersRegion (CustomerID, CustomerName, Region, TotalFreightCharges) VALUES (1, 'ABC Corp', 'East', 5000.00), (2, 'XYZ Inc', 'West', 7000.00), (3, 'LMN Ltd', 'East', 6000.00), (4, 'DEF Co', 'West', 8000.00), (5, 'GHI Pvt', 'East', 9000.00), (6, 'JKL Co', 'North', 4000.00), (7, 'MNO Inc', 'North', 3000.00), (8, 'PQR Ltd', 'South', 10000.00), (9, 'STU Pvt', 'South', 11000.00), (10, 'VWX Corp', 'South', 12000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CustomerName, TotalFreightCharges, Region FROM (SELECT CustomerName, TotalFreightCharges, Region, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY TotalFreightCharges DESC) AS Ranking FROM CustomersRegion) AS Subquery WHERE Ranking <= 3;"
    },
    {
        "instruction": "입력 텍스트: 플로리다 주에서 각 모바일 요금제 유형별 총 데이터 사용량(GB)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mobile_usage (id INT, plan_type VARCHAR(10), state VARCHAR(20), data_usage INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT plan_type, state, SUM(data_usage)/1024/1024/1024 FROM mobile_usage WHERE state = 'Florida' GROUP BY plan_type;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에 있는 후불제 모바일 고객의 최소 월간 데이터 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mobile_subscribers (subscriber_id INT, data_usage FLOAT, state VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, data_usage, state) VALUES (1, 3.5, 'California'), (2, 4.2, 'California'), (3, 3.8, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(data_usage) FROM mobile_subscribers WHERE state = 'California' AND subscription_type = 'postpaid';"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 캘리포니아에서 우리 프로그램에 참여한 자원봉사자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID int, VolunteerName varchar(50), State varchar(50), LastEngagementDate date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Volunteers WHERE State = 'California' AND LastEngagementDate >= DATEADD(month, -6, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 게임 카테고리에 있는 모든 탈중앙화 애플리케이션(dApps)을 나열하세요.\n\nDDL statements:\nCREATE TABLE dapps (id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255)); INSERT INTO dapps (id, name, category) VALUES (1, 'Game1', 'Gaming'), (2, 'Tool1', 'Development');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM dapps WHERE category = 'Gaming';"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역의 바이오테크 스타트업 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE biotech_startups (id INT, name VARCHAR(50), budget DECIMAL(10,2), region VARCHAR(50)); INSERT INTO biotech_startups (id, name, budget, region) VALUES (1, 'Genetix', 5000000.00, 'Asia Pacific'); INSERT INTO biotech_startups (id, name, budget, region) VALUES (2, 'BioEngineerz', 7000000.00, 'North America'); INSERT INTO biotech_startups (id, name, budget, region) VALUES (3, 'SensoraBio', 6000000.00, 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM biotech_startups WHERE region = 'Asia Pacific';"
    },
    {
        "instruction": "입력 텍스트: 각 포트폴리오에서 샤리아 준수 투자 금액의 최대 및 최소는 얼마인가요?\n\nDDL statements:\nCREATE TABLE portfolios (portfolio_id INT, customer_id INT, num_investments INT, num_shariah_compliant_investments INT, shariah_compliant_investment_amount DECIMAL(10,2));CREATE VIEW shariah_compliant_portfolios AS SELECT * FROM portfolios WHERE num_shariah_compliant_investments > 0;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.portfolio_id, MAX(p.shariah_compliant_investment_amount) as max_amount, MIN(p.shariah_compliant_investment_amount) as min_amount FROM portfolios p INNER JOIN shariah_compliant_portfolios scp ON p.portfolio_id = scp.portfolio_id GROUP BY p.portfolio_id;"
    },
    {
        "instruction": "입력 텍스트: 인문 예술 대학에서 단일 저자가 발표한 출판물의 최대 수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE publications(id INT, author VARCHAR(50), department VARCHAR(50), pub_date DATE); INSERT INTO publications VALUES (1, 'Alice', 'Arts and Humanities', '2021-03-01'); INSERT INTO publications VALUES (2, 'Beth', 'Science', '2020-06-15'); INSERT INTO publications VALUES (3, 'Charlie', 'Arts and Humanities', '2019-12-31'); INSERT INTO publications VALUES (4, 'Diana', 'Arts and Humanities', '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, MAX(COUNT(*)) FROM publications GROUP BY department HAVING department = 'Arts and Humanities';"
    },
    {
        "instruction": "입력 텍스트: SupportPrograms 테이블에서 가장 등록자 수가 많은 상위 3개 지원 프로그램을 나열하세요.\n\nDDL statements:\nCREATE TABLE SupportPrograms (programID INT, programName VARCHAR(50), enrollment INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT programName, COUNT(*) as enrollment_count FROM SupportPrograms GROUP BY programName ORDER BY enrollment_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에서 판매되는 천연 헤어 케어 제품의 최대 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hair_care_sales(product_name TEXT, price DECIMAL(5,2), is_natural BOOLEAN, country TEXT); INSERT INTO hair_care_sales VALUES ('Shampoo', 12.99, true, 'France'); INSERT INTO hair_care_sales VALUES ('Conditioner', 14.99, true, 'France'); INSERT INTO hair_care_sales VALUES ('Styling Cream', 8.99, false, 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM hair_care_sales WHERE is_natural = true AND country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 자원봉사자 한 명당 평균 몇 시간의 봉사활동을 했나요?\n\nDDL statements:\nCREATE TABLE Volunteer_Hours (id INT, hours INT, volunteer_id INT, month INT); CREATE TABLE Volunteers (id INT, name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(hours) as avg_hours_per_volunteer FROM Volunteer_Hours JOIN Volunteers ON Volunteer_Hours.volunteer_id = Volunteers.id;"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기에 마지막 거래 날짜가 있는 고객들의 총 자산을 찾으세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT PRIMARY KEY, name VARCHAR(100), last_transaction_date DATE); INSERT INTO clients (client_id, name, last_transaction_date) VALUES (1, 'John Doe', '2021-12-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(assets) FROM (SELECT client_id, assets FROM client_assets WHERE client_id IN (SELECT client_id FROM clients WHERE last_transaction_date >= '2021-10-01' AND last_transaction_date <= '2021-12-31')) clients_assets_q4"
    },
    {
        "instruction": "입력 텍스트: 공정성 점수가 0.7 미만인 모델의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE model_fairness (model_id INT, fairness_score DECIMAL(3,2)); INSERT INTO model_fairness (model_id, fairness_score) VALUES (1, 0.85), (2, 0.70), (3, 0.92), (4, 0.68), (5, 0.55);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM model_fairness WHERE fairness_score < 0.7;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에 있는 모든 도시들의 스마트 시티 기술 도입 점수 평균을 계산하세요.\n\nDDL statements:\nCREATE TABLE smart_cities (id INT, name VARCHAR(255), technology_adoption_score FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(technology_adoption_score) FROM smart_cities;"
    },
    {
        "instruction": "입력 텍스트: space_exploration' 테이블에서 임무가 '성공하지 못함'인 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE space_exploration (id INT PRIMARY KEY, mission_name VARCHAR(50), mission_status VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM space_exploration WHERE mission_status = 'not successful';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에 있는 병원의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE hospitals (name VARCHAR(255), state VARCHAR(255)); INSERT INTO hospitals (name, state) VALUES ('UCLA Medical Center', 'California'), ('Stanford Health Care', 'California'), ('Cedars-Sinai Medical Center', 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hospitals WHERE state = 'California';"
    },
    {
        "instruction": "입력 텍스트: E'로 시작하는 기호를 가진 원소들의 평균 가격을 찾으세요.\n\nDDL statements:\nCREATE TABLE elements_price (element_id INT, price FLOAT, PRIMARY KEY (element_id, price)); CREATE TABLE elements (id INT PRIMARY KEY, name VARCHAR(255), symbol VARCHAR(3), weight FLOAT, element_id INT, FOREIGN KEY (element_id) REFERENCES elements_price(element_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM elements_price WHERE element_id IN (SELECT id FROM elements WHERE symbol LIKE 'E%');"
    },
    {
        "instruction": "입력 텍스트: 스시 스팟' 식당에 대한 새로운 기록을 food_safety_inspections 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE food_safety_inspections (restaurant_name VARCHAR(255), inspection_date DATE, score INT); INSERT INTO food_safety_inspections (restaurant_name, inspection_date, score) VALUES ('Pizza Palace', '2022-01-01', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO food_safety_inspections (restaurant_name, inspection_date, score) VALUES ('Sushi Spot', '2022-03-01', 90);"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 'Green Spaces' 프로젝트에 대한 탄소 상쇄 이니셔티브 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE carbon_offset_initiatives ( id INT PRIMARY KEY, project_name VARCHAR(255), total_offset INT, state VARCHAR(255) );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM carbon_offset_initiatives WHERE project_name = 'Green Spaces' AND state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 지난 달 각 제품 카테고리별로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Sales (SaleID INT, ProductCategory VARCHAR(255), SaleDate DATE); CREATE TABLE Revenue (RevenueID INT, SaleID INT, Amount DECIMAL(10,2)); INSERT INTO Sales (SaleID, ProductCategory, SaleDate) VALUES (1, 'Flower', '2022-01-01'), (2, 'Concentrates', '2022-01-05'), (3, 'Edibles', '2022-01-10'); INSERT INTO Revenue (RevenueID, SaleID, Amount) VALUES (1, 1, 50.00), (2, 1, 75.00), (3, 2, 100.00), (4, 3, 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProductCategory, SUM(Amount) AS TotalRevenue FROM Sales JOIN Revenue ON Sales.SaleID = Revenue.SaleID WHERE SaleDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY ProductCategory;"
    },
    {
        "instruction": "입력 텍스트: reservoirs' 테이블에서 'oil_grade'가 'light'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE reservoirs (reservoir_id INT, reservoir_name VARCHAR(255), field_name VARCHAR(255), oil_grade VARCHAR(255), gas_content FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM reservoirs WHERE oil_grade = 'light';"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 발생한 정신 건강 동등성 위반 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mental_health_parity (violation_id INT, location VARCHAR(50), violation_count INT); INSERT INTO mental_health_parity (violation_id, location, violation_count) VALUES (1, 'Northeast', 10), (2, 'Southeast', 15), (3, 'Midwest', 12), (4, 'Southwest', 8), (5, 'West', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(violation_count) FROM mental_health_parity GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 멤버 테이블에서 'Alex Brown' 회원의 나이를 35로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE members (member_id INT, name TEXT, age INT, gender TEXT); INSERT INTO members (member_id, name, age, gender) VALUES (1, 'John Doe', 30, 'Male'), (2, 'Jane Doe', 28, 'Female'), (3, 'Alex Brown', 33, 'Non-binary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE members SET age = 35 WHERE name = 'Alex Brown';"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기에 지역별로 분류된 인프라 프로젝트에 대한 총 지출은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Expenditure (Quarter INT, Year INT, Region VARCHAR(20), Project VARCHAR(20), Amount DECIMAL(10,2)); INSERT INTO Expenditure (Quarter, Year, Region, Project, Amount) VALUES (1, 2023, 'North', 'Road Construction', 50000.00), (1, 2023, 'South', 'Bridge Construction', 75000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, SUM(Amount) FROM Expenditure WHERE Quarter = 1 AND Year = 2023 GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 농구팀 \"Eagles\"의 단일 경기에서 판매된 티켓 수의 최대값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE games (id INT, team VARCHAR(20), date DATE); INSERT INTO games (id, team, date) VALUES (1, 'Eagles', '2021-01-01'), (2, 'Eagles', '2021-02-15'), (3, 'Eagles', '2021-04-01'); CREATE TABLE tickets (id INT, game_id INT, quantity INT); INSERT INTO tickets (id, game_id, quantity) VALUES (1, 1, 2000), (2, 1, 500), (3, 2, 1500), (4, 2, 700), (5, 3, 2500), (6, 3, 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(quantity) FROM tickets JOIN games ON tickets.game_id = games.id WHERE games.team = 'Eagles' AND YEAR(games.date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 재활용률이 가장 낮은 2개 국가의 가장 최근 연도에 대한 총 폐기물 발생량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE WasteData (Country VARCHAR(50), Continent VARCHAR(50), WasteGeneration FLOAT, Year INT, RecyclingRate FLOAT); INSERT INTO WasteData (Country, Continent, WasteGeneration, Year, RecyclingRate) VALUES ('South Africa', 'Africa', 1234.56, 2020, 30.5), ('South Africa', 'Africa', 1300.98, 2019, 31.6), ('Egypt', 'Africa', 456.34, 2020, 25.1), ('Egypt', 'Africa', 467.65, 2019, 26.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(WasteGeneration) FROM (SELECT Country, WasteGeneration FROM WasteData WHERE Continent = 'Africa' AND RecyclingRate < (SELECT AVG(RecyclingRate) FROM WasteData WHERE Continent = 'Africa') GROUP BY Country ORDER BY WasteGeneration DESC FETCH FIRST 2 ROWS ONLY) tmp;"
    },
    {
        "instruction": "입력 텍스트: 2015년과 2016년 모든 부문의 총 물 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE total_consumption (year INT, sector TEXT, consumption FLOAT); INSERT INTO total_consumption (year, sector, consumption) VALUES (2015, 'residential', 123.5), (2015, 'commercial', 234.6), (2016, 'residential', 130.2), (2016, 'commercial', 240.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT consumption FROM total_consumption WHERE year IN (2015, 2016)"
    },
    {
        "instruction": "입력 텍스트: 2012년부터 2017년 사이에 중국에서 이루어진 군사 혁신은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE MilitaryInnovations (id INT PRIMARY KEY, country VARCHAR(50), year INT, innovation VARCHAR(100)); INSERT INTO MilitaryInnovations (id, country, year, innovation) VALUES (3, 'China', 2015, 'Artificial intelligence for military logistics');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM MilitaryInnovations WHERE country = 'China' AND year BETWEEN 2012 AND 2017;"
    },
    {
        "instruction": "입력 텍스트: products' 테이블에서 만료된 모든 제품 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), expiration_date DATE); INSERT INTO products (product_id, product_name, expiration_date) VALUES (1, 'Lipstick', '2020-01-01'), (2, 'Foundation', '2022-12-31'), (3, 'Mascara', '2019-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM products WHERE expiration_date < CURDATE();"
    },
    {
        "instruction": "입력 텍스트: 브라질과 아르헨티나에 있는 친환경 호텔의 평균 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name VARCHAR(50), country VARCHAR(50), revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, country, revenue) VALUES (1, 'Eco Hotel', 'Brazil', 35000), (2, 'Green Hotel', 'Argentina', 40000), (3, 'Sustainable Hotel', 'Brazil', 45000), (4, 'Eco Resort', 'Argentina', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(revenue) FROM hotels WHERE country IN ('Brazil', 'Argentina') AND hotel_name LIKE '%eco%';"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 일본에서의 군사 장비 유지 보수 요청 건수는 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE MaintenanceRequests (id INT, country VARCHAR(50), request_date DATE); INSERT INTO MaintenanceRequests (id, country, request_date) VALUES (1, 'Japan', '2021-02-05'), (2, 'France', '2021-03-18'), (3, 'Japan', '2021-06-24');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM MaintenanceRequests WHERE country = 'Japan' AND request_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 가장 자주 주문된 베지테리언 메뉴 상위 2개는 무엇인가요?\n\nDDL statements:\nCREATE TABLE menu_items (item_id INT, item_name TEXT, is_vegetarian BOOLEAN); INSERT INTO menu_items (item_id, item_name, is_vegetarian) VALUES (1, 'Hamburger', false), (2, 'Pizza', true), (3, 'Chicken Sandwich', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT item_name, COUNT(*) as order_count FROM menu_items WHERE is_vegetarian = true GROUP BY item_name ORDER BY order_count DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 고객들 사이에서 가장 인기 있는 상위 5개 사이즈를 나열하세요.\n\nDDL statements:\nCREATE TABLE orders (id SERIAL PRIMARY KEY, customer_id INTEGER, size VARCHAR(10)); INSERT INTO orders (customer_id, size) VALUES (1, 'M'), (2, 'XL'), (3, 'S'), (1, 'L'), (2, 'XL'), (3, 'M'), (4, 'XS');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT size, COUNT(*) as popularity FROM orders GROUP BY size ORDER BY popularity DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 학과별 대학원생의 평균 출판물 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE graduate_students (id INT, department VARCHAR(255), num_publications INT); INSERT INTO graduate_students (id, department, num_publications) VALUES (1, 'Computer Science', 2), (2, 'Physics', 3), (3, 'Mathematics', 1), (4, 'Computer Science', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, AVG(num_publications) as avg_publications FROM graduate_students GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 텍스트 번역: 텍사스의 농촌 지역에서 당뇨병 진단을 받은 남성 환자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE patient (patient_id INT, age INT, gender TEXT, diagnosis TEXT, state TEXT); INSERT INTO patient (patient_id, age, gender, diagnosis, state) VALUES (1, 65, 'Male', 'Diabetes', 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(patient_id) FROM patient WHERE diagnosis = 'Diabetes' AND state = 'Texas' AND gender = 'Male' AND location LIKE '%rural%';"
    },
    {
        "instruction": "입력 텍스트: 베이징에서 자율주행 열차가 하루에 이용한 최대 여행 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE public.trips_by_day_train (id SERIAL PRIMARY KEY, train_type TEXT, city TEXT, trips_on_day INTEGER); INSERT INTO public.trips_by_day_train (train_type, city, trips_on_day) VALUES ('autonomous_train', 'Beijing', 2000), ('autonomous_train', 'Beijing', 2500), ('autonomous_train', 'Beijing', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(trips_on_day) FROM public.trips_by_day_train WHERE train_type = 'autonomous_train' AND city = 'Beijing';"
    },
    {
        "instruction": "입력 텍스트: AI 윤리 이니셔티브'에 대한 세부 정보를 저장하기 위한 'ai_ethics'라는 이름의 테이블을 생성하세요.\n\nDDL statements:\nCREATE TABLE ai_ethics (id INT PRIMARY KEY, initiative VARCHAR(50), organization VARCHAR(50), region VARCHAR(50), start_date DATE, end_date DATE, budget FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE ai_ethics (id INT PRIMARY KEY, initiative VARCHAR(50), organization VARCHAR(50), region VARCHAR(50), start_date DATE, end_date DATE, budget FLOAT);"
    },
    {
        "instruction": "입력 텍스트: 전자 산업 분야의 공장에 원자재를 공급하는 공급업체는 어디인가요?\n\nDDL statements:\nCREATE TABLE suppliers (id INT, supplier_name VARCHAR(100), industry VARCHAR(50), contact VARCHAR(50)); CREATE TABLE electronics_factories (id INT, factory_name VARCHAR(100), location VARCHAR(50), supplier_id INT); INSERT INTO suppliers (id, supplier_name, industry, contact) VALUES (1, 'Global Resources', 'Electronics', 'contact1@globalresources.com'); INSERT INTO electronics_factories (id, factory_name, location, supplier_id) VALUES (1, 'ElectroTech', 'USA', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.supplier_name FROM suppliers s INNER JOIN electronics_factories ef ON s.id = ef.supplier_id WHERE s.industry = 'Electronics';"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월 22일에 '치킨 시저 샐러드'의 수익을 30.00으로 수정하세요?\n\nDDL statements:\nCREATE TABLE restaurant_revenue (item VARCHAR(50), revenue NUMERIC(10,2), sales_date DATE); INSERT INTO restaurant_revenue (item, revenue, sales_date) VALUES ('Chicken Caesar Salad', 25.00, '2022-02-22'), ('Organic Veggie Pizza', 120.50, '2022-01-01'), ('Organic Veggie Pizza', 155.25, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE restaurant_revenue SET revenue = 30.00 WHERE item = 'Chicken Caesar Salad' AND sales_date = '2022-02-22';"
    },
    {
        "instruction": "입력 텍스트: 영국에서 판매되는 비건 스킨케어 제품의 최소 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SkincareProducts (product_id INT, product_name VARCHAR(255), price DECIMAL(5,2), is_vegan BOOLEAN, country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(price) FROM SkincareProducts WHERE is_vegan = TRUE AND country = 'United Kingdom';"
    },
    {
        "instruction": "입력 텍스트: 각 종과 연도별 평균 목재 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE species (species_id INT, species_name VARCHAR(100)); INSERT INTO species (species_id, species_name) VALUES (1, 'Redwood'), (2, 'Douglas Fir'), (3, 'Spruce'), (4, 'Fir'); CREATE TABLE timber_production (production_id INT, species_id INT, year INT, volume INT); INSERT INTO timber_production (production_id, species_id, year, volume) VALUES (1, 1, 2000, 1200), (2, 1, 2001, 1300), (3, 2, 2000, 800), (4, 2, 2001, 850), (5, 3, 2000, 1500), (6, 3, 2001, 1600), (7, 4, 2000, 900), (8, 4, 2001, 950);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species_name, year, AVG(volume) as avg_volume FROM timber_production tp JOIN species s ON tp.species_id = s.species_id GROUP BY species_name, year;"
    },
    {
        "instruction": "입력 텍스트: 각 주에 거주하는 고객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (1, 'John Doe', 'Texas'), (2, 'Jane Smith', 'California'), (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM clients GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: Site A'에서 발견된 모든 고유 유물 유형을 나열하세요.\n\nDDL statements:\nCREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255)); INSERT INTO excavation_sites (site_id, site_name) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE artifacts (artifact_id INT, site_id INT, artifact_weight DECIMAL(5,2), artifact_type VARCHAR(255)); INSERT INTO artifacts (artifact_id, site_id, artifact_weight, artifact_type) VALUES (1, 1, 23.5, 'Pottery'), (2, 1, 15.3, 'Bone'), (3, 2, 8.9, 'Metal'), (4, 2, 34.7, 'Stone'), (5, 3, 100.2, 'Jewelry'), (6, 3, 12.8, 'Ceramic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT artifact_type FROM artifacts WHERE site_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 대서양에 있는 상어의 최소 생물량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE shark_biomass (species TEXT, biomass REAL, ocean TEXT); INSERT INTO shark_biomass (species, biomass, ocean) VALUES ('Great White', 2000.0, 'Atlantic'), ('Hammerhead', 1500.0, 'Atlantic'), ('Mako', 1000.0, 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(biomass) FROM shark_biomass WHERE ocean = 'Atlantic';"
    },
    {
        "instruction": "입력 텍스트: 가장 낮은 가격의 방위 계약을 찾으세요.\n\nDDL statements:\nCREATE TABLE low_value_contracts (id INT, contract_type VARCHAR(255), contract_value INT); INSERT INTO low_value_contracts (id, contract_type, contract_value) VALUES (1, 'Service', 500000), (2, 'Supply', 700000), (3, 'Research', 600000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM low_value_contracts WHERE contract_value = (SELECT MIN(contract_value) FROM low_value_contracts);"
    },
    {
        "instruction": "입력 텍스트: Retail_Workers_Union'에서 안전 등급이 8 이상이고 연봉이 40000 이상인 멤버의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE Retail_Workers_Union (union_member_id INT, member_id INT, safety_rating FLOAT, salary FLOAT); INSERT INTO Retail_Workers_Union (union_member_id, member_id, safety_rating, salary) VALUES (1, 101, 8.25, 45000.00), (1, 102, 9.00, 42000.00), (1, 103, 7.75, 50000.00), (2, 201, 8.50, 48000.00), (2, 202, 9.25, 36000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(union_member_id) FROM Retail_Workers_Union WHERE safety_rating > 8 AND salary > 40000;"
    },
    {
        "instruction": "입력 텍스트: 폐기물 유형의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE waste_types (id INT PRIMARY KEY, waste_type VARCHAR(255)); INSERT INTO waste_types (id, waste_type) VALUES (1, 'Plastic'), (2, 'Paper');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM waste_types;"
    },
    {
        "instruction": "입력 텍스트: 미국과 다른 나라 간의 방위 계약 협상과 관련된 지정학적 위험 평가 점수를 날짜 내림차순으로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE ContractNegotiations (id INT, country1 VARCHAR(50), country2 VARCHAR(50), date DATE);CREATE TABLE RiskAssessments (id INT, country VARCHAR(50), risk_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ContractNegotiations.country1, ContractNegotiations.country2, ContractNegotiations.date, RiskAssessments.risk_score FROM ContractNegotiations INNER JOIN RiskAssessments ON (ContractNegotiations.country1 = RiskAssessments.country OR ContractNegotiations.country2 = RiskAssessments.country) WHERE (ContractNegotiations.country1 = 'US' OR ContractNegotiations.country2 = 'US') ORDER BY ContractNegotiations.date DESC;"
    },
    {
        "instruction": "입력 텍스트: building_stats 테이블에서 2000년 이전에 지어진 건물들의 평균 에너지 효율 등급(energy_star_rating)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE building_stats (building_id INT, energy_star_rating INT, year_built INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_star_rating) FROM building_stats WHERE year_built < 2000;"
    },
    {
        "instruction": "입력 텍스트: 주어진 연도에서 총 스트리밍 시간이 가장 많은 상위 5명의 아티스트를 찾아주세요.\n\nDDL statements:\nCREATE TABLE Artists (id INT, name VARCHAR(100)); CREATE TABLE Streams (id INT, artist_id INT, minutes DECIMAL(10,2), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, SUM(s.minutes) AS total_minutes FROM Artists a JOIN Streams s ON a.id = s.artist_id WHERE s.year = 2021 GROUP BY a.name ORDER BY total_minutes DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 하루 평균 가상 투어 예약 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours(tour_id INT, tour_name VARCHAR(50), location VARCHAR(50), booking_date DATE, bookings INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(bookings) FROM virtual_tours WHERE location = 'New York' GROUP BY DATE(booking_date);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 수익이 가장 높은 상위 10개의 광업 회사를 나열하세요.\n\nDDL statements:\nCREATE TABLE mining_company_revenue (company_name VARCHAR(255), revenue INT, revenue_date DATE); INSERT INTO mining_company_revenue (company_name, revenue, revenue_date) VALUES ('Company A', 1000000, '2021-08-01'), ('Company B', 2000000, '2021-08-01'), ('Company C', 3000000, '2021-08-01'), ('Company A', 1500000, '2020-08-01'), ('Company B', 1800000, '2020-08-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company_name, revenue FROM (SELECT company_name, revenue, revenue_date, RANK() OVER (ORDER BY revenue DESC) as rnk FROM mining_company_revenue WHERE revenue_date >= DATEADD(year, -1, CURRENT_DATE)) t WHERE rnk <= 10;"
    },
    {
        "instruction": "입력 텍스트: 특정 도시에서 재난 대응 활동에 참여한 자원봉사자의 총 인원 수와 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, disaster_id INT, volunteer_name TEXT, age INT, gender TEXT, city TEXT); INSERT INTO Volunteers (id, disaster_id, volunteer_name, age, gender, city) VALUES (4, 7, 'VolunteerD', 30, 'Male', 'CityJ'); INSERT INTO Volunteers (id, disaster_id, volunteer_name, age, gender, city) VALUES (5, 7, 'VolunteerE', 26, 'Female', 'CityJ'); INSERT INTO Volunteers (id, disaster_id, volunteer_name, age, gender, city) VALUES (6, 8, 'VolunteerF', 40, 'Male', 'CityK');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*), AVG(age) FROM Volunteers WHERE city = 'CityJ' GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 2021년 1월 이후 미국에서 생산된 pH 수준이 9 이상인 모든 화학 배치와 그 생산 날짜를 나열하시오.\n\nDDL statements:\nCREATE TABLE ChemicalBatches (id INT, pH FLOAT, production_date DATE); INSERT INTO ChemicalBatches (id, pH, production_date) VALUES (1, 9.2, '2021-02-12'), (2, 8.5, '2021-03-04'), (3, 9.4, '2021-08-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT id, pH, production_date FROM ChemicalBatches WHERE pH > 9 AND production_date >= '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: 후기 인상주의' 카테고리에서 작품 수가 가장 많은 상위 3명의 예술가는 누구인가요?\n\nDDL statements:\nCREATE TABLE Artist_Data (artist_id INT, artist_name VARCHAR(255), category VARCHAR(255), num_pieces INT); INSERT INTO Artist_Data (artist_id, artist_name, category, num_pieces) VALUES (1, 'Paul Cezanne', 'Post-Impressionism', 80), (2, 'Claude Monet', 'Impressionism', 120), (3, 'Georges Seurat', 'Pointillism', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist_name, num_pieces FROM (SELECT artist_name, category, num_pieces, RANK() OVER (PARTITION BY category ORDER BY num_pieces DESC) AS rank FROM Artist_Data) tmp WHERE rank <= 3 AND category = 'Post-Impressionism';"
    },
    {
        "instruction": "입력 텍스트: 컴퓨터 과학 부서의 여성 교수진에게 수여된 연구 보조금의 평균 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Faculty(FacultyID INT, Department VARCHAR(255), Gender VARCHAR(255)); INSERT INTO Faculty(FacultyID, Department, Gender) VALUES (1, 'Computer Science', 'Male'), (2, 'Computer Science', 'Female'); CREATE TABLE ResearchGrants(GranteeID INT, GrantAmount DECIMAL(10, 2)); INSERT INTO ResearchGrants(GranteeID, GrantAmount) VALUES (1, 50000), (2, 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(GrantAmount) FROM ResearchGrants JOIN Faculty ON Faculty.FacultyID = ResearchGrants.GranteeID WHERE Faculty.Department = 'Computer Science' AND Faculty.Gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 일리노이에 있는 공공건물의 총 면적은 얼마인가요?\n\nDDL statements:\nCREATE TABLE public_buildings (name VARCHAR(255), state VARCHAR(255), size DECIMAL(10,2)); INSERT INTO public_buildings (name, state, size) VALUES ('Building1', 'New York', 120000), ('Building2', 'New York', 150000), ('Building3', 'Illinois', 180000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(size) FROM public_buildings WHERE state IN ('New York', 'Illinois');"
    },
    {
        "instruction": "입력 텍스트: 알래스카의 도시 지역에 있는 의료 전문가의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE professionals (id INT, name TEXT, state TEXT, location TEXT, profession TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM professionals WHERE state = 'Alaska' AND location = 'urban';"
    },
    {
        "instruction": "입력 텍스트: 각 주별 의료 전문가 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE states (state_id INT PRIMARY KEY, state_name VARCHAR(255)); INSERT INTO states (state_id, state_name) VALUES (1, 'Alabama'), (2, 'Alaska'), (3, 'Arizona'); CREATE TABLE medical_professionals (state_id INT, profession_count INT); INSERT INTO medical_professionals (state_id, profession_count) VALUES (1, 5000), (2, 6000), (3, 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.state_name, mp.profession_count FROM states s JOIN medical_professionals mp ON s.state_id = mp.state_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 유럽 각국의 1인당 평균 쓰레기 발생량(그램)을 평균이 가장 높은 순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE waste_generation (country VARCHAR(50), year INT, waste_generation_grams INT, population INT); INSERT INTO waste_generation (country, year, waste_generation_grams, population) VALUES ('Germany', 2020, 7000000, 80000000), ('France', 2020, 6000000, 65000000), ('Italy', 2020, 5000000, 60000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(waste_generation_grams / population) as avg_waste_generation_per_capita FROM waste_generation WHERE year = 2020 GROUP BY country ORDER BY avg_waste_generation_per_capita DESC;"
    },
    {
        "instruction": "입력 텍스트: 멕시코에 있는 농촌 클리닉의 환자들 중 최소 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE rural_clinics (patient_id INT, age INT, gender VARCHAR(10), country VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(age) FROM rural_clinics WHERE country = 'Mexico';"
    },
    {
        "instruction": "입력 텍스트: 월별 채식 요리의 총 매출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Orders (OrderID INT, OrderDate DATE, DishID INT, Quantity INT); CREATE TABLE Dishes (DishID INT, DishName VARCHAR(50), Category VARCHAR(50), Price DECIMAL(5,2), IsVegetarian INT); INSERT INTO Dishes (DishID, DishName, Category, Price, IsVegetarian) VALUES (1, 'Veggie Pizza', 'Pizza', 12.99, 1), (2, 'Margherita Pizza', 'Pizza', 10.99, 1), (3, 'Chicken Caesar Salad', 'Salad', 15.49, 0), (4, 'Garden Salad', 'Salad', 11.99, 1); INSERT INTO Orders (OrderID, OrderDate, DishID, Quantity) VALUES (1, '2022-01-01', 1, 2), (2, '2022-01-02', 2, 1), (3, '2022-01-03', 3, 3), (4, '2022-01-04', 1, 1), (5, '2022-02-05', 4, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM OrderDate) as Month, SUM(Quantity * Price) as TotalSales FROM Orders JOIN Dishes ON Orders.DishID = Dishes.DishID WHERE IsVegetarian = 1 GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 각 벤더의 수익 합계는 얼마입니까?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, vendor_id INT, revenue DECIMAL(5,2)); INSERT INTO sales (sale_id, vendor_id, revenue) VALUES (1, 1, 100.00), (2, 1, 200.00), (3, 2, 300.00), (4, 3, 400.00), (5, 3, 500.00), (6, 4, 600.00); CREATE TABLE vendors (vendor_id INT, region TEXT); INSERT INTO vendors (vendor_id, region) VALUES (1, 'North America'), (2, 'South America'), (3, 'Europe'), (4, 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vendors.region, SUM(sales.revenue) FROM vendors INNER JOIN sales ON vendors.vendor_id = sales.vendor_id GROUP BY vendors.region;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월 AquaticFarm 테이블에서의 최대 수온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE AquaticFarm (date DATE, temperature FLOAT); INSERT INTO AquaticFarm (date, temperature) VALUES ('2022-02-01', 21.0), ('2022-02-02', 22.0), ('2022-02-03', 23.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(temperature) FROM AquaticFarm WHERE MONTH(date) = 2 AND YEAR(date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 북극 해양 지역의 독특한 해양 생물 종 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE arctic_marine_species (id INT, species TEXT, region TEXT); INSERT INTO arctic_marine_species (id, species, region) VALUES (1, 'Beluga Whale', 'Arctic'), (2, 'Narwhal', 'Arctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT species) FROM arctic_marine_species WHERE region = 'Arctic';"
    },
    {
        "instruction": "입력 텍스트: 플로리다에서 총 노무 비용이 가장 높은 상위 3개의 계약업체는 누구인가요?\n\nDDL statements:\nCREATE TABLE Contractors (id INT, name TEXT, labor_cost INT);CREATE VIEW Contractor_Labor_Costs AS SELECT contractor_id, SUM(labor_cost) as total_labor_cost FROM Construction_Labor JOIN Contractors ON Construction_Labor.contractor_id = Contractors.id GROUP BY contractor_id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, total_labor_cost FROM Contractor_Labor_Costs JOIN Contractors ON Contractor_Labor_Costs.contractor_id = Contractors.id WHERE state = 'Florida' ORDER BY total_labor_cost DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 65세 이상 환자에게 투여된 독감 예방주사는 몇 회인가요?\n\nDDL statements:\nCREATE TABLE flu_shots (patient_id INT, state VARCHAR(255)); CREATE TABLE patients (patient_id INT, age INT); INSERT INTO flu_shots (patient_id, state) VALUES (1, 'Texas'), (2, 'Texas'); INSERT INTO patients (patient_id, age) VALUES (1, 70), (2, 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM flu_shots f INNER JOIN patients p ON f.patient_id = p.patient_id WHERE p.age > 65 AND f.state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 2020년 뭄바이 시에서 발생한 총 폐기물 양을 폐기물 종류별로 분류하여 알려주세요.\n\nDDL statements:\nCREATE TABLE WasteGeneration (ID INT PRIMARY KEY, WasteType VARCHAR(50), Sector VARCHAR(50), City VARCHAR(50), Year INT, Quantity DECIMAL(10,2)); INSERT INTO WasteGeneration (ID, WasteType, Sector, City, Year, Quantity) VALUES (3, 'Organic Waste', 'Commercial', 'Mumbai', 2020, 8000.00), (4, 'E-Waste', 'Residential', 'Mumbai', 2020, 2000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT WasteType, SUM(Quantity) FROM WasteGeneration WHERE City = 'Mumbai' AND Year = 2020 GROUP BY WasteType;"
    },
    {
        "instruction": "입력 텍스트: 동남아시아의 농업 혁신 프로젝트의 평균 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE project (project_id INT, name VARCHAR(50), location VARCHAR(50), budget FLOAT, launch_date DATE); CREATE TABLE location (location_id INT, name VARCHAR(50), continent_id INT); CREATE TABLE continent (continent_id INT, name VARCHAR(50), description TEXT); INSERT INTO continent (continent_id, name, description) VALUES (1, 'Asia', 'The largest and most populous continent.'); INSERT INTO location (location_id, name, continent_id) VALUES (1, 'Southeast Asia', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(p.budget) FROM project p JOIN location l ON p.location = l.name JOIN continent c ON l.continent_id = c.continent_id WHERE c.name = 'Asia' AND l.name = 'Southeast Asia';"
    },
    {
        "instruction": "입력 텍스트: 2021년 북미 각국의 총 매립지 용량(입방미터)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE landfill_capacity_north_america (country VARCHAR(50), year INT, capacity FLOAT); INSERT INTO landfill_capacity_north_america (country, year, capacity) VALUES ('Canada', 2021, 12000000.0), ('Mexico', 2021, 15000000.0), ('USA', 2021, 20000000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(capacity) FROM landfill_capacity_north_america WHERE year = 2021 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 대표성이 부족한 그룹에 의해 설립된 새로운 회사들을 추가하세요.\n\nDDL statements:\nCREATE TABLE Companies (id INT, name TEXT, founder_group TEXT); INSERT INTO Companies (id, name, founder_group) VALUES (1, 'NativeRoot', 'Native American'), (2, 'Women in Power', 'Female'), (3, 'Green Horizons', 'Minority');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Companies (id, name, founder_group) VALUES (4, 'QueerTech', 'LGBTQ+'), (5, 'Accessible Solutions', 'Disabled'), (6, 'International Innovations', 'Immigrant');"
    },
    {
        "instruction": "입력 텍스트: 2016년에 설립된 스타트업의 모든 출구 전략을 나열하세요.\n\nDDL statements:\nCREATE TABLE startups(id INT, name TEXT, founded_year INT, exit_strategy TEXT); INSERT INTO startups (id, name, founded_year, exit_strategy) VALUES (1, 'Kappa Inc', 2016, 'Acquisition'); INSERT INTO startups (id, name, founded_year, exit_strategy) VALUES (2, 'Lambda Corp', 2015, 'IPO'); INSERT INTO startups (id, name, founded_year, exit_strategy) VALUES (3, 'Mu Startup', 2017, 'Merger');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM startups WHERE founded_year = 2016;"
    },
    {
        "instruction": "입력 텍스트: 각 나라의 평균 기대 수명은 얼마인가요?\n\nDDL statements:\nCREATE TABLE countries (country_id INT, country_name VARCHAR(255)); INSERT INTO countries VALUES (1, 'CountryA'), (2, 'CountryB'); CREATE TABLE life_expectancy (country_id INT, life_expectancy DECIMAL(5,2), year INT); INSERT INTO life_expectancy VALUES (1, 75.5, 2020), (2, 80.3, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT countries.country_name, AVG(life_expectancy) AS avg_life_expectancy FROM countries INNER JOIN life_expectancy ON countries.country_id = life_expectancy.country_id GROUP BY countries.country_name;"
    },
    {
        "instruction": "입력 텍스트: APAC 지역의 각 호텔별 가상 투어 참여도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE apac_hotel_views (hotel_id INT, hotel_name VARCHAR(255), views INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_id, hotel_name, SUM(views) FROM apac_hotel_views GROUP BY hotel_id, hotel_name;"
    },
    {
        "instruction": "입력 텍스트: 2020년과 2021년에 교육 서비스에 할당된 총 예산을 찾아 이 두 해의 모든 서비스에 대한 총 예산의 백분율로 결과를 표시하세요.\n\nDDL statements:\nCREATE TABLE Budget(Year INT, Service VARCHAR(20), Budget FLOAT); INSERT INTO Budget VALUES(2020, 'Education', 15000000), (2020, 'Healthcare', 20000000), (2021, 'Education', 17000000), (2021, 'Healthcare', 22000000), (2020, 'Public Transport', 10000000), (2021, 'Public Transport', 11000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(CASE WHEN Service = 'Education' THEN Budget ELSE 0 END) / SUM(Budget)) * 100 FROM Budget WHERE Year IN (2020, 2021);"
    },
    {
        "instruction": "입력 텍스트: 팔렝케' 발굴 작업에 자금을 지원한 기관과 그 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Funding (SiteID INT, FundingAgency TEXT, FundingDate DATE); INSERT INTO Funding (SiteID, FundingAgency, FundingDate) VALUES (5, 'Mexican Government', '2005-02-01'), (6, 'Spanish Government', '2010-03-01'), (7, 'American Government', '2015-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FundingAgency, FundingDate FROM Funding f JOIN ExcavationSites e ON f.SiteID = e.SiteID WHERE e.SiteName = 'Palenque';"
    },
    {
        "instruction": "입력 텍스트: 2023년 1월 한 달 동안 샌프란시스코 시에서 모든 노선을 포함하여 이용된 대중교통 여행 횟수의 총합은 얼마입니까?\n\nDDL statements:\nCREATE TABLE public_transportation (route VARCHAR(20), trip_count INT, trip_date DATE); INSERT INTO public_transportation (route, trip_count, trip_date) VALUES ('Route 10', 1000, '2023-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(trip_count) FROM public_transportation WHERE trip_date BETWEEN '2023-01-01' AND '2023-01-31';"
    },
    {
        "instruction": "입력 텍스트: 장르 'K-pop'을 Genres 테이블에서 삭제하세요\n\nDDL statements:\nCREATE TABLE Genres (GenreID INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Genres WHERE Name = 'K-pop';"
    },
    {
        "instruction": "입력 텍스트: \"episodes\" 테이블에서 특정 TV 프로그램의 모든 에피소드의 총 상영 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE tv_shows (id INT, name VARCHAR(100)); CREATE TABLE episodes (id INT, tv_show_id INT, season_number INT, episode_number INT, runtime INT); INSERT INTO tv_shows (id, name) VALUES (1, 'Show1'), (2, 'Show2'); INSERT INTO episodes (id, tv_show_id, season_number, episode_number, runtime) VALUES (1, 1, 1, 1, 30), (2, 1, 1, 2, 30), (3, 2, 1, 1, 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(runtime) FROM episodes WHERE tv_show_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 각 구독 플랜별 모바일 사용자의 평균 데이터 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mobile_subscribers (id INT, name VARCHAR(50), data_usage FLOAT, subscription_plan VARCHAR(50), last_update DATE); INSERT INTO mobile_subscribers (id, name, data_usage, subscription_plan, last_update) VALUES (1, 'John Doe', 3.5, 'Basic', '2021-08-01'); INSERT INTO mobile_subscribers (id, name, data_usage, subscription_plan, last_update) VALUES (2, 'Jane Smith', 5.2, 'Premium', '2021-08-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT subscription_plan, AVG(data_usage) as avg_data_usage FROM (SELECT subscription_plan, data_usage, last_update, ROW_NUMBER() OVER (PARTITION BY subscription_plan, YEAR(last_update) - MONTH(last_update) / 12 ORDER BY last_update DESC) as rn FROM mobile_subscribers WHERE last_update >= DATEADD(year, -1, GETDATE())) x WHERE rn = 1 GROUP BY subscription_plan;"
    },
    {
        "instruction": "입력 텍스트: 남부 지역의 청소년을 위한 전환 프로그램의 총 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE diversion_programs (program_id INT, region VARCHAR(255), juvenile BOOLEAN); INSERT INTO diversion_programs (program_id, region, juvenile) VALUES (1, 'Northern', FALSE), (2, 'Southern', TRUE), (3, 'Southern', TRUE), (4, 'Eastern', FALSE), (5, 'Southern', TRUE), (6, 'Western', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(juvenile) FROM diversion_programs WHERE region = 'Southern';"
    },
    {
        "instruction": "입력 텍스트: 2021-2022 시즌 잉글리시 프리미어 리그의 각 축구 팀은 몇 경기를 했나요?\n\nDDL statements:\nCREATE TABLE english_premier_league (team_id INT, team_name VARCHAR(50), matches_played INT); INSERT INTO english_premier_league (team_id, team_name, matches_played) VALUES (1, 'Manchester City', 38), (2, 'Liverpool', 38), (3, 'Chelsea', 38);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, matches_played FROM english_premier_league;"
    },
    {
        "instruction": "입력 텍스트: 모든 이니셔티브 유형에 대한 보조금을 받은 조직을 확인하세요.\n\nDDL statements:\nCREATE TABLE initiative_types (id INT, initiative_type TEXT); INSERT INTO initiative_types (id, initiative_type) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'), (4, 'Social Services');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organization_id FROM grants GROUP BY organization_id HAVING COUNT(DISTINCT initiative_type) = (SELECT COUNT(*) FROM initiative_types);"
    },
    {
        "instruction": "입력 텍스트: rare_earth_companies' 테이블에는 몇 개의 서로 다른 지역이 있습니까?\n\nDDL statements:\nCREATE TABLE rare_earth_companies (company_name VARCHAR(50), region VARCHAR(20)); INSERT INTO rare_earth_companies VALUES ('Magna', 'North America'), ('Lynas', 'Asia'), ('Bushveld', 'Africa'), ('Iluka', 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT region) FROM rare_earth_companies;"
    },
    {
        "instruction": "입력 텍스트: 물리학과에 속한 비이성애자 교수진이 받은 연구 보조금의 평균 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(100), department VARCHAR(50), gender VARCHAR(50)); INSERT INTO faculty VALUES (1, 'Alex Smith', 'Physics', 'Non-binary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(number_of_grants) FROM (SELECT faculty.gender, COUNT(grants.id) AS number_of_grants FROM faculty JOIN grants ON faculty.id = grants.faculty_id WHERE faculty.department = 'Physics' AND faculty.gender = 'Non-binary' GROUP BY faculty.id) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: older_farmers' 뷰에서 레코드를 표시합니다.\n\nDDL statements:\nCREATE TABLE farmers (id INT PRIMARY KEY, name VARCHAR(50), age INT, gender VARCHAR(10), location VARCHAR(50)); INSERT INTO farmers (id, name, age, gender, location) VALUES (1, 'John Doe', 35, 'Male', 'USA'); INSERT INTO farmers (id, name, age, gender, location) VALUES (2, 'Jane Smith', 40, 'Female', 'Canada'); CREATE VIEW older_farmers AS SELECT * FROM farmers WHERE age > 45;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM older_farmers;"
    },
    {
        "instruction": "입력 텍스트: african_mines'에서 생산 가치가 $1000000보다 높은 광산 작업은 어떤 것들인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists africa_schema;CREATE TABLE africa_schema.african_mines (id INT, name VARCHAR, location VARCHAR, production_value DECIMAL);INSERT INTO africa_schema.african_mines (id, name, location, production_value) VALUES (1, 'G mining', 'Ghana', 1500000.00), (2, 'K gold', 'Kenya', 800000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM africa_schema.african_mines WHERE production_value > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 가장 인구가 많은 상위 3개국에서 각 카테고리별 접근 가능한 기술 이니셔티브의 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE Accessible_Tech_Categories (country VARCHAR(50), category VARCHAR(50), initiatives INT); INSERT INTO Accessible_Tech_Categories (country, category, initiatives) VALUES ('China', 'hardware', 1000), ('China', 'software', 1500), ('China', 'training', 1200), ('India', 'hardware', 800), ('India', 'software', 1100), ('India', 'training', 900), ('Indonesia', 'hardware', 600), ('Indonesia', 'software', 800), ('Indonesia', 'training', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Accessible_Tech_Categories.category, SUM(Accessible_Tech_Categories.initiatives) FROM Accessible_Tech_Categories WHERE Accessible_Tech_Categories.country IN (SELECT Accessible_Tech_Categories.country FROM Accessible_Tech_Categories GROUP BY Accessible_Tech_Categories.country ORDER BY COUNT(Accessible_Tech_Categories.country) DESC LIMIT 3) GROUP BY Accessible_Tech_Categories.category;"
    },
    {
        "instruction": "입력 텍스트: 시각 예술' 카테고리에 속한 이벤트들이 받은 자금의 총액이 자금 출처 유형별로 얼마인지 알려주세요.\n\nDDL statements:\nCREATE TABLE funding_sources (id INT, event_name TEXT, funding_source_type TEXT, amount_funded INT); INSERT INTO funding_sources (id, event_name, funding_source_type, amount_funded) VALUES (1, 'Art Exhibit', 'Private', 5000), (2, 'Photography Show', 'Corporate', 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT funding_source_type, SUM(amount_funded) FROM funding_sources WHERE event_name IN (SELECT event_name FROM events WHERE event_category = 'visual arts') GROUP BY funding_source_type;"
    },
    {
        "instruction": "입력 텍스트: 중동 지역에 있는 문화 유산 사이트의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE sites_me (site_id INT, site_name VARCHAR(255), country_name VARCHAR(255), region VARCHAR(255)); INSERT INTO sites_me (site_id, site_name, country_name, region) VALUES (1, 'Petra', 'Jordan', 'Middle East');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sites_me WHERE region = 'Middle East';"
    },
    {
        "instruction": "입력 텍스트: 솔라나 네트워크에서 지난 한 달 동안의 거래에 대한 최대 및 최소 가스 수수료는 얼마인가요?\n\nDDL statements:\nCREATE TABLE solana_transactions (transaction_id TEXT, gas_fee INTEGER, transaction_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(gas_fee) AS max_fee, MIN(gas_fee) AS min_fee FROM solana_transactions WHERE transaction_date >= DATEADD(month, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: digital_trends' 테이블에 ID가 9인 'Machine Learning'과 ID가 10인 'Blockchain'이라는 이름의 트렌드를 각각 인기 점수 85점, 60점으로 새로운 레코드로 추가하세요.\n\nDDL statements:\nCREATE TABLE digital_trends (trend_id INT, name VARCHAR(20), popularity_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO digital_trends (trend_id, name, popularity_score) VALUES (9, 'Machine Learning', 85), (10, 'Blockchain', 60);"
    },
    {
        "instruction": "입력 텍스트: 부서별 남성 직원의 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID int, EmployeeName varchar(50), Department varchar(50), Salary float, Gender varchar(10)); INSERT INTO Employees (EmployeeID, EmployeeName, Department, Salary, Gender) VALUES (1, 'John Doe', 'IT', 80000, 'Male'), (2, 'Jane Smith', 'HR', 70000, 'Female'), (3, 'Mike Johnson', 'IT', 85000, 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, AVG(Salary) as Avg_Salary FROM Employees WHERE Gender = 'Male' GROUP BY Department;"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 평등 법률이 3개 이상 있는 주를 찾으세요.\n\nDDL statements:\nCREATE TABLE mental_health_parity (id INT PRIMARY KEY, state VARCHAR(2), parity_law VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) as parity_law_count FROM mental_health_parity WHERE parity_law = 'yes' GROUP BY state HAVING COUNT(*) > 3;"
    },
    {
        "instruction": "입력 텍스트: 2020년 캘리포니아에서의 풍력 에너지 프로젝트의 총 설치 용량(MW)은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE wind_energy_projects (project_id INT, state VARCHAR(20), year INT, installed_capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(installed_capacity) FROM wind_energy_projects WHERE state = 'California' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 10달러 미만의 기부금을 제외한 연령대별 평균 기부금액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), DonationDate date, DonationAmount decimal(10,2), Age int); INSERT INTO Donors (DonorID, DonorName, DonationDate, DonationAmount, Age) VALUES (1, 'Jane Doe', '2021-02-01', 20.00, 35), (2, 'Jim Brown', '2021-03-15', 50.00, 42), (3, 'Fatima Khan', '2021-04-01', 7.50, 28);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Age, AVG(DonationAmount) as AverageDonationAmount FROM Donors WHERE DonationAmount >= 10 AND YEAR(DonationDate) = 2021 GROUP BY Age;"
    },
    {
        "instruction": "입력 텍스트: 인도 출신 기부자의 기부 금액을 4000으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, country TEXT, amount_donated DECIMAL(10,2)); INSERT INTO donors (id, name, country, amount_donated) VALUES (1, 'Alice', 'United States', 5000.00), (2, 'Bob', 'Canada', 6000.00), (3, 'Charlie', 'India', 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE donors SET amount_donated = 4000 WHERE country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 학생들에 의해 총 어떤 개방 교육 자료들이 접근되었으며, 그들은 각각 몇 번 접근되었나요?\n\nDDL statements:\nCREATE TABLE student_access (student_id INT, resource_id INT, access_date DATE); CREATE TABLE open_pedagogy_resources (resource_id INT, resource_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.resource_name, COUNT(s.access_date) FROM student_access s INNER JOIN open_pedagogy_resources r ON s.resource_id = r.resource_id GROUP BY r.resource_name;"
    },
    {
        "instruction": "입력 텍스트: ClassicGame' 테이블에서 최대 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ClassicGame (GameID INT, PlayerID INT, Score INT); INSERT INTO ClassicGame (GameID, PlayerID, Score) VALUES (2001, 1, 85), (2002, 2, 95), (2003, 3, 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Score) FROM ClassicGame;"
    },
    {
        "instruction": "입력 텍스트: suppliers' 테이블에서 'country'가 'China'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, company VARCHAR(30), country VARCHAR(20)); INSERT INTO suppliers VALUES (1, 'Hong Supplies', 'China'), (2, 'Metal Masters', 'USA'), (3, 'Green Goods', 'Canada'), (4, 'Global Gadgets', 'China'), (5, 'Fair Trade Fabrics', 'Bangladesh');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM suppliers WHERE country = 'China';"
    },
    {
        "instruction": "입력 텍스트: 가장 많은 스마트 계약을 보유한 상위 3개 국가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE smart_contracts (id INT, name VARCHAR(255), country VARCHAR(50)); INSERT INTO smart_contracts (id, name, country) VALUES (1, 'SC1', 'Country1'); INSERT INTO smart_contracts (id, name, country) VALUES (2, 'SC2', 'Country2'); INSERT INTO smart_contracts (id, name, country) VALUES (3, 'SC3', 'Country1'); INSERT INTO smart_contracts (id, name, country) VALUES (4, 'SC4', 'Country3'); INSERT INTO smart_contracts (id, name, country) VALUES (5, 'SC5', 'Country1'); CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); INSERT INTO countries (id, name) VALUES (2, 'Country2'); INSERT INTO countries (id, name) VALUES (3, 'Country3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as smart_contract_count FROM smart_contracts GROUP BY country ORDER BY smart_contract_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 가장 많은 유기농 제품을 출하한 공급업체를 확인하세요?\n\nDDL statements:\nCREATE TABLE shipments (id INT, supplier_id INT, organic BOOLEAN, year INT, total_shipped INT); INSERT INTO shipments (id, supplier_id, organic, year, total_shipped) VALUES (1, 1, true, 2021, 500), (2, 2, false, 2022, 600), (3, 3, true, 2021, 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_id, SUM(total_shipped) as total_organic_shipments FROM shipments WHERE organic = true AND year = 2021 GROUP BY supplier_id ORDER BY total_organic_shipments DESC FETCH FIRST 1 ROW ONLY;"
    },
    {
        "instruction": "입력 텍스트: NetworkDevices' 테이블에서 심각도별 취약점 분포를 원형 차트로 나타내 주세요.\n\nDDL statements:\nCREATE TABLE NetworkDevices (id INT, device_name VARCHAR(50), severity VARCHAR(10), discovered_date DATE); INSERT INTO NetworkDevices (id, device_name, severity, discovered_date) VALUES (1, 'Router1', 'High', '2021-08-01'), (2, 'Switch1', 'Medium', '2021-07-15'), (3, 'Firewall1', 'Low', '2021-06-01'), (4, 'Router2', 'High', '2021-09-01'), (5, 'Switch2', 'Low', '2021-07-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT severity, COUNT(*) as total_vulnerabilities FROM NetworkDevices GROUP BY severity;"
    },
    {
        "instruction": "입력 텍스트: 2021-01-01 이후 '싱가포르' 항구를 방문한 모든 선박을 마지막 방문 날짜 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE vessels (vessel_id INT, vessel_name TEXT); INSERT INTO vessels (vessel_id, vessel_name) VALUES (1, 'Vessel A'), (2, 'Vessel B'); CREATE TABLE visits (visit_id INT, vessel_id INT, port_id INT, visit_date DATE); INSERT INTO visits (visit_id, vessel_id, port_id, visit_date) VALUES (1, 1, 3, '2021-02-01'), (2, 2, 3, '2021-03-01'), (3, 1, 3, '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel_name, MAX(visit_date) FROM visits JOIN vessels ON visits.vessel_id = vessels.vessel_id WHERE port_id = (SELECT port_id FROM ports WHERE port_name = 'Singapore') AND visit_date >= '2021-01-01' GROUP BY vessel_name ORDER BY MAX(visit_date) DESC;"
    },
    {
        "instruction": "입력 텍스트: 인도의 여성 소유 기업에 수여된 군사 계약의 총 가치는 내림차순으로 얼마인가요?\n\nDDL statements:\nCREATE TABLE military_contracts (contract_id INT, company_gender TEXT, country TEXT, contract_value FLOAT); INSERT INTO military_contracts (contract_id, company_gender, country, contract_value) VALUES (1, 'Women-Owned Business', 'India', 5000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(contract_value) FROM military_contracts WHERE country = 'India' AND company_gender = 'Women-Owned Business' ORDER BY contract_value DESC;"
    },
    {
        "instruction": "입력 텍스트: 미국과 APAC 지역 국가들 사이의 방위 협정 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE DefenseAgreements (AgreementID INT, Country VARCHAR(50), AgreementType VARCHAR(50), StartDate DATE, EndDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(AgreementID) FROM DefenseAgreements WHERE Country IN (SELECT Country FROM Countries WHERE Region = 'APAC') AND AgreementType = 'Defense Agreement';"
    },
    {
        "instruction": "입력 텍스트: 북극해에 서식하는 물범의 평균 개체 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ArcticOcean (seal_species TEXT, population INT); INSERT INTO ArcticOcean (seal_species, population) VALUES ('Ringed Seal', 750000), ('Bearded Seal', 250000), ('Hooded Seal', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(population) FROM ArcticOcean WHERE seal_species IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 제조 공장에서 일하는 근로자들의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Plants (id INT, name VARCHAR(50), department VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(e.salary) FROM Employees e JOIN Plants p ON e.department = p.name WHERE p.name = 'Manufacturing';"
    },
    {
        "instruction": "입력 텍스트: 중복 청구 데이터를 저장하는 테이블을 삭제하세요.\n\nDDL statements:\nCREATE TABLE redundant_billing_data (bill_id INT PRIMARY KEY, attorney_id INT, amount DECIMAL(10,2), bill_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DROP TABLE redundant_billing_data;"
    },
    {
        "instruction": "입력 텍스트: 유럽 헬스케어' 데이터셋에 훈련된 모델들의 평균 설명 가능성 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE european_healthcare (model_name TEXT, explainability_score FLOAT); INSERT INTO european_healthcare (model_name, explainability_score) VALUES ('model1', 0.85), ('model2', 0.90), ('model3', 0.88);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(explainability_score) FROM european_healthcare;"
    },
    {
        "instruction": "입력 텍스트: events' 테이블에서 야외 콘서트의 총 판매된 티켓 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (id INT PRIMARY KEY, event_name VARCHAR(100), event_type VARCHAR(50), num_tickets_sold INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_tickets_sold) AS total_tickets_sold FROM events WHERE event_type = 'Outdoor Concert';"
    },
    {
        "instruction": "입력 텍스트: green_buildings'에서 모든 건물과 그들의 인증을 보여주세요.\n\nDDL statements:\nCREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size INT, certification VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, certification FROM green_buildings;"
    },
    {
        "instruction": "입력 텍스트: 해당 연도별 법률 지원 요청의 총 건수와 해결 상태는 무엇인가요?\n\nDDL statements:\nCREATE TABLE LegalAidRequests (Year INT, Request TEXT, Status TEXT); INSERT INTO LegalAidRequests (Year, Request, Status) VALUES (2020, 'Request A', 'Resolved'), (2020, 'Request B', 'Unresolved'), (2020, 'Request C', 'Resolved'), (2021, 'Request D', 'Resolved'), (2021, 'Request E', 'Unresolved'), (2021, 'Request F', 'Resolved');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Year, Status, COUNT(Request) FROM LegalAidRequests GROUP BY Year, Status;"
    },
    {
        "instruction": "입력 텍스트: 영국, 프랑스, 그리고 독일에서 활동하는 차량 안전 검사 기관은 어디인가요?\n\nDDL statements:\nCREATE TABLE SafetyOrgs (name VARCHAR(20), country VARCHAR(10)); INSERT INTO SafetyOrgs (name, country) VALUES ('Euro NCAP', 'UK'); INSERT INTO SafetyOrgs (name, country) VALUES ('ADAC', 'Germany'); INSERT INTO SafetyOrgs (name, country) VALUES ('UTAC', 'France'); INSERT INTO SafetyOrgs (name, country) VALUES ('DEKRA', 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM SafetyOrgs WHERE country IN ('UK', 'France', 'Germany') GROUP BY name HAVING COUNT(DISTINCT country) = 3;"
    },
    {
        "instruction": "입력 텍스트: 직급, 관리자, 그리고 인종별로 직원의 근속 연수 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID int, FirstName varchar(50), LastName varchar(50), JobLevel int, Manager varchar(50), Ethnicity varchar(50), Tenure int); INSERT INTO Employees (EmployeeID, FirstName, LastName, JobLevel, Manager, Ethnicity, Tenure) VALUES (1, 'John', 'Doe', 3, 'Jane Doe', 'Asian', 5), (2, 'Jane', 'Doe', 2, 'Bob Smith', 'Latino', 10), (3, 'Jim', 'Smith', 1, 'Bob Smith', 'African American', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Employees.JobLevel, Employees.Manager, Employees.Ethnicity, AVG(Employees.Tenure) as Avg_Tenure FROM Employees GROUP BY Employees.JobLevel, Employees.Manager, Employees.Ethnicity;"
    },
    {
        "instruction": "입력 텍스트: 2021년 아시아에서 시작된 지속 가능한 관광 이니셔티브는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE sustainability_initiatives (location VARCHAR(50), year INT); INSERT INTO sustainability_initiatives (location, year) VALUES ('Bali, Indonesia', 2021), ('Bangkok, Thailand', 2021), ('Siem Reap, Cambodia', 2021), ('Hanoi, Vietnam', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as total_initiatives FROM sustainability_initiatives WHERE location LIKE '%Asia%' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: \"trucks\" 테이블에서 \"year\"가 2022년보다 작은 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE trucks (id INT PRIMARY KEY, make VARCHAR(50), model VARCHAR(50), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM trucks WHERE year < 2022;"
    },
    {
        "instruction": "입력 텍스트: 인도 투자자들이 헬스케어 분야에 투자한 것 중 최대 영향 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE investor (investor_id INT, name VARCHAR(255), country VARCHAR(255)); INSERT INTO investor (investor_id, name, country) VALUES (1, 'EcoHealth India', 'India'); CREATE TABLE investment (investment_id INT, investor_id INT, strategy VARCHAR(255), impact_score FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(impact_score) FROM investment JOIN investor ON investment.investor_id = investor.investor_id WHERE investor.country = 'India' AND strategy LIKE '%Healthcare%';"
    },
    {
        "instruction": "입력 텍스트: 2021년 하반기에 태평양 지역에서 1000만 달러 이상 예산을 가진 프로젝트 중에서 정시에 완료된 프로젝트의 비율을 계산하세요.\n\nDDL statements:\nCREATE TABLE ProjectTimelineByBudget (ProjectID int, Region varchar(20), Half int, Budget decimal(10,2), OnTime bit); INSERT INTO ProjectTimelineByBudget (ProjectID, Region, Half, Budget, OnTime) VALUES (1, 'Pacific', 2, 12000000.00, 1), (2, 'Pacific', 2, 8000000.00, 0), (3, 'Pacific', 2, 11000000.00, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, PERCENTAGE(SUM(OnTime) OVER (PARTITION BY Region) / COUNT(*) OVER (PARTITION BY Region)) as PercentageOnTime FROM ProjectTimelineByBudget WHERE Region = 'Pacific' AND Half = 2 AND Budget > 10000000;"
    },
    {
        "instruction": "입력 텍스트: 2022년 상반기에 참석자 수가 50명 미만인 이벤트는 몇 개였나요?\n\nDDL statements:\nCREATE TABLE Events (EventID INT, EventDate DATE, EventAttendance INT); INSERT INTO Events (EventID, EventDate, EventAttendance) VALUES (1, '2022-03-12', 120), (2, '2022-04-20', 80), (3, '2022-05-15', 150), (4, '2022-01-01', 30), (5, '2022-06-10', 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Events WHERE EventAttendance < 50 AND EventDate < '2022-07-01';"
    },
    {
        "instruction": "입력 텍스트: 프랑스 파리 시에 있는 휠체어 접근 가능한 부동산의 평방 피트당 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE paris_real_estate(id INT, city VARCHAR(50), price DECIMAL(10,2), size INT, wheelchair_accessible BOOLEAN); INSERT INTO paris_real_estate VALUES (1, 'Paris', 500000, 1000, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price/size) FROM paris_real_estate WHERE city = 'Paris' AND wheelchair_accessible = true;"
    },
    {
        "instruction": "입력 텍스트: infection_rates'라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE infection_rates (id INT PRIMARY KEY, state VARCHAR(50), infection_rate FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE infection_rates (id INT PRIMARY KEY, state VARCHAR(50), infection_rate FLOAT);"
    },
    {
        "instruction": "입력 텍스트: 2022년에 아메리카 지역에 있는 100개 이상의 방을 가진 친환경 호텔이 벌어들인 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Hotels (id INT, name TEXT, country TEXT, city TEXT, rooms INT, eco_certified BOOLEAN, revenue DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM Hotels WHERE eco_certified = TRUE AND country IN ('Americas') AND rooms > 100 AND YEAR(date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 판매된 각 제품의 총 수량과 그 판매로부터 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, product_id INT, quantity INT, sale_date DATE, revenue INT); INSERT INTO sales (sale_id, product_id, quantity, sale_date, revenue) VALUES (1, 1, 3, '2022-01-05', 15), (2, 2, 1, '2022-01-07', 10); CREATE TABLE product (product_id INT, product_name TEXT, region_id INT); INSERT INTO product (product_id, product_name, region_id) VALUES (1, 'Coca Cola', 1), (2, 'Pizza', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.product_name, SUM(s.quantity) as total_quantity, SUM(s.revenue) as total_revenue FROM sales s JOIN product p ON s.product_id = p.product_id WHERE s.sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY p.product_name;"
    },
    {
        "instruction": "입력 텍스트: 북아메리카' 지역에서 '그린 콘 세레모니'와 유사한 수의 커뮤니티 구성원을 가진 모든 토착 식량 시스템을 나열하세요.\n\nDDL statements:\nCREATE TABLE indigenous_food_systems (name TEXT, region TEXT, community_members INT); INSERT INTO indigenous_food_systems (name, region, community_members) VALUES ('Green Corn Ceremony', 'North America', 120); INSERT INTO indigenous_food_systems (name, region, community_members) VALUES ('Potlatch', 'North America', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM indigenous_food_systems WHERE region = 'North America' AND community_members = (SELECT community_members FROM indigenous_food_systems WHERE name = 'Green Corn Ceremony');"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 월별로 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DonationHistory (DonationID int, DonationDate date, DonationAmount numeric); INSERT INTO DonationHistory (DonationID, DonationDate, DonationAmount) VALUES (1, '2022-01-01', 500), (2, '2022-02-01', 300), (3, '2022-03-01', 800), (4, '2022-04-01', 900), (5, '2022-05-01', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM DonationDate) Month, SUM(DonationAmount) TotalDonations FROM DonationHistory WHERE DonationDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM DonationDate);"
    },
    {
        "instruction": "입력 텍스트: 2017년 이후에 승인된 약물에 대해 완료된 임상 시험은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE clinical_trials (id INT PRIMARY KEY, drug_id INT, phase VARCHAR(50), completion_date DATE); CREATE TABLE drugs (id INT PRIMARY KEY, name VARCHAR(255), manufacturer VARCHAR(255), approval_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(ct.id) as total_completed_trials FROM clinical_trials ct JOIN drugs d ON ct.drug_id = d.id WHERE d.approval_date > '2017-01-01';"
    },
    {
        "instruction": "입력 텍스트: 우주 임무 테이블에서 1990년 이전에 발사된 모든 임무의 임무_이름, 발사_날짜, 임무_상태를 표시합니다.\n\nDDL statements:\nCREATE TABLE space_missions (id INT PRIMARY KEY, mission_name VARCHAR(100), launch_date DATE, mission_status VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name, launch_date, mission_status FROM space_missions WHERE launch_date < '1990-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 EMEA 지역에서 발생한 보안 사고는 월별로 몇 건이었나요?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, incident_date DATE, region VARCHAR(255), incident_type VARCHAR(255)); INSERT INTO security_incidents (id, incident_date, region, incident_type) VALUES (1, '2021-01-05', 'EMEA', 'Phishing'), (2, '2021-02-10', 'EMEA', 'Malware'), (3, '2021-03-15', 'EMEA', 'SQL Injection'), (4, '2021-04-20', 'EMEA', 'Cross-site Scripting'), (5, '2021-05-25', 'EMEA', 'DoS/DDoS');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM incident_date) as month, COUNT(*) as incidents_per_month FROM security_incidents WHERE region = 'EMEA' AND incident_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: NBA에서 가장 많은 리바운드를 기록한 농구 선수는 누구인가요?\n\nDDL statements:\nCREATE TABLE rebounds (id INT, player VARCHAR(50), team VARCHAR(50), league VARCHAR(50), rebounds INT); INSERT INTO rebounds (id, player, team, league, rebounds) VALUES (1, 'Andre Drummond', 'Cavaliers', 'NBA', 15); INSERT INTO rebounds (id, player, team, league, rebounds) VALUES (2, 'Rudy Gobert', 'Jazz', 'NBA', 13);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player FROM rebounds WHERE league = 'NBA' AND rebounds = (SELECT MAX(rebounds) FROM rebounds WHERE league = 'NBA');"
    },
    {
        "instruction": "입력 텍스트: SA' 지역의 창고 관리 성과 평균 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE performance_scores (id INT, region VARCHAR(5), date DATE, score INT); INSERT INTO performance_scores VALUES (1, 'SA', '2021-09-01', 80), (2, 'ASIA', '2021-09-03', 90), (3, 'SA', '2021-09-05', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(score) FROM performance_scores WHERE region = 'SA';"
    },
    {
        "instruction": "입력 텍스트: MappingLengths' 테이블에 있는 모든 해저 지도화 프로젝트의 총 길이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE MappingLengths (MappingID INT PRIMARY KEY, MappingName TEXT, MappingLength FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(MappingLength) FROM MappingLengths;"
    },
    {
        "instruction": "입력 텍스트: 파리에서 참석자가 30명을 초과한 미술 전시 이벤트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE art_exhibit_attendance (id INT, num_attendees INT, exhibit_location VARCHAR(50)); INSERT INTO art_exhibit_attendance (id, num_attendees, exhibit_location) VALUES (1, 25, 'Paris'), (2, 35, 'Paris'), (3, 45, 'Paris'), (4, 30, 'Berlin'), (5, 50, 'Berlin'), (6, 20, 'London');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM art_exhibit_attendance WHERE num_attendees > 30 AND exhibit_location = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 'Sophia Lee'와 'Ali Al-Khaleej'가 기부한 금액의 합계는 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor VARCHAR(50), amount DECIMAL(10,2), donation_date DATE); INSERT INTO donations (id, donor, amount, donation_date) VALUES (1, 'Sophia Lee', 250, '2022-02-14'); INSERT INTO donations (id, donor, amount, donation_date) VALUES (2, 'Ali Al-Khaleej', 400, '2022-07-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) as total_donation FROM donations WHERE donor IN ('Sophia Lee', 'Ali Al-Khaleej') AND YEAR(donation_date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: Production' 부서의 직원들의 급여를 3% 인상하세요.\n\nDDL statements:\nCREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(50), salary INT); INSERT INTO employees (id, name, department, salary) VALUES (1, 'John Smith', 'Production', 45000); INSERT INTO employees (id, name, department, salary) VALUES (2, 'Jane Doe', 'Engineering', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE employees SET salary = salary * 1.03 WHERE department = 'Production';"
    },
    {
        "instruction": "입력 텍스트: 각 기관별로 기부된 총 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE org_donation (org_id INT, donation_id INT, donation_amount INT); INSERT INTO org_donation (org_id, donation_id, donation_amount) VALUES (1, 1, 500), (1, 2, 750), (2, 3, 1000), (3, 4, 250), (4, 5, 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT org_id, COUNT(*) as total_donations FROM org_donation GROUP BY org_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 Stellar 네트워크의 각 노드에서 처리된 트랜잭션 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE stellar_transactions (transaction_id INT, node_id VARCHAR(50), timestamp BIGINT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT node_id, COUNT(*) FROM stellar_transactions WHERE timestamp BETWEEN UNIX_TIMESTAMP() - 604800 AND UNIX_TIMESTAMP() GROUP BY node_id;"
    },
    {
        "instruction": "입력 텍스트: \"publications\" 테이블에서 출판 기록을 삭제합니다.\n\nDDL statements:\nCREATE TABLE publications (id INT PRIMARY KEY, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), publication_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH deleted_publication AS (DELETE FROM publications WHERE id = 1 RETURNING *) SELECT * FROM deleted_publication;"
    },
    {
        "instruction": "입력 텍스트: 1800년 이전에 설립된 도시들의 총 인구는 얼마입니까?\n\nDDL statements:\nCREATE TABLE City (id INT, name VARCHAR(50), population INT, founded DATE); INSERT INTO City (id, name, population, founded) VALUES (1, 'New York', 8500000, '1624-09-17'); INSERT INTO City (id, name, population, founded) VALUES (2, 'Los Angeles', 4000000, '1781-09-04');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(population) FROM City WHERE YEAR(founded) < 1800;"
    },
    {
        "instruction": "입력 텍스트: 각 지역구에서 가장 최근 선거에 투표된 총 표수는 얼마이며, 투표율은 몇 퍼센트인가요?\n\nDDL statements:\nCREATE TABLE elections (id INT PRIMARY KEY, district VARCHAR(30), votes INT, total_voters INT); INSERT INTO elections (id, district, votes, total_voters) VALUES (1, 'District 1', 1000, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district, SUM(votes) AS total_votes, (SUM(votes) / MAX(total_voters)) * 100 AS turnout_percentage FROM elections GROUP BY district;"
    },
    {
        "instruction": "입력 텍스트: 제조업에 중점을 둔 노조에서 한 달 동안 기록된 직장 안전 위반 최대 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE safety_violations (violation_id INT, sector VARCHAR(50), violation_date DATE, union_id INT); CREATE TABLE unions (union_id INT, union_name VARCHAR(50), focus VARCHAR(50)); INSERT INTO safety_violations (violation_id, sector, violation_date, union_id) VALUES (1, 'manufacturing', '2021-01-01', 1), (2, 'manufacturing', '2021-02-01', 1), (3, 'construction', '2021-03-01', 2); INSERT INTO unions (union_id, union_name, focus) VALUES (1, 'Manufacturing Workers Union', 'manufacturing'), (2, 'Tech Workers Union', 'technology');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(violation_count) FROM (SELECT COUNT(*) as violation_count, EXTRACT(MONTH FROM sv.violation_date) as violation_month FROM safety_violations sv INNER JOIN unions u ON sv.union_id = u.union_id WHERE u.focus = 'manufacturing' GROUP BY violation_month) as subquery;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에 있는 농부는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE farmers (id INT, name VARCHAR(50), age INT, location VARCHAR(50)); INSERT INTO farmers (id, name, age, location) VALUES (1, 'John Doe', 45, 'Ruralville'); INSERT INTO farmers (id, name, age, location) VALUES (2, 'Jane Smith', 50, 'Farmtown');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) FROM farmers GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: ID 123인 특정 배송의 총 수익은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE shipments (shipment_id INT, revenue DECIMAL(10,2)); INSERT INTO shipments (shipment_id, revenue) VALUES (123, 2000.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT revenue FROM shipments WHERE shipment_id = 123;"
    },
    {
        "instruction": "입력 텍스트: explainable_ai 테이블에서 fairness_score가 0.7 미만인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE explainable_ai (record_id INT, algorithm_name TEXT, fairness_score REAL); INSERT INTO explainable_ai VALUES (1, 'SHAP', 0.8), (2, 'LIME', 0.6), (3, 'Anchors', 0.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM explainable_ai WHERE fairness_score < 0.7;"
    },
    {
        "instruction": "입력 텍스트: 모든 분야에 대한 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investments (id INT, sector VARCHAR(20), amount FLOAT); INSERT INTO investments (id, sector, amount) VALUES (1, 'Education', 150000.00), (2, 'Healthcare', 120000.00), (3, 'Renewable Energy', 200000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM investments;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에서 가장 많은 작품을 가진 상위 3명의 예술가는 누구인가요?\n\nDDL statements:\nCREATE TABLE Artworks (artwork_id INT, artist_name VARCHAR(50)); INSERT INTO Artworks (artwork_id, artist_name) VALUES (1, 'Vincent Van Gogh'), (2, 'Pablo Picasso'), (3, 'Claude Monet'), (4, 'Jackson Pollock'), (5, 'Francisco Goya');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist_name, COUNT(*) as artwork_count FROM Artworks GROUP BY artist_name ORDER BY artwork_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 약물의 미국과 캐나다에서의 승인 횟수를 약물 이름 순으로 정렬하여 찾으세요.\n\nDDL statements:\nCREATE TABLE drug_approvals (drug_name VARCHAR(255), approval_country VARCHAR(255)); INSERT INTO drug_approvals (drug_name, approval_country) VALUES ('Drug A', 'USA'), ('Drug A', 'Canada'), ('Drug B', 'USA'), ('Drug C', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug_name, COUNT(*) as approval_count FROM drug_approvals WHERE approval_country IN ('USA', 'Canada') GROUP BY drug_name ORDER BY drug_name;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 매월 e스포츠 이벤트에 참여한 플레이어들이 플레이한 고유 게임 수와 그들이 사용한 고유 가상 현실 장치 수를 결정합니다.\n\nDDL statements:\nCREATE TABLE EventDates (EventID INT, EventDate DATE); INSERT INTO EventDates (EventID, EventDate) VALUES (1, '2022-01-01'), (2, '2022-02-01'), (3, '2022-01-15'); CREATE TABLE EventParticipation (EventID INT, PlayerID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT E.EventCountry, EXTRACT(MONTH FROM E.EventDate) AS Month, COUNT(DISTINCT EP.PlayerID) AS PlayersJoined, COUNT(DISTINCT VR.VRDevice) AS VRDevices, COUNT(DISTINCT G.GameID) AS UniqueGames FROM Players P JOIN EventParticipation EP ON P.PlayerID = EP.PlayerID JOIN EventDates E ON EP.EventID = E.EventID JOIN GamePlay G ON P.PlayerID = G.PlayerID JOIN VRAdoption VR ON P.PlayerID = VR.PlayerID GROUP BY E.EventCountry, EXTRACT(MONTH FROM E.EventDate)"
    },
    {
        "instruction": "입력 텍스트: 비건 스킨케어 제품의 평균 지속 가능성 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Skincare_Ingredients (ProductID int, ProductName varchar(100), IsVegan bit, SustainabilityRating int); INSERT INTO Skincare_Ingredients (ProductID, ProductName, IsVegan, SustainabilityRating) VALUES (1, 'Vegan Facial Cream', 1, 8); INSERT INTO Skincare_Ingredients (ProductID, ProductName, IsVegan, SustainabilityRating) VALUES (2, 'Natural Face Wash', 0, 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(SustainabilityRating) FROM Skincare_Ingredients WHERE IsVegan = 1;"
    },
    {
        "instruction": "입력 텍스트: 엔지니어링 부서에서 여성, 남성, 그리고 논바이너리 직원의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE EmployeeDemographics (EmployeeID int, Gender varchar(10), Department varchar(20)); INSERT INTO EmployeeDemographics (EmployeeID, Gender, Department) VALUES (1, 'Female', 'Engineering'), (2, 'Male', 'IT'), (3, 'Non-binary', 'Engineering');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, ROUND(COUNT(CASE WHEN Gender = 'Female' THEN 1 END) * 100.0 / COUNT(*), 1) AS FemalePercentage, ROUND(COUNT(CASE WHEN Gender = 'Male' THEN 1 END) * 100.0 / COUNT(*), 1) AS MalePercentage, ROUND(COUNT(CASE WHEN Gender = 'Non-binary' THEN 1 END) * 100.0 / COUNT(*), 1) AS NonBinaryPercentage FROM EmployeeDemographics GROUP BY Department;"
    },
    {
        "instruction": "입력 텍스트: 각 레스토랑별로 식품 안전 검사에서 중대한 위반 사항이 몇 건이나 발생했나요?\n\nDDL statements:\nCREATE TABLE inspections (id INT, restaurant_id INT, result VARCHAR(50)); INSERT INTO inspections (id, restaurant_id, result) VALUES (1, 1, 'critical violation'); INSERT INTO inspections (id, restaurant_id, result) VALUES (2, 1, 'no violation'); INSERT INTO inspections (id, restaurant_id, result) VALUES (3, 2, 'critical violation'); INSERT INTO inspections (id, restaurant_id, result) VALUES (4, 2, 'critical violation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT restaurant_id, COUNT(*) as critical_violations FROM inspections WHERE result = 'critical violation' GROUP BY restaurant_id;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 인구가 50만 명을 초과하는 도시의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE States (StateID INT, StateName VARCHAR(255), Population INT); CREATE TABLE Cities (CityID INT, CityName VARCHAR(255), StateID INT, Population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT States.StateName, COUNT(Cities.CityID) AS CityCount FROM States JOIN Cities ON States.StateID = Cities.StateID GROUP BY States.StateName HAVING SUM(Cities.Population) > 500000;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 식량 지원 형태로 가장 많은 인도적 지원을 받은 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE disaster_response (id INT, country VARCHAR(50), aid_type VARCHAR(50), amount FLOAT, date DATE); INSERT INTO disaster_response (id, country, aid_type, amount, date) VALUES (1, 'Syria', 'food', 1000000, '2017-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(amount) as total_food_aid FROM disaster_response WHERE aid_type = 'food' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY country ORDER BY total_food_aid DESC;"
    },
    {
        "instruction": "입력 텍스트: 육류 메뉴의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menu_items (item VARCHAR(50), type VARCHAR(15), cost DECIMAL(10,2)); INSERT INTO menu_items (item, type, cost) VALUES ('Beef Burger', 'Meat', 10.00), ('Chicken Sandwich', 'Meat', 8.00); CREATE VIEW meat_menu_items AS SELECT item, cost FROM menu_items WHERE type = 'Meat';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM meat_menu_items;"
    },
    {
        "instruction": "입력 텍스트: \"hr\" 스키마의 각 부서별 직원 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE hr.employees (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO hr.employees (id, name, department) VALUES (1, 'John Doe', 'HR'); INSERT INTO hr.employees (id, name, department) VALUES (2, 'Jane Smith', 'IT'); INSERT INTO hr.employees (id, name, department) VALUES (3, 'Bob Brown', 'IT'); INSERT INTO hr.employees (id, name, department) VALUES (4, 'Alice Johnson', 'HR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, COUNT(*) FROM hr.employees GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 호주에서 지속 가능한 관광 사업자들이 창출하는 평균 연간 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE TourismProviders (provider_id INT, provider_name TEXT, country TEXT); INSERT INTO TourismProviders (provider_id, provider_name, country) VALUES (1, 'Australia Sustainable Tours', 'Australia'); INSERT INTO TourismProviders (provider_id, provider_name, country) VALUES (2, 'Global Australia Tours', 'Australia'); CREATE TABLE Revenue (provider_id INT, annual_revenue INT); INSERT INTO Revenue (provider_id, annual_revenue) VALUES (1, 900000); INSERT INTO Revenue (provider_id, annual_revenue) VALUES (2, 1100000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(annual_revenue) FROM TourismProviders JOIN Revenue ON TourismProviders.provider_id = Revenue.provider_id WHERE country = 'Australia' AND sustainability_focus = 'Sustainable Tourism';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 군인 수를 합산하여 가장 많은 군인 수부터 순서대로 나열하세요.\n\nDDL statements:\nCREATE TABLE military_personnel (region TEXT, personnel INTEGER); INSERT INTO military_personnel (region, personnel) VALUES ('Asia', 10000), ('Europe', 8000), ('North America', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(personnel) FROM military_personnel GROUP BY region ORDER BY SUM(personnel) DESC"
    },
    {
        "instruction": "입력 텍스트: \"ev_suvs\" 뷰에서 전기 SUV의 최대 주행 거리는 얼마인가요?\n\nDDL statements:\nCREATE VIEW ev_suvs AS SELECT * FROM green_vehicles WHERE type = 'Electric' AND category = 'SUV';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(range) FROM ev_suvs;"
    },
    {
        "instruction": "입력 텍스트: plots' 테이블에서 농림 복합경영으로 사용되는 토지 중 최대 크기(헥타르 단위)는 얼마인가요?\n\nDDL statements:\nCREATE TABLE plots (id INT, size_ha FLOAT, type TEXT); INSERT INTO plots (id, size_ha, type) VALUES (1, 2.5, 'Urban'); INSERT INTO plots (id, size_ha, type) VALUES (2, 3.2, 'Agroforestry'); INSERT INTO plots (id, size_ha, type) VALUES (3, 1.9, 'Agroforestry');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(size_ha) FROM plots WHERE type = 'Agroforestry';"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년에 해결된 사건의 총 건수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE cases (id INT, year INT, restorative_justice BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(*) FROM cases WHERE year IN (2019, 2020);"
    },
    {
        "instruction": "입력 텍스트: lead_mines' 테이블에 있는 모든 납 광산의 평균 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE lead_mines (id INT, name TEXT, location TEXT, depth FLOAT); INSERT INTO lead_mines (id, name, location, depth) VALUES (1, 'Lead Mine A', 'Country X', 350.5); INSERT INTO lead_mines (id, name, location, depth) VALUES (2, 'Lead Mine B', 'Country Y', 420.3); INSERT INTO lead_mines (id, name, location, depth) VALUES (3, 'Lead Mine C', 'Country Z', 200.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) FROM lead_mines;"
    },
    {
        "instruction": "입력 텍스트: 배송 날짜가 '2019-01-01' 이전인 모든 기록을 shipment 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE port (port_id INT, port_name TEXT);CREATE TABLE shipment (shipment_id INT, container_count INT, ship_date DATE, port_id INT); INSERT INTO port VALUES (1, 'Los Angeles'), (2, 'Tokyo'); INSERT INTO shipment VALUES (1, 500, '2018-01-01', 1), (2, 300, '2019-02-15', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM shipment WHERE ship_date < '2019-01-01';"
    },
    {
        "instruction": "입력 텍스트: 캄보디아의 농촌 인프라 프로젝트 수와 그들의 평균 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, name TEXT, country TEXT, cost FLOAT); INSERT INTO projects (id, name, country, cost) VALUES (1, 'Road', 'Cambodia', 200000), (2, 'Bridge', 'Cambodia', 500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*), AVG(cost) FROM projects WHERE country = 'Cambodia';"
    },
    {
        "instruction": "입력 텍스트: 허가증 ID 123에 대한 시공업체의 이름을 'New Constructor Inc.'로 변경하세요.\n\nDDL statements:\nCREATE TABLE building_permits (permit_id INT, contractor VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE building_permits SET contractor = 'New Constructor Inc.' WHERE permit_id = 123;"
    },
    {
        "instruction": "입력 텍스트: 토착 커뮤니티에서 발생하는 희귀 유전 질환과 관련된 유전 연구 데이터를 찾습니다.\n\nDDL statements:\nCREATE TABLE genetic_research (id INT, title VARCHAR(100), focus VARCHAR(100), community VARCHAR(50)); INSERT INTO genetic_research (id, title, focus, community) VALUES (1, 'Genetic Markers in Alzheimer''s Disease', 'neurodegenerative', 'European'); INSERT INTO genetic_research (id, title, focus, community) VALUES (2, 'Genomic Analysis of Parkinson''s Disease', 'neurodegenerative', 'African'); INSERT INTO genetic_research (id, title, focus, community) VALUES (3, 'Genetic Basis of Inherited Cancers in Indigenous Australians', 'children', 'Indigenous');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM genetic_research WHERE community = 'Indigenous';"
    },
    {
        "instruction": "입력 텍스트: NASA의 화성 탐사 프로그램의 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE nasa_mars_program (program_id INT, name VARCHAR(100), start_year INT, end_year INT, total_cost FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(total_cost) FROM nasa_mars_program WHERE name = 'Mars Exploration Program';"
    },
    {
        "instruction": "입력 텍스트: \"tv_shows\" 테이블에 이름에 \"news\"라는 단어가 포함된 TV 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE tv_shows (id INT, name VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM tv_shows WHERE name LIKE '%news%';"
    },
    {
        "instruction": "입력 텍스트: 2022년 뉴욕에서 월별 전동 킥보드 여행 횟수를 찾으세요.\n\nDDL statements:\nCREATE TABLE e_scooter_trips (id INT, trip_start_time TIMESTAMP, trip_end_time TIMESTAMP, trip_city VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM trip_start_time) AS month, COUNT(*) AS num_trips"
    },
    {
        "instruction": "입력 텍스트: 각 회복적 사법 센터에서 매월 처리한 사건 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE restorative_justice_center (case_id INT, center_name VARCHAR(50), case_date DATE); INSERT INTO restorative_justice_center VALUES (1, 'Center A', '2021-01-01'), (2, 'Center B', '2021-01-05'), (3, 'Center A', '2021-02-02'), (4, 'Center C', '2021-02-06');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT center_name, DATE_FORMAT(case_date, '%Y-%m') AS case_month, COUNT(*) AS cases_per_month FROM restorative_justice_center GROUP BY center_name, case_month;"
    },
    {
        "instruction": "입력 텍스트: 여성 사용자의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (id INT, age INT, gender TEXT);  INSERT INTO users (id, age, gender) VALUES   (1, 25, 'female'), (2, 35, 'male'), (3, 30, 'non-binary'), (4, 45, 'male'), (5, 50, 'female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(CASE WHEN gender = 'female' THEN 1 END) * 100.0 / COUNT(*)) as female_percentage   FROM users;"
    },
    {
        "instruction": "입력 텍스트: 11월에 가장 많은 콘서트 티켓을 판매한 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE concert_sales (id INT, artist VARCHAR(255), city VARCHAR(255), date DATE, tickets_sold INT); INSERT INTO concert_sales (id, artist, city, date, tickets_sold) VALUES (1, 'Rosalía', 'Barcelona', '2022-11-01', 20000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist, SUM(tickets_sold) AS total_tickets_sold FROM concert_sales WHERE date BETWEEN '2022-11-01' AND '2022-11-30' GROUP BY artist ORDER BY total_tickets_sold DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: technical_ops' 부서에서 가장 높은 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE departments (id INT, name VARCHAR(50)); CREATE TABLE employees (id INT, name VARCHAR(50), dept_id INT, salary DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(e.salary) FROM employees e JOIN departments d ON d.id = e.dept_id WHERE d.name = 'technical_ops';"
    },
    {
        "instruction": "입력 텍스트: 각 도시별 전시회에 참석한 고유 방문객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE exhibitions (id INT, city VARCHAR(50), visitor_count INT); INSERT INTO exhibitions (id, city, visitor_count) VALUES (1, 'Paris', 300), (2, 'London', 400), (3, 'Berlin', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(DISTINCT visitor_count) FROM exhibitions GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 중간' 및 '큰' 규모의 조직이 지출하는 기후 금융의 평균 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE org_climate_finance (org_size VARCHAR(20), amount FLOAT); INSERT INTO org_climate_finance (org_size, amount) VALUES ('small', 20000), ('medium', 50000), ('large', 75000), ('extra_large', 100000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM org_climate_finance WHERE org_size IN ('medium', 'large');"
    },
    {
        "instruction": "입력 텍스트: 주어진 팀 ID에 대한 위치를 업데이트하세요\n\nDDL statements:\nCREATE TABLE teams (id INT, name VARCHAR(50), sport VARCHAR(50), location VARCHAR(50)); INSERT INTO teams (id, name, sport, location) VALUES (1, 'Warriors', 'Basketball', 'San Francisco'), (2, 'Real Madrid', 'Soccer', 'Madrid');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE teams SET location = 'New York' WHERE id = 2;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 운동 분수를 기준으로 캐나다에서 가장 활동적인 회원 상위 3명을 나열하세요.\n\nDDL statements:\nCREATE TABLE Members (MemberID INT, MemberName VARCHAR(50), State VARCHAR(50)); CREATE TABLE Workouts (WorkoutID INT, WorkoutName VARCHAR(50), WorkoutType VARCHAR(50), Duration INT, WorkoutDate DATE, MemberID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.MemberName, SUM(w.Duration) AS TotalMinutes FROM Members m INNER JOIN Workouts w ON m.MemberID = w.MemberID WHERE m.State = 'Canada' AND w.WorkoutDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY m.MemberName ORDER BY TotalMinutes DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 각 영업사원의 총 매출은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE sales (salesperson VARCHAR(255), revenue FLOAT); INSERT INTO sales (salesperson, revenue) VALUES ('John', 5000), ('Jane', 7000), ('Doe', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT salesperson, SUM(revenue) FROM sales WHERE revenue IS NOT NULL AND salesperson IS NOT NULL AND STR_TO_DATE(CONCAT('01-', MONTH(NOW())), '%d-%m-%Y') = STR_TO_DATE('01-2022', '%d-%m-%Y') GROUP BY salesperson;"
    },
    {
        "instruction": "입력 텍스트: 1500명 이상의 관람객이 있었던 미술 전시회에서 평균 전시 작품 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE exhibitions (id INT, name TEXT, pieces INT, visitors INT); INSERT INTO exhibitions (id, name, pieces, visitors) VALUES (1, 'Impressionist Art', 180, 1600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(pieces) FROM exhibitions WHERE visitors > 1500;"
    },
    {
        "instruction": "입력 텍스트: 새로운 동물 '재규어'를 '서식지 보존' 프로그램에 추가하세요.\n\nDDL statements:\nCREATE TABLE animal_population (animal_id INT, animal_name VARCHAR(50), program VARCHAR(50), added_date DATE); INSERT INTO animal_population (animal_id, animal_name, program, added_date) VALUES (1, 'Grizzly Bear', 'habitat_preservation', '2022-01-01'), (2, 'Gray Wolf', 'community_education', '2022-02-01'), (3, 'Bald Eagle', 'habitat_preservation', '2022-03-01'), (4, 'Red Fox', 'community_education', '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO animal_population (animal_name, program, added_date) VALUES ('Jaguar', 'habitat_preservation', CURRENT_TIMESTAMP);"
    },
    {
        "instruction": "입력 텍스트: Williams'라는 성을 가진 자원봉사자의 기록을 업데이트하고, 2023년 1월 15일에 10시간의 자원봉사 시간을 추가하세요.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Skills VARCHAR(100), Hours INT, LastVolunteer DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Volunteers SET Hours = Hours + 10, LastVolunteer = '2023-01-15' WHERE LastName = 'Williams';"
    },
    {
        "instruction": "입력 텍스트: 영문학과 대학원생들이 출판한 논문의 평균 개수는 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists higher_ed;CREATE TABLE if not exists higher_ed.students(id INT, name VARCHAR(255), department VARCHAR(255));CREATE TABLE if not exists higher_ed.publications(id INT, title VARCHAR(255), author_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(pub_count) FROM (SELECT author_id, COUNT(*) as pub_count FROM higher_ed.publications GROUP BY author_id) p JOIN higher_ed.students s ON p.author_id = s.id WHERE s.department = 'English';"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기 APAC 지역의 사이버 보안 사고 건수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Cybersecurity_Incidents (id INT, incident_type VARCHAR(255), region VARCHAR(255), incident_date DATE); INSERT INTO Cybersecurity_Incidents (id, incident_type, region, incident_date) VALUES (1, 'Data Breach', 'APAC', '2021-07-12'); INSERT INTO Cybersecurity_Incidents (id, incident_type, region, incident_date) VALUES (2, 'Phishing Attack', 'APAC', '2021-10-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Cybersecurity_Incidents WHERE region = 'APAC' AND QUARTER(incident_date) = 3 AND incident_date >= '2021-07-01' AND incident_date <= '2021-09-30';"
    },
    {
        "instruction": "입력 텍스트: Volunteers' 테이블에 등록된 자원봉사자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, name VARCHAR(50), registered_date DATE); INSERT INTO Volunteers (id, name, registered_date) VALUES (1, 'John Doe', '2021-01-01'), (2, 'Jane Smith', '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Volunteers"
    },
    {
        "instruction": "입력 텍스트: 나무 테이블에서 지름이 60인치보다 큰 모든 나무를 삭제하세요.\n\nDDL statements:\nCREATE TABLE trees (id INT PRIMARY KEY, species VARCHAR(255), diameter FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM trees WHERE diameter > 60;"
    },
    {
        "instruction": "입력 텍스트: Artwork' 테이블에서 여성 예술가의 작품을 보여주세요.\n\nDDL statements:\nCREATE TABLE Artwork (artwork_id INT, artwork_name VARCHAR(255), artist_gender VARCHAR(10), artist_id INT); INSERT INTO Artwork (artwork_id, artwork_name, artist_gender, artist_id) VALUES (1, 'The Starry Night', 'Male', 1), (2, 'The Scream', 'Male', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artwork_name, artist_id FROM Artwork WHERE artist_gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 각 월별로 탐지된 거짓 정보 이야기는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE disinformation_detection (detection_id INT, detection_date DATE, is_false BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_TRUNC('month', detection_date) AS month, COUNT(*) FROM disinformation_detection WHERE is_false = TRUE GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: Utah'에 위치한 광산 사이트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE mining_sites (site_id INT, site_name VARCHAR(50), state VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mining_sites WHERE state = 'Utah';"
    },
    {
        "instruction": "입력 텍스트: hr' 스키마의 각 부서별로 몇 명의 직원이 있는지, 부서별로 그룹화하고 직원 수가 많은 순으로 내림차순으로 정렬하여 보여주세요.\n\nDDL statements:\nCREATE SCHEMA hr; CREATE TABLE departments (id INT, name VARCHAR); INSERT INTO departments VALUES (1, 'Marketing'); CREATE TABLE employees (id INT, name VARCHAR, department_id INT); INSERT INTO employees VALUES (1, 'John Doe', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT departments.name, COUNT(*) AS num_employees FROM hr.departments JOIN hr.employees ON departments.id = employees.department_id GROUP BY departments.name ORDER BY num_employees DESC;"
    },
    {
        "instruction": "입력 텍스트: 2015년 텍사스 주의 총 재활용률은 얼마였나요?\n\nDDL statements:\nCREATE TABLE recycling_rates_state (state VARCHAR(20), year INT, recycling_rate DECIMAL(3,2)); INSERT INTO recycling_rates_state (state, year, recycling_rate) VALUES ('Texas', 2015, 0.30), ('Texas', 2015, 0.35), ('Texas', 2015, 0.40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(recycling_rate) AS total_recycling_rate FROM recycling_rates_state WHERE state = 'Texas' AND year = 2015;"
    },
    {
        "instruction": "입력 텍스트: 각 게임 장르별로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GameSales (GameID INT, GameName VARCHAR(50), Genre VARCHAR(50), Revenue DECIMAL(10, 2)); INSERT INTO GameSales (GameID, GameName, Genre, Revenue) VALUES (1, 'Fortnite', 'Battle Royale', 1000.00), (2, 'Minecraft', 'Sandbox', 500.00), (3, 'Call of Duty', 'FPS', 800.00), (4, 'The Sims', 'Life Simulation', 700.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, SUM(Revenue) as TotalRevenue FROM GameSales GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: 어떤 사용자가 둘 이상의 장르에서 음악을 스트리밍 했나요?\n\nDDL statements:\nCREATE TABLE user_genre (user_id INT, user_name VARCHAR(255), genre VARCHAR(255)); CREATE TABLE user (user_id INT, user_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT user_name FROM user_genre GROUP BY user_name HAVING COUNT(DISTINCT genre) > 1;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 한 달 동안 일별 거래 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, transaction_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE(transaction_date) as transaction_day, COUNT(transaction_id) as number_of_transactions FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY transaction_day;"
    },
    {
        "instruction": "입력 텍스트: 인구가 1000만 명 미만인 국가를 제외하고, 1인당 재생 가능 에너지 생산량이 가장 높은 상위 2개 국가를 확인하세요.\n\nDDL statements:\nCREATE TABLE energy_production (country VARCHAR(20), population INT, renewable_energy_production INT); INSERT INTO energy_production (country, population, renewable_energy_production) VALUES ('Canada', 38000000, 616000), ('Germany', 83000000, 355000), ('France', 67000000, 229000), ('Spain', 47000, 228000), ('Brazil', 212000000, 465000), ('Australia', 25000000, 183000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, renewable_energy_production/population AS production_per_capita FROM energy_production WHERE population >= 10000000 GROUP BY country ORDER BY production_per_capita DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 루이지애나에 있는 2000년 이전에 지어진 제방은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE Levees(id INT, name TEXT, location TEXT, built DATE); INSERT INTO Levees(id, name, location, built) VALUES (1, 'New Orleans East Levee', 'Louisiana', '2006-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Levees WHERE location = 'Louisiana' AND built < '2000-01-01';"
    },
    {
        "instruction": "입력 텍스트: 브랜드 Y를 착용한 사용자들의 기록된 최소 심박수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE heart_rate_data (id INT, user_id INT, heart_rate INT, shoe_brand VARCHAR(20), measurement_date DATE); INSERT INTO heart_rate_data (id, user_id, heart_rate, shoe_brand, measurement_date) VALUES (1, 1, 120, 'Nike', '2022-08-01'), (2, 2, 110, 'Adidas', '2022-07-15'), (3, 3, 130, 'Nike', '2022-08-10'), (4, 4, 90, 'Yeezy', '2022-07-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(heart_rate) FROM heart_rate_data WHERE shoe_brand = 'Yeezy';"
    },
    {
        "instruction": "입력 텍스트: 오리건 주의 지속 가능한 건축 관행을 모두 나열합니다.\n\nDDL statements:\nCREATE TABLE sustainable_practices_2 (practice_id INT, building_type VARCHAR(20), state VARCHAR(20), description TEXT); INSERT INTO sustainable_practices_2 (practice_id, building_type, state, description) VALUES (1, 'Residential', 'OR', 'Use of renewable energy sources'), (2, 'Commercial', 'OR', 'Green roofs');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM sustainable_practices_2 WHERE state = 'OR';"
    },
    {
        "instruction": "입력 텍스트: 각 장소에서 매일 발생하는 범죄 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE dates (date DATE PRIMARY KEY);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, incident_date, COUNT(*) as daily_crimes FROM crimes JOIN dates ON crimes.incident_date = dates.date GROUP BY location, incident_date;"
    },
    {
        "instruction": "입력 텍스트: 오픈 교수법 과정에 있는 학생들의 평균 정신 건강 점수가 전통적인 과정에 있는 학생들과 비교해서 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE student_courses (student_id INT, course_type VARCHAR(10), mental_health_score INT); INSERT INTO student_courses (student_id, course_type, mental_health_score) VALUES (1, 'Open', 75), (2, 'Traditional', 80), (3, 'Open', 70), (4, 'Traditional', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG( mental_health_score ) as avg_open, 'Open' as course_type FROM student_courses WHERE course_type = 'Open' UNION ALL SELECT AVG( mental_health_score ) as avg_traditional, 'Traditional' as course_type FROM student_courses WHERE course_type = 'Traditional';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 섬유 공급업체가 사용한 재활용 섬유의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE FabricData (FabricID INT, SupplierID INT, FabricType TEXT, Quantity FLOAT, Recycled BOOLEAN); INSERT INTO FabricData (FabricID, SupplierID, FabricType, Quantity, Recycled) VALUES (1001, 1, 'Recycled Polyester', 500, true), (1002, 1, 'Polyester', 700, false), (1003, 2, 'Hemp', 800, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SupplierID, SUM(Quantity) FROM FabricData WHERE Recycled = true AND FabricDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY SupplierID;"
    },
    {
        "instruction": "입력 텍스트: 엔진 용량이 3000에서 5000 사이인 화물선의 이름, 유형, 그리고 엔진 용량을 나열하세요.\n\nDDL statements:\nCREATE TABLE Vessels (ID INT, Name VARCHAR(50), Type VARCHAR(50), Engine_Capacity INT); INSERT INTO Vessels (ID, Name, Type, Engine_Capacity) VALUES (1, 'MV Orient', 'Cargo Ship', 4500), (2, 'MV Odyssey', 'Cargo Ship', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, Type, Engine_Capacity FROM Vessels WHERE Type = 'Cargo Ship' AND Engine_Capacity BETWEEN 3000 AND 5000;"
    },
    {
        "instruction": "입력 텍스트: 교육에 중점을 둔 노조의 회원 중 최고 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE union_members (member_id INT, name VARCHAR(50), age INT, union_id INT); CREATE TABLE unions (union_id INT, union_name VARCHAR(50), focus VARCHAR(50)); INSERT INTO union_members (member_id, name, age, union_id) VALUES (1, 'John Doe', 35, 1), (2, 'Jane Smith', 40, 1), (3, 'Mike Johnson', 30, 2); INSERT INTO unions (union_id, union_name, focus) VALUES (1, 'Healthcare Workers Union', 'healthcare'), (2, 'Teachers Union', 'education');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(um.age) FROM union_members um INNER JOIN unions u ON um.union_id = u.union_id WHERE u.focus = 'education';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에서 운영되는 각 재배자가 생산한 대마초의 총 수량은 얼마인가요? 단, 1000단위 이상 생산된 재배자에 한해서요.\n\nDDL statements:\nCREATE TABLE Cultivators (CultivatorID int, CultivatorName varchar(255), LicenseNumber varchar(255), State varchar(255)); INSERT INTO Cultivators (CultivatorID, CultivatorName, LicenseNumber, State) VALUES (1, 'California Green', 'CA001', 'California'); INSERT INTO Cultivators (CultivatorID, CultivatorName, LicenseNumber, State) VALUES (2, 'Emerald Fields', 'CA002', 'California'); CREATE TABLE Production (ProductionID int, CultivatorID int, Quantity int); INSERT INTO Production (ProductionID, CultivatorID, Quantity) VALUES (1, 1, 1200); INSERT INTO Production (ProductionID, CultivatorID, Quantity) VALUES (2, 2, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Cultivators.CultivatorName, SUM(Production.Quantity) AS TotalQuantity FROM Cultivators INNER JOIN Production ON Cultivators.CultivatorID = Production.CultivatorID WHERE Cultivators.State = 'California' GROUP BY Cultivators.CultivatorName HAVING TotalQuantity > 1000;"
    },
    {
        "instruction": "입력 텍스트: Healthy Delights' 메뉴의 총 재고 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE HealthyDelights (menu_item VARCHAR(50), quantity INT, purchase_price DECIMAL(5,2)); INSERT INTO HealthyDelights (menu_item, quantity, purchase_price) VALUES ('Fruit Salad', 10, 5.50), ('Veggie Wrap', 15, 7.00), ('Tofu Scramble', 20, 6.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity * purchase_price) as total_inventory_value FROM HealthyDelights;"
    },
    {
        "instruction": "입력 텍스트: 미국 내 사설 기관으로부터 자금을 지원받은 모든 바이오센서 프로젝트와 해당 자금 금액 및 프로젝트 시작 날짜를 나열하시오.\n\nDDL statements:\nCREATE SCHEMA if not exists biosensors; USE biosensors; CREATE TABLE if not exists projects (id INT, name VARCHAR(100), location VARCHAR(100), start_date DATE); CREATE TABLE if not exists funding_sources (id INT, project_id INT, source VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO projects (id, name, location, start_date) VALUES (1, 'ProjectA', 'California', '2015-01-01'), (2, 'ProjectB', 'Texas', '2016-02-02'), (3, 'ProjectC', 'California', '2017-03-03'), (4, 'ProjectD', 'New York', '2018-04-04'); INSERT INTO funding_sources (id, project_id, source, amount) VALUES (1, 1, 'Private - Firm A', 5000000.00), (2, 1, 'Private - Firm B', 3000000.00), (3, 3, 'Private - Firm A', 7000000.00), (4, 4, 'Government - Agency C', 4000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT projects.name, funding_sources.source, SUM(funding_sources.amount), projects.start_date FROM biosensors.projects INNER JOIN biosensors.funding_sources ON projects.id = funding_sources.project_id WHERE projects.location = 'California' AND funding_sources.source LIKE 'Private%' GROUP BY projects.name, funding_sources.source, projects.start_date;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 수행된 기차 유지 보수 작업의 총 횟수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE TrainMaintenance (TaskID INT, TaskDate DATE, TaskType VARCHAR(20)); INSERT INTO TrainMaintenance (TaskID, TaskDate, TaskType) VALUES (1, '2022-01-05', 'Oil Change'), (2, '2022-01-10', 'Inspection'), (3, '2022-02-03', 'Tire Rotation'), (4, '2022-01-15', 'Brake Adjustment'), (5, '2022-02-12', 'Oil Change');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM TrainMaintenance WHERE TaskDate >= '2022-01-01' AND TaskDate < '2022-02-01';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 500명 이상의 종사자가 있는 전통 예술은 무엇인가요?\n\nDDL statements:\nCREATE TABLE traditional_arts (id INT, art VARCHAR(50), country VARCHAR(50), practitioners INT); INSERT INTO traditional_arts (id, art, country, practitioners) VALUES (1, 'Inuit carving', 'Canada', 700); INSERT INTO traditional_arts (id, art, country, practitioners) VALUES (2, 'Māori tattooing', 'New Zealand', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT art FROM traditional_arts WHERE country = 'Canada' AND practitioners > 500;"
    },
    {
        "instruction": "입력 텍스트: 매사추세츠 주 보스턴 시에 있는 200개 이상의 지속 가능한 도시 부동산이 있는 고유한 동네 이름을 나열하십시오.\n\nDDL statements:\nCREATE TABLE sustainable_urban_properties_2 (id INT, city VARCHAR(255), neighborhood VARCHAR(255), property_type VARCHAR(255)); INSERT INTO sustainable_urban_properties_2 (id, city, neighborhood, property_type) VALUES (1, 'Boston', 'Back Bay', 'Apartment'), (2, 'Boston', 'Beacon Hill', 'Condo'), (3, 'Boston', 'Back Bay', 'Condo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT neighborhood FROM sustainable_urban_properties_2 WHERE city = 'Boston' GROUP BY neighborhood HAVING COUNT(*) > 200;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안의 위협 인텔리전스 항목의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ThreatIntelligence (EntryID INT, EntryDate DATE); INSERT INTO ThreatIntelligence (EntryID, EntryDate) VALUES (3, '2022-06-10'); INSERT INTO ThreatIntelligence (EntryID, EntryDate) VALUES (4, '2022-01-19');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ThreatIntelligence WHERE EntryDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: LGBTQ+로 정체성을 밝힌 창업자들이 설립한 스타트업의 최대 투자 라운드 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE investments(id INT, startup_id INT, round_number INT, investment_amount INT); INSERT INTO investments VALUES (1, 1, 1, 1000000); INSERT INTO investments VALUES (2, 1, 2, 5000000); INSERT INTO investments VALUES (3, 2, 1, 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(round_number) FROM investments JOIN startups ON investments.startup_id = startups.id WHERE startups.founder_identity = 'LGBTQ+';"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 기부자 카테고리별로 가장 많은 총 기부금을 받은 비영리 단체는 어디인가요?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donor_category TEXT); INSERT INTO donors (donor_id, donor_name, donor_category) VALUES (1, 'Jane Smith', 'Individual'), (2, 'XYZ Foundation', 'Foundation'), (3, 'Greenpeace', 'Nonprofit'); CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount DECIMAL, donation_date DATE); INSERT INTO donations (donation_id, donor_id, donation_amount, donation_date) VALUES (1, 1, 150, '2022-07-05'), (2, 2, 3000, '2022-07-10'), (3, 3, 500, '2022-09-15'), (4, 1, 200, '2022-08-12'), (5, 2, 6500, '2022-08-20'), (6, 3, 900, '2022-10-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT donor_category, p.program_name, SUM(d.donation_amount) as total_donation_amount FROM donations d JOIN donors don ON d.donor_id = don.donor_id JOIN programs p ON don.donor_category = p.program_name WHERE d.donation_date BETWEEN '2022-07-01' AND '2022-09-30' GROUP BY donor_category, p.program_name;"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역의 각 공급업체에서 유기농 재료 구매의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, name VARCHAR(255), total_spent DECIMAL(10, 2), region VARCHAR(255), organic_purchases BOOLEAN); INSERT INTO suppliers (supplier_id, name, total_spent, region, organic_purchases) VALUES (1, 'Supplier A', 12000, 'Europe', true), (2, 'Supplier B', 10000, 'Europe', true), (3, 'Supplier C', 15000, 'Asia', true), (4, 'Supplier D', 8000, 'America', true), (5, 'Supplier E', 10000, 'Spain', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, 100.0 * AVG(CASE WHEN organic_purchases = true THEN 1.0 ELSE 0.0 END) AS pct_organic FROM suppliers WHERE region = 'Asia' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 수처리 시설 중에서 월 예산을 초과한 곳은 몇 곳입니까?\n\nDDL statements:\nCREATE TABLE WaterTreatmentPlants (id INT, state VARCHAR(20), monthly_budget FLOAT, monthly_expenses FLOAT); INSERT INTO WaterTreatmentPlants (id, state, monthly_budget, monthly_expenses) VALUES (1, 'New York', 12000.0, 13000.0), (2, 'New York', 11000.0, 10500.0), (3, 'California', 15000.0, 14500.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM WaterTreatmentPlants WHERE state = 'New York' AND monthly_expenses > monthly_budget;"
    },
    {
        "instruction": "입력 텍스트: 예멘에서 이재민들에게 제공된 식량 지원의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE displaced_people (id INT, country VARCHAR(255), food_assistance_given BOOLEAN); INSERT INTO displaced_people (id, country, food_assistance_given) VALUES (1, 'Yemen', TRUE), (2, 'Yemen', FALSE), (3, 'Syria', TRUE); CREATE TABLE food_assistance (id INT, country VARCHAR(255), amount FLOAT); INSERT INTO food_assistance (id, country, amount) VALUES (1, 'Yemen', 500), (2, 'Yemen', 700), (3, 'Syria', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM food_assistance fa JOIN displaced_people d ON fa.country = d.country WHERE d.food_assistance_given = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 기록된 최소 해양 산성화 수준은 얼마이며, 이 수준을 기록한 연구소는 어디인가요?\n\nDDL statements:\nCREATE TABLE ocean_acidification (measurement_date DATE, location TEXT, level FLOAT); INSERT INTO ocean_acidification (measurement_date, location, level) VALUES ('2021-01-01', 'Hawaii Ocean Observatory', 7.4); INSERT INTO ocean_acidification (measurement_date, location, level) VALUES ('2021-01-02', 'Monterey Bay Aquarium Research Institute', 7.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT research_station.station_name, oa.level AS min_level FROM ocean_acidification oa JOIN (SELECT location, MIN(level) AS min_level FROM ocean_acidification WHERE region = 'Pacific Ocean' GROUP BY location) oa_min ON oa.level = oa_min.min_level JOIN research_stations research_station ON oa.location = research_station.station_name;"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2020년 사이에 캐나다에서 완료된 재생 에너지 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE renewable_projects (id INT, country VARCHAR(50), year INT, project_status VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM renewable_projects WHERE country = 'Canada' AND project_status = 'completed' AND year BETWEEN 2015 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 중국에서 수입한 실크 직물의 최대 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE textile_sourcing(id INT PRIMARY KEY, material VARCHAR(50), country VARCHAR(50), price DECIMAL(10,2)); INSERT INTO textile_sourcing(id, material, country, price) VALUES (1, 'cotton', 'Brazil', 3.50), (2, 'silk', 'China', 15.00), (3, 'wool', 'Australia', 7.00), (4, 'polyester', 'India', 2.00), (5, 'silk', 'China', 17.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM textile_sourcing WHERE material = 'silk' AND country = 'China';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 역사적으로 활용도가 낮은 사업 지구(HUBZone)에 수여된 계약의 총 가치를 결정합니다.\n\nDDL statements:\nCREATE TABLE contracts (contract_id INT, contract_value FLOAT, contract_date DATE, business_zone VARCHAR(20)); INSERT INTO contracts (contract_id, contract_value, contract_date, business_zone) VALUES (1, 1000000, '2021-05-01', 'HUBZone'), (2, 750000, '2021-10-20', 'Non-HUBZone');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(contract_value) FROM contracts WHERE business_zone = 'HUBZone' AND contract_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 스폰서십' 프로그램에 대한 최대 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sponsorship_donations (id INT, donor_name TEXT, program TEXT, donation_amount DECIMAL); INSERT INTO sponsorship_donations (id, donor_name, program, donation_amount) VALUES (1, 'Eva', 'Sponsorship', 500.00); INSERT INTO sponsorship_donations (id, donor_name, program, donation_amount) VALUES (2, 'Frank', 'Sponsorship', 1000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(donation_amount) FROM sponsorship_donations WHERE program = 'Sponsorship';"
    },
    {
        "instruction": "입력 텍스트: 각 자원봉사자가 선호하는 프로그램에 대한 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID int, Name varchar(50)); INSERT INTO Volunteers (VolunteerID, Name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Mike Johnson'); CREATE TABLE VolunteerPrograms (VolunteerID int, ProgramID int); INSERT INTO VolunteerPrograms (VolunteerID, ProgramID) VALUES (1, 1), (2, 1), (3, 2); CREATE TABLE Donations (DonationID int, DonorID int, ProgramID int, Amount decimal(10,2)); INSERT INTO Donations (DonationID, DonorID, ProgramID, Amount) VALUES (1, 1, 1, 100.00), (2, 2, 1, 200.00), (3, 3, 2, 50.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT V.Name, SUM(D.Amount) as TotalDonations FROM Volunteers V JOIN VolunteerPrograms VP ON V.VolunteerID = VP.VolunteerID JOIN Donations D ON VP.ProgramID = D.ProgramID GROUP BY V.Name"
    },
    {
        "instruction": "입력 텍스트: 일본에서 제작된 영화와 TV 프로그램의 평균 IMDb 평점과 각각의 총 제작 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Movies (MovieID INT, Title VARCHAR(255), Genre VARCHAR(50), ReleaseYear INT, ProductionBudget DECIMAL(10,2), Country VARCHAR(50), IMDbRating DECIMAL(3,2)); CREATE TABLE TVShows (ShowID INT, Title VARCHAR(255), Genre VARCHAR(50), ReleaseYear INT, ProductionBudget DECIMAL(10,2), Country VARCHAR(50), IMDbRating DECIMAL(3,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Movies.IMDbRating) AS Avg_Movie_Rating, AVG(TVShows.IMDbRating) AS Avg_TVShow_Rating, SUM(Movies.ProductionBudget) AS Total_Movie_Budget, SUM(TVShows.ProductionBudget) AS Total_TVShow_Budget FROM Movies INNER JOIN TVShows ON 1=1 WHERE Movies.Country = 'Japan' AND TVShows.Country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 2022년도에 장애 지원 프로그램과 옹호 활동에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE DisabilitySupportPrograms (year INT, budget DECIMAL(5,2)); INSERT INTO DisabilitySupportPrograms (year, budget) VALUES (2019, 120000.00), (2020, 150000.00), (2021, 180000.00), (2022, 210000.00); CREATE TABLE DisabilityAdvocacy (year INT, budget DECIMAL(5,2)); INSERT INTO DisabilityAdvocacy (year, budget) VALUES (2019, 125000.00), (2020, 160000.00), (2021, 190000.00), (2022, 225000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(DisabilitySupportPrograms.budget) + SUM(DisabilityAdvocacy.budget) FROM DisabilitySupportPrograms, DisabilityAdvocacy WHERE DisabilitySupportPrograms.year = 2022 AND DisabilityAdvocacy.year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 각 교수님들에게 수여된 연구비 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE faculty (faculty_id INT, name TEXT, gender TEXT, department TEXT); CREATE TABLE research_grants (grant_id INT, faculty_id INT, amount DECIMAL(10,2), date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, SUM(rg.amount) FROM research_grants rg INNER JOIN faculty f ON rg.faculty_id = f.faculty_id WHERE rg.date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY f.name;"
    },
    {
        "instruction": "입력 텍스트: 지난 2년간 러시아가 나토 국가들과 개최한 국방 외교 회의는 몇 차례였습니까?\n\nDDL statements:\nCREATE SCHEMA if not exists defense; CREATE TABLE if not exists russia_nato_diplomacy (id INT PRIMARY KEY, year INT, meeting_count INT); INSERT INTO russia_nato_diplomacy (id, year, meeting_count) VALUES (1, 2020, 3), (2, 2021, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(meeting_count) FROM defense.russia_nato_diplomacy WHERE year BETWEEN 2020 AND 2021 AND country IN ('NATO', 'Russia');"
    },
    {
        "instruction": "입력 텍스트: 가장 많은 사건을 처리한 상위 3명의 변호사는 누구이며, 각각 총 몇 건의 사건을 처리했나요?\n\nDDL statements:\nCREATE TABLE lawyers (lawyer_name VARCHAR(50), cases_heard INT); INSERT INTO lawyers VALUES ('John Smith', 500), ('Jane Doe', 400), ('Robert Johnson', 300), ('Mary Williams', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT lawyer_name, SUM(cases_heard) AS total_cases_heard FROM lawyers GROUP BY lawyer_name ORDER BY total_cases_heard DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 직업 분야와 지역별로 그룹화된 'Workforce Development' 부문의 근로자들의 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE workers (worker_id INT, sector VARCHAR(255), job_title VARCHAR(255), region VARCHAR(255), salary DECIMAL(10,2)); INSERT INTO workers (worker_id, sector, job_title, region, salary) VALUES (1, 'Workforce Development', 'Engineer', 'North America', 80000.00), (2, 'Workforce Development', 'Technician', 'North America', 50000.00), (3, 'Workforce Development', 'Manager', 'Europe', 90000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT job_title, region, AVG(salary) FROM workers WHERE sector = 'Workforce Development' GROUP BY job_title, region;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 남부 지역에서 건설된 그린 빌딩은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE buildings (id INT, region VARCHAR(20), year INT, type VARCHAR(20)); INSERT INTO buildings (id, region, year, type) VALUES (1, 'Southern', 2020, 'Green'); INSERT INTO buildings (id, region, year, type) VALUES (2, 'Northern', 2019, 'Green');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM buildings WHERE region = 'Southern' AND year = 2020 AND type = 'Green';"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 원단의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sustainable_fabrics (id INT, name TEXT, price DECIMAL); INSERT INTO sustainable_fabrics (id, name, price) VALUES (1, 'Organic Cotton', 2.5), (2, 'Recycled Polyester', 3.2), (3, 'Hemp', 2.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM sustainable_fabrics;"
    },
    {
        "instruction": "입력 텍스트: algorithmic_fairness' 데이터셋으로 훈련된 모델 중 최대 공정성 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE algorithmic_fairness (model_name TEXT, dataset TEXT, fairness_score INTEGER); INSERT INTO algorithmic_fairness (model_name, dataset, fairness_score) VALUES ('model1', 'algorithmic_fairness', 85), ('model2', 'algorithmic_fairness', 92);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(fairness_score) FROM algorithmic_fairness WHERE dataset = 'algorithmic_fairness';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 가장 많은 화물 무게를 처리한 상위 5개 항구는 어디인가요?\n\nDDL statements:\nCREATE TABLE Port (port_id INT, port_name TEXT, country TEXT); INSERT INTO Port (port_id, port_name, country) VALUES (1, 'Port of Shanghai', 'China'); INSERT INTO Port (port_id, port_name, country) VALUES (2, 'Port of Singapore', 'Singapore'); CREATE TABLE Cargo (cargo_id INT, port_id INT, weight FLOAT, handling_date DATE); INSERT INTO Cargo (cargo_id, port_id, weight, handling_date) VALUES (1, 1, 150000.0, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.port_name, SUM(c.weight) as total_weight FROM Port p JOIN Cargo c ON p.port_id = c.port_id WHERE handling_date >= '2022-01-01' AND handling_date < '2023-01-01' GROUP BY p.port_name ORDER BY total_weight DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 모든 부서의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE departments (dept_id INT, name VARCHAR(255), budget DECIMAL(10, 2)); INSERT INTO departments (dept_id, name, budget) VALUES (1, 'Education', 500000), (2, 'Transportation', 750000), (3, 'Health', 800000), (4, 'Housing', 650000), (5, 'Public Safety', 400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) AS average_budget FROM departments;"
    },
    {
        "instruction": "입력 텍스트: 어떤 언어들이 사라질 위험이 있으며, 그와 관련된 문화 유산은 무엇인가요?\n\nDDL statements:\nCREATE TABLE LanguagesAtRisk (id INT, language TEXT, status TEXT); INSERT INTO LanguagesAtRisk (id, language, status) VALUES (1, 'Ainu Language', 'Endangered'); CREATE TABLE AssociatedHeritages (id INT, language_id INT, heritage_site TEXT); INSERT INTO AssociatedHeritages (id, language_id, heritage_site) VALUES (1, 1, 'Ainu Cultural Heritage');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT L.language, AH.heritage_site FROM LanguagesAtRisk L INNER JOIN AssociatedHeritages AH ON L.id = AH.language_id;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 등급이 80 이상이고 인구가 50만 명을 초과하는 도시들 중에서 전체 평균 부동산 가격보다 높은 부동산들의 총 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE City (id INT, name VARCHAR(255), country VARCHAR(255), population INT, sustainable_rating FLOAT); CREATE TABLE Property (id INT, city VARCHAR(255), price FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City.name, SUM(Property.price) as total_price FROM City INNER JOIN Property ON City.name = Property.city WHERE City.sustainable_rating > 80 AND City.population > 500000 GROUP BY City.name HAVING SUM(Property.price) > (SELECT AVG(Property.price) FROM Property)"
    },
    {
        "instruction": "입력 텍스트: 2020년에 이동 장애가 있는 학생 중 보조 기기를 받은 학생은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE students (id INT, name VARCHAR(50), disability_type VARCHAR(50), accommodation_provided VARCHAR(50), accommodation_date DATE); INSERT INTO students (id, name, disability_type, accommodation_provided, accommodation_date) VALUES (1, 'Jane Smith', 'Mobility Impairment', 'Wheelchair', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM students WHERE disability_type = 'Mobility Impairment' AND YEAR(accommodation_date) = 2020 AND accommodation_provided IN ('Wheelchair', 'Mobility Scooter');"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2019년에 오세아니아에서 개최된 이스포츠 이벤트는 몇 개였나요?\n\nDDL statements:\nCREATE TABLE EsportsEvents (EventID INT, Location VARCHAR(20), Year INT); INSERT INTO EsportsEvents (EventID, Location, Year) VALUES (1, 'North America', 2019), (2, 'Europe', 2020), (3, 'Asia', 2019), (4, 'South America', 2019), (5, 'Europe', 2019), (6, 'North America', 2020), (7, 'Asia', 2020), (8, 'Oceania', 2018), (9, 'Oceania', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Location, Year, COUNT(*) as NumEvents FROM EsportsEvents GROUP BY Location, Year"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리별로 매월 발생하는 화학 폐기물의 합계는 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_data (waste_id INT, category VARCHAR(255), waste_date DATE, quantity INT); INSERT INTO waste_data (waste_id, category, waste_date, quantity) VALUES (1, 'Solvents', '2020-01-01', 150), (2, 'Acids', '2020-01-01', 200), (3, 'Gases', '2020-01-01', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, DATE_FORMAT(waste_date, '%Y-%m') AS Month, SUM(quantity) FROM waste_data GROUP BY Month, category;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 고객의 최대 거래 금액은 무엇인가요?\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_amount DECIMAL, transaction_date DATE); INSERT INTO transactions (transaction_id, customer_id, transaction_amount, transaction_date) VALUES (1, 1, 50.00, '2022-01-01'), (2, 2, 1500.00, '2022-02-15'); CREATE TABLE customers (customer_id INT, name TEXT); INSERT INTO customers (customer_id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, MAX(t.transaction_amount) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.name;"
    },
    {
        "instruction": "입력 텍스트: 워싱턴에서 지속 가능한 건축 프로젝트의 평균 완공 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE project_timelines (id INT, project_id INT, project_type TEXT, completion_date DATE); INSERT INTO project_timelines (id, project_id, project_type, completion_date) VALUES (1, 111, 'Sustainable', '2022-10-01'), (2, 222, 'Sustainable', '2022-11-15'), (3, 333, 'Conventional', '2022-09-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(completion_date, issue_date)) FROM building_permits bp JOIN project_timelines pt ON bp.permit_number = pt.project_id WHERE bp.project_state = 'Washington' AND pt.project_type = 'Sustainable';"
    },
    {
        "instruction": "입력 텍스트: 탄자니아의 각 지역에서 농촌 급식 도로 건설의 평균 비용은 얼마이며, 각 지역에서 건설된 도로의 총 길이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE regions (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO regions (id, name, country) VALUES (1, 'Arusha', 'Tanzania'); CREATE TABLE rural_feeder_roads (id INT, cost FLOAT, length INT, region_id INT); INSERT INTO rural_feeder_roads (id, cost, length, region_id) VALUES (1, 50000.0, 10, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, AVG(rfr.cost) as avg_cost, SUM(rfr.length) as total_length FROM rural_feeder_roads rfr INNER JOIN regions r ON rfr.region_id = r.id GROUP BY r.name;"
    },
    {
        "instruction": "입력 텍스트: 각 제조 현장에서 매월 사용된 재료의 총 수량을 계산합니다.\n\nDDL statements:\nCREATE TABLE materials (material_id INT, site_id INT, quantity INT, material_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_id, material_date, SUM(quantity) OVER (PARTITION BY site_id ORDER BY material_date) as total_quantity FROM materials;"
    },
    {
        "instruction": "입력 텍스트: 유기농 메뉴 아이템으로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Menu_Item (menu_item_id INT, menu_category VARCHAR(255), is_organic BOOLEAN, revenue INT); INSERT INTO Menu_Item (menu_item_id, menu_category, is_organic, revenue) VALUES (1, 'Appetizers', true, 2000), (2, 'Entrees', false, 8000), (3, 'Desserts', true, 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM Menu_Item WHERE is_organic = true;"
    },
    {
        "instruction": "입력 텍스트: 각 광업 회사별 총 에너지 소비량과 광산 작업별 평균 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mining_companies (company_id INT, company_name TEXT); INSERT INTO mining_companies (company_id, company_name) VALUES (1001, 'Mining Corp A'), (1002, 'Mining Corp B'), (1003, 'Mining Corp C'); CREATE TABLE mining_operations (operation_id INT, operation_name TEXT, country TEXT, energy_consumption FLOAT, company_id INT); INSERT INTO mining_operations (operation_id, operation_name, country, energy_consumption, company_id) VALUES (1, 'Porgera Mine', 'Papua New Guinea', 20000, 1001), (2, 'Cerro Verde Mine', 'Peru', 30000, 1001), (3, 'Gruyere Mine', 'Australia', 40000, 1002), (4, 'Veladero Mine', 'Argentina', 50000, 1002), (5, 'Kidd Mine', 'Canada', 60000, 1003), (6, 'Ducktown Mine', 'USA', 70000, 1003);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mining_companies.company_name, SUM(mining_operations.energy_consumption) AS total_energy_consumption FROM mining_companies JOIN mining_operations ON mining_companies.company_id = mining_operations.company_id GROUP BY mining_companies.company_name; SELECT AVG(energy_consumption) AS average_energy_consumption FROM mining_operations;"
    },
    {
        "instruction": "입력 텍스트: 각 카운티별로 인구가 15,000명 이상인 카운티의 의료 서비스 제공자 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE healthcare_providers (id INT, county VARCHAR(20), provider_type VARCHAR(20)); INSERT INTO healthcare_providers (id, county, provider_type) VALUES (1, 'Autauga County', 'Physician'); CREATE TABLE counties (county VARCHAR(20), state VARCHAR(2), population INT); INSERT INTO counties (county, state, population) VALUES ('Autauga County', 'AL', 55000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.county, COUNT(h.id) FROM healthcare_providers h JOIN counties c ON h.county = c.county WHERE c.population > 15000 GROUP BY h.county;"
    },
    {
        "instruction": "입력 텍스트: 2020년 이전 캐나다에서의 모든 네일 폴리쉬 판매 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE NailPolishSales (sale_id INT, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2), quantity INT, sale_date DATE, country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM NailPolishSales WHERE category = 'Nail Polish' AND country = 'Canada' AND sale_date < '2020-01-01';"
    },
    {
        "instruction": "입력 텍스트: 팝 장르의 노래 총 길이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE songs (song_id INT, genre VARCHAR(20), album VARCHAR(30), artist VARCHAR(30), length FLOAT); CREATE TABLE genres (genre VARCHAR(20)); INSERT INTO genres (genre) VALUES ('pop'), ('rock'), ('jazz'), ('hip-hop'); ALTER TABLE songs ADD CONSTRAINT fk_genre FOREIGN KEY (genre) REFERENCES genres(genre);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(length) as total_length FROM songs WHERE genre = (SELECT genre FROM genres WHERE genre = 'pop');"
    },
    {
        "instruction": "입력 텍스트: 아프리카' 부대의 군인 수는 최소 몇 명입니까?\n\nDDL statements:\nCREATE TABLE military_personnel (division TEXT, personnel INT); INSERT INTO military_personnel (division, personnel) VALUES ('Africa', 3500); INSERT INTO military_personnel (division, personnel) VALUES ('Americas', 4500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(personnel) FROM military_personnel WHERE division = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 재생 가능 에너지 분야에 이루어진 최대 투자 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE investments (id INT, sector VARCHAR(20), amount DECIMAL(10,2)); INSERT INTO investments (id, sector, amount) VALUES (1, 'renewable energy', 35000.00), (2, 'renewable energy', 40000.00), (3, 'education', 22000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(amount) FROM investments WHERE sector = 'renewable energy';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 '랜섬웨어'와 관련된 위협의 최대 심각도는 무엇인가요?\n\nDDL statements:\nCREATE TABLE threat_severity (id INT, threat_type VARCHAR(255), severity INT, threat_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(severity) as max_severity FROM threat_severity WHERE threat_type = 'ransomware' AND threat_time >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 미드웨스트 지역의 전통적 대출 계좌의 최소 계좌 잔액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE midwest_region (region VARCHAR(20), account_type VARCHAR(30), account_balance DECIMAL(10,2)); INSERT INTO midwest_region (region, account_type, account_balance) VALUES ('Midwest', 'Socially Responsible Lending', 5000.00), ('Midwest', 'Socially Responsible Lending', 6000.00), ('Midwest', 'Traditional Lending', 4000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(account_balance) FROM midwest_region WHERE account_type = 'Traditional Lending';"
    },
    {
        "instruction": "입력 텍스트: 각 지역에 있는 친환경 숙박 시설은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE eco_accommodations (id INT, region VARCHAR(255), type VARCHAR(255)); INSERT INTO eco_accommodations (id, region, type) VALUES (1, 'North America', 'Eco Lodge'), (2, 'Europe', 'Green Hotel'), (3, 'Asia', 'Eco Hotel');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM eco_accommodations GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 미국과 중국에서 출원된 바이오센서 기술 특허의 수를 기술 유형별로 열로 표시하여 보여주세요.\n\nDDL statements:\nCREATE SCHEMA if not exists biosensors; CREATE TABLE if not exists biosensors.patents (id INT, name VARCHAR(100), country VARCHAR(50), technology VARCHAR(50)); INSERT INTO biosensors.patents (id, name, country, technology) VALUES (1, 'Biosensor A', 'USA', 'Optical'), (2, 'Biosensor B', 'China', 'Electrochemical'), (3, 'Biosensor C', 'USA', 'Mass Spectrometry'), (4, 'Biosensor D', 'China', 'Optical');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(CASE WHEN technology = 'Optical' THEN 1 ELSE 0 END) as optical, SUM(CASE WHEN technology = 'Electrochemical' THEN 1 ELSE 0 END) as electrochemical, SUM(CASE WHEN technology = 'Mass Spectrometry' THEN 1 ELSE 0 END) as mass_spectrometry FROM biosensors.patents WHERE country IN ('USA', 'China') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 0x1234567890123456789012345678901234567890' 주소를 가진 스마트 계약에 관련된 트랜잭션들의 최대 가스 한도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE erc20_transactions (transaction_id INT, to_address VARCHAR(42), gas_limit INT, timestamp BIGINT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(gas_limit) FROM erc20_transactions WHERE to_address = '0x1234567890123456789012345678901234567890';"
    },
    {
        "instruction": "입력 텍스트: NY' 항구에서 화물 처리 평균 대기 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ports (port_code CHAR(3), port_name VARCHAR(20)); INSERT INTO ports (port_code, port_name) VALUES ('LA', 'Los Angeles'), ('NY', 'New York'); CREATE TABLE cargo_handling (port_code CHAR(3), waiting_time INT); INSERT INTO cargo_handling (port_code, waiting_time) VALUES ('LA', 2), ('LA', 3), ('NY', 1), ('NY', 2), ('NY', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cargo_handling.waiting_time) as avg_waiting_time FROM cargo_handling WHERE cargo_handling.port_code = 'NY';"
    },
    {
        "instruction": "입력 텍스트: 방위 계약' 테이블의 'contract_amount' 필드를 2021년 2분기에 수여된 계약에 대해 10% 증가시키세요.\n\nDDL statements:\nCREATE TABLE defense_contracts (contract_id INT, contract_amount FLOAT, award_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE defense_contracts SET contract_amount = contract_amount * 1.1 WHERE award_date BETWEEN '2021-04-01' AND '2021-06-30';"
    },
    {
        "instruction": "입력 텍스트: marine_species' 테이블에서 'Extinct'(멸종된) 상태인 종의 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE marine_species (id INT PRIMARY KEY, species_name VARCHAR(255), conservation_status VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM marine_species WHERE conservation_status = 'Extinct';"
    },
    {
        "instruction": "입력 텍스트: 재난 대비 구역별 범죄 유형의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE city (id INT, name TEXT); CREATE TABLE disaster_zones (id INT, city_id INT, zone TEXT); CREATE TABLE crime_stats (id INT, zone_id INT, crime_type TEXT, frequency INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dz.zone, cs.crime_type, cs.frequency FROM disaster_zones dz JOIN crime_stats cs ON dz.id = cs.zone_id;"
    },
    {
        "instruction": "입력 텍스트: 디지털 스트리밍 플랫폼을 통해 라틴 음악 아티스트들이 벌어들인 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE artists (artist_id INT, genre VARCHAR(20)); INSERT INTO artists (artist_id, genre) VALUES (1, 'Latin'), (2, 'Pop'), (3, 'Rock'); CREATE TABLE streams (stream_id INT, artist_id INT, revenue DECIMAL(10,2)); INSERT INTO streams (stream_id, artist_id, revenue) VALUES (1, 1, 10.50), (2, 1, 12.25), (3, 2, 9.99), (4, 3, 15.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(streams.revenue) FROM streams INNER JOIN artists ON streams.artist_id = artists.artist_id WHERE artists.genre = 'Latin';"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 각 국가의 총 국방 지출 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Budget (Year INT, Country VARCHAR(255), SpendingAmount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, SUM(SpendingAmount) as TotalSpending FROM Budget WHERE Year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE)-5 AND EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: ID 3번인 작품의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Artworks (ArtworkID INT, Title VARCHAR(50), Gallery VARCHAR(50)); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (1, 'Starry Night', 'ImpressionistGallery'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (2, 'Sunflowers', 'ImpressionistGallery'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (3, 'Untitled', 'ContemporaryArt'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (4, 'Untitled2', 'ContemporaryArt'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (5, 'Untitled3', 'ContemporaryArt');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Title FROM Artworks WHERE ArtworkID = 3;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 지난 1년간 발생한 소방서의 수와 화재 사건 수를 구하시오.\n\nDDL statements:\nCREATE TABLE States (StateID INT, State VARCHAR(255)); CREATE TABLE FireStations (StationID INT, StationName VARCHAR(255), StateID INT, StationAddress VARCHAR(255)); CREATE TABLE FireIncidents (IncidentID INT, IncidentType VARCHAR(255), StationID INT, IncidentDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.State, COUNT(DISTINCT f.StationID) as StationCount, COUNT(DISTINCT fi.IncidentID) as IncidentCount FROM States s JOIN FireStations f ON s.StateID = f.StateID LEFT JOIN FireIncidents fi ON f.StationID = fi.StationID WHERE fi.IncidentDate >= DATEADD(year, -1, GETDATE()) GROUP BY s.State;"
    },
    {
        "instruction": "입력 텍스트: 지난 시즌 각 팀별로 판매된 총 티켓 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ticket_sales (id INT, team VARCHAR(50), season INT, tickets_sold INT); INSERT INTO ticket_sales (id, team, season, tickets_sold) VALUES (1, 'Red Sox', 2022, 1000000), (2, 'Patriots', 2022, 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team, SUM(tickets_sold) as total_tickets_sold FROM ticket_sales WHERE season = 2022 GROUP BY team;"
    },
    {
        "instruction": "입력 텍스트: SecurityIncidents 테이블의 각 카테고리별 보안 사고 건수를 건수에 따라 내림차순으로 정렬하여 확인하세요.\n\nDDL statements:\nCREATE TABLE SecurityIncidents (id INT, incident_category VARCHAR(255), incident_count INT); INSERT INTO SecurityIncidents (id, incident_category, incident_count) VALUES (1, 'Malware', 30), (2, 'Phishing', 25), (3, 'Network Intrusion', 18), (4, 'Unauthorized Access', 15), (5, 'Data Exfiltration', 12), (6, 'Insider Threat', 8), (7, 'Denial of Service', 5), (8, 'Social Engineering', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT incident_category, incident_count FROM SecurityIncidents ORDER BY incident_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 수량이 10 미만인 군사 장비 기록을 삭제하세요\n\nDDL statements:\nCREATE TABLE military_equipment(id INT, name VARCHAR(50), quantity INT); INSERT INTO military_equipment VALUES (1, 'Tank A1', 15), (2, 'Tank A2', 5), (3, 'Tank A3', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM military_equipment WHERE quantity < 10;"
    },
    {
        "instruction": "입력 텍스트: 동부' 지역에서 각 주로 배송된 패키지의 평균 중량 중 가장 낮은 값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE warehouses (id INT, name TEXT, region TEXT); INSERT INTO warehouses (id, name, region) VALUES (1, 'Delhi Warehouse', 'east'), (2, 'Kolkata Warehouse', 'east'); CREATE TABLE packages (id INT, warehouse_id INT, weight FLOAT, state TEXT); INSERT INTO packages (id, warehouse_id, weight, state) VALUES (1, 1, 10.5, 'India'), (2, 1, 12.3, 'Bangladesh'), (3, 2, 9.8, 'Nepal');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MIN(avg_weight) FROM (SELECT state, AVG(weight) as avg_weight FROM packages p JOIN warehouses w ON p.warehouse_id = w.id WHERE w.region = 'east' GROUP BY state) sub GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: articles' 테이블에서 2022년에 요일별로 발행된 기사 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE articles (title VARCHAR(255), publication_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(DOW FROM publication_date) AS day_of_week, COUNT(*) AS count FROM articles WHERE EXTRACT(YEAR FROM publication_date) = 2022 GROUP BY day_of_week;"
    },
    {
        "instruction": "입력 텍스트: 일리노이에서 가장 비싼 제품을 판매하는 공급업체는 누구인가요?\n\nDDL statements:\nCREATE TABLE vendors (vendor_id INT, vendor_name VARCHAR(50), state VARCHAR(50)); INSERT INTO vendors VALUES (1, 'VendorA', 'Illinois'); INSERT INTO vendors VALUES (2, 'VendorB', 'Texas'); CREATE TABLE products (product_id INT, product_name VARCHAR(50), vendor_id INT, price DECIMAL(5,2)); INSERT INTO products VALUES (1, 'Product1', 1, 150); INSERT INTO products VALUES (2, 'Product2', 1, 75); INSERT INTO products VALUES (3, 'Product3', 2, 100); INSERT INTO products VALUES (4, 'Product4', 1, 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vendors.vendor_name FROM vendors JOIN products ON vendors.vendor_id = products.vendor_id WHERE vendors.state = 'Illinois' AND products.price = (SELECT MAX(price) FROM products WHERE products.vendor_id = vendors.vendor_id);"
    },
    {
        "instruction": "입력 텍스트: 계좌 번호 987654321에 대한 가장 이른 거래 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, account_number INT, amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (transaction_id, account_number, amount, transaction_date) VALUES (1, 987654321, 100.00, '2022-02-01'), (2, 987654321, 150.00, '2022-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(transaction_date) FROM transactions WHERE account_number = 987654321;"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 참여 활동이 가장 많은 상위 2명의 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE CommunityEngagement (id INT, artist VARCHAR(255), num_activities INT); INSERT INTO CommunityEngagement (id, artist, num_activities) VALUES (1, 'Jose Hernandez', 10), (2, 'Maria Garcia', 8), (3, 'Carlos Lopez', 6), (4, 'Ana Sanchez', 4), (5, 'Pedro Rodriguez', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist, ROW_NUMBER() OVER(ORDER BY num_activities DESC) as rank FROM CommunityEngagement WHERE rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: 물리학과 소속이면서 학술지 심사위원인 교수진에게 수여된 연구 기금 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE faculty (faculty_id INT PRIMARY KEY, name VARCHAR(50), department VARCHAR(50), journal_reviewer BOOLEAN); INSERT INTO faculty (faculty_id, name, department, journal_reviewer) VALUES (1, 'Eve', 'Physics', TRUE); CREATE TABLE grants (grant_id INT PRIMARY KEY, faculty_id INT, amount FLOAT); INSERT INTO grants (grant_id, faculty_id, amount) VALUES (1, 1, 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(g.amount) FROM grants g INNER JOIN faculty f ON g.faculty_id = f.faculty_id WHERE f.department = 'Physics' AND f.journal_reviewer = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에서 각 농업 자동화 기술 유형이 몇 번 업데이트되었는지?\n\nDDL statements:\nCREATE TABLE automation_tech (tech_id INT, tech_type VARCHAR(255), last_update_date DATE); INSERT INTO automation_tech (tech_id, tech_type, last_update_date) VALUES (1, 'autonomous tractors', '2022-01-01'), (2, 'drone spraying', '2021-12-15'), (3, 'precision seeding', '2022-03-03'), (4, 'autonomous tractors', '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT automation_tech.tech_type, COUNT(automation_tech.tech_id) FROM automation_tech GROUP BY automation_tech.tech_type;"
    },
    {
        "instruction": "입력 텍스트: 다운타운' 지역에 위치한 식당들의 식품 안전 위반 횟수를 보여주세요.\n\nDDL statements:\nCREATE TABLE restaurants (restaurant_id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE inspections (inspection_id INT, restaurant_id INT, violation_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, SUM(i.violation_count) as total_violations FROM inspections i JOIN restaurants r ON i.restaurant_id = r.restaurant_id WHERE r.location = 'Downtown' GROUP BY r.name;"
    },
    {
        "instruction": "입력 텍스트: 각 주별로 개발 유형에 따라 그룹화된 지속 가능한 도시 개발의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE sustainable_urbanism (id INT, state VARCHAR, development_type VARCHAR, num_developments INT); INSERT INTO sustainable_urbanism (id, state, development_type, num_developments) VALUES (1, 'NY', 'Green Roofs', 150), (2, 'CA', 'Solar Farms', 200), (3, 'IL', 'Urban Gardens', 100), (4, 'TX', 'Public Transportation', 180), (5, 'AZ', 'Bike Lanes', 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, development_type, SUM(num_developments) FROM sustainable_urbanism GROUP BY state, development_type;"
    },
    {
        "instruction": "입력 텍스트: Artworks' 테이블에서 작품이 2점 미만인 예술가를 삭제하세요\n\nDDL statements:\nCREATE TABLE Artworks (Artist VARCHAR(50), Artwork VARCHAR(50), Year INT); INSERT INTO Artworks\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Artworks WHERE Artist IN (SELECT Artist FROM Artworks GROUP BY Artist HAVING COUNT(Artwork) < 2)"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리별로 개인 기부금과 기업 후원금 모두로부터 자금을 지원받은 프로그램의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE programs (program_id INT, program_name VARCHAR(50), program_category VARCHAR(50), funding_sources VARCHAR(50)); INSERT INTO programs (program_id, program_name, program_category, funding_sources) VALUES (1, 'Art Education', 'Education', 'Private Donation, Corporate Sponsorship'), (2, 'Music Program', 'Performance', 'Private Donation'), (3, 'Theater Workshop', 'Performance', 'Corporate Sponsorship');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_category, COUNT(*) FROM programs WHERE funding_sources LIKE '%Private Donation%' AND funding_sources LIKE '%Corporate Sponsorship%' GROUP BY program_category;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역의 호텔 예약을 통해 온라인 여행사가 발생시킨 총 수익을 보여주세요.\n\nDDL statements:\nCREATE TABLE bookings (booking_id INT, ota_id INT, region TEXT, revenue FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ota_id, SUM(revenue) as total_revenue FROM bookings WHERE region = 'Africa' GROUP BY ota_id;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 가장 많은 골을 넣은 선수는 몇 골을 넣었나요?\n\nDDL statements:\nCREATE TABLE scores (id INT, player TEXT, team TEXT, goals INT, year INT); INSERT INTO scores (id, player, team, goals, year) VALUES (1, 'Mia Jones', 'Sapphires', 45, 2022); INSERT INTO scores (id, player, team, goals, year) VALUES (2, 'Liam Brown', 'Thunder', 38, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player, SUM(goals) FROM scores WHERE year = 2022 GROUP BY player ORDER BY SUM(goals) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 일본에서 연속된 날짜에 식사한 사용자를 확인하세요.\n\nDDL statements:\nCREATE TABLE meals (user_id INT, meal_date DATE); INSERT INTO meals (user_id, meal_date) VALUES (1, '2022-01-01'), (1, '2022-01-02'), (1, '2022-01-03'), (2, '2022-01-01'), (2, '2022-01-04'); CREATE TABLE users (user_id INT, country VARCHAR(255)); INSERT INTO users (user_id, country) VALUES (1, 'Japan'), (2, 'USA'), (3, 'Japan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT user_id FROM (SELECT user_id, meal_date, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY meal_date) - ROW_NUMBER() OVER (ORDER BY user_id, meal_date) AS grp FROM meals JOIN users ON meals.user_id = users.user_id WHERE users.country = 'Japan') t GROUP BY grp, user_id HAVING COUNT(*) > 1;"
    },
    {
        "instruction": "입력 텍스트: 성별을 명시하지 않은 모든 사용자의 성별을 'non-binary'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE users (user_id INT, age INT, gender VARCHAR(50)); INSERT INTO users (user_id, age, gender) VALUES (1, 25, 'male'), (2, 35, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE users SET gender = 'non-binary' WHERE gender IS NULL;"
    },
    {
        "instruction": "입력 텍스트: DomesticConferences 테이블에서 대표되는 고유한 국가의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE DomesticConferences (ConferenceID INT, ConferenceName VARCHAR(50), Location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT Location) FROM DomesticConferences;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 '에어버스'에서 제조한 항공기의 평균 비행 안전 기록은 어떻게 되나요?\n\nDDL statements:\nCREATE SCHEMA Airbus; CREATE TABLE Airbus.FlightSafetyRecords (safety_record DECIMAL(5,4), year INT); INSERT INTO Airbus.FlightSafetyRecords (safety_record, year) VALUES (0.9876, 2019), (0.9887, 2018), (0.9898, 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(safety_record) FROM Airbus.FlightSafetyRecords WHERE year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 2023년에 학생 10에게 제공된 숙박 시설 기록을 삭제합니다.\n\nDDL statements:\nCREATE TABLE accommodations (id INT, student_id INT, accommodation_type VARCHAR(50), cost FLOAT, accommodation_date DATE); INSERT INTO accommodations (id, student_id, accommodation_type, cost, accommodation_date) VALUES (1, 2, 'Sign Language Interpreter', 50.00, '2021-01-01'), (2, 3, 'Assistive Listening Devices', 300.00, '2023-04-01'), (3, 10, 'Braille Materials', 150.00, '2023-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM accommodations WHERE student_id = 10 AND YEAR(accommodation_date) = 2023;"
    },
    {
        "instruction": "입력 텍스트: 2020 NBA 시즌에서 가장 많은 득점을 한 선수들은 누구인가요?\n\nDDL statements:\nCREATE TABLE nba (player_id INT, player_name VARCHAR(255), team VARCHAR(255), points INT); INSERT INTO nba (player_id, player_name, team, points) VALUES (1, 'James Harden', 'Nets', 2000), (2, 'Kevin Durant', 'Nets', 1500), (3, 'Joel Embiid', '76ers', 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player_name, points FROM nba ORDER BY points DESC;"
    },
    {
        "instruction": "입력 텍스트: 일본의 모든 매립지의 총 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfills (name TEXT, country TEXT, capacity INTEGER); INSERT INTO landfills (name, country, capacity) VALUES ('Landfill A', 'Japan', 100000), ('Landfill B', 'Japan', 110000), ('Landfill C', 'Japan', 130000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM landfills WHERE country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: Employees' 테이블에서 연봉이 50000 미만인 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Salary INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Employees WHERE Salary < 50000;"
    },
    {
        "instruction": "입력 텍스트: organic_farms' 테이블에 있는 각 농부가 생산한 'Quinoa'의 총 생산량은 무엇인가요? 이 데이터는 'farmers' 테이블과 조인되어 있습니다.\n\nDDL statements:\nCREATE TABLE farmers(farmer_id INT, name VARCHAR(255)); INSERT INTO farmers(farmer_id, name) VALUES (1, 'John'), (2, 'Jane'); CREATE TABLE organic_farms(farmer_id INT, crop VARCHAR(255), production INT); INSERT INTO organic_farms(farmer_id, crop, production) VALUES (1, 'Quinoa', 200), (1, 'Rice', 300), (2, 'Corn', 400), (2, 'Quinoa', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, OF.production FROM farmers f INNER JOIN organic_farms OF ON f.farmer_id = OF.farmer_id WHERE OF.crop = 'Quinoa';"
    },
    {
        "instruction": "입력 텍스트: 영국 런던에서의 가상 투어 참여 최대 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, hotel_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255), duration INT); INSERT INTO virtual_tours (tour_id, hotel_name, city, country, duration) VALUES (1, 'Hotel Savoy', 'London', 'UK', 240), (2, 'Hotel Dorchester', 'London', 'UK', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(duration) FROM virtual_tours WHERE city = 'London' AND country = 'UK';"
    },
    {
        "instruction": "입력 텍스트: 지난 7일 동안 회원들이 완료한 운동의 횟수는 몇 번입니까?\n\nDDL statements:\nCREATE TABLE member_workouts (workout_id INT, member_id INT, workout_date DATE); INSERT INTO member_workouts (workout_id, member_id, workout_date) VALUES (1, 1, '2022-01-01'), (2, 2, '2022-01-02'), (3, 3, '2022-01-03'), (4, 4, '2022-01-04'), (5, 5, '2022-01-05'); CREATE TABLE member_demographics (member_id INT, last_workout_date DATE); INSERT INTO member_demographics (member_id, last_workout_date) VALUES (1, '2022-01-01'), (2, '2022-01-06'), (3, '2022-01-05'), (4, '2022-01-02'), (5, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM member_workouts WHERE workout_date >= CURDATE() - INTERVAL 7 DAY;"
    },
    {
        "instruction": "입력 텍스트: 생산량이 400 미만인 화학물질은 무엇인가요?\n\nDDL statements:\nCREATE TABLE chemicals (id INT, name TEXT, production_volume INT); INSERT INTO chemicals (id, name, production_volume) VALUES (1, 'Chemical A', 500), (2, 'Chemical B', 300), (3, 'Chemical C', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM chemicals WHERE production_volume < 400;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 고객의 일 평균 거래량과 그들의 주요 투자 상담사의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE customer (customer_id INT, primary_advisor VARCHAR(255)); CREATE TABLE transaction (transaction_date DATE, customer_id INT, transaction_volume DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.customer_id, c.primary_advisor, AVG(t.transaction_volume) as avg_daily_volume FROM customer c JOIN transaction t ON c.customer_id = t.customer_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY c.customer_id, c.primary_advisor;"
    },
    {
        "instruction": "입력 텍스트: 승인된 상태의 클레임에 대해 이름, 클레임 날짜, 클레임 금액을 검색하는 SQL 쿼리를 작성하세요.\n\nDDL statements:\nSELECT p.name, c.claim_date, c.claim_amount FROM claims c JOIN policyholders p ON c.policyholder_id = p.policyholder_id WHERE c.status = 'Approved';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name, c.claim_date, c.claim_amount FROM claims c JOIN policyholders p ON c.policyholder_id = p.policyholder_id WHERE c.status = 'Approved';"
    },
    {
        "instruction": "입력 텍스트: fleet 테이블에 있는 선박들의 이름과 최대 적재 용량을 나열하세요.\n\nDDL statements:\nCREATE TABLE fleet ( id INT PRIMARY KEY, name VARCHAR(255), max_cargo_capacity INT );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, max_cargo_capacity FROM fleet;"
    },
    {
        "instruction": "입력 텍스트: 2020년 로스앤젤레스에서 사용된 친환경 건축 자재의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Green_Building_Materials (Material_ID INT, Material_Type VARCHAR(50), Cost FLOAT, City VARCHAR(50), Year INT); INSERT INTO Green_Building_Materials (Material_ID, Material_Type, Cost, City, Year) VALUES (1, 'Solar Panels', 2000, 'Los Angeles', 2020), (2, 'Energy-efficient Windows', 1000, 'Los Angeles', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Cost) FROM Green_Building_Materials WHERE City = 'Los Angeles' AND Year = 2020 AND Material_Type IN ('Solar Panels', 'Energy-efficient Windows');"
    },
    {
        "instruction": "입력 텍스트: 각 의류별로 카테고리에 따라 분류된 전체 판매량의 백분율을 구하고, 백분율 순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE sales (garment VARCHAR(50), category VARCHAR(50), quantity INT, sale_date DATE); INSERT INTO sales (garment, category, quantity, sale_date) VALUES ('Shirt', 'Tops', 15, '2021-01-05'), ('Pants', 'Bottoms', 20, '2021-01-05'), ('Dress', 'Tops', 30, '2021-01-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT garment, category, quantity, 100.0 * quantity / SUM(quantity) OVER (PARTITION BY category) as percentage FROM sales ORDER BY percentage DESC;"
    },
    {
        "instruction": "입력 텍스트: 고고학자들에 대한 정보를 저장하기 위한 테이블을 생성합니다.\n\nDDL statements:\nCREATE TABLE Archaeologists (ArchaeologistID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), Specialty TEXT, Country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE Archaeologists (ArchaeologistID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), Specialty TEXT, Country VARCHAR(255));"
    },
    {
        "instruction": "입력 텍스트: 지난 달의 새로운 커뮤니티 치안 행사를 추가하세요\n\nDDL statements:\nCREATE TABLE community_policing (id INT, event_date DATE, event_type VARCHAR(255)); INSERT INTO community_policing (id, event_date, event_type) VALUES (1, '2023-01-01', 'Meeting'), (2, '2023-01-15', 'Training');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO community_policing (id, event_date, event_type) VALUES (3, CURRENT_DATE - INTERVAL '2 weeks', 'Workshop'), (4, CURRENT_DATE, 'Meeting');"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 가장 많이 플레이된 상위 3개 게임과 해당 장르를 총 플레이 시간으로 정렬하여 확인하세요.\n\nDDL statements:\nCREATE TABLE GameData (GameID INT, GameName VARCHAR(50), Genre VARCHAR(50), AvgHoursPlayed DECIMAL(5,2)); INSERT INTO GameData (GameID, GameName, Genre, AvgHoursPlayed) VALUES (1, 'Game1', 'FPS', 12.5), (2, 'Game2', 'RPG', 10.3), (3, 'Game3', 'Sports', 15.6), (4, 'Game4', 'Simulation', 17.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT E.EventCountry, GD.GameName, GD.Genre, SUM(GD.AvgHoursPlayed) AS TotalHoursPlayed, ROW_NUMBER() OVER (PARTITION BY E.EventCountry ORDER BY SUM(GD.AvgHoursPlayed) DESC) AS Rank FROM Players P JOIN EventParticipation EP ON P.PlayerID = EP.PlayerID JOIN EventDates E ON EP.EventID = E.EventID JOIN GameData GD ON P.PlayerID = GD.GameID GROUP BY E.EventCountry, GD.GameName, GD.Genre HAVING COUNT(DISTINCT P.PlayerID) > 1 ORDER BY E.EventCountry, TotalHoursPlayed DESC"
    },
    {
        "instruction": "입력 텍스트: 2021년 7월에 레스토랑 H의 각 메뉴 카테고리별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID int, Name varchar(50));CREATE TABLE Menus (MenuID int, RestaurantID int, MenuCategory varchar(50), TotalRevenue decimal(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT M.MenuCategory, SUM(M.TotalRevenue) as TotalRevenuePerCategory FROM Menus M INNER JOIN Restaurants R ON M.RestaurantID = R.RestaurantID WHERE R.Name = 'H' AND MONTH(M.OrderDate) = 7 AND YEAR(M.OrderDate) = 2021 GROUP BY M.MenuCategory;"
    },
    {
        "instruction": "입력 텍스트: Of Counsel' 직함을 가진 변호사들이 처리한 사건의 수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE cases (id INT, attorney_id INT, billing_amount INT); INSERT INTO cases (id, attorney_id, billing_amount) VALUES (1, 1, 4000); CREATE TABLE attorneys (id INT, name TEXT, title TEXT); INSERT INTO attorneys (id, name, title) VALUES (1, 'Alicia Alvarez', 'Of Counsel');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.id WHERE attorneys.title = 'Of Counsel';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 작물 유형별 평균 토양 수분 수준은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE SoilMoistureData (moisture FLOAT, time DATETIME, crop VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crop, AVG(moisture) FROM SoilMoistureData WHERE time > DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH) GROUP BY crop;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 호텔들 중에서 가장 많은 리뷰 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (id INT, name TEXT, country TEXT, reviews INT); INSERT INTO hotels (id, name, country, reviews) VALUES (1, 'Hotel A', 'Africa', 120), (2, 'Hotel B', 'Africa', 80), (3, 'Hotel C', 'Europe', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(reviews) FROM hotels WHERE country = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 아시아에 위치한 공정 무역 인증을 받은 공장은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, factory_name VARCHAR(50), location VARCHAR(50), fair_trade_certified BOOLEAN); INSERT INTO factories (factory_id, factory_name, location, fair_trade_certified) VALUES (1, 'Green Factory', 'Asia', true), (2, 'Eco Factory', 'US', false), (3, 'Sustainable Factory', 'Europe', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM factories WHERE location = 'Asia' AND fair_trade_certified = true;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 공장의 공정 노동 관행 인증서를 가장 많이 보유한 상위 3개국은 어디인가요?\n\nDDL statements:\nCREATE TABLE factories_africa (factory_id INT, country VARCHAR(50), certification_1 VARCHAR(50), certification_2 VARCHAR(50), certification_3 VARCHAR(50)); INSERT INTO factories_africa (factory_id, country, certification_1, certification_2, certification_3) VALUES (1, 'Kenya', 'Fair Trade', 'SA8000', 'BSCI'), (2, 'Tanzania', 'GOTS', 'SA8000', ''), (3, 'Uganda', 'Fair Trade', '', ''), (4, 'Ethiopia', 'Fair Trade', 'SA8000', 'BSCI'), (5, 'Morocco', 'GOTS', 'SA8000', '');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as certifications_count FROM factories_africa WHERE country IN ('Kenya', 'Tanzania', 'Uganda', 'Ethiopia', 'Morocco') GROUP BY country ORDER BY certifications_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: SpaceMissions 테이블을 기반으로 특정 연도에 발사된 위성의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE SpaceMissions (MissionID INT, Year INT, Country VARCHAR(50), SatelliteID INT); INSERT INTO SpaceMissions (MissionID, Year, Country, SatelliteID) VALUES (1, 2010, 'USA', 101), (2, 2012, 'Russia', 201), (3, 2015, 'China', 301), (4, 2018, 'India', 401), (5, 2020, 'Japan', 501);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Year, COUNT(SatelliteID) AS TotalSatellites FROM SpaceMissions WHERE Year = 2015 GROUP BY Year;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 중동 지역의 지정학적 위험 평가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE RiskAssessments (AssessmentID INT, AssessmentName VARCHAR(50), AssessmentDate DATE, Region VARCHAR(50), RiskLevel VARCHAR(50)); INSERT INTO RiskAssessments (AssessmentID, AssessmentName, AssessmentDate, Region, RiskLevel) VALUES (1, 'Assessment 1', '2022-02-15', 'Middle East', 'High'), (2, 'Assessment 2', '2022-03-30', 'Africa', 'Medium'), (3, 'Assessment 3', '2022-07-15', 'Middle East', 'Medium'), (4, 'Assessment 4', '2022-10-01', 'Americas', 'Low');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AssessmentName, Region, RiskLevel FROM RiskAssessments WHERE Region = 'Middle East' AND AssessmentDate >= DATEADD(month, -6, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 남반구에 있는 모든 해양보호구역의 총 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (location TEXT, area_size FLOAT); INSERT INTO marine_protected_areas (location, area_size) VALUES ('Southern Hemisphere', 5678900), ('Northern Hemisphere', 3456000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(area_size) FROM marine_protected_areas WHERE location = 'Southern Hemisphere';"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다에 있는 군사 기지의 총 개수와 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE MilitaryBases (id INT, name VARCHAR(255), location VARCHAR(255), country VARCHAR(255)); INSERT INTO MilitaryBases (id, name, location, country) VALUES (1, 'Fort Bragg', 'Fayetteville, NC', 'USA'), (2, 'Camp Pendleton', 'Oceanside, CA', 'USA'), (3, 'CFB Petawawa', 'Petawawa, ON', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN country IN ('USA', 'Canada') THEN 1 ELSE 0 END) as total_bases, STRING_AGG(location, ', ') as base_locations FROM MilitaryBases WHERE country IN ('USA', 'Canada');"
    },
    {
        "instruction": "입력 텍스트: \"힐사이드\" 학군에서 지난해 평생교육 프로그램에 참여하지 않은 학생들의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, district VARCHAR(20), participated_in_llp BOOLEAN, year INT); INSERT INTO students (student_id, district, participated_in_llp, year) VALUES (1, 'Hillside', TRUE, 2021), (2, 'Hillside', FALSE, 2021), (3, 'Townside', TRUE, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE NOT participated_in_llp)) * 100.0 / COUNT(*) FROM students WHERE district = 'Hillside' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 사용자의 운동 중 기록된 평균 심박수는 얼마이며, 이것이 그들의 휴식 심박수와 어떻게 비교되나요?\n\nDDL statements:\nCREATE TABLE Users (ID INT PRIMARY KEY, Name VARCHAR(50), RestingHeartRate INT);   CREATE TABLE Workouts (ID INT PRIMARY KEY, UserID INT, HeartRate INT, Duration DECIMAL(10,2), Date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Users.Name, AVG(Workouts.HeartRate) AS AvgWorkoutHeartRate, Users.RestingHeartRate FROM Users JOIN Workouts ON Users.ID = Workouts.UserID WHERE Workouts.Date >= DATEADD(month, -1, GETDATE()) GROUP BY Users.Name, Users.RestingHeartRate;"
    },
    {
        "instruction": "입력 텍스트: 동남부 지역 고객들의 평균 계좌 잔액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, name VARCHAR(50), region VARCHAR(20), account_balance DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(account_balance) FROM customers WHERE region = 'Southeast';"
    },
    {
        "instruction": "입력 텍스트: 2021년 2분기'에 농촌 지역에 거주하는 보험 계약자들에게 발급된 보험 정책의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE policies (id INT, policyholder_id INT, issue_date DATE); INSERT INTO policies (id, policyholder_id, issue_date) VALUES (1, 1, '2021-05-15'); CREATE TABLE policyholders (id INT, address TEXT, dob DATE); INSERT INTO policyholders (id, address, dob) VALUES (1, '456 Oak St, New York, NY 10001', '1990-05-01'); CREATE TABLE zipcodes (zipcode INT, city TEXT, area_type TEXT); INSERT INTO zipcodes (zipcode, city, area_type) VALUES (10001, 'New York', 'Urban');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(policies.id) * 100.0 / (SELECT COUNT(*) FROM policies WHERE issue_date BETWEEN '2021-04-01' AND '2021-06-30')) FROM policies JOIN policyholders ON policies.policyholder_id = policyholders.id JOIN zipcodes ON SUBSTRING(policyholders.address FROM 14 FOR 5) = zipcodes.zipcode WHERE zipcodes.area_type = 'Rural' AND policies.issue_date BETWEEN '2021-04-01' AND '2021-06-30';"
    },
    {
        "instruction": "입력 텍스트: 대마로 만든 아이템의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE item_prices (item_name VARCHAR(255), material VARCHAR(255), price DECIMAL(10,2)); INSERT INTO item_prices (item_name, material, price) VALUES ('T-Shirt', 'Organic Cotton', 25.00), ('Shirt', 'Organic Cotton', 30.00), ('Pants', 'Organic Cotton', 35.00), ('T-Shirt', 'Hemp', 28.00), ('Shirt', 'Hemp', 33.00), ('Pants', 'Hemp', 38.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM item_prices WHERE material = 'Hemp';"
    },
    {
        "instruction": "입력 텍스트: 베이징에서 영구 전시회에 참석하고 재방문자인 방문객 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE Visitors (id INT, city VARCHAR(50), repeat_visitor BOOLEAN, exhibition_type VARCHAR(50)); INSERT INTO Visitors (id, city, repeat_visitor, exhibition_type) VALUES (1, 'Beijing', TRUE, 'permanent');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Visitors WHERE city = 'Beijing' AND repeat_visitor = TRUE AND exhibition_type = 'permanent';"
    },
    {
        "instruction": "입력 텍스트: 호주에서 환경 영향 점수가 가장 높은 상위 5개 광산 주를 확인하고, 관련 환경 영향 범주와 값을 보여주세요.\n\nDDL statements:\nCREATE TABLE australian_states (id INT, state TEXT); INSERT INTO australian_states (id, state) VALUES (1, 'Queensland'), (2, 'New South Wales'), (3, 'Western Australia'), (4, 'South Australia'), (5, 'Victoria'); CREATE TABLE mines (id INT, state TEXT, ei_category TEXT, ei_value FLOAT); INSERT INTO mines (id, state, ei_category, ei_value) VALUES (1, 'Queensland', 'Air pollution', 12.5), (2, 'New South Wales', 'Water pollution', 15.0), (3, 'Western Australia', 'Soil contamination', 18.0), (4, 'South Australia', 'Noise pollution', 10.0), (5, 'Victoria', 'Hazardous waste', 20.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.state, m.ei_category, AVG(m.ei_value) AS avg_ei_value FROM australian_states a JOIN mines m ON a.state = m.state GROUP BY a.state, m.ei_category ORDER BY avg_ei_value DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: LGBTQ+로 정체성을 밝힌 개인이 설립한 회사들의 평균 청산 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founding_date DATE, founder_identity TEXT); CREATE TABLE exit_strategy (id INT, company_id INT, exit_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(exit_strategy.exit_date, company.founding_date)) FROM company JOIN exit_strategy ON company.id = exit_strategy.company_id WHERE company.founder_identity = 'LGBTQ+';"
    },
    {
        "instruction": "입력 텍스트: arctic_research' 테이블에서 예산이 $100,000보다 큰 연구 프로젝트의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE arctic_research (project_name VARCHAR(100), budget DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM arctic_research WHERE budget > 100000;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 남한에 이터븀을 공급한 공급업체는 몇 곳입니까?\n\nDDL statements:\nCREATE TABLE Ytterbium_Supply (id INT, year INT, supplier_id INT, supply_volume INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT supplier_id) FROM Ytterbium_Supply WHERE country = 'South Korea' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 'Africa' 지역에서 발생한 모든 피싱 시도 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE phishing_attempts (id INT, ip_address VARCHAR(15), region VARCHAR(100), attack_date DATE); INSERT INTO phishing_attempts (id, ip_address, region, attack_date) VALUES (1, '192.168.1.1', 'Africa', '2021-11-01'), (2, '10.0.0.1', 'Europe', '2021-12-05'), (3, '192.168.1.1', 'Africa', '2021-12-12');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM phishing_attempts WHERE region = 'Africa' AND attack_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);"
    },
    {
        "instruction": "입력 텍스트: 디지털 자산의 종류별 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE digital_assets (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO digital_assets (id, name, type) VALUES (1, 'Asset 1', 'Type A'), (2, 'Asset 2', 'Type B'), (3, 'Asset 3', 'Type A');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) FROM digital_assets GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 북미 지역의 각 분야별 기후 금융 기록 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (country VARCHAR(50), year INT, amount INT, sector VARCHAR(50)); INSERT INTO climate_finance (country, year, amount, sector) VALUES ('USA', 2020, 5000000, 'Mitigation'), ('Canada', 2020, 6000000, 'Adaptation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, COUNT(*) FROM climate_finance WHERE location IN ('North America') GROUP BY sector;"
    },
    {
        "instruction": "입력 텍스트: 두바이'에서 하루에 단일 크레인이 처리하는 컨테이너의 최대 무게는 얼마인가요?\n\nDDL statements:\nCREATE TABLE port (port_id INT, name TEXT, created_at DATETIME);CREATE TABLE crane (crane_id INT, port_id INT, name TEXT);CREATE TABLE container (container_id INT, crane_id INT, weight INT, created_at DATETIME);INSERT INTO port VALUES (6, 'Dubai', '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crane.name, MAX(container.weight) FROM crane JOIN port ON crane.port_id = port.port_id JOIN container ON crane.crane_id = container.crane_id WHERE port.name = 'Dubai' GROUP BY crane.name, DATE(container.created_at);"
    },
    {
        "instruction": "입력 텍스트: 2018년 남아시아 지역의 최대 매립지 용량은 얼마였나요?\n\nDDL statements:\nCREATE TABLE landfill_capacity (country VARCHAR(50), region VARCHAR(50), landfill_capacity FLOAT, year INT); INSERT INTO landfill_capacity (country, region, landfill_capacity, year) VALUES ('India', 'South Asia', 11.2, 2018), ('Pakistan', 'South Asia', 7.8, 2018), ('Bangladesh', 'South Asia', 5.3, 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(landfill_capacity) FROM landfill_capacity WHERE region = 'South Asia' AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: CommunityEngagementMetrics 테이블에서 EventType이 'Panel Discussion'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE CommunityEngagementMetrics (EventID INT, EventType VARCHAR(50), TotalAttendees INT, AverageDuration FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM CommunityEngagementMetrics WHERE EventType = 'Panel Discussion';"
    },
    {
        "instruction": "입력 텍스트: CityA와 CityC에서 가장 큰 영향을 미친 정책은 무엇인가요?\n\nDDL statements:\nCREATE TABLE PolicyImpact (CityName VARCHAR(50), Policy VARCHAR(50), Impact INT); INSERT INTO PolicyImpact (CityName, Policy, Impact) VALUES ('CityA', 'Waste Management', 7), ('CityA', 'Transportation', 8), ('CityB', 'Waste Management', 9), ('CityB', 'Transportation', 6), ('CityC', 'Waste Management', 10), ('CityC', 'Transportation', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CityName, Policy, MAX(Impact) FROM PolicyImpact GROUP BY CityName HAVING COUNT(DISTINCT Policy) = 2;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 범죄 신고가 없는 모든 지역 치안 섹터를 나열하시오.\n\nDDL statements:\nCREATE TABLE sector (id INT, name TEXT, location TEXT); INSERT INTO sector (id, name, location) VALUES (1, 'Sector A', 'Downtown'), (2, 'Sector B', 'Uptown'); CREATE TABLE incidents (id INT, sector_id INT, type TEXT, timestamp DATETIME); INSERT INTO incidents (id, sector_id, type, timestamp) VALUES (1, 1, 'Theft', '2022-01-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector.name FROM sector LEFT JOIN incidents ON sector.id = incidents.sector_id WHERE incidents.timestamp < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 \"메트로폴리탄 아트 갤러리\"에서 판매된 예술품은 총 몇 점입니까?\n\nDDL statements:\nCREATE TABLE ArtSales (GalleryName TEXT, SaleDate DATE, NumPieces INTEGER); INSERT INTO ArtSales (GalleryName, SaleDate, NumPieces) VALUES ('Metropolitan Art Gallery', '2021-01-01', 12), ('Metropolitan Art Gallery', '2021-02-15', 15), ('Metropolitan Art Gallery', '2021-04-20', 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(NumPieces) FROM ArtSales WHERE GalleryName = 'Metropolitan Art Gallery' AND YEAR(SaleDate) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 2021년 중앙 지역에서 정시에 완료된 프로젝트의 비율을 계산합니다.\n\nDDL statements:\nCREATE TABLE ProjectTimeline (ProjectID int, Region varchar(20), Year int, OnTime bit); INSERT INTO ProjectTimeline (ProjectID, Region, Year, OnTime) VALUES (1, 'Central', 2021, 1), (2, 'Northeast', 2021, 0), (3, 'Central', 2021, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, PERCENTAGE(SUM(OnTime) OVER (PARTITION BY Region) / COUNT(*) OVER (PARTITION BY Region)) as PercentageOnTime FROM ProjectTimeline WHERE Region = 'Central' AND Year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 이탈리아 요리 카테고리에서 비건 요리의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Menu (menu_item VARCHAR(50), cuisine VARCHAR(20), type VARCHAR(20), price DECIMAL(5,2)); INSERT INTO Menu (menu_item, cuisine, type, price) VALUES ('Vegan Pizza', 'Italian', 'Vegan', 12.99), ('Eggplant Parmesan', 'Italian', 'Vegetarian', 13.99), ('Spaghetti Bolognese', 'Italian', 'Non-vegetarian', 14.99), ('Tofu Alfredo', 'Italian', 'Vegan', 15.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM Menu WHERE cuisine = 'Italian' AND type = 'Vegan';"
    },
    {
        "instruction": "입력 텍스트: 각 재료 카테고리별로 제품의 총 수량을 나열하세요.\n\nDDL statements:\nCREATE TABLE product (product_id INT, name VARCHAR(255), quantity INT, material VARCHAR(255)); INSERT INTO product (product_id, name, quantity, material) VALUES (1, 'Organic Cotton T-Shirt', 30, 'organic cotton'), (2, 'Polyester Hoodie', 20, 'polyester'), (3, 'Bamboo Socks', 50, 'bamboo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material, SUM(quantity) FROM product GROUP BY material;"
    },
    {
        "instruction": "입력 텍스트: 청소년들이 자원봉사한 평균 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, volunteer_id INT, age INT, hours INT, program TEXT); INSERT INTO Volunteers (id, volunteer_id, age, hours, program) VALUES (1, 1, 16, 20, 'Education');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(hours) as avg_hours FROM Volunteers WHERE age BETWEEN 13 AND 19;"
    },
    {
        "instruction": "입력 텍스트: 항공전자 부서의 모든 엔지니어들의 이름과 직책을 보여주세요.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Position VARCHAR(50), Department VARCHAR(50)); INSERT INTO Employees (EmployeeID, FirstName, LastName, Position, Department) VALUES (1, 'Jane', 'Doe', 'Avionics Engineer', 'Avionics');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EmployeeID, FirstName, LastName, (CASE WHEN Position = 'Avionics Engineer' THEN 'Senior Avionics Engineer' ELSE Position END) AS NewPosition, Department FROM Employees WHERE Department = 'Avionics';"
    },
    {
        "instruction": "입력 텍스트: 멕시코 각 지역에서 매월 평균적으로 실시된 독감 예방접종 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mexico_regions (id INT, name VARCHAR(255)); CREATE TABLE flu_vaccinations (id INT, region_id INT, month INT, vaccinations INT); INSERT INTO mexico_regions (id, name) VALUES (1, 'North'), (2, 'Central'), (3, 'South'), (4, 'Gulf Coast'), (5, 'Baja California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, AVG(fv.vaccinations) FROM flu_vaccinations fv JOIN mexico_regions r ON fv.region_id = r.id GROUP BY r.name;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 열린 콘서트의 평균 티켓 가격은 얼마였나요?\n\nDDL statements:\nCREATE TABLE Concerts (id INT, state VARCHAR(20), price FLOAT, tickets_sold INT); INSERT INTO Concerts (id, state, price, tickets_sold) VALUES (1, 'California', 100.0, 200), (2, 'California', 120.0, 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM Concerts WHERE state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주의 탄소 상쇄 이니셔티브 프로젝트 중 최소 총 상쇄량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE carbon_offset_initiatives ( id INT PRIMARY KEY, project_name VARCHAR(255), total_offset INT, state VARCHAR(255) );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(total_offset) FROM carbon_offset_initiatives WHERE state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 인구 밀도가 5000을 초과하는 도시들의 총 인구는 얼마입니까?\n\nDDL statements:\nCREATE TABLE City (id INT, name VARCHAR(50), population INT, population_density INT); INSERT INTO City (id, name, population, population_density) VALUES (1, 'CityA', 50000, 6000); INSERT INTO City (id, name, population, population_density) VALUES (2, 'CityB', 75000, 4000); INSERT INTO City (id, name, population, population_density) VALUES (3, 'CityC', 65000, 5500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(population) FROM City WHERE population_density > 5000;"
    },
    {
        "instruction": "입력 텍스트: Sushi S'에는 채식 옵션이 몇 개 있나요?\n\nDDL statements:\nCREATE TABLE Menu (Restaurant VARCHAR(255), Item VARCHAR(255), Vegan BOOLEAN); INSERT INTO Menu (Restaurant, Item, Vegan) VALUES ('Sushi S', 'Salmon Roll', FALSE), ('Sushi S', 'Vegetable Roll', TRUE), ('Sushi S', 'Tuna Roll', FALSE), ('Sushi S', 'Avocado Roll', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Menu WHERE Restaurant = 'Sushi S' AND Vegan = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 로스앤젤레스 도시에서의 경찰 출동 평균 응답 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE public.police_calls (id SERIAL PRIMARY KEY, city VARCHAR(255), response_time INTEGER); INSERT INTO public.police_calls (city, response_time) VALUES ('Los Angeles', 120), ('Los Angeles', 150), ('Los Angeles', 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) FROM public.police_calls WHERE city = 'Los Angeles';"
    },
    {
        "instruction": "입력 텍스트: 2020년 정책 옹호 이벤트의 최소 비용과 최대 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE PolicyAdvocacyEvents (EventID INT, EventName VARCHAR(50), Cost DECIMAL(5,2), EventDate DATE); INSERT INTO PolicyAdvocacyEvents VALUES (1, 'Accessible Education Rally', 5000.00, '2020-02-29'), (2, 'Inclusive Hiring Summit', 8000.00, '2020-11-15'), (3, 'Disability Discrimination Conference', 10000.00, '2020-07-04'), (4, 'Policy Advocacy Kickoff', 3000.00, '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Cost) AS 'Minimum Cost', MAX(Cost) AS 'Maximum Cost' FROM PolicyAdvocacyEvents WHERE YEAR(EventDate) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2021년도에 각 주별로 교육에 대한 정부 지출 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE spending (id INT, department VARCHAR(50), year INT, amount FLOAT); INSERT INTO spending (id, department, year, amount) VALUES (1, 'Education', 2021, 1000000), (2, 'Education', 2021, 2000000), (3, 'Transportation', 2021, 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, state, SUM(amount) as total_spending FROM spending WHERE year = 2021 AND department = 'Education' GROUP BY department, state;"
    },
    {
        "instruction": "입력 텍스트: 각 지구별 학생들의 평균 정신 건강 점수를 평균 점수 순으로 나열하시오.\n\nDDL statements:\nCREATE TABLE districts (district_id INT, district_name TEXT); INSERT INTO districts (district_id, district_name) VALUES (1, 'Downtown'), (2, 'Uptown'), (3, 'Suburbs'); CREATE TABLE students (student_id INT, student_name TEXT, district_id INT, mental_health_score INT); INSERT INTO students (student_id, student_name, district_id, mental_health_score) VALUES (1, 'John Doe', 1, 75), (2, 'Jane Smith', 2, 80), (3, 'Alice Johnson', 3, 85), (4, 'Bob Brown', 2, 90), (5, 'Charlie Davis', 1, 95), (6, 'Eva White', 3, 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.district_name, AVG(s.mental_health_score) as avg_score FROM students s JOIN districts d ON s.district_id = d.district_id GROUP BY s.district_id ORDER BY avg_score DESC;"
    },
    {
        "instruction": "입력 텍스트: 독일에서 가장 빠른 마라톤 기록 상위 3개를 찾아라.\n\nDDL statements:\nCREATE TABLE marathons (location TEXT, country TEXT, running_time FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, running_time FROM marathons WHERE country = 'Germany' ORDER BY running_time ASC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 어떤 기차 노선이 가장 많고 가장 적은 역을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE train_lines (line_id INT, line_name VARCHAR(255), stations INT); INSERT INTO train_lines (line_id, line_name, stations) VALUES (1, 'Red Line', 15), (2, 'Blue Line', 12), (3, 'Green Line', 18), (4, 'Orange Line', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT line_name, stations AS highest_stations FROM train_lines ORDER BY stations DESC LIMIT 1; SELECT line_name, stations AS lowest_stations FROM train_lines ORDER BY stations ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: clinic_b'에서 인지 행동 치료(CBT)를 받은 환자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE treatment (patient_id INT, treatment_name VARCHAR(50), treatment_center VARCHAR(50)); INSERT INTO treatment (patient_id, treatment_name, treatment_center) VALUES (1, 'Cognitive Behavioral Therapy', 'clinic_b');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM treatment WHERE treatment_name = 'Cognitive Behavioral Therapy' AND treatment_center = 'clinic_b';"
    },
    {
        "instruction": "입력 텍스트: 각 스마트 시티 이니셔티브별 총 비용과 총 절감액을 보여주세요.\n\nDDL statements:\nCREATE TABLE SmartCityInitiatives (InitiativeID INT, InitiativeName VARCHAR(50));CREATE TABLE SmartCityCosts (CostID INT, InitiativeID INT, Cost FLOAT);CREATE TABLE SmartCitySavings (SavingsID INT, InitiativeID INT, Savings FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SmartCityInitiatives.InitiativeName, SUM(SmartCityCosts.Cost) AS TotalCost, SUM(SmartCitySavings.Savings) AS TotalSavings FROM SmartCityInitiatives INNER JOIN SmartCityCosts ON SmartCityInitiatives.InitiativeID = SmartCityCosts.InitiativeID INNER JOIN SmartCitySavings ON SmartCityInitiatives.InitiativeID = SmartCitySavings.InitiativeID GROUP BY SmartCityInitiatives.InitiativeName;"
    },
    {
        "instruction": "입력 텍스트: 문화 관광에 관심 있는 미국 관광객들이 가장 많이 방문하는 상위 3개의 목적지를 나열하세요.\n\nDDL statements:\nCREATE TABLE cultural_tourists (id INT, name VARCHAR(50), nationality VARCHAR(50), destination VARCHAR(50)); INSERT INTO cultural_tourists (id, name, nationality, destination) VALUES (1, 'Jane Doe', 'USA', 'Paris'), (2, 'Jim Brown', 'USA', 'Rome'), (3, 'Jake White', 'USA', 'Tokyo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT destination, COUNT(*) as tourist_count FROM cultural_tourists WHERE nationality = 'USA' GROUP BY destination ORDER BY tourist_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: workers' 테이블에서 'John Doe'의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE workers (id INT, name VARCHAR(50), industry VARCHAR(50), salary FLOAT, country VARCHAR(50)); INSERT INTO workers (id, name, industry, salary, country) VALUES (1, 'John Doe', 'oil', 60000, 'Canada'); INSERT INTO workers (id, name, industry, salary, country) VALUES (2, 'Jane Smith', 'gas', 65000, 'Canada'); INSERT INTO workers (id, name, industry, salary, country) VALUES (3, 'Mike Johnson', 'gas', 70000, 'Canada'); INSERT INTO workers (id, name, industry, salary, country) VALUES (4, 'Peter Lee', 'oil', 80000, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM workers WHERE name = 'John Doe';"
    },
    {
        "instruction": "입력 텍스트: 브라질에 있는 농지에 대한 새로운 기록을 정밀 농업 값이 참인 상태로 농지 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE farmland (farmland_id INT, country VARCHAR(255), precision_agriculture BOOLEAN); INSERT INTO farmland (farmland_id, country, precision_agriculture) VALUES (1, 'France', TRUE), (2, 'Germany', FALSE), (3, 'China', TRUE), (4, 'Japan', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO farmland (farmland_id, country, precision_agriculture) VALUES (5, 'Brazil', TRUE);"
    },
    {
        "instruction": "입력 텍스트: 아메리칸 지역의 국가별 평균 공공 참여 행사 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE participation (id INT, country TEXT, region TEXT, event_count INT); INSERT INTO participation (id, country, region, event_count) VALUES (1, 'Canada', 'American', 5), (2, 'Mexico', 'American', 8), (3, 'Brazil', 'American', 10), (4, 'Argentina', 'American', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(event_count) FROM participation WHERE region = 'American';"
    },
    {
        "instruction": "입력 텍스트: 요가와 사이클링 모두를 하는 회원의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Members (ID INT); CREATE TABLE Yoga (MemberID INT); CREATE TABLE Cycling (MemberID INT); INSERT INTO Members (ID) VALUES (1), (2); INSERT INTO Yoga (MemberID) VALUES (1), (2); INSERT INTO Cycling (MemberID) VALUES (1), (2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Members WHERE ID IN (SELECT MemberID FROM Yoga INTERSECT SELECT MemberID FROM Cycling);"
    },
    {
        "instruction": "입력 텍스트: 각 제조사별로 판매된 전기차량의 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE manufacturer_sales (id INT, manufacturer VARCHAR(50), vehicle_type VARCHAR(20), sale_year INT, quantity INT); INSERT INTO manufacturer_sales (id, manufacturer, vehicle_type, sale_year, quantity) VALUES (1, 'Tesla', 'EV', 2021, 30000), (2, 'Tesla', 'EV', 2022, 50000), (3, 'Toyota', 'Hybrid', 2021, 20000), (4, 'Toyota', 'Hybrid', 2022, 25000), (5, 'Ford', 'EV', 2022, 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT manufacturer, SUM(quantity) FROM manufacturer_sales WHERE vehicle_type = 'EV' GROUP BY manufacturer;"
    },
    {
        "instruction": "입력 텍스트: 2022년 인도의 매립지 용량을 보여주세요.\n\nDDL statements:\nCREATE TABLE landfill_capacity ( country VARCHAR(50), year INT, capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT capacity FROM landfill_capacity WHERE country = 'India' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 7월에 받은 기부금 중 최대 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationAmount) VALUES (1, 1, '2021-07-01', 500.00), (2, 2, '2021-07-15', 250.00), (3, 3, '2021-06-01', 1000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(DonationAmount) FROM Donations WHERE MONTH(DonationDate) = 7;"
    },
    {
        "instruction": "입력 텍스트: id가 1인 impact_investment의 금액을 1000000으로 업데이트하세요\n\nDDL statements:\nCREATE TABLE impact_investments (id INT PRIMARY KEY, name VARCHAR(100), amount INT, sector VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE impact_investments SET amount = 1000000 WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 가장 많이 사용된 상위 3가지 배송 방식은 무엇인가요?\n\nDDL statements:\nCREATE TABLE shipments (shipment_id INT, shipment_date DATE, shipping_mode VARCHAR(20)); INSERT INTO shipments (shipment_id, shipment_date, shipping_mode) VALUES (1, '2021-01-01', 'Air'), (2, '2021-02-05', 'Ocean'), (3, '2021-03-03', 'Rail'), (4, '2021-01-10', 'Air'), (5, '2021-12-31', 'Air');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT shipping_mode, COUNT(shipping_mode) AS count FROM shipments WHERE shipment_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY shipping_mode ORDER BY count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 평균 토양 수분이 가장 높은 상위 세 농장을 확인하세요.\n\nDDL statements:\nCREATE TABLE farm_soil_moisture (farm_id INT, timestamp TIMESTAMP, soil_moisture INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT farm_id, AVG(soil_moisture) AS avg_moisture FROM farm_soil_moisture WHERE timestamp >= NOW() - INTERVAL '1 year' GROUP BY farm_id ORDER BY avg_moisture DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 회원 2의 운동 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Workouts (WorkoutID INT, MemberID INT, WorkoutDate DATE, Duration INT); INSERT INTO Workouts (WorkoutID, MemberID, WorkoutDate, Duration) VALUES (1, 2, '2020-01-01', 60), (2, 2, '2020-02-01', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Duration) FROM Workouts WHERE MemberID = 2 AND YEAR(WorkoutDate) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2017년에 동남아시아에서 완료된 기후 적응 프로젝트는 무엇이며 그들의 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE climate_adaptation (year INT, region VARCHAR(50), project VARCHAR(50), cost FLOAT); INSERT INTO climate_adaptation (year, region, project, cost) VALUES (2017, 'Southeast Asia', 'Adaptation Project 1', 150000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(cost) FROM climate_adaptation WHERE year = 2017 AND region = 'Southeast Asia' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 인상주의 예술품의 총 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ArtPieces (id INT, title VARCHAR(50), galleryId INT, year INT, value INT); INSERT INTO ArtPieces (id, title, galleryId, year, value) VALUES (1, 'Piece 1', 1, 2000, 10000), (2, 'Piece 2', 1, 2010, 15000), (3, 'Piece 3', 2, 2020, 20000), (4, 'Piece 4', 3, 1990, 5000), (5, 'Piece 5', NULL, 1874, 25000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(value) FROM ArtPieces WHERE style = 'Impressionism';"
    },
    {
        "instruction": "입력 텍스트: 각 창고의 첫 번째와 마지막 배송 사이의 배송 시간 차이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Warehouse (id INT, location VARCHAR(255), capacity INT); INSERT INTO Warehouse (id, location, capacity) VALUES (1, 'New York', 500), (2, 'Toronto', 700), (3, 'Montreal', 600); CREATE TABLE Shipment (id INT, warehouse_id INT, delivery_time INT); INSERT INTO Shipment (id, warehouse_id, delivery_time) VALUES (1, 1, 5), (2, 2, 3), (3, 3, 4), (4, 1, 6), (5, 2, 7), (6, 3, 8), (7, 1, 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT warehouse_id, MAX(delivery_time) - MIN(delivery_time) FROM Shipment GROUP BY warehouse_id;"
    },
    {
        "instruction": "입력 텍스트: 토론토 시에 있는 모든 그린 빌딩 프로젝트의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE green_building_projects (project_id INT, project_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); INSERT INTO green_building_projects (project_id, project_name, city, country) VALUES (1, 'Toronto Green Tower', 'Toronto', 'CA'); INSERT INTO green_building_projects (project_id, project_name, city, country) VALUES (2, 'Canadian Eco-Skyscraper', 'Toronto', 'CA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM green_building_projects WHERE city = 'Toronto';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 발행된 고위험 여행 경보는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Travel_Advisory (id INT PRIMARY KEY, country VARCHAR(50), region VARCHAR(50), advisory_level INT, description TEXT);CREATE TABLE Traveler (id INT PRIMARY KEY, traveler_id INT, nationality VARCHAR(50), age INT);CREATE VIEW High_Risk_Travel_Advisories AS SELECT Travel_Advisory.country, COUNT(Travel_Advisory.id) AS advisory_count FROM Travel_Advisory WHERE Travel_Advisory.advisory_level >= 3 GROUP BY Travel_Advisory.country ORDER BY advisory_count DESC;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM High_Risk_Travel_Advisories WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 기록된 최소 심박수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE member_workouts (workout_id INT, member_id INT, workout_date DATE, heart_rate INT); INSERT INTO member_workouts (workout_id, member_id, workout_date, heart_rate) VALUES (1, 1, '2022-01-01', 120), (2, 2, '2022-01-02', 110), (3, 3, '2022-01-03', 130), (4, 4, '2022-01-04', 105), (5, 5, '2022-01-05', 140);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(heart_rate) FROM member_workouts WHERE workout_date >= CURDATE() - INTERVAL 30 DAY;"
    },
    {
        "instruction": "입력 텍스트: 프랑스와 독일에서 유기농 스킨케어 제품의 총 판매량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, category TEXT, is_organic BOOLEAN); INSERT INTO products (product_id, product_name, category, is_organic) VALUES (1, 'Nourishing Cream', 'skincare', true), (2, 'Revitalizing Serum', 'skincare', false), (3, 'Gentle Cleanser', 'skincare', true), (4, 'Volumizing Mascara', 'makeup', false); CREATE TABLE sales (sale_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 500, 'FR'), (2, 2, 600, 'US'), (3, 3, 700, 'DE'), (4, 1, 400, 'UK'), (5, 4, 800, 'CA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(s.sale_quantity) as total_sales_of_organic_skincare FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'skincare' AND p.is_organic = true AND s.sale_country IN ('FR', 'DE');"
    },
    {
        "instruction": "입력 텍스트: 호주와 뉴질랜드에서 개발된 모델에 대한 모든 기록을 models 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE models (model_id INT, model_name VARCHAR(50), model_type VARCHAR(50), country VARCHAR(50), safety_score DECIMAL(5,2)); INSERT INTO models (model_id, model_name, model_type, country, safety_score) VALUES (1, 'ModelA', 'Recommender', 'Australia', 85.00), (2, 'ModelB', 'Classifier', 'Japan', 92.50), (3, 'ModelC', 'Generative', 'USA', 87.50), (4, 'ModelD', 'Recommender', 'Japan', 90.00), (5, 'ModelE', 'Classifier', 'USA', 88.50), (6, 'ModelF', 'Recommender', 'New Zealand', 91.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM models WHERE country IN ('Australia', 'New Zealand');"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 설립된 회사를 제외하고, 기술 분야에 있는 회사들의 평균 자금 조달액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founding_date DATE, funding_amount INT); INSERT INTO companies (id, name, industry, founding_date, funding_amount) VALUES (1, 'DataMate', 'Technology', '2012-06-25', 600000); INSERT INTO companies (id, name, industry, founding_date, funding_amount) VALUES (2, 'PowerHub', 'Energy', '2008-11-10', 900000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(funding_amount) FROM companies WHERE industry = 'Technology' AND founding_date > '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 계약 기관에 수여된 방위 계약의 총 수를 찾되, 계약 가치가 $0인 계약은 제외하고 총 계약 가치에 따라 내림차순으로 결과를 표시합니다.\n\nDDL statements:\nCREATE TABLE defense_contracts_v2 (contract_id INT, agency VARCHAR(255), value DECIMAL(10,2));INSERT INTO defense_contracts_v2 (contract_id, agency, value) VALUES (1, 'DoD', 1000000.00), (2, 'DoD', 0.00), (3, 'VA', 500000.00), (4, 'DoD', 250000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT agency, SUM(value) as total_contract_value FROM defense_contracts_v2 WHERE value > 0 GROUP BY agency ORDER BY total_contract_value DESC;"
    },
    {
        "instruction": "입력 텍스트: 비바이너리로 식별하는 회원들이 들어올린 무게의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE weights (id INT, member_id INT, weight FLOAT); INSERT INTO weights (id, member_id, weight) VALUES (1, 101, 120.5), (2, 102, 150.3), (3, 103, 90.7), (4, 104, 110.2), (5, 107, 135.6); CREATE TABLE members (id INT, gender VARCHAR(10)); INSERT INTO members (id, gender) VALUES (101, 'female'), (102, 'male'), (103, 'non-binary'), (104, 'non-binary'), (105, 'male'), (106, 'female'), (107, 'non-binary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, AVG(weight) as avg_weight, STDDEV(weight) as stddev_weight FROM weights JOIN members ON weights.member_id = members.id WHERE members.gender = 'non-binary' GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 남부' 지역의 버스와 트램의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vehicle_counts (region VARCHAR(10), vehicle_type VARCHAR(10), count INT); INSERT INTO vehicle_counts (region, vehicle_type, count) VALUES ('east', 'buses', 100), ('west', 'buses', 120), ('north', 'buses', 150), ('south', 'buses', 80), ('east', 'trams', 20), ('west', 'trams', 30), ('north', 'trams', 40), ('south', 'trams', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(count) FROM vehicle_counts WHERE region = 'south' AND (vehicle_type = 'buses' OR vehicle_type = 'trams');"
    },
    {
        "instruction": "입력 텍스트: 1990년부터 2000년 사이에 발매된 '록' 장르의 노래는 몇 곡입니까?\n\nDDL statements:\nCREATE TABLE genres (genre_id INT, genre VARCHAR(50)); INSERT INTO genres (genre_id, genre) VALUES (1, 'Pop'), (2, 'Rock'), (3, 'Hip Hop'), (4, 'Jazz'); CREATE TABLE songs (song_id INT, song_name VARCHAR(100), release_year INT, genre_id INT); INSERT INTO songs (song_id, song_name, release_year, genre_id) VALUES (1, 'Shape of You', 2017, 1), (2, 'Thinking Out Loud', 2014, 1), (3, 'Bohemian Rhapsody', 1975, 2), (4, 'Smells Like Teen Spirit', 1991, 2), (5, 'No Woman No Cry', 1974, 4), (6, 'November Rain', 1991, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM songs WHERE genre_id = (SELECT genre_id FROM genres WHERE genre = 'Rock') AND release_year BETWEEN 1990 AND 2000;"
    },
    {
        "instruction": "입력 텍스트: 2022년 NATO 국가들의 총 국방 지출과 그들의 각각의 군사 예산이 총 국방 지출에서 차지하는 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DefenseSpending (id INT, year INT, country TEXT, spending FLOAT); INSERT INTO DefenseSpending (id, year, country, spending) VALUES (1, 2022, 'USA', 7500000000), (2, 2022, 'UK', 5500000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DefenseSpending.country, DefenseSpending.spending, (DefenseSpending.spending / (SELECT SUM(spending) FROM DefenseSpending WHERE DefenseSpending.year = 2022 AND DefenseSpending.country IN ('USA', 'UK', 'France', 'Germany', 'Italy'))) * 100 as percentage FROM DefenseSpending WHERE DefenseSpending.year = 2022 AND DefenseSpending.country IN ('USA', 'UK', 'France', 'Germany', 'Italy');"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 연도별로 개최된 미술 전시회는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Exhibitions (ExhibitionID INT, ExhibitionName TEXT, Year INT, Region TEXT); INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, Year, Region) VALUES (1, 'Van Gogh Alive', 2015, 'Asia'); INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, Year, Region) VALUES (2, 'Picasso in Paris', 2018, 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Year, COUNT(*) as NumExhibitions FROM Exhibitions WHERE Region = 'Asia' GROUP BY Year;"
    },
    {
        "instruction": "입력 텍스트: 2020년 상반기에 '심혈관계' 카테고리의 약물에 대해 승인된 임상 시험은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE clinical_trials(trial_id TEXT, category TEXT, approval_date DATE); INSERT INTO clinical_trials (trial_id, category, approval_date) VALUES ('Trial1', 'Cardiovascular', '2020-03-15'), ('Trial2', 'Neurology', '2019-12-20'), ('Trial3', 'Cardiovascular', '2020-06-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM clinical_trials WHERE category = 'Cardiovascular' AND EXTRACT(MONTH FROM approval_date) BETWEEN 1 AND 6 AND EXTRACT(YEAR FROM approval_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다에서 판매된 사이즈 16 의류 품목의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Inventory (item_id INT, item_size INT, item_price DECIMAL(5,2), quantity INT); CREATE TABLE Orders (order_id INT, order_date DATE, item_id INT, customer_country VARCHAR(20)); INSERT INTO Inventory VALUES (1, 16, 50.00, 200), (2, 18, 55.00, 300), (3, 14, 45.00, 150); INSERT INTO Orders VALUES (1, '2022-01-01', 1, 'USA'), (2, '2022-02-01', 3, 'Canada'), (3, '2022-03-01', 2, 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Inventory.quantity) FROM Inventory JOIN Orders ON Inventory.item_id = Orders.item_id WHERE (Orders.customer_country = 'USA' OR Orders.customer_country = 'Canada') AND Inventory.item_size = 16;"
    },
    {
        "instruction": "입력 텍스트: 아시아'에서 건설된 가장 비싼 상위 3개의 댐과 그들의 건설 연도를 확인하세요, 가능하다면.\n\nDDL statements:\nCREATE TABLE Dams (id INT, country VARCHAR(20), continent VARCHAR(20), year INT, cost FLOAT); INSERT INTO Dams (id, country, continent, year, cost) VALUES (1, 'China', 'Asia', 2008, 8000000); INSERT INTO Dams (id, country, continent, year, cost) VALUES (2, 'India', 'Asia', 2012, 7000000); INSERT INTO Dams (id, country, continent, year, cost) VALUES (3, 'China', 'Asia', 2015, 9000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, year, cost FROM (SELECT country, year, cost, RANK() OVER (PARTITION BY continent ORDER BY cost DESC) as dam_rank FROM Dams WHERE continent = 'Asia') tmp WHERE dam_rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 어느 식당의 최대 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE restaurants (name TEXT, revenue FLOAT); INSERT INTO restaurants (name, revenue) VALUES ('Pizzeria Spumoni', 15000.0), ('Pizzeria Yum', 18000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(revenue) FROM restaurants;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 그룹화된 각 채굴 현장의 직원 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE mining_sites (site_id INT, country VARCHAR(50), num_employees INT); INSERT INTO mining_sites (site_id, country, num_employees) VALUES (1, 'Canada', 200), (2, 'USA', 300), (3, 'Mexico', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(num_employees) FROM mining_sites GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2022년 '동부' 지역의 총 매립지 용량(입방미터)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfill_capacity(region VARCHAR(10), year INT, capacity INT); INSERT INTO landfill_capacity VALUES('eastern', 2021, 500000), ('eastern', 2022, 550000), ('western', 2021, 600000), ('western', 2022, 650000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT capacity FROM landfill_capacity WHERE region = 'eastern' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 2019년 인도에서 이루어진 최소 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_name TEXT, country TEXT, donation_amount DECIMAL, donation_date DATE); INSERT INTO donations (id, donor_name, country, donation_amount, donation_date) VALUES (1, 'Ramesh Kumar', 'India', 25.00, '2019-12-15'); INSERT INTO donations (id, donor_name, country, donation_amount, donation_date) VALUES (2, 'Sita Patel', 'India', 50.00, '2019-07-23');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(donation_amount) FROM donations WHERE country = 'India' AND YEAR(donation_date) = 2019;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 농작물을 재배하는 농부들의 이름과 작물은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Farmers (id INT PRIMARY KEY, name VARCHAR(100), age INT, location VARCHAR(100)); INSERT INTO Farmers (id, name, age, location) VALUES (1, 'Juan Rodriguez', 55, 'Texas'); INSERT INTO Farmers (id, name, age, location) VALUES (2, 'Alice Johnson', 48, 'California'); CREATE TABLE Plots (id INT PRIMARY KEY, farmer_id INT, size FLOAT, crop VARCHAR(50)); INSERT INTO Plots (id, farmer_id, size, crop) VALUES (1, 1, 0.5, 'Cotton'); INSERT INTO Plots (id, farmer_id, size, crop) VALUES (2, 2, 0.75, 'Wheat'); CREATE TABLE Crops (id INT PRIMARY KEY, name VARCHAR(50), growth_season VARCHAR(50)); INSERT INTO Crops (id, name, growth_season) VALUES (1, 'Cotton', 'Summer'); INSERT INTO Crops (id, name, growth_season) VALUES (2, 'Wheat', 'Winter');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, p.crop FROM Farmers f INNER JOIN Plots p ON f.id = p.farmer_id INNER JOIN Crops c ON p.crop = c.name WHERE f.location = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 플레이어 테이블에서 여성 농구 선수들의 평균 키는 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, name VARCHAR(50), position VARCHAR(50), height FLOAT, weight INT, team_id INT, league VARCHAR(50)); INSERT INTO players (player_id, name, position, height, weight, team_id, league) VALUES (1, 'Alice', 'Guard', 1.75, 70, 101, 'NBA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(height) FROM players WHERE position = 'Guard' AND league = 'NBA' AND gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: EMEA' 지역에서 경쟁업체보다 AI 기반 서비스 도입 날짜가 더 이른 호텔을 확인하세요.\n\nDDL statements:\nCREATE TABLE ai_adoption (hotel_id INT, hotel_name TEXT, region TEXT, ai_adoption_date DATE); INSERT INTO ai_adoption (hotel_id, hotel_name, region, ai_adoption_date) VALUES (1, 'HotelA', 'EMEA', '2021-01-01'), (2, 'HotelB', 'EMEA', '2021-03-15'), (3, 'HotelC', 'EMEA', '2021-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_name FROM ai_adoption WHERE region = 'EMEA' AND ai_adoption_date = (SELECT MIN(ai_adoption_date) FROM ai_adoption WHERE region = 'EMEA');"
    },
    {
        "instruction": "입력 텍스트: 북극 야생동물 보호구역에서 각 종마다 기록된 평균 온도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ArcticWildlifeReserve(species VARCHAR(50), temperature FLOAT);INSERT INTO ArcticWildlifeReserve(species, temperature) VALUES('Polar Bear', -20.0), ('Arctic Fox', -30.0), ('Reindeer', -10.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, AVG(temperature) FROM ArcticWildlifeReserve GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 2018년 남미 국가들의 홍역 예방 접종률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ImmunizationRates (Disease VARCHAR(50), Country VARCHAR(50), Year INT, ImmunizationRate FLOAT); INSERT INTO ImmunizationRates (Disease, Country, Year, ImmunizationRate) VALUES ('Measles', 'Brazil', 2018, 95.0), ('Measles', 'Argentina', 2018, 97.5), ('Measles', 'Colombia', 2018, 96.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, ImmunizationRate FROM ImmunizationRates WHERE Disease = 'Measles' AND Year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 미디엄별 작품의 총 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE artworks (id INT, artwork VARCHAR(50), medium VARCHAR(50), value INT); INSERT INTO artworks (id, artwork, medium, value) VALUES (1, 'Painting', 'Oil', 10000), (2, 'Sculpture', 'Bronze', 15000), (3, 'Print', 'Lithograph', 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT medium, SUM(value) as total_value FROM artworks GROUP BY medium;"
    },
    {
        "instruction": "입력 텍스트: 라틴 아메리카에 위치한 여성 창업자가 설립한 스타트업들이 모금한 시리즈 A 라운드의 총 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE investments (id INT, company_id INT, investment_round TEXT, amount INT, date DATE); INSERT INTO investments (id, company_id, investment_round, amount, date) VALUES (1, 1, 'Seed', 1000000, '2020-01-01'), (2, 2, 'Series A', 5000000, '2021-01-01'), (3, 3, 'Seed', 2000000, '2019-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM investments JOIN companies ON investments.company_id = companies.id WHERE investments.investment_round = 'Series A' AND companies.founder_gender = 'Female' AND companies.location = 'Latin America';"
    },
    {
        "instruction": "입력 텍스트: 테이블 reo_production에 'Brazil rare earths' 광산에서 나온 불순물이 없는 2023년도의 희토류 산화물 생산 기록을 새로 추가하세요.\n\nDDL statements:\nCREATE TABLE reo_production (id INT PRIMARY KEY, reo_type VARCHAR(50), production_year INT, impurity_level FLOAT, mine_name VARCHAR(50)); CREATE TABLE mines (id INT PRIMARY KEY, mine_name VARCHAR(50), location VARCHAR(50)); INSERT INTO mines (id, mine_name, location) VALUES (1, 'Brazil rare earths', 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO reo_production (id, reo_type, production_year, impurity_level, mine_name) SELECT NULL, 'Neodymium Oxide', 2023, 0, m.name FROM mines m WHERE m.name = 'Brazil rare earths';"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년 중앙아메리카 지역의 기후 커뮤니케이션 프로젝트에 대한 총 투자액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE climate_communication_projects (project_id INT, location VARCHAR(50), investment_amount FLOAT, investment_year INT); INSERT INTO climate_communication_projects (project_id, location, investment_amount, investment_year) VALUES (1, 'Guatemala', 1000000, 2019), (2, 'Nicaragua', 1200000, 2019), (3, 'Honduras', 1500000, 2019), (4, 'Costa Rica', 900000, 2019), (5, 'El Salvador', 800000, 2019), (6, 'Belize', 1100000, 2020), (7, 'Guatemala', 1300000, 2020), (8, 'Nicaragua', 1400000, 2020), (9, 'Honduras', 1700000, 2020), (10, 'Costa Rica', 1200000, 2020), (11, 'El Salvador', 1000000, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment_amount) FROM climate_communication_projects WHERE location LIKE 'Central America' AND investment_year IN (2019, 2020);"
    },
    {
        "instruction": "입력 텍스트: 2021년 중동 은행에서 제공한 샤리아 준수 금융 상품 중 총 금융 금액이 100만 달러를 초과하는 상품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ShariahFinance (bank_name VARCHAR(50), product_type VARCHAR(50), amount DECIMAL(10,2), issue_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_type, SUM(amount) as total_financing FROM ShariahFinance WHERE bank_name LIKE '%Middle East%' AND YEAR(issue_date) = 2021 GROUP BY product_type HAVING SUM(amount) > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 2024년 멕시코에서 DrugE에 대한 새로운 임상 시험을 추가하세요.\n\nDDL statements:\nCREATE TABLE clinical_trials (country VARCHAR(255), drug VARCHAR(255), year INT); INSERT INTO clinical_trials (country, drug, year) VALUES ('Canada', 'DrugA', 2018), ('USA', 'DrugA', 2018), ('Canada', 'DrugB', 2019), ('USA', 'DrugB', 2019), ('Canada', 'DrugC', 2020), ('USA', 'DrugC', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO clinical_trials (country, drug, year) VALUES ('Mexico', 'DrugE', 2024);"
    },
    {
        "instruction": "입력 텍스트: \"peacekeeping_units\" 테이블에서 \"unit_id\"가 101, 102, 103인 유닛의 \"commanding_officer\" 필드를 각각 \"Officer A\", \"Officer B\", \"Officer C\"로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE peacekeeping_units (unit_id INT, commanding_officer VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE peacekeeping_units SET commanding_officer = CASE unit_id WHEN 101 THEN 'Officer A' WHEN 102 THEN 'Officer B' WHEN 103 THEN 'Officer C' ELSE commanding_officer END WHERE unit_id IN (101, 102, 103);"
    },
    {
        "instruction": "입력 텍스트: 각 지역의 평균 기온이 전월 대비 몇 퍼센트 변화했는지 알려주세요.\n\nDDL statements:\nCREATE TABLE monthly_temp (region VARCHAR(255), temperature INT, month INT); INSERT INTO monthly_temp (region, temperature, month) VALUES ('North', 25, 1), ('South', 30, 1), ('East', 28, 1), ('West', 22, 1), ('North', 27, 2), ('South', 29, 2), ('East', 31, 2), ('West', 24, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, ((current_temp - prev_temp) * 100.0 / prev_temp) as pct_change FROM (SELECT region, temperature as current_temp, LAG(temperature) OVER (PARTITION BY region ORDER BY month) as prev_temp FROM monthly_temp) subquery;"
    },
    {
        "instruction": "입력 텍스트: 워싱턴 주에 있는 부동산의 총 개수와 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Properties (id INT, price INT, state TEXT); INSERT INTO Properties (id, price, state) VALUES (1, 600000, 'Washington'), (2, 500000, 'California'), (3, 800000, 'Washington'), (4, 700000, 'Colorado');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) AS total_properties, AVG(price) AS avg_price FROM Properties WHERE state = 'Washington';"
    },
    {
        "instruction": "입력 텍스트: 스튜디오 지브리에서 제작한 영화들의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE MOVIES (id INT, title VARCHAR(100), production_studio VARCHAR(100), rating DECIMAL(3,2)); INSERT INTO MOVIES (id, title, production_studio, rating) VALUES (1, 'Spirited Away', 'Studio Ghibli', 8.5), (2, 'My Neighbor Totoro', 'Studio Ghibli', 8.2), (3, 'Princess Mononoke', 'Studio Ghibli', 8.4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) as avg_rating FROM MOVIES WHERE production_studio = 'Studio Ghibli';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 포용적 주택 정책을 가진 부동산의 수를 찾아주세요.\n\nDDL statements:\nCREATE TABLE Neighborhoods (NeighborhoodID INT, NeighborhoodName VARCHAR(255)); CREATE TABLE Properties (PropertyID INT, NeighborhoodID INT, InclusiveHousing BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT NeighborhoodName, COUNT(*) AS InclusivePropertiesCount FROM Properties JOIN Neighborhoods ON Properties.NeighborhoodID = Neighborhoods.NeighborhoodID WHERE InclusiveHousing = 1 GROUP BY NeighborhoodName;"
    },
    {
        "instruction": "입력 텍스트: 2021년 2분기 '디저트' 메뉴 카테고리의 총 수익은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE restaurant_revenue(menu_category VARCHAR(20), revenue DECIMAL(10, 2), order_date DATE); INSERT INTO restaurant_revenue(menu_category, revenue, order_date) VALUES ('Desserts', 1500, '2021-04-01'), ('Desserts', 1800, '2021-05-03'), ('Desserts', 2000, '2021-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM restaurant_revenue WHERE menu_category = 'Desserts' AND order_date >= '2021-04-01' AND order_date <= '2021-06-30';"
    },
    {
        "instruction": "입력 텍스트: 샤리아 준수 대출이 가장 많은 상위 3개 은행은 무엇인가요?\n\nDDL statements:\nCREATE TABLE bank (id INT, name VARCHAR(50)); INSERT INTO bank (id, name) VALUES (1, 'ABC Islamic Bank'), (2, 'Islamic Finance Co.'), (3, 'Shariah Compliant Ltd'), (4, 'Standard Bank'); CREATE TABLE loans (id INT, bank_id INT); INSERT INTO loans (id, bank_id) VALUES (1, 1), (2, 2), (3, 3), (4, 3), (5, 1), (6, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT b.name, COUNT(l.id) as loan_count FROM bank b JOIN loans l ON b.id = l.bank_id GROUP BY b.name ORDER BY loan_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 대서양에 있는 플랑크톤의 총 바이오매스는 얼마입니까?\n\nDDL statements:\nCREATE TABLE plankton (species TEXT, ocean TEXT, biomass INT); INSERT INTO plankton (species, ocean, biomass) VALUES ('Krill', 'Atlantic', 50), ('Jellyfish', 'Atlantic', 30), ('Zooplankton', 'Atlantic', 150), ('Phytoplankton', 'Atlantic', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(biomass) FROM plankton WHERE ocean = 'Atlantic';"
    },
    {
        "instruction": "입력 텍스트: 단일 스마트 그리드 프로젝트의 최대 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE smart_grids (id INT, name VARCHAR(255), capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(capacity) FROM smart_grids;"
    },
    {
        "instruction": "입력 텍스트: Regional_Archaeologists' 테이블에서 지역별로 가장 많은 유물을 발견한 사람은 누구인가요?\n\nDDL statements:\nCREATE TABLE Regional_Archaeologists (id INT, archaeologist_name VARCHAR(50), region VARCHAR(50), num_discoveries INT); INSERT INTO Regional_Archaeologists (id, archaeologist_name, region, num_discoveries) VALUES (1, 'Archaeologist E', 'Africa', 30), (2, 'Archaeologist F', 'Asia', 40), (3, 'Archaeologist G', 'Europe', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT archaeologist_name, region, MAX(num_discoveries) FROM Regional_Archaeologists GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 동등성 데이터에 대한 뷰를 생성하세요\n\nDDL statements:\nCREATE TABLE mental_health_parity (id INT PRIMARY KEY, state VARCHAR(20), mental_health_coverage VARCHAR(20), substance_use_coverage VARCHAR(20)); INSERT INTO mental_health_parity (id, state, mental_health_coverage, substance_use_coverage) VALUES (1, 'California', 'Yes', 'Yes'), (2, 'Texas', 'Yes', 'No'), (3, 'New York', 'Yes', 'Yes'); CREATE TABLE cultural_competency (id INT PRIMARY KEY, state VARCHAR(20), cultural_competency_training VARCHAR(20)); INSERT INTO cultural_competency (id, state, cultural_competency_training) VALUES (1, 'California', 'Yes'), (2, 'Texas', 'No'), (3, 'New York', 'Yes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW mental_health_parity_view AS SELECT m.state, m.mental_health_coverage, m.substance_use_coverage, c.cultural_competency_training FROM mental_health_parity m JOIN cultural_competency c ON m.state = c.state; WITH summary AS (SELECT state, mental_health_coverage, substance_use_coverage, cultural_competency_training, CASE WHEN mental_health_coverage = 'Yes' AND substance_use_coverage = 'Yes' AND cultural_competency_training = 'Yes' THEN 'Parity and Competency' ELSE 'No Parity or Competency' END as result FROM mental_health_parity_view) SELECT * FROM summary;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 시행된 포괄적 주택 정책을 삭제하세요.\n\nDDL statements:\nCREATE TABLE InclusiveHousingPolicies (PolicyID INT, PolicyName VARCHAR(50), ImplementationDate DATE); INSERT INTO InclusiveHousingPolicies (PolicyID, PolicyName, ImplementationDate) VALUES (1, 'Policy A', '2008-01-01'), (2, 'Policy B', '2011-01-01'), (3, 'Policy C', '2009-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM InclusiveHousingPolicies WHERE ImplementationDate < '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 정치' 카테고리에서 하루에 발행된 기사의 최대 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE daily_articles_by_category (id INT, publication_date DATE, category VARCHAR(30), articles INT); INSERT INTO daily_articles_by_category (id, publication_date, category, articles) VALUES (1, '2022-01-01', 'politics', 2), (2, '2022-01-02', 'politics', 3), (3, '2022-01-03', 'politics', 4), (4, '2022-01-04', 'politics', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(articles) FROM daily_articles_by_category WHERE category = 'politics';"
    },
    {
        "instruction": "입력 텍스트: VR 기술을 사용하고 레이싱 게임을 하는 플레이어의 평균 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE player_sessions (id INT, player_id INT, playtime INT, uses_vr BOOLEAN, game_genre VARCHAR(20)); INSERT INTO player_sessions (id, player_id, playtime, uses_vr, game_genre) VALUES (1, 1, 120, true, 'racing'), (2, 2, 90, false, 'adventure'), (3, 3, 150, true, 'racing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(playtime) FROM player_sessions WHERE uses_vr = true AND game_genre = 'racing';"
    },
    {
        "instruction": "입력 텍스트: IT 부서 직원들의 평균 급여를 계산하세요.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Salary FLOAT); INSERT INTO Employees (EmployeeID, Department, Salary) VALUES (1, 'IT', 75000), (2, 'Marketing', 60000), (3, 'IT', 80000), (4, 'HR', 70000), (5, 'IT', 85000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM Employees WHERE Department = 'IT';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 미국 각 주에서 보고된 결핵 사례 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE states (id INT, name VARCHAR(255)); INSERT INTO states (id, name) VALUES (1, 'Alabama'), (2, 'Alaska'), (3, 'Arizona'), (4, 'Arkansas'), (5, 'California'); CREATE TABLE tb_reports (state_id INT, year INT, cases INT); INSERT INTO tb_reports (state_id, year, cases) VALUES (1, 2020, 123), (2, 2020, 45), (3, 2020, 78), (4, 2020, 90), (5, 2020, 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name AS state_name, r.cases AS tb_cases FROM states s INNER JOIN tb_reports r ON s.id = r.state_id WHERE r.year = 2020 GROUP BY s.name;"
    },
    {
        "instruction": "입력 텍스트: 규정 4'의 시행 날짜를 '2015-01-01'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE mental_health_parity (id INT, regulation VARCHAR(100), state VARCHAR(20), implementation_date DATE); INSERT INTO mental_health_parity (id, regulation, state, implementation_date) VALUES (1, 'Regulation 1', 'New York', '2011-01-01'), (2, 'Regulation 2', 'Florida', '2012-01-01'), (3, 'Regulation 4', 'California', NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE mental_health_parity SET implementation_date = '2015-01-01' WHERE regulation = 'Regulation 4';"
    },
    {
        "instruction": "입력 텍스트: 대륙별 평균 기대 수명은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists public_health; USE public_health; DROP TABLE if exists life_expectancy; CREATE TABLE life_expectancy (country varchar(50), continent varchar(50), life_expectancy float); INSERT INTO life_expectancy (country, continent, life_expectancy) VALUES ('Afghanistan', 'Asia', 65.0), ('Albania', 'Europe', 78.5), ('Algeria', 'Africa', 76.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, AVG(life_expectancy) FROM life_expectancy GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 멕시코만에 있는 새우 농장에서의 최대 수역 염분도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE shrimp_farms (id INT, name TEXT, region TEXT); CREATE TABLE salinity_readings (id INT, farm_id INT, salinity FLOAT); INSERT INTO shrimp_farms (id, name, region) VALUES (1, 'Farm X', 'Gulf of Mexico'), (2, 'Farm Y', 'Gulf of Mexico'), (3, 'Farm Z', 'Caribbean Sea'); INSERT INTO salinity_readings (id, farm_id, salinity) VALUES (1, 1, 35.5), (2, 1, 36.0), (3, 2, 33.0), (4, 2, 33.5), (5, 3, 38.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(salinity) FROM salinity_readings SR JOIN shrimp_farms SF ON SR.farm_id = SF.id WHERE SF.region = 'Gulf of Mexico';"
    },
    {
        "instruction": "입력 텍스트: 캐나다 원주민 커뮤니티의 문화 행사 참석자 수는 얼마였나요?\n\nDDL statements:\nCREATE TABLE events (id INT, community TEXT, date DATE, attendees INT); INSERT INTO events (id, community, date, attendees) VALUES (1, 'Haida', '2022-01-01', 500), (2, 'Inuit', '2022-02-01', 800), (3, 'Metis', '2022-03-01', 600), (4, 'Cree', '2022-04-01', 900), (5, 'Blackfoot', '2022-05-01', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT community, SUM(attendees) AS total_attendance FROM events WHERE community IN ('Haida', 'Inuit', 'Metis', 'Cree', 'Blackfoot') GROUP BY community;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에 있는 전기 자동차의 총 수와 평균 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ElectricVehicles (id INT, state VARCHAR(50), cost FLOAT, type VARCHAR(50)); INSERT INTO ElectricVehicles (id, state, cost, type) VALUES (1, 'California', 35000, 'Tesla Model 3'); INSERT INTO ElectricVehicles (id, state, cost, type) VALUES (2, 'California', 45000, 'Chevrolet Bolt');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) AS total_cost, AVG(cost) AS avg_cost FROM ElectricVehicles WHERE state = 'California' AND type LIKE '%Electric%';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 위치한 광산의 이름과 생산 지표는 무엇인가요?\n\nDDL statements:\nCREATE TABLE mines (id INT, name VARCHAR(50), location VARCHAR(50), production_metric FLOAT, PRIMARY KEY(id)); INSERT INTO mines (id, name, location, production_metric) VALUES (3, 'California Gold', 'California', 55000); INSERT INTO mines (id, name, location, production_metric) VALUES (4, 'Emerald Peak', 'California', 48000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, production_metric FROM mines WHERE location = 'California';"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별 자원봉사자 수\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerAge INT, Program VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Program, COUNT(*) as NumberOfVolunteers FROM Volunteers GROUP BY Program;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 기부를 하지 않은 기부자는 누구인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, LastDonationDate DATE); INSERT INTO Donors (DonorID, DonorName, LastDonationDate) VALUES (1, 'John Doe', '2021-01-01'), (2, 'Jane Smith', '2019-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorID, DonorName FROM Donors WHERE LastDonationDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 재활용 나일론으로 만든 의류의 이산화탄소 배출량의 표준 편차는 얼마입니까?\n\nDDL statements:\nCREATE TABLE RecycledNylonGarments (id INT, co2_emission DECIMAL); INSERT INTO RecycledNylonGarments (id, co2_emission) VALUES (1, 7.2), (2, 7.8), (3, 7.6), (4, 8.1), (5, 7.4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT STDDEV(co2_emission) FROM RecycledNylonGarments;"
    },
    {
        "instruction": "입력 텍스트: 아시아의 농촌 보건 센터별 평균 환자 수와 이 중 5000명 이상을 수용하는 센터는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE rural_health_centers (center_id INT, center_name VARCHAR(100), country VARCHAR(50), num_patients INT); INSERT INTO rural_health_centers (center_id, center_name, country, num_patients) VALUES (1, 'Center A', 'India', 6000), (2, 'Center B', 'India', 4000), (3, 'Center C', 'China', 8000), (4, 'Center D', 'China', 9000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_patients) AS avg_patients_per_center, COUNT(*) FILTER (WHERE num_patients > 5000) AS centers_with_more_than_5000_patients FROM rural_health_centers WHERE country IN (SELECT name FROM countries WHERE continent = 'Asia');"
    },
    {
        "instruction": "입력 텍스트: 에코프렌들리밀즈가 2022-06-01에 시애틀에 있는 고객에게 지속 가능한 식사를 배달한 새로운 기록을 추가하세요. 비용은 $15.99이며 식사 ID는 123456789입니다.\n\nDDL statements:\nCREATE TABLE Customers (customer_id INT, name VARCHAR(255), location VARCHAR(255));CREATE TABLE Meals (meal_id INT, name VARCHAR(255), sustainable BOOLEAN, cost DECIMAL(5,2));CREATE TABLE Deliveries (delivery_id INT, customer_id INT, meal_id INT, date DATE, cost DECIMAL(5,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id), FOREIGN KEY (meal_id) REFERENCES Meals(meal_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Deliveries (delivery_id, customer_id, meal_id, date, cost) VALUES (NULL, (SELECT customer_id FROM Customers WHERE location = 'Seattle'), 123456789, '2022-06-01', 15.99);"
    },
    {
        "instruction": "입력 텍스트: 인구가 가장 많은 도시의 이름과 주는 무엇인가요?\n\nDDL statements:\nCREATE TABLE City (id INT, name VARCHAR(50), state VARCHAR(50), population INT); INSERT INTO City (id, name, state, population) VALUES (1, 'Los Angeles', 'CA', 4000000); INSERT INTO City (id, name, state, population) VALUES (2, 'New York', 'NY', 8500000); INSERT INTO City (id, name, state, population) VALUES (3, 'Chicago', 'IL', 2700000); INSERT INTO City (id, name, state, population) VALUES (4, 'Houston', 'TX', 2300000); INSERT INTO City (id, name, state, population) VALUES (5, 'Phoenix', 'AZ', 1700000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City.name, City.state FROM City ORDER BY City.population DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 다양한 창작자와 언어를 가진 새로운 TV 프로그램을 추가하세요.\n\nDDL statements:\nCREATE TABLE tv_shows (id INT PRIMARY KEY, title TEXT, year INT, genre TEXT, creator TEXT, language TEXT); INSERT INTO tv_shows (id, title, year, genre, creator, language) VALUES (1, 'TVShow1', 2020, 'Comedy', 'Sofia Garcia', 'Spanish'), (2, 'TVShow2', 2019, 'Drama', 'Kevin Jones', 'English');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO tv_shows (id, title, year, genre, creator, language) VALUES (3, 'TVShow3', 2021, 'Action', 'Fatima Ahmed', 'Arabic'), (4, 'TVShow4', 2020, 'Sci-Fi', 'Hassan Patel', 'Hindi');"
    },
    {
        "instruction": "입력 텍스트: 일본 사용자들이 하루에 걸은 최소 걸음 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE steps (id INT, user_id INT, date DATE, steps INT); INSERT INTO steps (id, user_id, date, steps) VALUES (1, 1, '2022-01-01', 5000); INSERT INTO steps (id, user_id, date, steps) VALUES (2, 2, '2022-01-01', 6000); INSERT INTO steps (id, user_id, date, steps) VALUES (3, 3, '2022-01-02', 4000); INSERT INTO steps (id, user_id, date, steps) VALUES (4, 1, '2022-01-02', 7000); INSERT INTO steps (id, user_id, date, steps) VALUES (5, 4, '2022-01-01', 8000); INSERT INTO steps (id, user_id, date, steps) VALUES (6, 5, '2022-01-03', 9000); INSERT INTO steps (id, user_id, date, steps) VALUES (7, 6, '2022-01-01', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(steps) as min_steps_per_day FROM steps JOIN users ON steps.user_id = users.id WHERE country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 지난 해 일정보다 빨리 프로젝트를 완료한 도급업자의 이름을 나열하십시오.\n\nDDL statements:\nCREATE TABLE Contractors (ContractorID INT, ContractorName TEXT); CREATE TABLE Projects (ProjectID INT, ContractorID INT, ProjectType TEXT, StartDate DATE, EndDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ContractorName FROM Contractors C JOIN Projects P ON C.ContractorID = P.ContractorID WHERE P.EndDate < DATEADD(day, DateDiff(day, P.StartDate, P.EndDate) / 2, P.StartDate);"
    },
    {
        "instruction": "입력 텍스트: Collective_Bargaining' 테이블에서 'Union_Agreement_Status'가 'Active'인 모든 고유 'Company_Names'를 나열하십시오.\n\nDDL statements:\nCREATE TABLE Collective_Bargaining (id INT, company_name VARCHAR(50), union_agreement_status VARCHAR(20)); INSERT INTO Collective_Bargaining (id, company_name, union_agreement_status) VALUES (1, 'ABC Corp', 'Active'), (2, 'XYZ Inc', 'Inactive'), (3, 'DEF Industries', 'Active');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT company_name FROM Collective_Bargaining WHERE union_agreement_status = 'Active';"
    },
    {
        "instruction": "입력 텍스트: 핀테크 분야에서 여성이 창업한 스타트업의 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investments(id INT, startup_id INT, round_number INT, investment_amount INT); INSERT INTO investments VALUES (1, 1, 1, 3000000); INSERT INTO investments VALUES (2, 1, 2, 7000000); INSERT INTO investments VALUES (3, 2, 1, 5000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment_amount) FROM investments JOIN startups ON investments.startup_id = startups.id WHERE startups.founder_identity = 'Female' AND startups.industry = 'Fintech';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 지원 그룹을 완료한 환자들의 성공률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE support_groups (group_id INT, group_name TEXT, location TEXT, complete_date DATE); INSERT INTO support_groups (group_id, group_name, location, complete_date) VALUES (1, 'Depression Support', 'USA', '2021-03-01'); CREATE TABLE patient_outcomes (outcome_id INT, patient_id INT, group_id INT, outcome TEXT, outcome_date DATE); INSERT INTO patient_outcomes (outcome_id, patient_id, group_id, outcome, outcome_date) VALUES (1, 1, 1, 'Improved', '2021-04-01'); INSERT INTO patient_outcomes (outcome_id, patient_id, group_id, outcome, outcome_date) VALUES (2, 2, 1, 'Unchanged', '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(CASE WHEN patient_outcomes.outcome = 'Improved' THEN 1.0 ELSE 0.0 END) FROM patient_outcomes INNER JOIN support_groups ON patient_outcomes.group_id = support_groups.group_id WHERE support_groups.location = 'USA';"
    },
    {
        "instruction": "입력 텍스트: ocean_species'라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE ocean_species(id INT PRIMARY KEY, species VARCHAR(100), population INT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE ocean_species (id INT PRIMARY KEY, species VARCHAR(100), population INT, region VARCHAR(50));"
    },
    {
        "instruction": "입력 텍스트: Satellites' 테이블에 있는 위성 중 가장 빠른 발사 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE Satellites (Satellite_ID INT, Name VARCHAR(100), Launch_Date DATE); INSERT INTO Satellites (Satellite_ID, Name, Launch_Date) VALUES (1, 'Starlink-1', '2019-05-24'), (2, 'Starlink-2', '2019-06-11');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Launch_Date) FROM Satellites;"
    },
    {
        "instruction": "입력 텍스트: 북극해에서 발견되는 해양 생물 종은 몇 종인가요?\n\nDDL statements:\nCREATE TABLE marine_species (name VARCHAR(50), common_name VARCHAR(50), location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_species WHERE location = 'Arctic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 설명 가능한 AI와 창의적 AI를 전문으로 하는 연구원은 각각 몇 명인가요?\n\nDDL statements:\nCREATE TABLE researcher (id INT, name VARCHAR, expertise VARCHAR, affiliation VARCHAR); INSERT INTO researcher (id, name, expertise, affiliation) VALUES (5, 'Eve', 'Explainable AI', 'UniversityC'); INSERT INTO researcher (id, name, expertise, affiliation) VALUES (6, 'Frank', 'Creative AI', 'CompanyD');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(expertise = 'Explainable AI') as explainable_ai_count, SUM(expertise = 'Creative AI') as creative_ai_count FROM researcher;"
    },
    {
        "instruction": "입력 텍스트: Genesis' 조직을 위한 새로운 eSports 팀 기록을 추가합니다\n\nDDL statements:\nCREATE TABLE esports_teams (id INT PRIMARY KEY, name TEXT, organization TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO esports_teams (id, name, organization) VALUES (1, 'Genesis Titans', 'Genesis'), (2, 'Genesis Dragons', 'Genesis');"
    },
    {
        "instruction": "입력 텍스트: Smith' 법률 사무소 소속 변호사별 평균 청구 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE attorneys (attorney_id INT, firm VARCHAR(20), billing_amount DECIMAL); INSERT INTO attorneys (attorney_id, firm, billing_amount) VALUES (1, 'Smith', 500.00), (2, 'Jones', 400.00), (3, 'Smith', 700.00), (4, 'Jones', 600.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT attorney_id, AVG(billing_amount) FROM attorneys WHERE firm = 'Smith' GROUP BY attorney_id;"
    },
    {
        "instruction": "입력 텍스트: 재활용 폴리에스터 원단의 최대 주문 수량은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE inventory (id INT, material VARCHAR(255), order_quantity INT); INSERT INTO inventory (id, material, order_quantity) VALUES\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(order_quantity) FROM inventory WHERE material = 'Recycled Polyester';"
    },
    {
        "instruction": "입력 텍스트: 감도가 0.95보다 낮은 바이오센서의 기록을 biosensors 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE biosensors (id INT, name VARCHAR(50), type VARCHAR(50), sensitivity FLOAT, specificity FLOAT, company_name VARCHAR(50)); INSERT INTO biosensors (id, name, type, sensitivity, specificity, company_name) VALUES (1, 'BioGlucose', 'Glucose', 0.95, 0.98, 'BioCorp'), (2, 'BioOxygen', 'Oxygen', 0.92, 0.96, 'BioCorp'), (3, 'BioPressure', 'Pressure', 0.98, 0.99, 'BioCorp');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM biosensors WHERE sensitivity < 0.95;"
    },
    {
        "instruction": "입력 텍스트: 2022년 '1분기'에 가장 많은 팔레트를 처리한 창고는 어디인가요?\n\nDDL statements:\nCREATE TABLE Warehouse (name varchar(20), quarter int, year int, pallets_handled int); INSERT INTO Warehouse (name, quarter, year, pallets_handled) VALUES ('Warehouse A', 1, 2022, 500), ('Warehouse B', 1, 2022, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, MAX(pallets_handled) FROM Warehouse WHERE quarter = 1 AND year = 2022 GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 재방문한 방문자의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE visits (visit_id INT, visitor_id INT, visit_date DATE); INSERT INTO visits (visit_id, visitor_id, visit_date) VALUES (1, 1, '2020-01-01'), (2, 1, '2020-02-01'), (3, 2, '2020-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(DISTINCT visitor_id) / (SELECT COUNT(DISTINCT visitor_id) FROM visitors WHERE visit_date BETWEEN '2020-01-01' AND '2020-12-31') AS percentage FROM visits WHERE visit_date BETWEEN '2020-01-01' AND '2020-12-31';"
    },
    {
        "instruction": "입력 텍스트: 각 구역별 공립학교와 사립학교의 수와 각각의 합격률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE districts (district_id INT PRIMARY KEY, district_name VARCHAR(50)); CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(50), district_id INT, school_type VARCHAR(10), passing_rate INT); INSERT INTO districts VALUES (1, 'District A'), (2, 'District B'), (3, 'District C'); INSERT INTO schools VALUES (1, 'School 1', 1, 'Public', 80), (2, 'School 2', 1, 'Private', 90), (3, 'School 3', 2, 'Public', 70), (4, 'School 4', 2, 'Private', 85), (5, 'School 5', 3, 'Public', 95), (6, 'School 6', 3, 'Private', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.district_name, SUM(CASE WHEN s.school_type = 'Public' THEN 1 ELSE 0 END) AS public_schools, SUM(CASE WHEN s.school_type = 'Private' THEN 1 ELSE 0 END) AS private_schools, AVG(CASE WHEN s.school_type = 'Public' THEN s.passing_rate ELSE 0 END) AS public_passing_rate, AVG(CASE WHEN s.school_type = 'Private' THEN s.passing_rate ELSE 0 END) AS private_passing_rate FROM districts d JOIN schools s ON d.district_id = s.district_id GROUP BY d.district_id;"
    },
    {
        "instruction": "입력 텍스트: 각 과목 분야에서 전문 개발 과정을 이수한 교사 수와 총 이수한 과정 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE subjects (subject_id INT, subject_name TEXT); CREATE TABLE teachers (teacher_id INT, subject_id INT); CREATE TABLE courses (course_id INT, subject_id INT, teacher_id INT); INSERT INTO subjects VALUES (1, 'Math'), (2, 'Science'), (3, 'English'); INSERT INTO teachers VALUES (1, 1), (2, 2), (3, 3); INSERT INTO courses VALUES (1, 1, 1), (2, 1, 1), (3, 2, 2), (4, 3, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.subject_name, COUNT(DISTINCT t.teacher_id) as num_teachers, COUNT(c.course_id) as total_courses_completed FROM subjects s LEFT JOIN teachers t ON s.subject_id = t.subject_id LEFT JOIN courses c ON t.teacher_id = c.teacher_id GROUP BY s.subject_id;"
    },
    {
        "instruction": "입력 텍스트: Galactic Conquest'를 플레이하는 플레이어의 PlayerName, GameName, GameGraphics를 표시합니다.\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), GameName VARCHAR(50)); INSERT INTO Players (PlayerID, PlayerName, GameName) VALUES (1, 'John Smith', 'Galactic Conquest'); INSERT INTO Players (PlayerID, PlayerName, GameName) VALUES (2, 'Jane Doe', 'Space Crusaders'); CREATE TABLE GameDesign (GameName VARCHAR(50), GameEngine VARCHAR(50), GameGraphics VARCHAR(50)); INSERT INTO GameDesign (GameName, GameEngine, GameGraphics) VALUES ('Galactic Conquest', 'Unreal Engine', 'High'); INSERT INTO GameDesign (GameName, GameEngine, GameGraphics) VALUES ('Space Crusaders', 'Unity', 'Medium');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.PlayerName, gd.GameName, gd.GameGraphics FROM Players p INNER JOIN GameDesign gd ON p.GameName = gd.GameName WHERE p.GameName = 'Galactic Conquest';"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 각 위치의 평균 용존 산소 농도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE dissolved_oxygen_readings (location VARCHAR(255), year INT, dissolved_oxygen FLOAT); INSERT INTO dissolved_oxygen_readings (location, year, dissolved_oxygen) VALUES ('Location A', 2018, 6.2), ('Location A', 2019, 6.3), ('Location A', 2020, 6.5), ('Location B', 2018, 5.9), ('Location B', 2019, 6.0), ('Location B', 2020, 6.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, AVG(dissolved_oxygen) as avg_dissolved_oxygen FROM dissolved_oxygen_readings WHERE year >= (SELECT MAX(year) - 3 FROM dissolved_oxygen_readings) GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 야생 서식지별 나무의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE wildlife_habitats (id INT, name VARCHAR(255)); INSERT INTO wildlife_habitats (id, name) VALUES (1, 'Forest'), (2, 'Grassland'); CREATE TABLE trees (id INT, age INT, habitat_id INT); INSERT INTO trees (id, age, habitat_id) VALUES (1, 200, 1), (2, 150, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.name habitat, AVG(t.age) avg_age FROM trees t JOIN wildlife_habitats h ON t.habitat_id = h.id GROUP BY h.name;"
    },
    {
        "instruction": "입력 텍스트: 노스이스트 지역의 소매업체에서 판매되는 유기농 제품의 평균 칼로리 함량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE retailers (retailer_id INT, retailer_name TEXT, region TEXT);CREATE TABLE products (product_id INT, product_name TEXT, is_organic BOOLEAN);CREATE TABLE inventory (retailer_id INT, product_id INT, caloric_content INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(inventory.caloric_content) FROM inventory JOIN products ON inventory.product_id = products.product_id JOIN retailers ON inventory.retailer_id = retailers.retailer_id WHERE products.is_organic = TRUE AND retailers.region = 'Northeast';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티에서 제공되는 지속 가능한 투어의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE tours (id INT, city TEXT, is_sustainable BOOLEAN); INSERT INTO tours (id, city, is_sustainable) VALUES (1, 'New York City', true), (2, 'New York City', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM tours WHERE city = 'New York City' AND is_sustainable = true;"
    },
    {
        "instruction": "입력 텍스트: 팬 인구 통계별 평균 티켓 지출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE TicketSpending (FanID INT, Gender VARCHAR(255), TotalSpent DECIMAL(5,2)); INSERT INTO TicketSpending (FanID, Gender, TotalSpent) VALUES (1, 'Male', 150.00), (2, 'Female', 120.00), (3, 'Non-binary', 80.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Gender, AVG(TotalSpent) as Avg_Ticket_Spending FROM TicketSpending GROUP BY Gender;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 위치한 금광의 평균 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE gold_mines (id INT, name VARCHAR(50), location VARCHAR(50), size INT, num_employees INT, co2_emissions INT); INSERT INTO gold_mines VALUES (1, 'Gold Mine 1', 'Canada', 450, 320, 22000); INSERT INTO gold_mines VALUES (2, 'Gold Mine 2', 'Canada', 600, 450, 28000); INSERT INTO gold_mines VALUES (3, 'Gold Mine 3', 'Mexico', 200, 180, 16000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_employees) FROM gold_mines WHERE location = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 역사적' 카테고리에 속하면서 가격이 30 이상인 이벤트의 평균 참석자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (id INT, name VARCHAR(255), date DATE, category VARCHAR(255), price DECIMAL(5,2), attendance INT); INSERT INTO events (id, name, date, category, price, attendance) VALUES (1, 'Exhibition', '2022-06-01', 'museums', 75.00, 1000), (2, 'Tour', '2022-06-02', 'historical', 40.00, 600), (3, 'Workshop', '2022-06-03', 'museums', 30.00, 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(attendance) FROM events WHERE category = 'historical' AND price > 30;"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역에서 재생 가능 에너지원에 지출된 기후 재정의 총액과 해당 지역의 적응 프로젝트 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE climate_finance_re (region VARCHAR(50), source VARCHAR(50), amount NUMERIC(12,2)); INSERT INTO climate_finance_re (region, source, amount) VALUES ('Asia', 'Wind', 1500.00), ('Asia', 'Solar', 2500.00); CREATE TABLE climate_adaptation_re (project_name VARCHAR(50), region VARCHAR(50), status VARCHAR(50)); INSERT INTO climate_adaptation_re (project_name, region, status) VALUES ('Resilient Cities', 'Asia', 'Successful'), ('Green Infrastructure', 'Asia', 'Successful'), ('Coastal Protection', 'Asia', 'Successful');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM climate_finance_re WHERE region = 'Asia' AND source IN ('Wind', 'Solar'); SELECT COUNT(*) FROM climate_adaptation_re WHERE region = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: Exhibitions' 테이블에서 각 큐레이터별 전시회 수를 찾아주세요.\n\nDDL statements:\nCREATE TABLE Exhibitions (id INT, curator VARCHAR(50), title VARCHAR(100), location VARCHAR(100), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT curator, COUNT(*) as total_exhibitions FROM Exhibitions GROUP BY curator;"
    },
    {
        "instruction": "입력 텍스트: 유로퓸의 연간 평균 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production_yearly (year INT, element VARCHAR(10), quantity INT); INSERT INTO production_yearly (year, element, quantity) VALUES (2015, 'Europium', 4000), (2016, 'Europium', 4500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, AVG(quantity) as avg_quantity FROM production_yearly WHERE element = 'Europium' GROUP BY year"
    },
    {
        "instruction": "입력 텍스트: 콜로라도와 워싱턴에서 가장 많은 양의 식용 제품을 판매한 약국을 찾으세요.\n\nDDL statements:\nCREATE TABLE dispensaries (dispensary_name VARCHAR(30), state VARCHAR(20), sales_channel VARCHAR(20), sales_quantity INT); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary A', 'Colorado', 'edibles', 250); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary B', 'Colorado', 'edibles', 300); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary C', 'Washington', 'edibles', 200); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary D', 'Washington', 'edibles', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dispensary_name, sales_quantity FROM dispensaries WHERE sales_channel = 'edibles' AND state IN ('Colorado', 'Washington') ORDER BY sales_quantity DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 태평양에 서식하는 모든 해양 생물의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE marine_species (name TEXT, habitat TEXT); INSERT INTO marine_species (name, habitat) VALUES ('Salmon', 'Pacific Ocean'), ('Sea Lion', 'Pacific Ocean'), ('Clownfish', 'Indian Ocean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM marine_species WHERE habitat = 'Pacific Ocean';"
    },
    {
        "instruction": "입력 텍스트: 40세에서 50세 사이의 환자들 사이에서 가장 흔한 치료 방법은 무엇인가요?\n\nDDL statements:\nCREATE TABLE treatments (patient_id INT, age INT, treatment_type VARCHAR(50)); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (1, 45, 'CBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (2, 50, 'DBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (3, 42, 'Mindfulness'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (4, 48, 'CBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (5, 39, 'DBT');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT treatment_type, COUNT(*) as count FROM treatments WHERE age BETWEEN 40 AND 50 GROUP BY treatment_type ORDER BY count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: Academic_Publications' 테이블에서 'Publication_ID'가 (601, 605, 612)인 출판물의 'Title'을 'Machine Learning for Social Good'으로 변경하세요.\n\nDDL statements:\nCREATE TABLE Academic_Publications (Publication_ID INT, Title VARCHAR(100), Publication_Type VARCHAR(50), Publication_Year INT, Author_ID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Academic_Publications SET Title = 'Machine Learning for Social Good' WHERE Publication_ID IN (601, 605, 612);"
    },
    {
        "instruction": "입력 텍스트: 잉글리시 프리미어 리그에서 팀별로 구분하여 총 득점이 높은 순으로 상위 5명의 득점자를 찾아주세요.\n\nDDL statements:\nCREATE TABLE epl_teams (team_id INT, team_name VARCHAR(100), city VARCHAR(50), league VARCHAR(50), division VARCHAR(50), games_played INT, goals INT); INSERT INTO epl_teams (team_id, team_name, city, league, division, games_played, goals) VALUES (1, 'Manchester United', 'Manchester', 'EPL', 'Premier League', 12, 35); INSERT INTO epl_teams (team_id, team_name, city, league, division, games_played, goals) VALUES (2, 'Manchester City', 'Manchester', 'EPL', 'Premier League', 13, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, player_name, SUM(goals) OVER (PARTITION BY team_name) as total_goals, RANK() OVER (PARTITION BY team_name ORDER BY SUM(goals) DESC) as rank  FROM epl_players  WHERE league = 'EPL'  GROUP BY team_name, player_name  ORDER BY team_name, total_goals DESC, rank;"
    },
    {
        "instruction": "입력 텍스트: 2021년 1월 1일 이전에 발생한 댈러스 시의 모든 화재 사건을 삭제하세요.\n\nDDL statements:\nCREATE TABLE dallas_fire_incidents (id INT, incident_date TIMESTAMP); INSERT INTO dallas_fire_incidents (id, incident_date) VALUES (1, '2020-12-31 23:59:59');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM dallas_fire_incidents WHERE incident_date < '2021-01-01 00:00:00';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 환자 중 불안 장애로 진단받은 환자의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (id INT, age INT, gender TEXT, state TEXT, condition TEXT); INSERT INTO patients (id, age, gender, state, condition) VALUES (1, 35, 'Female', 'California', 'Anxiety'); INSERT INTO patients (id, age, gender, state, condition) VALUES (2, 42, 'Male', 'Florida', 'Depression');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*)) / (SELECT COUNT(*) FROM patients WHERE patients.state = 'California') * 100.0 AS percentage FROM patients WHERE patients.state = 'California' AND patients.condition = 'Anxiety';"
    },
    {
        "instruction": "입력 텍스트: 각 선박 유형별로 가장 빠른 검사 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE vessels (id INT, type VARCHAR(255)); CREATE TABLE inspections (id INT, vessel_id INT, inspection_date DATE); INSERT INTO vessels VALUES (1, 'Tanker'), (2, 'Cargo Ship'); INSERT INTO inspections VALUES (1, 1, '2021-01-01'), (2, 1, '2020-01-01'), (3, 2, '2021-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.type, MIN(i.inspection_date) as earliest_date FROM vessels v JOIN inspections i ON v.id = i.vessel_id GROUP BY v.type;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 추가된 모든 동물 목록을 보여주세요.\n\nDDL statements:\nCREATE TABLE animal_population (animal_id INT, animal_name VARCHAR(50), program VARCHAR(50), added_date DATE); INSERT INTO animal_population (animal_id, animal_name, program, added_date) VALUES (1, 'Grizzly Bear', 'habitat_preservation', '2022-01-01'), (2, 'Gray Wolf', 'community_education', '2022-02-01'), (3, 'Bald Eagle', 'habitat_preservation', '2022-03-01'), (4, 'Red Fox', 'community_education', '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal_name, program, added_date FROM animal_population WHERE added_date >= DATEADD(WEEK, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: site_d'에서 가장 흔하게 발견된 유물의 종류는 무엇인가요?\n\nDDL statements:\nCREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255)); CREATE TABLE artifacts (artifact_id INT, site_id INT, artifact_type VARCHAR(255)); INSERT INTO excavation_sites (site_id, site_name) VALUES (1, 'site_a'), (2, 'site_b'), (3, 'site_c'), (4, 'site_d'); INSERT INTO artifacts (artifact_id, site_id, artifact_type) VALUES (1, 1, 'Pottery'), (2, 1, 'Bone Fragments'), (3, 2, 'Pottery'), (4, 2, 'Coins'), (5, 3, 'Bone Fragments'), (6, 3, 'Bronze Tools'), (7, 4, 'Pottery'), (8, 4, 'Pottery'), (9, 4, 'Stone Tools');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artifact_type, COUNT(*) AS count FROM artifacts WHERE site_id = (SELECT site_id FROM excavation_sites WHERE site_name = 'site_d') GROUP BY artifact_type ORDER BY count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 2020년 백켄 지층에서 가스 생산량이 가장 높은 상위 2개의 우물을 찾으세요.\n\nDDL statements:\nCREATE TABLE well (well_id INT, well_name TEXT, shale_play TEXT, gas_production_2020 FLOAT); INSERT INTO well (well_id, well_name, shale_play, gas_production_2020) VALUES (1, 'Well A', 'Bakken', 9000), (2, 'Well B', 'Bakken', 11000), (3, 'Well C', 'Bakken', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT well_name, gas_production_2020 as gas_production FROM well WHERE shale_play = 'Bakken' ORDER BY gas_production_2020 DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 2022년도의 운동 기록 총 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE workout_records (workout_date DATE, member_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM workout_records WHERE workout_date BETWEEN '2022-01-01' AND '2022-12-31';"
    },
    {
        "instruction": "입력 텍스트: 2021년 런던에서 대중버스가 이동한 총 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE public_buses( bus_id INT, route_id INT, start_time TIMESTAMP, end_time TIMESTAMP, total_distance DECIMAL(10,2), city VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(total_distance) FROM public_buses WHERE city = 'London' AND YEAR(start_time) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 산업 4.0 이니셔티브가 없는 공장에 있는 기계의 기계 ID, 유형 및 유지 보수 일정을 표시합니다.\n\nDDL statements:\nCREATE TABLE machines (machine_id INT, type TEXT, schedule TEXT); CREATE TABLE factories (factory_id INT, initiative TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT machines.machine_id, machines.type, machines.schedule FROM machines RIGHT JOIN factories ON machines.factory_id = factories.factory_id WHERE factories.initiative IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 공정 무역으로 인증된 고유한 제품 카테고리를 나열하세요.\n\nDDL statements:\nCREATE TABLE Products (product_id INT, category TEXT); INSERT INTO Products (product_id, category) VALUES (1, 'Tops'), (2, 'Pants'), (3, 'Tops'), (4, 'Shoes'); CREATE TABLE FairTradeCertifications (product_id INT, certified BOOLEAN); INSERT INTO FairTradeCertifications (product_id, certified) VALUES (1, TRUE), (2, FALSE), (3, TRUE), (4, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT category FROM Products INNER JOIN FairTradeCertifications ON Products.product_id = FairTradeCertifications.product_id WHERE FairTradeCertifications.certified = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 워싱턴 주에서 판매되는 사티바 종류의 평균 효능은 얼마인가요?\n\nDDL statements:\nCREATE TABLE strains (strain_id INT, strain_name TEXT, strain_type TEXT, state TEXT, potency DECIMAL); INSERT INTO strains (strain_id, strain_name, strain_type, state, potency) VALUES (1, 'Purple Haze', 'Sativa', 'Washington', 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(potency) FROM strains WHERE strain_type = 'Sativa' AND state = 'Washington';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 음악 축제에서 공연한 아티스트들의 각각의 총 스트리밍 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE artist_genre (artist_id INT, genre VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.artist_id, SUM(s.streams) as total_streams FROM artist_streams s JOIN festival_performances f ON s.artist_id = f.artist_id JOIN artist_genre g ON s.artist_id = g.artist_id WHERE f.performance_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY a.artist_id;"
    },
    {
        "instruction": "입력 텍스트: 윤리적 노동 관행을 따르는 공급업체들이 판매한 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, follows_ethical_practices BOOLEAN); INSERT INTO suppliers (supplier_id, follows_ethical_practices) VALUES (1, TRUE), (2, FALSE), (3, TRUE); CREATE TABLE sales (sale_id INT, supplier_id INT, quantity_sold INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity_sold) FROM sales INNER JOIN suppliers ON sales.supplier_id = suppliers.supplier_id WHERE suppliers.follows_ethical_practices = TRUE;"
    },
    {
        "instruction": "입력 텍스트: Operational' 상태가 아닌 기계를 확인하세요.\n\nDDL statements:\nCREATE TABLE Machines (Id INT, Name VARCHAR(50), Type VARCHAR(50), Status VARCHAR(50)); INSERT INTO Machines (Id, Name, Type, Status) VALUES (1, 'Reactor 1', 'Chemical', 'Operational'), (2, 'Separator 2', 'Purification', 'Inactive');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Machines WHERE Status != 'Operational';"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서의 기후 적응 프로젝트 수와 전체 대비 해당 지역의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE climate_projects (id INT, region TEXT, project_type TEXT); CREATE VIEW total_projects AS SELECT COUNT(*) as total_projects FROM climate_projects;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) as region_projects, (COUNT(*) / (SELECT total_projects FROM total_projects)) as percentage FROM climate_projects WHERE project_type = 'adaptation' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 윤리적 제조 지침을 따르지 않는 공장의 근로자 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, ethical_manufacturing BOOLEAN); INSERT INTO factories VALUES (1, true), (2, false), (3, true); CREATE TABLE workforce (worker_id INT, factory_id INT); INSERT INTO workforce VALUES (1, 1), (2, 1), (3, 2), (4, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM workforce w WHERE NOT EXISTS (SELECT 1 FROM factories f WHERE f.factory_id = w.factory_id AND f.ethical_manufacturing = true);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 독일 농촌 지역에서 이루어진 의료 약속의 총 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Appointments (AppointmentID int, Date date, Location varchar(50), Type varchar(50)); INSERT INTO Appointments (AppointmentID, Date, Location, Type) VALUES (1, '2021-01-01', 'Rural Germany', 'Checkup');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(COUNT(*)) FROM Appointments WHERE Location LIKE '%Rural Germany%' AND Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY EXTRACT(YEAR FROM Date);"
    },
    {
        "instruction": "입력 텍스트: 각 직물 공급업체의 지속 가능한 원단의 최대 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE VendorFabrics (id INT, vendor VARCHAR(20), fabric VARCHAR(20), price DECIMAL(5,2)); INSERT INTO VendorFabrics (id, vendor, fabric, price) VALUES (1, 'Vendor A', 'organic cotton', 6.50), (2, 'Vendor B', 'recycled polyester', 8.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vendor, MAX(price) FROM VendorFabrics WHERE fabric LIKE '%sustainable%' GROUP BY vendor;"
    },
    {
        "instruction": "입력 텍스트: B Corp 인증을 받은 의류의 총 생산 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE certifications (certification_id INT, certification_name TEXT); INSERT INTO certifications (certification_id, certification_name) VALUES (1, 'Fair Trade'), (2, 'GOTS Organic'), (3, 'B Corp'); CREATE TABLE garments (garment_id INT, garment_name TEXT, production_cost FLOAT, certification_id INT); INSERT INTO garments (garment_id, garment_name, production_cost, certification_id) VALUES (1, 'Organic Cotton Tee', 15.50, 3), (2, 'Cotton Tote Bag', 8.25, NULL), (3, 'Recycled Polyester Hoodie', 28.99, NULL), (4, 'Organic Cotton Dress', 22.00, 2), (5, 'Hemp Trousers', 35.00, NULL), (6, 'Bamboo Shirt', 27.50, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(g.production_cost) FROM garments g WHERE g.certification_id = 3;"
    },
    {
        "instruction": "입력 텍스트: 예술 분야의 창의적 AI 응용 프로그램에 대한 평균 인용 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Creative_AI_Applications (Application VARCHAR(50), Field VARCHAR(50), Citations INT); INSERT INTO Creative_AI_Applications (Application, Field, Citations) VALUES ('App1', 'Arts', 50), ('App2', 'Arts', 75), ('App3', 'Arts', 100), ('App4', 'Science', 120), ('App5', 'Science', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Citations) as Average_Citations FROM Creative_AI_Applications WHERE Field = 'Arts';"
    },
    {
        "instruction": "입력 텍스트: 연어 농장' 테이블에서 평균 온도가 15도 이상인 지역별로 그룹화된 연어의 총 생물량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE salmon_farms (id INT, region VARCHAR(255), biomass FLOAT, temperature FLOAT); INSERT INTO salmon_farms (id, region, biomass, temperature) VALUES (1, 'North', 15000.0, 12.5), (2, 'North', 12000.0, 17.3), (3, 'South', 20000.0, 18.0), (4, 'South', 18000.0, 16.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(biomass) FROM salmon_farms GROUP BY region HAVING AVG(temperature) > 15;"
    },
    {
        "instruction": "입력 텍스트: 호주의 탄소 상쇄 프로그램들이 달성한 총 이산화탄소 감축량(톤 단위)은 얼마이며, 그 중 5000톤 이상 감축한 프로그램은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE australia_offset_programs (name TEXT, co2_reduction_tons INT); INSERT INTO australia_offset_programs (name, co2_reduction_tons) VALUES ('Program A', 7000), ('Program B', 4000), ('Program C', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(co2_reduction_tons) AS total_reduction, COUNT(*) FILTER (WHERE co2_reduction_tons > 5000) AS num_programs_over_5000 FROM australia_offset_programs;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 교통 수단의 총 차량 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE transportation_fleet (region VARCHAR(20), vehicle_type VARCHAR(20), count INT); INSERT INTO transportation_fleet (region, vehicle_type, count) VALUES ('North America', 'cars', 30000), ('North America', 'buses', 5000), ('Europe', 'cars', 20000), ('Europe', 'buses', 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(count) FROM transportation_fleet GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2025년 마이애미에서 보건 및 인프라에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE city_budgets (city varchar(50), year int, service varchar(50), budget int); INSERT INTO city_budgets (city, year, service, budget) VALUES ('Miami', 2025, 'Healthcare', 12000000), ('Miami', 2025, 'Infrastructure', 8000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM city_budgets WHERE city = 'Miami' AND (service = 'Healthcare' OR service = 'Infrastructure') AND year = 2025;"
    },
    {
        "instruction": "입력 텍스트: tv_shows 테이블에서 가장 긴 런타임을 가진 TV 프로그램의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE tv_shows (id INT, title TEXT, runtime INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title FROM tv_shows ORDER BY runtime DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 생산 과정에서 지출이 가장 적은 2개 제조업체가 사용한 비지속 가능한 재료의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Manufacturers (ManufacturerID INT, ManufacturerName VARCHAR(50), Location VARCHAR(50), Spending DECIMAL(5,2)); CREATE TABLE Materials (MaterialID INT, MaterialName VARCHAR(50), Type VARCHAR(50)); CREATE TABLE ManufacturerMaterials (ManufacturerID INT, MaterialID INT, Quantity INT); INSERT INTO ManufacturerMaterials (ManufacturerID, MaterialID, Quantity) VALUES (1, 1, 500), (2, 1, 750), (3, 1, 600), (1, 2, 200), (2, 2, 300), (3, 2, 400); INSERT INTO Manufacturers (ManufacturerID, ManufacturerName, Location, Spending) VALUES (1, 'Manufacturer A', 'China', 1250), (2, 'Manufacturer B', 'India', 1050), (3, 'Manufacturer C', 'Vietnam', 1500), (4, 'Manufacturer D', 'Brazil', 1700), (5, 'Manufacturer E', 'Indonesia', 1350); INSERT INTO Materials (MaterialID, MaterialName, Type) VALUES (1, 'Organic Cotton', 'Sustainable'), (2, 'Polyester', 'Non-Sustainable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Quantity) FROM (SELECT * FROM ManufacturerMaterials JOIN Manufacturers ON ManufacturerMaterials.ManufacturerID = Manufacturers.ManufacturerID WHERE Spending IN (SELECT MIN(Spending) FROM Manufacturers LIMIT 2)) AS LowSpendingManufacturers JOIN Materials ON ManufacturerMaterials.MaterialID = Materials.MaterialID WHERE Materials.Type = 'Non-Sustainable';"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 진행된 유전학 연구 프로젝트는 몇 개인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists genetics_stats;CREATE TABLE if not exists genetics_stats.research_projects (id INT, name VARCHAR(100), state VARCHAR(50));INSERT INTO genetics_stats.research_projects (id, name, state) VALUES (1, 'ProjectA', 'California'), (2, 'ProjectB', 'New York'), (3, 'ProjectC', 'California'), (4, 'ProjectD', 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM genetics_stats.research_projects GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2019년에 수확된 목재의 총 부피를 수종별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE forests (id INT, species VARCHAR(255), year INT, volume FLOAT); INSERT INTO forests (id, species, year, volume) VALUES (1, 'Pine', 2018, 1200.5), (2, 'Oak', 2019, 1500.3), (3, 'Maple', 2020, 2000.7), (4, 'Birch', 2020, 1750.6), (5, 'Pine', 2019, 1300.8), (6, 'Spruce', 2018, 1400.9), (7, 'Spruce', 2019, 1500.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, SUM(volume) as total_volume FROM forests WHERE year IN (2018, 2019) GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 인도에 있는 예산이 500,000 USD 이상인 모든 농촌 인프라 프로젝트를 나열하세요.\n\nDDL statements:\nCREATE TABLE rural_infrastructure (id INT, name TEXT, location TEXT, budget FLOAT); INSERT INTO rural_infrastructure (id, name, location, budget) VALUES (1, 'Solar Power Plant', 'India', 600000.00), (2, 'Irrigation System', 'India', 700000.00), (3, 'Healthcare Center', 'Nepal', 400000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location, budget FROM rural_infrastructure WHERE location = 'India' AND budget > 500000;"
    },
    {
        "instruction": "입력 텍스트: \"public_transportation_routes\" 테이블에 \"Rapid 10\"이라는 이름의 노선에 대한 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE public_transportation_routes (route_id INT, route_name VARCHAR(50), start_point VARCHAR(100), end_point VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO public_transportation_routes (route_name) VALUES ('Rapid 10');"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 상업용 건물의 평균 에너지 효율 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE buildings (id INT, state VARCHAR(50), building_type VARCHAR(50), energy_efficiency_rating FLOAT); INSERT INTO buildings (id, state, building_type, energy_efficiency_rating) VALUES (1, 'California', 'Commercial', 90.5), (2, 'California', 'Residential', 75.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_efficiency_rating) FROM buildings WHERE state = 'California' AND building_type = 'Commercial';"
    },
    {
        "instruction": "입력 텍스트: 2021년 2분기에 미국에서 판매된 동물 실험을 하지 않은 화장품 제품은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE makeup_sales (sale_id INT, product_id INT, sale_quantity INT, is_cruelty_free BOOLEAN, sale_date DATE); INSERT INTO makeup_sales VALUES (1, 2, 3, true, '2021-04-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM makeup_sales WHERE is_cruelty_free = true AND sale_date BETWEEN '2021-04-01' AND '2021-06-30';"
    },
    {
        "instruction": "입력 텍스트: 토론토 대중교통의 일일 이용객 수는 교통수단별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE TOPublicTransportation (id INT, date DATE, mode VARCHAR(20), ridership INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mode, SUM(ridership) FROM TOPublicTransportation WHERE date = '2022-03-01' GROUP BY mode;"
    },
    {
        "instruction": "입력 텍스트: infrastructure_projects' 테이블의 각 프로젝트에 대한 총 예산이며, 'project_budgets' 테이블에서 해당 프로젝트의 예산을 포함한 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE infrastructure_projects (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE project_budgets (project_id INT, budget DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.name, SUM(p.budget) as total_budget FROM infrastructure_projects i INNER JOIN project_budgets p ON i.id = p.project_id GROUP BY i.id;"
    },
    {
        "instruction": "입력 텍스트: 채식주의 고객들을 위한 가장 인기 있는 메뉴 항목과 그들의 총 주문 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(255), diet_preference VARCHAR(255)); CREATE TABLE orders (order_id INT, customer_id INT, menu_item_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT o.menu_item_name, COUNT(o.order_id) as total_orders FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id WHERE c.diet_preference = 'vegetarian' GROUP BY o.menu_item_name ORDER BY total_orders DESC LIMIT 10;"
    },
    {
        "instruction": "입력 텍스트: 1월과 2월 사이에 미국에서 호주를 방문한 관광객 수의 변화율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE tourism (date DATE, host_country VARCHAR(50), visitor_country VARCHAR(50), number_of_tourists INT); INSERT INTO tourism (date, host_country, visitor_country, number_of_tourists) VALUES ('2022-01-01', 'Australia', 'United States', 10000), ('2022-02-01', 'Australia', 'United States', 11000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(number_of_tourists) - LAG(SUM(number_of_tourists)) OVER (PARTITION BY visitor_country ORDER BY date)) / LAG(SUM(number_of_tourists)) OVER (PARTITION BY visitor_country ORDER BY date) * 100.0 as percentage_change FROM tourism WHERE host_country = 'Australia' AND visitor_country = 'United States';"
    },
    {
        "instruction": "입력 텍스트: 시카고에 있는 건물의 인증을 LEED Gold로 업데이트하세요\n\nDDL statements:\nCREATE TABLE Building (id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), country VARCHAR(255), certification VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Building SET certification = 'LEED Gold' WHERE city = 'Chicago';"
    },
    {
        "instruction": "입력 텍스트: 멸종 위기에 처한 동물 종의 서식지 평균 크기는 얼마인가요?\n\nDDL statements:\nCREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), species VARCHAR(50), population INT, status VARCHAR(50)); CREATE TABLE habitats (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size FLOAT, animal_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animals.status, AVG(habitats.size) AS avg_size FROM animals INNER JOIN habitats ON animals.id = habitats.animal_id WHERE animals.status = 'Endangered' GROUP BY animals.status;"
    },
    {
        "instruction": "입력 텍스트: 2016년 이후 인도양에서 매년 시추된 우물의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE indian_ocean_wells (well_id INT, well_name VARCHAR(50), drill_date DATE); INSERT INTO indian_ocean_wells (well_id, well_name, drill_date) VALUES (1, 'Indian Ocean Well A', '2016-01-01'), (2, 'Indian Ocean Well B', '2017-01-01'), (3, 'Indian Ocean Well C', '2018-01-01'), (4, 'Indian Ocean Well D', '2019-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT YEAR(drill_date) AS Year, COUNT(*) AS Number_of_wells FROM indian_ocean_wells GROUP BY YEAR(drill_date);"
    },
    {
        "instruction": "입력 텍스트: 콜로라도와 캘리포니아의 실험실에서 THC 함량이 가장 높은 상위 5개의 균주를 가져오세요.\n\nDDL statements:\nCREATE TABLE StrainLabResults (StrainName VARCHAR(255), Lab VARCHAR(255), THCResult DECIMAL(5,2), CBNResult DECIMAL(5,2), DateTested DATE); INSERT INTO StrainLabResults (StrainName, Lab, THCResult, CBNResult, DateTested) VALUES ('Strain A', 'Lab A', 25.0, 1.0, '2022-01-01'), ('Strain B', 'Lab B', 30.0, 1.5, '2022-01-02'), ('Strain C', 'Lab C', 22.5, 0.5, '2022-01-03'), ('Strain D', 'Lab D', 27.0, 1.2, '2022-01-04'), ('Strain E', 'Lab E', 28.5, 1.8, '2022-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT StrainName, THCResult FROM (SELECT StrainName, THCResult, ROW_NUMBER() OVER(ORDER BY THCResult DESC) as rn FROM StrainLabResults WHERE Lab IN ('Colorado Lab', 'California Lab')) t WHERE rn <= 5;"
    },
    {
        "instruction": "입력 텍스트: 각 부서에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Departments (id INT, department_name TEXT, budget_allocated FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department_name, SUM(budget_allocated) as total_budget FROM Departments GROUP BY department_name;"
    },
    {
        "instruction": "입력 텍스트: 전 세계적으로 연도별로 설립된 해양보호구역의 수를 찾아보세요.\n\nDDL statements:\nCREATE TABLE marine_protected_areas (area_name VARCHAR(255), establishment_year INT, location VARCHAR(255)); INSERT INTO marine_protected_areas (area_name, establishment_year, location) VALUES ('Coral Pink Sand Dunes State Park', 1963, 'USA'), ('Papahānaumokuākea Marine National Monument', 2006, 'USA'), ('Riserva Marina di Portofino', 1999, 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT establishment_year, COUNT(*) FROM marine_protected_areas GROUP BY establishment_year;"
    },
    {
        "instruction": "입력 텍스트: 금융 범죄 테이블에서 각 고객의 최대 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE financial_crimes (customer_id INT, transaction_date DATE, transaction_value DECIMAL(10,2)); INSERT INTO financial_crimes (customer_id, transaction_date, transaction_value) VALUES (1, '2022-01-01', 5000.00), (1, '2022-01-02', 3000.00), (2, '2022-01-01', 1000.00), (2, '2022-01-02', 2000.00), (3, '2022-01-01', 3000.00), (3, '2022-01-02', 2000.00), (3, '2022-01-03', 1000.00), (3, '2022-01-04', 500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customer_id, MAX(transaction_value) FROM financial_crimes GROUP BY customer_id;"
    },
    {
        "instruction": "입력 텍스트: 어떤 군사 작전이 연도별 평균 예산이 가장 높은가요?\n\nDDL statements:\nCREATE TABLE military_operations (operation_id INT, operation_name VARCHAR(255), year INT, budget INT); INSERT INTO military_operations (operation_id, operation_name, year, budget) VALUES (1, 'Operation Inherent Resolve', 2014, 50000000), (2, 'Operation Freedom Sentinel', 2015, 30000000), (3, 'Operation Atlantic Resolve', 2016, 40000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT operation_name, AVG(budget) as avg_budget FROM military_operations GROUP BY operation_name ORDER BY avg_budget DESC;"
    },
    {
        "instruction": "입력 텍스트: Exhibition_Visitors 테이블에서 '임시 폐쇄' 전시 관련 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Exhibition_Visitors (visitor_id INT, exhibition_id INT, visit_date DATE); INSERT INTO Exhibition_Visitors (visitor_id, exhibition_id, visit_date) VALUES (1, 1, '2023-01-01'), (2, 2, '2023-02-01'); CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO Exhibitions (exhibition_id, exhibition_name, start_date, end_date) VALUES (1, 'Temporary Closure', '2023-01-01', '2023-01-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Exhibition_Visitors WHERE exhibition_id = (SELECT exhibition_id FROM Exhibitions WHERE exhibition_name = 'Temporary Closure');"
    },
    {
        "instruction": "입력 텍스트: 한 개 이상의 단체에 기부한 모든 기부자를 나열하세요.\n\nDDL statements:\nCREATE TABLE donor (don_id INT, don_name TEXT); CREATE TABLE donation (don_id INT, org_id INT); INSERT INTO donor (don_id, don_name) VALUES (1, 'Richard Roe'), (2, 'Susan Smith'), (3, 'Mark Miller'); INSERT INTO donation (don_id, org_id) VALUES (1, 1), (1, 2), (2, 2), (3, 3), (3, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT don_id, don_name FROM donor WHERE don_id IN (SELECT don_id FROM (SELECT don_id, COUNT(DISTINCT org_id) as num_orgs FROM donation GROUP BY don_id) WHERE num_orgs > 1);"
    },
    {
        "instruction": "입력 텍스트: 2021년 2월 북해에서 활동 중이었던 해양 시추기는 몇 개였나요?\n\nDDL statements:\nCREATE TABLE rigs (rig_id INT, rig_name TEXT, location TEXT, status TEXT, start_date DATE, end_date DATE); INSERT INTO rigs (rig_id, rig_name, location, status, start_date, end_date) VALUES (1, 'Rig 1', 'North Sea', 'active', '2021-02-01', '2021-03-31'), (2, 'Rig 2', 'North Sea', 'idle', '2021-02-01', '2021-12-31'), (3, 'Rig 3', 'North Sea', 'active', '2021-02-01', '2022-01-01'), (4, 'Rig 4', 'Baltic Sea', 'active', '2021-02-01', '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM rigs WHERE location = 'North Sea' AND status = 'active' AND start_date <= '2021-02-01' AND end_date >= '2021-02-28';"
    },
    {
        "instruction": "입력 텍스트: 어떤 메뉴 아이템들이 나트륨 함량이 높으면서도 베스트셀러인가요?\n\nDDL statements:\nCREATE TABLE MenuItems (id INT, item VARCHAR(30), sodium INT, popularity INT); INSERT INTO MenuItems (id, item, sodium, popularity) VALUES (1, 'French Fries', 500, 100), (2, 'Grilled Chicken', 300, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT item, sodium FROM MenuItems WHERE popularity > 70 ORDER BY sodium DESC;"
    },
    {
        "instruction": "입력 텍스트: 중간' 및 '매우 큰' 규모의 조직에서 사용하는 고유한 커뮤니케이션 방법은 무엇인가요?\n\nDDL statements:\nCREATE TABLE org_comms (org_size VARCHAR(20), method VARCHAR(20)); INSERT INTO org_comms (org_size, method) VALUES ('small', 'email'), ('medium', 'phone'), ('large', 'video_conference'), ('extra_large', 'virtual_reality');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT method FROM org_comms WHERE org_size IN ('medium', 'extra_large');"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에 있는 예산이 100만 달러 이상인 모든 정부 프로그램과 해당 예산을 예산이 높은 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE programs (name VARCHAR(255), budget FLOAT, state VARCHAR(255)); INSERT INTO programs (name, budget, state) VALUES ('Program A', 1.2, 'California'), ('Program B', 2.5, 'California'), ('Program C', 1.8, 'California'), ('Program D', 0.9, 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, budget FROM programs WHERE state = 'California' AND budget > 1000000.0 ORDER BY budget DESC;"
    },
    {
        "instruction": "입력 텍스트: 2010'년 이전에 건설된 'SouthAmerica' 지역의 수력 발전소들의 총 에너지 생산량(MWh)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE hydro_plants (id INT, name VARCHAR(50), region VARCHAR(50), built_year INT, production INT); INSERT INTO hydro_plants (id, name, region, built_year, production) VALUES (1, 'HydroPlant1', 'SouthAmerica', 2005, 1500), (2, 'HydroPlant2', 'SouthAmerica', 2015, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production) FROM hydro_plants WHERE region = 'SouthAmerica' AND built_year < 2010;"
    },
    {
        "instruction": "입력 텍스트: 상위 10명의 기부자들 중 최소 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50)); INSERT INTO Donors (DonorID, DonorName) VALUES (1001, 'John Doe'), (1002, 'Jane Doe'), (2001, 'Mike Johnson'), (3001, 'Emma Smith'); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL(10,2)); INSERT INTO Donations (DonationID, DonorID, DonationAmount) VALUES (1, 1001, 50.00), (2, 1001, 100.00), (3, 1002, 200.00), (4, 2001, 300.00), (5, 2001, 400.00), (6, 3001, 500.00), (7, 3001, 600.00), (8, 3001, 700.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.DonationAmount AS MinimumDonationAmount FROM (SELECT DonorID, ROW_NUMBER() OVER (ORDER BY SUM(DonationAmount) DESC) AS Ranking FROM Donations GROUP BY DonorID) r JOIN Donations d ON r.DonorID = d.DonorID WHERE r.Ranking <= 10;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 시카고 양쪽 모두에서 전시회를 개최한 모든 박물관을 나열하세요.\n\nDDL statements:\nCREATE TABLE Museums (id INT, name VARCHAR(30)); CREATE TABLE Exhibitions (id INT, museum_id INT, city VARCHAR(20)); INSERT INTO Museums (id, name) VALUES (1, 'New York Museum'), (2, 'Chicago Art Gallery'), (3, 'Los Angeles Museum'); INSERT INTO Exhibitions (id, museum_id, city) VALUES (1, 1, 'New York'), (2, 1, 'Chicago'), (3, 3, 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Museums.name FROM Museums INNER JOIN Exhibitions ON Museums.id = Exhibitions.museum_id WHERE Exhibitions.city IN ('New York', 'Chicago') GROUP BY Museums.name HAVING COUNT(DISTINCT Exhibitions.city) = 2;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 멕시코에서 제조된 차량은 몇 대인가요?\n\nDDL statements:\nCREATE TABLE Vehicle (id INT, make VARCHAR(255), model VARCHAR(255), manufacture_date DATE, country VARCHAR(255)); INSERT INTO Vehicle (id, make, model, manufacture_date, country) VALUES (1, 'Nissan', 'Sentra', '2022-02-15', 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Vehicle WHERE country = 'Mexico' AND manufacture_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 이벤트의 평균 참석자 수를 찾아라.\n\nDDL statements:\nCREATE TABLE Events (EventID INT, Name TEXT, Attendance INT);CREATE TABLE EventLocations (EventID INT, Country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EventLocations.Country, AVG(Events.Attendance) FROM Events INNER JOIN EventLocations ON Events.EventID = EventLocations.EventID GROUP BY EventLocations.Country;"
    },
    {
        "instruction": "입력 텍스트: 산업별로, 노조가 있는 곳과 없는 곳을 구분하여 직장의 총 개수를 계산하세요.\n\nDDL statements:\nCREATE TABLE workplaces (id INT, name VARCHAR(255), industry VARCHAR(255), union_status VARCHAR(255), num_employees INT); INSERT INTO workplaces (id, name, industry, union_status, num_employees) VALUES (1, 'ABC Company', 'Manufacturing', 'Union', 500), (2, 'XYZ Corporation', 'Manufacturing', 'Non-Union', 250), (3, 'DEF Industries', 'Retail', 'Union', 300), (4, 'GHI Company', 'Retail', 'Non-Union', 150), (5, 'JKL Industries', 'Construction', 'Union', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, union_status, COUNT(*) as 'Total Workplaces' FROM workplaces GROUP BY industry, union_status;"
    },
    {
        "instruction": "입력 텍스트: 새로운 테이블 language_revitalization을 다음의 컬럼들로 생성하세요: id, language, program_name, location, start_year, end_year.\n\nDDL statements:\nlanguage_revitalization (id, language, program_name, location, start_year, end_year)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE language_revitalization (id INT PRIMARY KEY, language VARCHAR(50), program_name VARCHAR(100), location VARCHAR(50), start_year INT, end_year INT);"
    },
    {
        "instruction": "입력 텍스트: 세계 각국의 병원 침대 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hospital_beds (id INT, country TEXT, num_beds INT); INSERT INTO hospital_beds (id, country, num_beds) VALUES (1, 'United States', 900000), (2, 'Mexico', 250000), (3, 'Canada', 150000), (4, 'Brazil', 500000), (5, 'Australia', 100000), (6, 'Russia', 1200000), (7, 'China', 4000000), (8, 'India', 2000000), (9, 'Germany', 800000), (10, 'France', 700000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(num_beds) FROM hospital_beds GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: VR 게임을 선호하는 플레이어의 비율과 Non-VR 게임을 선호하는 플레이어의 비율은 각각 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID int, Age int, Gender varchar(10), GamePreference varchar(20)); INSERT INTO Players (PlayerID, Age, Gender, GamePreference) VALUES (1, 25, 'Male', 'VR'); INSERT INTO Players (PlayerID, Age, Gender, GamePreference) VALUES (2, 30, 'Female', 'Non-VR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CASE WHEN GamePreference = 'VR' THEN 'VR' ELSE 'Non-VR' END AS GamePreference, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Players), 1) AS Percentage FROM Players GROUP BY GamePreference;"
    },
    {
        "instruction": "입력 텍스트: Education' 산업 분야에서 노조에 속해 있으며 연봉이 $60,000 이상인 근로자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE workers (id INT, industry VARCHAR(255), salary FLOAT, union_member BOOLEAN); INSERT INTO workers (id, industry, salary, union_member) VALUES (1, 'Manufacturing', 50000.0, true), (2, 'Education', 65000.0, true), (3, 'Retail', 30000.0, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM workers WHERE industry = 'Education' AND union_member = true AND salary > 60000;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 컬렉션의 평균 작품 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE collections (id INT, name VARCHAR(50), artworks INT); INSERT INTO collections (id, name, artworks) VALUES (1, 'Oceania Collection 1', 50), (2, 'Oceania Collection 2', 60), (3, 'European Collection', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(artworks) FROM collections WHERE name LIKE '%Oceania%';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 이루어진 네트워크 인프라 투자의 총 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE investments (investment_id INT, investment_type VARCHAR(20), investment_date DATE, amount DECIMAL(10,2)); INSERT INTO investments (investment_id, investment_type, investment_date, amount) VALUES (1, 'tower upgrades', '2021-03-15', 5000.00), (2, 'fiber optics', '2021-12-30', 7000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM investments WHERE investment_date >= '2021-01-01' AND investment_date < '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 유네스코가 인류 구전 및 무형 유산의 걸작으로 인정한 토착 예술 형태는 무엇인가요?\n\nDDL statements:\nCREATE TABLE intangible_heritage (id INT, name VARCHAR(50), location VARCHAR(50), status VARCHAR(50), PRIMARY KEY(id)); INSERT INTO intangible_heritage (id, name, location, status) VALUES (1, 'Kutiyattam', 'India, Asia', 'Masterpiece'), (2, 'Noh', 'Japan, Asia', 'Masterpiece'), (3, 'Batik', 'Indonesia, Asia', 'Masterpiece');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.name, i.location, i.status FROM intangible_heritage i WHERE i.status = 'Masterpiece';"
    },
    {
        "instruction": "입력 텍스트: 지난해 대비 제품 수가 50% 이상 증가한 브랜드를 확인하세요.\n\nDDL statements:\nCREATE TABLE brands(brand_id INT, brand_name TEXT, products_last_year INT, products_this_year INT); INSERT INTO brands(brand_id, brand_name, products_last_year, products_this_year) VALUES (1, 'BrandA', 200, 300), (2, 'BrandB', 500, 700), (3, 'BrandC', 1000, 1200), (4, 'BrandD', 800, 700), (5, 'BrandE', 900, 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand_id, brand_name, ((products_this_year - products_last_year) * 100.0 / products_last_year) as growth_percentage FROM brands WHERE (products_this_year - products_last_year) > 0.5 * products_last_year ORDER BY growth_percentage DESC;"
    },
    {
        "instruction": "입력 텍스트: 2017년에 설립된 회사들이 받은 총 자금은 얼마이며, 자금의 액수에 따라 순서대로 나열해 주세요?\n\nDDL statements:\nCREATE TABLE Funding (company_id INT, funding_year INT, amount INT); INSERT INTO Funding (company_id, funding_year, amount) VALUES (1, 2015, 3000000); INSERT INTO Funding (company_id, funding_year, amount) VALUES (2, 2017, 5000000); INSERT INTO Funding (company_id, funding_year, amount) VALUES (3, 2017, 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company_id, SUM(amount) as total_funding FROM Funding WHERE funding_year = 2017 GROUP BY company_id ORDER BY total_funding DESC;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 수학과 대학원생들이 발표한 출판물은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE GraduateStudents (StudentID INT, Name VARCHAR(50), Department VARCHAR(50), Publications INT, PublicationYear INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(Publications) FROM GraduateStudents WHERE Department = 'Mathematics' AND PublicationYear = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이전에 우주선을 발사한 우주 기관은 어디인가요?\n\nDDL statements:\nCREATE TABLE spacecraft (id INT, name VARCHAR(100), agency VARCHAR(50), launch_date DATE); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (1, 'Voyager 1', 'NASA', '1977-09-05'); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (2, 'Galileo', 'NASA', '1989-10-18'); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (3, 'Cassini', 'CNES', '1997-10-15'); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (4, 'Mars Express', 'ESA', '2003-06-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT agency FROM spacecraft WHERE YEAR(launch_date) < 2000;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 선진국이 개발도상국에 약속한 기후 변화 완화 및 적응 프로젝트를 위한 총 자금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (year INT, donor VARCHAR(20), recipient VARCHAR(20), category VARCHAR(10), amount FLOAT); INSERT INTO climate_finance (year, donor, recipient, category, amount) VALUES (2020, 'USA', 'India', 'mitigation', 10000000), (2020, 'USA', 'Brazil', 'adaptation', 15000000), (2020, 'Germany', 'Indonesia', 'mitigation', 8000000), (2020, 'France', 'South Africa', 'adaptation', 12000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM climate_finance WHERE year = 2020 AND (donor IN ('USA', 'Germany', 'France') AND recipient IN ('India', 'Brazil', 'Indonesia', 'South Africa') AND category IN ('mitigation', 'adaptation'));"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 거주하는 고객들의 채권에 대한 투자 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ClientInvestments (ClientID INT, InvestmentType VARCHAR(20), Value FLOAT); INSERT INTO ClientInvestments (ClientID, InvestmentType, Value) VALUES (1, 'Stock', 10000), (1, 'Bond', 20000), (2, 'Stock', 30000), (2, 'Bond', 15000), (3, 'Stock', 5000), (3, 'Bond', 25000), (4, 'Stock', 40000), (4, 'Bond', 30000), (5, 'Stock', 7000), (5, 'Bond', 18000); CREATE TABLE Clients (ClientID INT, State VARCHAR(20)); INSERT INTO Clients (ClientID, State) VALUES (1, 'NY'), (2, 'TX'), (3, 'CA'), (4, 'NY'), (5, 'TX');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Value) FROM ClientInvestments CI JOIN Clients C ON CI.ClientID = C.ClientID WHERE C.State = 'TX' AND InvestmentType = 'Bond';"
    },
    {
        "instruction": "입력 텍스트: 시청자가 'Alex'인 레코드를 viewership 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE viewership(id INT PRIMARY KEY, movie VARCHAR(255), viewer VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM viewership WHERE viewer = 'Alex';"
    },
    {
        "instruction": "입력 텍스트: inventory' 테이블에서 'product_name'별로 구분하고 'quantity_on_hand'를 내림차순으로 정렬하여 'quantity_on_hand'의 평균을 계산하세요.\n\nDDL statements:\nCREATE TABLE inventory (product_id INT, product_name VARCHAR(255), quantity_on_hand INT, last_updated TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(quantity_on_hand) OVER (PARTITION BY product_name ORDER BY quantity_on_hand DESC) FROM inventory;"
    },
    {
        "instruction": "입력 텍스트: green_certification 테이블에서 certification_type이 'Eco-Friendly'이고 expiration_date가 '2022-01-01' 이전인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE green_certification (id INT PRIMARY KEY, company VARCHAR(255), certification_type VARCHAR(255), expiration_date DATE); INSERT INTO green_certification (id, company, certification_type, expiration_date) VALUES (1, 'Company X', 'Eco-Friendly', '2022-12-31'), (2, 'Company Y', 'Organic', '2023-06-30'), (3, 'Company Z', 'Eco-Friendly', '2021-06-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM green_certification WHERE certification_type = 'Eco-Friendly' AND expiration_date < '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스 전체에서 옥수수의 평균 수확량보다 에이커당 수확량이 최소 10% 높은 북부 지역의 모든 농장을 나열하십시오.\n\nDDL statements:\nCREATE TABLE Farm (id INT, name TEXT, crop TEXT, yield_per_acre FLOAT, region TEXT); INSERT INTO Farm (id, name, crop, yield_per_acre, region) VALUES (1, 'Smith Farm', 'Corn', 150, 'Northern'), (2, 'Jones Farm', 'Soybeans', 80, 'Northern'), (3, 'Brown Farm', 'Corn', 180, 'Northern'); CREATE TABLE Average (crop TEXT, avg_yield FLOAT); INSERT INTO Average (crop, avg_yield) VALUES ('Corn', 160);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Farm WHERE region = 'Northern' AND crop = 'Corn' AND yield_per_acre >= (SELECT 1.1 * avg_yield FROM Average WHERE crop = 'Corn');"
    },
    {
        "instruction": "입력 텍스트: 정책 테이블에서 서비스 동물과 관련된 모든 정책을 나열하세요.\n\nDDL statements:\nCREATE TABLE policy (id INT, policy_name VARCHAR(255), description VARCHAR(255)); INSERT INTO policy (id, policy_name, description) VALUES (1, 'Service Animal Policy', 'Policy regarding the use of service animals on campus'); INSERT INTO policy (id, policy_name, description) VALUES (2, 'Emotional Support Animal Policy', 'Policy regarding the use of emotional support animals in student housing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_name, description FROM policy WHERE policy_name LIKE '%Service Animal%';"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 요일별로 나눈 보안 사고의 평균 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, incident_date DATE, incident_count INT); INSERT INTO security_incidents (id, incident_date, incident_count) VALUES (1, '2022-01-01', 5), (2, '2022-01-02', 8), (3, '2022-01-03', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(incident_date, '%W') as day_of_week, AVG(incident_count) as avg_incidents FROM security_incidents WHERE incident_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY day_of_week;"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기 각 플랫폼의 총 석유 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE platform (platform_id INT, platform_name TEXT, oil_production_q4_2021 FLOAT); INSERT INTO platform (platform_id, platform_name, oil_production_q4_2021) VALUES (1, 'A', 1200), (2, 'B', 1800), (3, 'C', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT platform_name, SUM(oil_production_q4_2021) as total_oil_production FROM platform GROUP BY platform_name;"
    },
    {
        "instruction": "입력 텍스트: 뷰를 조회하여 모든 발굴 현장과 그에 해당하는 유물들을 나열하세요.\n\nDDL statements:\nCREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, SiteName VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); CREATE TABLE Artifacts (ArtifactID INT PRIMARY KEY, SiteID INT, ArtifactName VARCHAR(255), Description TEXT, Material VARCHAR(255), DateFound DATE); CREATE VIEW ExcavationArtifacts AS SELECT ES.SiteName, A.ArtifactName, A.Material, A.DateFound FROM ExcavationSites ES INNER JOIN Artifacts A ON ES.SiteID = A.SiteID; SELECT * FROM ExcavationArtifacts;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM ExcavationArtifacts;"
    },
    {
        "instruction": "입력 텍스트: 2019년 농구 시즌에 각 팀이 플레이한 모든 경기를 나열합니다.\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(255)); INSERT INTO teams VALUES (1, 'Golden State Warriors'); INSERT INTO teams VALUES (2, 'Los Angeles Lakers'); CREATE TABLE matches (team_id INT, opponent_id INT, season VARCHAR(10)); INSERT INTO matches VALUES (1, 2, '2019'); INSERT INTO matches VALUES (2, 1, '2019');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.team_name, b.team_name as opponent FROM matches a JOIN teams b ON a.team_id = b.team_id JOIN matches c ON b.team_id = c.opponent_id WHERE a.season = '2019' OR c.season = '2019';"
    },
    {
        "instruction": "입력 텍스트: 2023년 1월 1일부터 1월 5일까지 뉴욕 지역의 일일 평균 에너지 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE energy_prices (id INT PRIMARY KEY, date DATE, region VARCHAR, price FLOAT); INSERT INTO energy_prices (id, date, region, price) VALUES (1, '2023-01-01', 'New York', 80.0); INSERT INTO energy_prices (id, date, region, price) VALUES (2, '2023-01-02', 'New York', 82.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.region, AVG(e.price) as avg_region_price FROM energy_prices e WHERE e.region = 'New York' AND e.date BETWEEN '2023-01-01' AND '2023-01-05' GROUP BY e.region;"
    },
    {
        "instruction": "입력 텍스트: 캐나다와 멕시코에 있는 정신 건강 서비스를 제공하는 농촌 클리닉은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE clinics (id INT, country VARCHAR(10), offers_mental_health BOOLEAN); INSERT INTO clinics (id, country, offers_mental_health) VALUES (1, 'Canada', TRUE), (2, 'Mexico', FALSE), (3, 'Canada', TRUE), (4, 'Mexico', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM clinics WHERE country IN ('Canada', 'Mexico') AND offers_mental_health = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2010년에 가장 많은 위성을 발사한 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, country VARCHAR(255), launch_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS launched_satellites FROM satellites WHERE EXTRACT(YEAR FROM launch_date) = 2010 GROUP BY country ORDER BY launched_satellites DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 우주에서 가장 오랜 시간을 보낸 인도 출신 우주비행사의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Astronauts (astronaut_name VARCHAR(255), astronaut_country VARCHAR(255), total_time_in_space INT); INSERT INTO Astronauts (astronaut_name, astronaut_country, total_time_in_space) VALUES ('Rakesh Sharma', 'India', 190), ('Kalpana Chawla', 'India', 371), ('Sunita Williams', 'India', 534);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT astronaut_name FROM Astronauts WHERE astronaut_country = 'India' ORDER BY total_time_in_space DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 화석 연료 차량의 총 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Fossil_Fuel_Vehicles (Id INT, Vehicle VARCHAR(50), CO2_Emission DECIMAL(5,2), Country VARCHAR(50)); INSERT INTO Fossil_Fuel_Vehicles (Id, Vehicle, CO2_Emission, Country) VALUES (1, 'Toyota Camry', 235.0, 'Canada'), (2, 'Ford F-150', 390.0, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CO2_Emission) FROM Fossil_Fuel_Vehicles WHERE Country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 태평양 해저의 평균 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ocean_floor_depth (location VARCHAR(255), depth FLOAT); INSERT INTO ocean_floor_depth (location, depth) VALUES ('Mariana Trench', 10994), ('Pacific Ocean Floor', 4280);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) FROM ocean_floor_depth WHERE location = 'Pacific Ocean Floor';"
    },
    {
        "instruction": "입력 텍스트: \"activities\" 테이블에서 \"activity_type\"이 'water_sports'이고 \"participant_count\"가 5 미만인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE activities (activity_id INT, activity_type VARCHAR(20), participant_count INT, PRIMARY KEY (activity_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM activities WHERE activity_type = 'water_sports' AND participant_count < 5;"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 판매된 비건 화장품 제품의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales_data (id INT, product VARCHAR(255), vegan BOOLEAN, region VARCHAR(255), revenue INT); INSERT INTO sales_data (id, product, vegan, region, revenue) VALUES (1, 'Eyeshadow', true, 'France', 500), (2, 'Blush', false, 'Germany', 300), (3, 'Highlighter', true, 'Italy', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM sales_data WHERE vegan = true AND region = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기와 2분기에 새로 등록한 고객 수를 집합 연산을 사용하여 두 기간을 비교하여 확인하세요.\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, registration_date DATE); INSERT INTO customers (customer_id, registration_date) VALUES (1, '2022-01-05'), (2, '2022-02-10'), (3, '2022-03-25'), (4, '2022-04-15'), (5, '2022-05-08'), (6, '2022-06-22');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM customers WHERE registration_date BETWEEN '2022-01-01' AND '2022-03-31' INTERSECT SELECT COUNT(*) FROM customers WHERE registration_date BETWEEN '2022-04-01' AND '2022-06-30';"
    },
    {
        "instruction": "입력 텍스트: 아시아 국가들의 모든 우주 기관의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE space_agencies_2 (agency VARCHAR(50), country VARCHAR(50), launches INTEGER); INSERT INTO space_agencies_2 (agency, country, launches) VALUES ('NASA', 'USA', 228), ('Soviet Union', 'Russia', 182), ('ESA', 'Europe', 105), ('ISRO', 'India', 105), ('CNSA', 'China', 64), ('JAXA', 'Japan', 34);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT agency FROM space_agencies_2 WHERE country IN ('India', 'China', 'Japan');"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 예산 내에서 제시간에 완료된 여성 주도 농업 프로젝트의 성공률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE projects (id INT, name VARCHAR(50), leader_gender VARCHAR(50), budget INT, completion_date DATE, planned_completion_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT leader_gender, 100.0 * AVG(CASE WHEN budget = actual_spent AND completion_date <= planned_completion_date THEN 1 ELSE 0 END) as success_rate FROM (SELECT id, leader_gender, budget, completion_date, planned_completion_date, SUM(cost) as actual_spent FROM projects WHERE leader_gender = 'Female' AND date(completion_date) >= date('now','-5 years') GROUP BY id) subquery GROUP BY leader_gender;"
    },
    {
        "instruction": "입력 텍스트: 각 사이즈 카테고리별로 제품을 구매한 고유 고객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, customer_id INT); CREATE TABLE products (product_id INT PRIMARY KEY, size VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT size, COUNT(DISTINCT customer_id) FROM orders o INNER JOIN products p ON o.product_id = p.product_id GROUP BY size;"
    },
    {
        "instruction": "입력 텍스트: 각 숙소 유형별로 숙소를 제공받은 학생의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Students (student_id INT, department VARCHAR(255)); CREATE TABLE Accommodations (accommodation_id INT, student_id INT, accommodation_type VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT accommodation_type, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Students)) as percentage FROM Accommodations GROUP BY accommodation_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 디지털 박물관 체험으로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DigitalExperiences (experience_id INT, date DATE, revenue DECIMAL(10, 2)); INSERT INTO DigitalExperiences (experience_id, date, revenue) VALUES (1, '2022-02-10', 50.00), (2, '2022-02-11', 75.00), (3, '2022-02-12', 100.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM DigitalExperiences WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 모든 의류 카테고리의 평균 생산 비용보다 높은 생산 비용을 가진 의류 카테고리를 보여주세요.\n\nDDL statements:\nCREATE TABLE GARMENTS (garment_id INT, category VARCHAR(20), production_cost FLOAT); INSERT INTO GARMENTS VALUES (1, 'T-Shirts', 10), (2, 'Pants', 15), (3, 'Jackets', 20), (4, 'Dresses', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, production_cost FROM GARMENTS WHERE production_cost > (SELECT AVG(production_cost) FROM GARMENTS);"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 지역의 커뮤니티 참여 프로그램에 할당된 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE CommunityEngagement (Location VARCHAR(50), Budget DECIMAL(10,2)); INSERT INTO CommunityEngagement (Location, Budget) VALUES ('Oceania', 400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Budget) FROM CommunityEngagement WHERE Location = 'Oceania';"
    },
    {
        "instruction": "입력 텍스트: recycling_rates' 테이블에서 'North' 지역을 제외한 플라스틱과 금속 재료의 모든 재활용 비율을 나열하세요.\n\nDDL statements:\nCREATE TABLE recycling_rates (material VARCHAR(10), region VARCHAR(5), rate DECIMAL(3,2)); INSERT INTO recycling_rates (material, region, rate) VALUES ('plastic', 'North', 0.35), ('plastic', 'South', 0.45), ('metal', 'North', 0.65), ('metal', 'South', 0.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material, rate FROM recycling_rates WHERE material IN ('plastic', 'metal') AND region != 'North';"
    },
    {
        "instruction": "입력 텍스트: 모든 화성 탐사 임무의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE mars_missions (mission VARCHAR(50), year INTEGER, status VARCHAR(50)); INSERT INTO mars_missions (mission, year, status) VALUES ('Mars Pathfinder', 1997, 'Completed'), ('Mars Global Surveyor', 1997, 'Completed'), ('Nozomi', 1998, 'Failed'), ('Mars Climate Orbiter', 1999, 'Failed'), ('Mars Polar Lander', 1999, 'Failed'), ('Mars Odyssey', 2001, 'Operational'), ('Mars Express', 2003, 'Operational'), ('Beagle 2', 2003, 'Failed'), ('Mars Reconnaissance Orbiter', 2006, 'Operational'), ('Phoenix', 2008, 'Completed'), ('Mars Science Laboratory', 2012, 'Operational'), ('Mars Atmosphere and Volatile Evolution', 2013, 'Operational'), ('MAVEN', 2014, 'Operational'), ('ExoMars Trace Gas Orbiter', 2016, 'Operational'), ('InSight', 2018, 'Operational'), ('Hope Mars Mission', 2021, 'Operational'), ('Tianwen-1', 2021, 'Operational');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission FROM mars_missions;"
    },
    {
        "instruction": "입력 텍스트: artifact_analysis' 테이블에서 어떤 유물도 분석한 적이 없는 모든 고고학자의 이름을 가져오세요.\n\nDDL statements:\nCREATE TABLE archaeologists (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), country VARCHAR(50)); CREATE TABLE artifact_analysis (id INT, archaeologist_id INT, artifact_id INT, analysis_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT archaeologists.name FROM archaeologists LEFT JOIN artifact_analysis ON archaeologists.id = artifact_analysis.archaeologist_id WHERE artifact_analysis.archaeologist_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 각 플랫폼별 평균 게임 리뷰 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE GameReviews (GameID INT, GameName TEXT, Platform TEXT, ReviewScore INT); INSERT INTO GameReviews (GameID, GameName, Platform, ReviewScore) VALUES (1, 'Game A', 'PC', 80), (2, 'Game B', 'Console', 85), (3, 'Game C', 'PC', 70), (4, 'Game D', 'Console', 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Platform, AVG(ReviewScore) AS AvgReviewScore FROM GameReviews GROUP BY Platform;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후에 발매된 록 장르의 노래 중 가장 짧은 길이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE songs (id INT, title VARCHAR(255), length INT, artist_id INT); INSERT INTO songs (id, title, length, artist_id) VALUES (1, 'Song 1', 150, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(length) FROM songs WHERE genre = 'Rock' AND YEAR(id) >= 2010;"
    },
    {
        "instruction": "입력 텍스트: 인도에 위치한 각 공장의 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE factories (id INT, name VARCHAR(255), country VARCHAR(255), number_of_employees INT); INSERT INTO factories (id, name, country, number_of_employees) VALUES (1, 'Eco-friendly Goods Inc', 'India', 100); INSERT INTO factories (id, name, country, number_of_employees) VALUES (2, 'Green Energy Inc', 'India', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, number_of_employees, COUNT(*) as number_of_factories FROM factories GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2021-04-01'과 '2021-04-15' 사이에 입고되었으며 아직 출고되지 않은 '창고 D'에 보관된 팔레트 수를 구하시오.\n\nDDL statements:\nCREATE TABLE pallets (pallet_id INT, warehouse_id INT, received_date DATE, shipped_date DATE, num_pallets INT); INSERT INTO pallets (pallet_id, warehouse_id, received_date, shipped_date, num_pallets) VALUES (1, 1, '2021-03-25', '2021-03-28', 10), (2, 1, '2021-04-03', NULL, 15), (3, 2, '2021-04-05', '2021-04-07', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM pallets WHERE warehouse_id = 4 AND received_date BETWEEN '2021-04-01' AND '2021-04-15' AND shipped_date IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 출처에서 온 재료를 포함하는 메뉴 아이템은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE MenuItems (menu_item_id INT, menu_item_name VARCHAR(50), sustainable_source BOOLEAN); INSERT INTO MenuItems (menu_item_id, menu_item_name, sustainable_source) VALUES (1, 'Grilled Chicken Sandwich', TRUE), (2, 'French Fries', FALSE), (3, 'Grilled Salmon Salad', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as num_sustainable_items FROM MenuItems WHERE sustainable_source = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2020년 시애틀의 각 지구별 교통사고 총 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE traffic_accidents (id INT, district VARCHAR(255), accident_type VARCHAR(255), reported_date DATE); INSERT INTO traffic_accidents (id, district, accident_type, reported_date) VALUES (1, 'Downtown', 'Collision', '2020-01-01'); INSERT INTO traffic_accidents (id, district, accident_type, reported_date) VALUES (2, 'Capitol Hill', 'Hit and Run', '2020-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district, SUM(number_of_accidents) FROM (SELECT district, COUNT(*) as number_of_accidents FROM traffic_accidents WHERE district IN ('Downtown', 'Capitol Hill', 'Ballard', 'West Seattle', 'Queen Anne') AND reported_date >= '2020-01-01' AND reported_date < '2021-01-01' GROUP BY district) as accidents_by_district GROUP BY district;"
    },
    {
        "instruction": "입력 텍스트: 유산지역별 커뮤니티 참여 이벤트의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE community_engagement (id INT, event_name VARCHAR(255), category VARCHAR(255), country VARCHAR(255)); INSERT INTO community_engagement (id, event_name, category, country) VALUES (1, 'Dance Performance', 'Architecture', 'Greece'), (2, 'Music Concert', 'Architecture', 'Italy'); CREATE VIEW community_engagement_by_category AS SELECT category, COUNT(*) as event_count FROM community_engagement GROUP BY category;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, event_count FROM community_engagement_by_category;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 공유 차량의 최소 요금은 얼마입니까?\n\nDDL statements:\nCREATE TABLE shared_rides_tokyo (ride_id INT, user_id INT, start_time TIMESTAMP, end_time TIMESTAMP, fare FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(fare) FROM shared_rides_tokyo;"
    },
    {
        "instruction": "입력 텍스트: 동물 실험을 하지 않는 제품에 5점 평가를 준 소비자의 이름을 나열합니다.\n\nDDL statements:\nCREATE TABLE consumer_preference (id INT PRIMARY KEY, consumer_id INT, product_id INT, preference_score INT);CREATE TABLE consumer (id INT PRIMARY KEY, name VARCHAR(100), age INT, gender VARCHAR(100));CREATE TABLE product (id INT PRIMARY KEY, name VARCHAR(100), cruelty_free BOOLEAN);CREATE TABLE product_review (product_id INT, consumer_id INT, rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name FROM consumer c JOIN product_review pr ON c.id = pr.consumer_id JOIN product p ON pr.product_id = p.id WHERE pr.rating = 5 AND p.cruelty_free = FALSE;"
    },
    {
        "instruction": "입력 텍스트: 예술 및 인문학' 부서에 수여된 총 보조금 금액을 찾으세요.\n\nDDL statements:\nCREATE TABLE grants (id INT, department VARCHAR(20), amount FLOAT); INSERT INTO grants (id, department, amount) VALUES (1, 'Arts and Humanities', 50000.0), (2, 'Sciences', 75000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM grants WHERE department = 'Arts and Humanities';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 포용적 주택 정책을 가진 부동산의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE properties (property_id INT, neighborhood VARCHAR(255), inclusive_housing BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT neighborhood, COUNT(*) as num_inclusive_properties FROM properties WHERE inclusive_housing = TRUE GROUP BY neighborhood;"
    },
    {
        "instruction": "입력 텍스트: 50건 이상의 형사 사건을 처리한 변호사들의 고유 성씨와 해당 사건 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE criminal_cases (case_id INT, attorney_id INT, attorney_last_name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT attorney_last_name, COUNT(*) as case_count FROM criminal_cases GROUP BY attorney_last_name HAVING COUNT(*) > 50;"
    },
    {
        "instruction": "입력 텍스트: vessel_registry' 테이블에서 2010년 이전에 건조된 선박의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE vessel_registry (id INT, vessel_name VARCHAR(50), build_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vessel_registry WHERE YEAR(build_date) < 2010;"
    },
    {
        "instruction": "입력 텍스트: 유기농 주스의 최소 제공 크기는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Beverages (id INT, is_organic BOOLEAN, category VARCHAR(20), serving_size INT); INSERT INTO Beverages (id, is_organic, category, serving_size) VALUES (1, true, 'juice', 10), (2, false, 'juice', 15), (3, true, 'smoothie', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(serving_size) FROM Beverages WHERE is_organic = true AND category = 'juice';"
    },
    {
        "instruction": "입력 텍스트: 2021년 첫 분기의 계좌 유형별 총 거래 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE accounts (account_id INT, account_type VARCHAR(20), transaction_value DECIMAL(10,2)); INSERT INTO accounts (account_id, account_type, transaction_value) VALUES (1, 'Checking', 1500.00), (2, 'Savings', 2000.00), (3, 'Credit', 500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(transaction_value) as total_transaction_value, account_type FROM accounts WHERE transaction_date BETWEEN '2021-01-01' AND '2021-03-31' GROUP BY account_type;"
    },
    {
        "instruction": "입력 텍스트: 2016년부터 2019년 사이에 'Healthcare' 부문에서 체결된 단체 교섭 협약은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE CollectiveBargaining (AgreementID INT, Sector VARCHAR(20), SignDate DATE); INSERT INTO CollectiveBargaining (AgreementID, Sector, SignDate) VALUES (1, 'Healthcare', '2016-05-01'), (2, 'Healthcare', '2018-09-15'), (3, 'Education', '2017-03-25');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM CollectiveBargaining WHERE Sector = 'Healthcare' AND SignDate BETWEEN '2016-01-01' AND '2019-12-31';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 전체 공격 건수 중 성공한 공격의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE attack_outcomes(id INT, timestamp TIMESTAMP, success BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * SUM(success) / COUNT(*) as success_percentage FROM attack_outcomes WHERE timestamp >= NOW() - INTERVAL 3 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 교육 프로그램의 평균 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Community_Education (program VARCHAR(20), budget INT); INSERT INTO Community_Education (program, budget) VALUES ('Young_Conservationists', 9000), ('Eco_Rangers', 11000), ('Green_Neighbors', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM Community_Education;"
    },
    {
        "instruction": "입력 텍스트: 풍력 에너지 프로젝트의 이름과 용량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE RenewableEnergy (id INT, project_name VARCHAR(255), capacity FLOAT, technology VARCHAR(255), country VARCHAR(255)); INSERT INTO RenewableEnergy (id, project_name, capacity, technology, country) VALUES (1, 'Solar Project 1', 50.0, 'Solar', 'United States'); INSERT INTO RenewableEnergy (id, project_name, capacity, technology, country) VALUES (2, 'Wind Project 1', 100.0, 'Wind', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, capacity FROM RenewableEnergy WHERE technology = 'Wind';"
    },
    {
        "instruction": "입력 텍스트: 2025년 아프리카 국가들의 최대 매립지 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfill_capacity (country VARCHAR(50), year INT, capacity INT); INSERT INTO landfill_capacity (country, year, capacity) VALUES ('Nigeria', 2025, 12000), ('South Africa', 2025, 8000), ('Egypt', 2025, 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(capacity) FROM landfill_capacity WHERE year = 2025 AND country IN ('Nigeria', 'South Africa', 'Egypt', 'Algeria', 'Morocco');"
    },
    {
        "instruction": "입력 텍스트: 각 우주비행사마다 성공한 미션은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Astronauts (ID INT PRIMARY KEY, Name TEXT); CREATE TABLE Missions (ID INT PRIMARY KEY, Astronaut_ID INT, Name TEXT, Status TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.Name, COUNT(m.ID) as Successful_Missions FROM Astronauts a INNER JOIN Missions m ON a.ID = m.Astronaut_ID WHERE m.Status = 'Success' GROUP BY a.Name;"
    },
    {
        "instruction": "입력 텍스트: 가장 낮은 비용을 가진 우주선의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SpacecraftManufacturing (spacecraft_model VARCHAR(255), cost INT); INSERT INTO SpacecraftManufacturing (spacecraft_model, cost) VALUES ('Mars Exploration Rover', 800000), ('Mars Science Laboratory', 2400000), ('Mars Atmosphere and Volatile Evolution', 650000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT spacecraft_model FROM SpacecraftManufacturing ORDER BY cost ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 어떤 위치에서 주어진 해에 10회 이상 해양 생물 관찰이 있었으며, 관찰 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE MarineSpeciesObservations (observation_id INT, species VARCHAR(255), location VARCHAR(255), year INT); INSERT INTO MarineSpeciesObservations (observation_id, species, location, year) VALUES (1, 'Dolphin', 'Pacific Ocean', 2020); INSERT INTO MarineSpeciesObservations (observation_id, species, location, year) VALUES (2, 'Shark', 'Atlantic Ocean', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) FROM MarineSpeciesObservations GROUP BY location HAVING COUNT(*) > 10;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아' 지역에서 '1월'에 진행된 가상 투어의 평균 참여도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours_oceania (location TEXT, month TEXT, engagement INT); INSERT INTO virtual_tours_oceania (location, month, engagement) VALUES ('Sydney', 'January', 400), ('Melbourne', 'January', 500), ('Brisbane', 'January', 600), ('Auckland', 'January', 700), ('Perth', 'January', 800); CREATE TABLE locations_oceania (location TEXT, region TEXT); INSERT INTO locations_oceania (location, region) VALUES ('Sydney', 'Oceania'), ('Melbourne', 'Oceania'), ('Brisbane', 'Oceania'), ('Auckland', 'Oceania'), ('Perth', 'Oceania');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(engagement) FROM virtual_tours_oceania vt JOIN locations_oceania l ON vt.location = l.location WHERE l.region = 'Oceania' AND vt.month = 'January';"
    },
    {
        "instruction": "입력 텍스트: FutureAutomobiles'에서 실시한 안전 테스트의 총 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE SafetyTestingCounts (ID INT, Manufacturer VARCHAR(255), NumTests INT); INSERT INTO SafetyTestingCounts (ID, Manufacturer, NumTests) VALUES (1, 'Green Motors', 50), (2, 'FutureAutomobiles', 75), (3, 'Blue Cars', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(NumTests) FROM SafetyTestingCounts WHERE Manufacturer = 'FutureAutomobiles';"
    },
    {
        "instruction": "입력 텍스트: 인상주의 예술' 전시회에서 작품을 삭제하세요\n\nDDL statements:\nCREATE TABLE artworks (id INT, name VARCHAR(255), artist_id INT); CREATE TABLE exhibitions (id INT, name VARCHAR(255)); CREATE TABLE exhibition_artworks (exhibition_id INT, artwork_id INT); INSERT INTO artworks (id, name, artist_id) VALUES (1, 'The Persistence of Memory', 1); INSERT INTO exhibitions (id, name) VALUES (1, 'Impressionist Art'); INSERT INTO exhibition_artworks (exhibition_id, artwork_id) VALUES (1, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH artwork_to_delete AS (DELETE FROM exhibition_artworks WHERE exhibition_id = 1 AND artwork_id = 1) SELECT * FROM artwork_to_delete;"
    },
    {
        "instruction": "입력 텍스트: disaster_response' 데이터베이스에서 'food_security'와 'shelter' 프로젝트들이 어느 분야에 분포되어 있는지 섹터별로 파악하세요.\n\nDDL statements:\nCREATE TABLE projects (id INT, name VARCHAR(255), sector VARCHAR(255), program VARCHAR(255)); INSERT INTO projects (id, name, sector, program) VALUES (1, 'Project 1', 'Agriculture', 'food_security'), (2, 'Project 2', 'Health', 'food_security'), (3, 'Project 3', 'Construction', 'shelter'), (4, 'Project 4', 'Housing', 'shelter');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, COUNT(*) FROM projects WHERE program IN ('food_security', 'shelter') GROUP BY sector;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이전에 발매된 앨범들과 그들의 총 판매량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Albums (AlbumID INT, AlbumName VARCHAR(50), ReleaseYear INT, Sales INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AlbumName, ReleaseYear, SUM(Sales) as TotalSales FROM Albums WHERE ReleaseYear < 2000 GROUP BY AlbumName, ReleaseYear;"
    },
    {
        "instruction": "입력 텍스트: 1월에 메트로폴리탄 박물관의 평균 관람객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Attendance (VisitID int, VisitDate date, MuseumName varchar(100), Attendance int); INSERT INTO Attendance (VisitID, VisitDate, MuseumName, Attendance) VALUES (1, '2022-01-01', 'Metropolitan Museum', 5000), (2, '2022-02-01', 'Metropolitan Museum', 6000), (3, '2021-12-31', 'Metropolitan Museum', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Attendance) FROM Attendance WHERE MuseumName = 'Metropolitan Museum' AND MONTH(VisitDate) = 1;"
    },
    {
        "instruction": "입력 텍스트: 호주에서 환자의 치료가 시작된 가장 이른 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE therapy (id INT, patient_id INT, start_date DATE); INSERT INTO therapy (id, patient_id, start_date) VALUES (1, 1, '2022-01-01'), (2, 2, '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(start_date) FROM therapy WHERE patient_id IN (SELECT id FROM patients WHERE country = 'Australia');"
    },
    {
        "instruction": "입력 텍스트: autonomous_vehicles'라는 이름의 테이블을 생성합니다\n\nDDL statements:\nCREATE TABLE autonomous_vehicles (id INT PRIMARY KEY, manufacturer VARCHAR(255), model VARCHAR(255), year INT, type VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE autonomous_vehicles (id INT PRIMARY KEY, manufacturer VARCHAR(255), model VARCHAR(255), year INT, type VARCHAR(255));"
    },
    {
        "instruction": "입력 텍스트: reporters' 테이블에서 'Chicago' 출신 기자들의 최소 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE reporters (id INT, city VARCHAR(255), salary DECIMAL(10,2)); INSERT INTO reporters (id, city, salary) VALUES (1, 'Chicago', 80000.00), (2, 'Houston', 70000.00), (3, 'Chicago', 75000.00)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(salary) FROM reporters WHERE city = 'Chicago';"
    },
    {
        "instruction": "입력 텍스트: 광업에서 가장 많은 양과 가장 적은 양의 물을 사용하는 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE MiningWaterUsage (Country VARCHAR(50), WaterUsage FLOAT); INSERT INTO MiningWaterUsage(Country, WaterUsage) VALUES ('Canada', 12000000), ('US', 15000000), ('Chile', 8000000), ('Australia', 10000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, WaterUsage FROM MiningWaterUsage ORDER BY WaterUsage DESC LIMIT 1; SELECT Country, WaterUsage FROM MiningWaterUsage ORDER BY WaterUsage ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 재료 주문의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ingredients (ingredient_id INT, ingredient_name VARCHAR(50), is_sustainable BOOLEAN, quantity INT); INSERT INTO ingredients (ingredient_id, ingredient_name, is_sustainable, quantity) VALUES (1, 'Quinoa', TRUE, 50), (2, 'Tomatoes', FALSE, 200), (3, 'Chickpeas', TRUE, 100), (4, 'Beef', FALSE, 30), (5, 'Vegan Cheese', TRUE, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM ingredients WHERE is_sustainable = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 장애 지원 프로그램에 할당된 평균 예산이 국가별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE DisabilitySupportPrograms (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(50), CountryID INT, Budget DECIMAL(10,2), FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.CountryName, AVG(dsp.Budget) as AvgBudget FROM Countries c JOIN DisabilitySupportPrograms dsp ON c.CountryID = dsp.CountryID GROUP BY c.CountryName;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 건설된 희토류 생산 시설이 있는 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE facility (id INT, country TEXT, build_date DATE); INSERT INTO facility (id, country, build_date) VALUES (1, 'China', '2005-01-01'), (2, 'Australia', '2012-05-03'), (3, 'United States', '2008-12-31'), (4, 'India', '2015-07-07');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM facility WHERE build_date < '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2021년 6월의 모든 장비 유지보수 기록을 나열합니다.\n\nDDL statements:\nCREATE TABLE equipment_maintenance (equipment_id int, maintenance_date date, maintenance_type varchar(255), maintenance_cost int);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM equipment_maintenance WHERE MONTH(maintenance_date) = 6 AND YEAR(maintenance_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 2022년 5월 한 달 동안 독특한 참가자 수를 기준으로 가장 인기 있는 운동 활동 상위 5가지를 확인하세요.\n\nDDL statements:\nCREATE SCHEMA fitness; CREATE TABLE participation (member_id INT, activity VARCHAR(20), participation_date DATE); INSERT INTO participation (member_id, activity, participation_date) VALUES (1, 'Running', '2022-05-01'), (1, 'Cycling', '2022-05-02'), (2, 'Swimming', '2022-05-03'), (3, 'Yoga', '2022-05-04'), (1, 'Running', '2022-05-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT activity, COUNT(DISTINCT member_id) AS participants FROM participation WHERE participation_date >= '2022-05-01' AND participation_date < '2022-06-01' GROUP BY activity ORDER BY participants DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 기술' 산업에 속한 각 회사별로 고용된 근로자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (company_id INT, industry VARCHAR(20));CREATE TABLE worker_salaries (worker_id INT, company_id INT, salary INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT companies.industry, COUNT(worker_salaries.company_id) FROM worker_salaries INNER JOIN companies ON worker_salaries.company_id = companies.company_id WHERE companies.industry = 'technology' GROUP BY companies.industry;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 월별로 발생한 직장 내 최대 부상 건수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE injuries (id INT, injury_date DATE, injury_count INT); INSERT INTO injuries (id, injury_date, injury_count) VALUES (1, '2021-01-01', 20), (2, '2021-01-01', 30), (3, '2021-02-01', 10), (4, '2021-03-01', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM injury_date) as month, MAX(injury_count) as max_injuries FROM injuries WHERE YEAR(injury_date) = 2021 GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 기억의 지속'은 언제 만들어졌나요?\n\nDDL statements:\nCREATE TABLE Dali (artwork VARCHAR(50), year INT); INSERT INTO Dali (artwork, year) VALUES ('The Persistence of Memory', 1931), ('Swans Reflecting Elephants', 1937);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year FROM Dali WHERE artwork = 'The Persistence of Memory';"
    },
    {
        "instruction": "입력 텍스트: 인종과 민족별로 수감된 사람들의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE incarcerated (id INT, race VARCHAR(20), ethnicity VARCHAR(20)); INSERT INTO incarcerated (id, race, ethnicity) VALUES (1, 'White', 'Non-Hispanic'); INSERT INTO incarcerated (id, race, ethnicity) VALUES (2, 'Black', 'Hispanic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT race, ethnicity, COUNT(*) AS count FROM incarcerated GROUP BY race, ethnicity;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 재생 가능 에너지 프로젝트의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT, name TEXT, location TEXT, capacity INT);   CREATE TABLE states (id INT, name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name, SUM(p.capacity) FROM projects p JOIN states s ON p.location = s.name GROUP BY s.name;"
    },
    {
        "instruction": "입력 텍스트: 2021년 지중해에서 잡힌 물고기는 총 몇 마리인가요?\n\nDDL statements:\nCREATE TABLE FishCaught (year INT, sea VARCHAR(50), quantity INT); INSERT INTO FishCaught (year, sea, quantity) VALUES (2021, 'Mediterranean Sea', 2000), (2021, 'Mediterranean Sea', 2500), (2021, 'Mediterranean Sea', 3000), (2020, 'Mediterranean Sea', 2000), (2020, 'Mediterranean Sea', 2500), (2020, 'Mediterranean Sea', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) as total_quantity FROM FishCaught WHERE sea = 'Mediterranean Sea' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 2022년 5월에 사용된 모든 고유 장치를 나열하십시오.\n\nDDL statements:\nCREATE SCHEMA devices; CREATE TABLE unique_devices (user_id INT, device VARCHAR(50), usage_date DATE); INSERT INTO unique_devices VALUES (1, 'Heart Rate Monitor', '2022-05-01'), (2, 'Smartwatch', '2022-05-02'), (3, 'Bike Sensor', '2022-05-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT device FROM devices.unique_devices WHERE usage_date >= '2022-05-01' AND usage_date <= '2022-05-31';"
    },
    {
        "instruction": "입력 텍스트: \"water_sources\" 테이블에서 모든 담수원을 보여주는 \"freshwater_sources\"라는 이름의 뷰를 생성하세요.\n\nDDL statements:\nCREATE TABLE water_sources (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW freshwater_sources AS SELECT * FROM water_sources WHERE type = 'Freshwater Lake' OR type = 'Freshwater River' OR type = 'Freshwater Reservoir';"
    },
    {
        "instruction": "입력 텍스트: 연중 각 분기마다 기부한 새로운 기부자는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(255)); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_PART('quarter', DonationDate) AS Quarter, COUNT(DISTINCT DonorID) AS NewDonors FROM Donations GROUP BY Quarter;"
    },
    {
        "instruction": "입력 텍스트: safety_incidents' 테이블에서 3년 이상 된 안전 위반 기록을 모두 삭제하세요.\n\nDDL statements:\nCREATE TABLE safety_incidents (id INT PRIMARY KEY, incident_date DATE, incident_type VARCHAR(255), description TEXT, resolved BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM safety_incidents WHERE incident_date < DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 문화 유산지와 그에 해당하는 언어를 확인하세요.\n\nDDL statements:\nCREATE TABLE HeritageSites (ID INT, SiteName VARCHAR(30), Country VARCHAR(20), Language VARCHAR(20)); INSERT INTO HeritageSites VALUES (1, 'Head-Smashed-In Buffalo Jump', 'Canada', 'Blackfoot'); CREATE TABLE Languages (LanguageID INT, Language VARCHAR(20), Country VARCHAR(20)); INSERT INTO Languages VALUES (1, 'Blackfoot', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.SiteName, l.Language FROM HeritageSites h JOIN Languages l ON h.Language = l.Language;"
    },
    {
        "instruction": "입력 텍스트: 각 요리 종류별로 전체 요리 수와 채식 요리 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE dishes (id INT, name VARCHAR(255), cuisine VARCHAR(255), is_vegetarian BOOLEAN); INSERT INTO dishes (id, name, cuisine, is_vegetarian) VALUES (1, 'Chicken Curry', 'Indian', false), (2, 'Vegan Tacos', 'Mexican', true), (3, 'Beef Stew', 'Irish', false), (4, 'Garlic Bread', 'Italian', true), (5, 'Tuna Salad', 'French', false), (6, 'Vegetable Lasagna', 'Italian', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, COUNT(*) as total_dishes, SUM(is_vegetarian) as vegetarian_dishes FROM dishes GROUP BY cuisine;"
    },
    {
        "instruction": "입력 텍스트: 공급업체별 군사 장비 판매 내역을 공급업체 이름과 국가를 포함하여 나열하세요.\n\nDDL statements:\nCREATE TABLE Suppliers (Supplier_ID INT, Supplier_Name VARCHAR(50), Country VARCHAR(50)); INSERT INTO Suppliers (Supplier_ID, Supplier_Name, Country) VALUES (1, 'Hanwha Systems', 'South Korea'), (2, 'Rheinmetall', 'Germany'), (3, 'BAE Systems', 'United Kingdom'); CREATE TABLE Equipment (Equipment_ID INT, Equipment_Name VARCHAR(50), Supplier_ID INT, Unit_Price DECIMAL(10,2)); INSERT INTO Equipment (Equipment_ID, Equipment_Name, Supplier_ID, Unit_Price) VALUES (1, 'K9 Thunder', 1, 8500000), (2, 'Marder IFV', 2, 4500000), (3, 'CV90 Infantry Fighting Vehicle', 3, 5000000); CREATE TABLE Sales (Sale_ID INT, Equipment_ID INT, Quantity INT, Sale_Date DATE); INSERT INTO Sales (Sale_ID, Equipment_ID, Quantity, Sale_Date) VALUES (1, 1, 25, '2020-01-01'), (2, 2, 50, '2019-12-15'), (3, 3, 30, '2020-03-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT S.Supplier_Name, C.Country, E.Equipment_Name, SUM(S.Quantity) AS 'Total Quantity Sold' FROM Sales S JOIN Equipment E ON S.Equipment_ID = E.Equipment_ID JOIN Suppliers S ON E.Supplier_ID = S.Supplier_ID JOIN Countries C ON S.Country = C.Country_Name GROUP BY S.Supplier_Name, C.Country, E.Equipment_Name;"
    },
    {
        "instruction": "입력 텍스트: fabrics' 테이블에서 국가가 'Bangladesh'이고 재료가 'cotton'인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE fabrics (id INT PRIMARY KEY, material VARCHAR(255), country VARCHAR(255), quantity INT); INSERT INTO fabrics (id, material, country, quantity) VALUES (1, 'cotton', 'Bangladesh', 500), (2, 'silk', 'China', 300), (3, 'wool', 'Australia', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM fabrics WHERE country = 'Bangladesh' AND material = 'cotton';"
    },
    {
        "instruction": "입력 텍스트: 날짜별로 상위 25%에 해당하는 의료 상태와 그 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE medical (id INT, astronaut_id INT, medical_condition VARCHAR(50), medical_date DATE); INSERT INTO medical (id, astronaut_id, medical_condition, medical_date) VALUES (1, 1, 'Ear Infection', '1969-03-14'); INSERT INTO medical (id, astronaut_id, medical_condition, medical_date) VALUES (2, 2, 'Space Adaptation Syndrome', '1969-07-15'); INSERT INTO medical (id, astronaut_id, medical_condition, medical_date) VALUES (3, 3, 'Motion Sickness', '1963-06-16'); INSERT INTO medical (id, astronaut_id, medical_condition, medical_date) VALUES (4, 4, 'Migraine', '2022-09-25'); INSERT INTO medical (id, astronaut_id, medical_condition, medical_date) VALUES (5, 5, 'Nausea', '2022-11-12');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT medical_condition, medical_date FROM (SELECT medical_condition, medical_date, NTILE(4) OVER (ORDER BY medical_date) as medical_group FROM medical) AS subquery WHERE medical_group = 4;"
    },
    {
        "instruction": "입력 텍스트: 모든 지역에서 판매된 '피자' 아이템의 총 판매량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE locations (location_id INT, location_name VARCHAR(50)); INSERT INTO locations (location_id, location_name) VALUES (1, 'New York'), (2, 'Los Angeles'); CREATE TABLE menu_items (item_id INT, item_name VARCHAR(50), quantity_sold INT); INSERT INTO menu_items (item_id, item_name, quantity_sold) VALUES (1, 'Pizza', 250), (2, 'Burger', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity_sold) FROM menu_items WHERE item_name = 'Pizza';"
    },
    {
        "instruction": "입력 텍스트: 2020년 이하에 발매되고 3분 이상인 노래들의 음악 스트리밍 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Songs (song_id INT, song_name TEXT, release_year INT, duration INT); INSERT INTO Songs (song_id, song_name, release_year, duration) VALUES (1, 'Shape of You', 2017, 205), (2, 'Bohemian Rhapsody', 1975, 351), (3, 'Watermelon Sugar', 2020, 198);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(s.duration * s.streaming_revenue) FROM Songs s WHERE s.release_year <= 2020 AND s.duration > 180;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 'ABC123' 시스템에서 감지된 위협 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE threat_intel (id INT, system_id VARCHAR(10), threat_type VARCHAR(50), detected_date DATE); INSERT INTO threat_intel (id, system_id, threat_type, detected_date) VALUES (1, 'ABC123', 'Malware', '2022-01-01'), (2, 'ABC123', 'Phishing', '2022-01-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT threat_type FROM threat_intel WHERE system_id = 'ABC123' AND detected_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 서스펜션' 다리의 가장 최근 점검 날짜는 언제였나요?\n\nDDL statements:\nCREATE TABLE Bridges (id INT, name VARCHAR(50), inspection_date DATE); INSERT INTO Bridges (id, name, inspection_date) VALUES (1, 'Golden Gate', '2020-05-01'), (2, 'Brooklyn', '2019-12-20'), (4, 'Suspension', '2020-11-15'), (3, 'Tower', '2021-03-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(inspection_date) FROM Bridges WHERE name = 'Suspension';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 재료가 몇 번 사용되었나요?\n\nDDL statements:\nCREATE TABLE ingredient (ingredient_id INT, ingredient_name TEXT); INSERT INTO ingredient (ingredient_id, ingredient_name) VALUES (1, 'Tomato'), (2, 'Cheese'); CREATE TABLE recipe (recipe_id INT, dish_id INT, ingredient_id INT, quantity INT, use_date DATE); INSERT INTO recipe (recipe_id, dish_id, ingredient_id, quantity, use_date) VALUES (1, 1, 1, 2, '2022-01-01'), (2, 2, 2, 1, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.ingredient_name, COUNT(r.recipe_id) as use_count FROM ingredient i JOIN recipe r ON i.ingredient_id = r.ingredient_id WHERE r.use_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY i.ingredient_name;"
    },
    {
        "instruction": "입력 텍스트: 2022년 대서양에서 열대어 종의 평균 용존 산소 농도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE atlantic_ocean_fish (species VARCHAR(50), region VARCHAR(50), dissolved_oxygen FLOAT, year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(dissolved_oxygen) FROM atlantic_ocean_fish WHERE region = 'Atlantic Ocean' AND species LIKE 'tropical%' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 데일리 뉴스' 웹사이트에서 지난 달 '문화' 섹션에 발행된 기사는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(255), section VARCHAR(50), publication_date DATE); INSERT INTO articles (id, title, section, publication_date) VALUES (1, 'Article1', 'Culture', '2022-04-05'), (2, 'Article2', 'Sports', '2022-03-10'), (3, 'Article3', 'Culture', '2022-03-25');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM articles WHERE section = 'Culture' AND publication_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: PollutionIncidents' 테이블에서 가장 높은 오염 수준을 가진 해양 생물 종은 무엇인가요?\n\nDDL statements:\nCREATE TABLE PollutionIncidents (IncidentID INT, Species VARCHAR(50), PollutionLevel INT); INSERT INTO PollutionIncidents (IncidentID, Species, PollutionLevel) VALUES (1, 'Dolphin', 5), (2, 'Turtle', 7), (3, 'Shark', 6), (4, 'Whale', 8), (5, 'Jellyfish', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Species, PollutionLevel FROM PollutionIncidents WHERE PollutionLevel = (SELECT MAX(PollutionLevel) FROM PollutionIncidents);"
    },
    {
        "instruction": "입력 텍스트: 전통 예술품이 종류와 작가별로 어떻게 분포되어 있나요?\n\nDDL statements:\nCREATE TABLE ArtDistribution (id INT, artist VARCHAR(255), type VARCHAR(255), price FLOAT); INSERT INTO ArtDistribution (id, artist, type, price) VALUES (1, 'Picasso', 'Painting', 1000), (2, 'Michelangelo', 'Sculpture', 1500), (3, 'Van Gogh', 'Painting', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, artist, COUNT(*) FROM ArtDistribution GROUP BY type, artist;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이전에 시작된 모든 사회적 책임 대출 프로그램을 나열하시오.\n\nDDL statements:\nCREATE TABLE lending_initiatives (initiative_id INT, initiative_name VARCHAR(50), launch_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name FROM lending_initiatives WHERE YEAR(launch_date) < 2015;"
    },
    {
        "instruction": "입력 텍스트: Research' 스키마의 'Species' 테이블에 있는 해양 생물 종의 이름과 평균 인구보다 많은 인구를 가진 종을 표시합니다.\n\nDDL statements:\nCREATE TABLE Research.Species ( id INT, species_name VARCHAR(255), population INT );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species_name, population FROM Research.Species WHERE population > (SELECT AVG(population) FROM Research.Species);"
    },
    {
        "instruction": "입력 텍스트: 공급업체 윤리' 테이블에 레코드를 삽입하세요\n\nDDL statements:\nCREATE TABLE supplier_ethics (supplier_id INT, country VARCHAR(50), labor_practices VARCHAR(50), sustainability_score INT); INSERT INTO supplier_ethics (supplier_id, country, labor_practices, sustainability_score) VALUES (1, 'India', 'Good', 80); INSERT INTO supplier_ethics (supplier_id, country, labor_practices, sustainability_score) VALUES (2, 'Brazil', 'Fair', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO supplier_ethics (supplier_id, country, labor_practices, sustainability_score) VALUES (1, 'India', 'Good', 80); INSERT INTO supplier_ethics (supplier_id, country, labor_practices, sustainability_score) VALUES (2, 'Brazil', 'Fair', 70);"
    },
    {
        "instruction": "입력 텍스트: Visual Arts' 테이블에서 'New York' 주의 참가자 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE visual_arts (art_id INT, participant_name VARCHAR(50), state VARCHAR(50)); INSERT INTO visual_arts (art_id, participant_name, state) VALUES (1, 'Harper', 'New York'), (2, 'Isla', 'Florida'), (3, 'Jasmine', 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM visual_arts WHERE state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 가장 깊은 해양보호구역 상위 3곳을 나열하세요.\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name VARCHAR(255), location VARCHAR(255), depth FLOAT); INSERT INTO marine_protected_areas (name, location, depth) VALUES ('Mariana Trench Marine National Monument', 'USA', 10994.0), ('Sargasso Sea', 'International Waters', 7000.0), ('Galapagos Marine Reserve', 'Ecuador', 200.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location, depth FROM (SELECT name, location, depth, ROW_NUMBER() OVER (ORDER BY depth DESC) as rn FROM marine_protected_areas) t WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 아시아의 전통 예술품과 공예품의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ArtsAndCrafts (id INT, location VARCHAR(255), type VARCHAR(255), price DECIMAL(10,2)); INSERT INTO ArtsAndCrafts (id, location, type, price) VALUES (1, 'Asia', 'Painting', 600), (2, 'Africa', 'Sculpture', 900), (3, 'Asia', 'Pottery', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM ArtsAndCrafts WHERE location = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 'Sustainable T-Shirt'를 가장 많이 구매한 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE CustomerOrders (id INT, customer_id INT, product VARCHAR(20), order_date DATE); INSERT INTO CustomerOrders (id, customer_id, product, order_date) VALUES (1, 1, 'Sustainable T-Shirt', '2022-05-03'), (2, 2, 'Regular Denim', '2022-05-05'), (3, 1, 'Sustainable T-Shirt', '2022-04-30'), (4, 3, 'Sustainable T-Shirt', '2022-03-28'), (5, 1, 'Sustainable T-Shirt', '2022-02-15'), (6, 4, 'Sustainable T-Shirt', '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customer_id, COUNT(*) as num_purchases FROM CustomerOrders WHERE product = 'Sustainable T-Shirt' AND order_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY customer_id ORDER BY num_purchases DESC;"
    },
    {
        "instruction": "입력 텍스트: AircraftSquadrons' 테이블에서 각 비행대대별 총 항공기 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE AircraftSquadrons (id INT, squadron VARCHAR(255), aircraft_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT squadron, SUM(aircraft_count) as total_aircraft FROM AircraftSquadrons GROUP BY squadron;"
    },
    {
        "instruction": "입력 텍스트: 현재 연도에 아시아 시장에서 유기농 헤어케어 제품의 총 수익을 찾으세요.\n\nDDL statements:\nCREATE TABLE sales(product_id INT, sale_date DATE, revenue DECIMAL(10,2), country VARCHAR(50)); INSERT INTO sales VALUES (11, '2021-06-15', 50.00, 'CN'); INSERT INTO sales VALUES (12, '2021-07-16', 60.00, 'JP'); CREATE TABLE products(product_id INT, product_name VARCHAR(50), is_organic BOOLEAN, product_category VARCHAR(50)); INSERT INTO products VALUES (11, 'Rosemary Shampoo', TRUE, 'Haircare'); INSERT INTO products VALUES (12, 'Lavender Conditioner', TRUE, 'Haircare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales.revenue) as total_revenue FROM sales JOIN products ON sales.product_id = products.product_id WHERE products.is_organic = TRUE AND sales.country = 'Asia' AND YEAR(sales.sale_date) = YEAR(CURDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 제품 카테고리별 비건 제품의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, product_category TEXT, is_vegan BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.product_category, AVG(products.is_vegan) * 100.0 as percentage_vegan FROM products GROUP BY products.product_category;"
    },
    {
        "instruction": "입력 텍스트: 어떤 친환경 소재의 생산 비용이 가장 높은가요?\n\nDDL statements:\nCREATE TABLE materials(material VARCHAR(20), production_cost DECIMAL(5,2)); INSERT INTO materials(material, production_cost) VALUES('organic cotton', 5.20), ('recycled polyester', 4.50), ('hemp', 6.10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material, production_cost FROM materials ORDER BY production_cost DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: \"SchoolC\" 데이터베이스에서 최근 6개월 동안 건강 검진을 받지 않은 학생들의 정신 건강 상태를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE SchoolC (student_id INT, last_checkup_date DATE, mental_health_status VARCHAR(255)); INSERT INTO SchoolC (student_id, last_checkup_date, mental_health_status) VALUES (1, '2022-01-01', 'Good'), (2, NULL, 'Fair'), (3, '2021-12-31', 'Excellent'), (4, '2022-02-15', 'Poor'), (5, '2021-05-15', 'Good');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE SchoolC SET mental_health_status = 'Not Checked' WHERE last_checkup_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 15일 이후에 \"social_media\" 스키마에 게시된 \"fitness\"와 관련된 게시물 중에서 가장 많은 좋아요 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE posts (id INT, content TEXT, likes INT, shares INT, created_at DATETIME); INSERT INTO posts (id, content, likes, shares, created_at) VALUES (1, 'Fitness goal: 100 push-ups a day!', 500, 200, '2022-01-01 10:00:00'), (2, 'Just finished a 5k run!', 800, 300, '2022-01-15 11:00:00'), (3, 'Joining a local gym!', 600, 400, '2022-01-16 12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(likes) FROM posts WHERE content LIKE '%fitness%' AND created_at > '2022-01-15' AND schema='social_media';"
    },
    {
        "instruction": "입력 텍스트: \"wind_turbines\" 테이블에 \"WindCo\"가 2015년에 설치한 250kW 풍력 터빈에 대한 레코드를 입력하세요.\n\nDDL statements:\nCREATE TABLE wind_turbines (id INT PRIMARY KEY, manufacturer VARCHAR(255), capacity FLOAT, year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO wind_turbines (manufacturer, capacity, year) VALUES ('WindCo', 250, 2015);"
    },
    {
        "instruction": "입력 텍스트: Tactical Technologies' 업체에서 공급한 군사 장비의 총 비용을 계산하세요.\n\nDDL statements:\nCREATE TABLE military_equipment (equipment_id INT, vendor VARCHAR(255), cost FLOAT); INSERT INTO military_equipment (equipment_id, vendor, cost) VALUES (1, 'Tactical Technologies', 500000.00), (2, 'Strategic Systems', 700000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM military_equipment WHERE vendor = 'Tactical Technologies';"
    },
    {
        "instruction": "입력 텍스트: 보조금으로 자금을 지원받는 농업 혁신 프로젝트 목록\n\nDDL statements:\nCREATE TABLE innovation_projects (id INT, name VARCHAR(50), funding_source VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM rural_development.innovation_projects WHERE funding_source = 'Grant';"
    },
    {
        "instruction": "입력 텍스트: 시애틀 시에 있는 저렴한 주택 단위의 평균 크기는 얼마입니까?\n\nDDL statements:\nCREATE TABLE AffordableHousing (id INT, city VARCHAR(20), size FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(size) FROM AffordableHousing WHERE city = 'Seattle';"
    },
    {
        "instruction": "입력 텍스트: 가장 인기 없는 메뉴 항목과 해당 카테고리를 확인하세요\n\nDDL statements:\nCREATE TABLE menu_items (menu_item VARCHAR(255), menu_category VARCHAR(255), quantity_sold INT); INSERT INTO menu_items (menu_item, menu_category, quantity_sold) VALUES ('Fried Calamari', 'Appetizers', 15), ('Spaghetti Bolognese', 'Entrees', 35), ('Tiramisu', 'Desserts', 25), ('Bruschetta', 'Appetizers', 5), ('Chicken Parmesan', 'Entrees', 40), ('Ice Cream Sundae', 'Desserts', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MI1.menu_item, MI1.menu_category FROM menu_items MI1 LEFT JOIN menu_items MI2 ON MI1.quantity_sold < MI2.quantity_sold WHERE MI2.menu_item IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 가장 많은 기부금을 받은 원인은 무엇이며, 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE causes (cause_id INT, cause TEXT, created_at TIMESTAMP); INSERT INTO causes (cause_id, cause, created_at) VALUES (1, 'Education', '2020-01-01 00:00:00'), (2, 'Health', '2019-01-01 00:00:00'), (3, 'Environment', '2021-01-01 00:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.cause, SUM(d.amount) as total_donated FROM donations d JOIN causes c ON d.cause = c.cause WHERE c.created_at >= DATEADD(year, -1, CURRENT_TIMESTAMP) GROUP BY c.cause ORDER BY total_donated DESC;"
    },
    {
        "instruction": "입력 텍스트: 2010년에 인류 무형 문화유산 대표 목록에 처음으로 등재된 전통 무용을 확인하세요.\n\nDDL statements:\nCREATE TABLE UNESCO_Intangible_Heritage (id INT, year INT, dance_form VARCHAR(100)); INSERT INTO UNESCO_Intangible_Heritage (id, year, dance_form) VALUES (1, 2001, 'Argentine Tango'), (2, 2003, 'Kilim weaving in Turkey'), (3, 2005, 'Falconry, a living human heritage'), (4, 2010, 'Tango argentino'), (5, 2012, 'Bharatanatyam classical dance');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dance_form FROM UNESCO_Intangible_Heritage WHERE year = 2010;"
    },
    {
        "instruction": "입력 텍스트: 2018년 '베이징' 지역의 총 폐기물 발생량(kg)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_generation (region VARCHAR(50), year INT, waste_kg FLOAT); INSERT INTO waste_generation (region, year, waste_kg) VALUES ('Beijing', 2018, 987654.32);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(waste_kg) FROM waste_generation WHERE region = 'Beijing' AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 각 과정별로 합격한 학생 수와 불합격한 학생 수는 무엇이며, 과정별로 그룹화하여 합격한 학생 수가 많은 순서대로 내림차순으로 정렬된 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE courses (course_id INT, course_name TEXT); CREATE TABLE professional_development (pd_id INT, student_id INT, course_id INT, pass_fail TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.course_name, SUM(CASE WHEN p.pass_fail = 'PASS' THEN 1 ELSE 0 END) as num_passed, SUM(CASE WHEN p.pass_fail = 'FAIL' THEN 1 ELSE 0 END) as num_failed FROM courses c JOIN professional_development p ON c.course_id = p.course_id GROUP BY c.course_name ORDER BY num_passed DESC;"
    },
    {
        "instruction": "입력 텍스트: SpaceX와 OneWeb에 의해 발사된 위성들을 확인하세요.\n\nDDL statements:\nCREATE TABLE satellites (satellite_name VARCHAR(50), launch_year INT, launch_country VARCHAR(50), launch_company VARCHAR(50)); INSERT INTO satellites (satellite_name, launch_year, launch_country, launch_company) VALUES ('Starlink-1', 2019, 'USA', 'SpaceX'), ('Starlink-2', 2019, 'USA', 'SpaceX'), ('OneWeb-1', 2019, 'French Guiana', 'OneWeb'), ('OneWeb-2', 2019, 'French Guiana', 'OneWeb');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT satellite_name, launch_year, launch_country FROM satellites WHERE launch_company IN ('SpaceX', 'OneWeb');"
    },
    {
        "instruction": "입력 텍스트: 1990년 이전에 설립된 갤러리에서 전시된 인도 예술품의 평균 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Galleries (GalleryID int, Name varchar(50), EstablishDate date); INSERT INTO Galleries VALUES (1, 'Gallery C', '1985-01-01'); INSERT INTO Galleries VALUES (2, 'Gallery D', '1995-05-15'); CREATE TABLE Artworks (ArtworkID int, Name varchar(50), Price decimal(5,2), GalleryID int, ArtCountry varchar(20)); INSERT INTO Artworks VALUES (1, 'Artwork 3', 18000, 1, 'India'); INSERT INTO Artworks VALUES (2, 'Artwork 4', 20000, 2, 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Price) FROM (SELECT Price FROM Artworks WHERE ArtCountry = 'India' AND GalleryID IN (SELECT GalleryID FROM Galleries WHERE EstablishDate < '1990-01-01')) AS art_gallery_data;"
    },
    {
        "instruction": "입력 텍스트: 시카고에 위치한 각 법원에서 사건 유형, 사건 상태, 연도별로 나누어진 사건 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE CourtCases (CourtName text, City text, CaseType text, CaseStatus text, Year int, NumCases int); INSERT INTO CourtCases VALUES ('Court1', 'Chicago', 'Assault', 'Open', 2022, 30, '2022-01-01'), ('Court1', 'Chicago', 'Theft', 'Closed', 2022, 25, '2022-01-01'), ('Court2', 'NYC', 'Assault', 'Open', 2022, 28, '2022-01-01'), ('Court2', 'NYC', 'Theft', 'Closed', 2022, 22, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CourtName, CaseType, CaseStatus, Year, SUM(NumCases) FROM CourtCases WHERE City = 'Chicago' GROUP BY CourtName, CaseType, CaseStatus, Year;"
    },
    {
        "instruction": "입력 텍스트: 일본에서 제공되는 가상 투어와 각각의 제공업체를 나열하세요.\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, name TEXT, provider TEXT, country TEXT); INSERT INTO virtual_tours (tour_id, name, provider, country) VALUES (1, 'Mt. Fuji Tour', 'Virtually There', 'Japan'), (2, 'Tokyo City Tour', 'Virtual Voyages', 'Japan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, provider FROM virtual_tours WHERE country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: feedback' 테이블에서 모든 citizen_id와 해당하는 service_id를 나열하세요.\n\nDDL statements:\nCREATE TABLE feedback (citizen_id INT, service_id INT, rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT citizen_id, service_id FROM feedback;"
    },
    {
        "instruction": "입력 텍스트: 특정 IP 주소에 대한 가장 흔한 위협 유형 상위 5가지는 무엇인가요?\n\nDDL statements:\nCREATE TABLE threats (id INT, ip_address VARCHAR(50), type VARCHAR(50), frequency INT); INSERT INTO threats (id, ip_address, type, frequency) VALUES (1, '192.168.0.1', 'malware', 5), (2, '192.168.0.1', 'phishing', 3), (3, '192.168.0.1', 'DDOS', 2), (4, '192.168.0.2', 'malware', 4), (5, '192.168.0.2', 'phishing', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, SUM(frequency) as total_frequency FROM threats WHERE ip_address = '192.168.0.1' GROUP BY type ORDER BY total_frequency DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 강사별 평생교육 과정에 등록한 학생 수는 총 몇 명인가요?\n\nDDL statements:\nCREATE TABLE enrollments (student_id INT, instructor_id INT, enrollment_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT instructor_id, COUNT(DISTINCT student_id) as total_students FROM enrollments GROUP BY instructor_id;"
    },
    {
        "instruction": "입력 텍스트: 독일과 프랑스의 소매 부문에서 노조에 가입한 근로자의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE worker_union(id INT, is_unionized BOOLEAN, sector VARCHAR(50), country VARCHAR(14));INSERT INTO worker_union(id, is_unionized, sector, country) VALUES (1, true, 'Retail', 'Germany'), (2, false, 'Retail', 'Germany'), (3, true, 'Retail', 'France'), (4, true, 'Retail', 'France'), (5, false, 'Retail', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM worker_union WHERE country IN ('Germany', 'France') AND sector = 'Retail')) AS unionization_percentage FROM worker_union WHERE is_unionized = true AND country IN ('Germany', 'France') AND sector = 'Retail';"
    },
    {
        "instruction": "입력 텍스트: 저소득층 지역을 운행하는 노선의 구간별 평균 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE routes (route_id INT, low_income_neighborhood BOOLEAN);CREATE TABLE fare_segments (segment_id INT, route_id INT, fare DECIMAL); INSERT INTO routes VALUES (123, TRUE); INSERT INTO routes VALUES (456, FALSE); INSERT INTO fare_segments VALUES (1, 123, 2.5); INSERT INTO fare_segments VALUES (2, 123, 2.5); INSERT INTO fare_segments VALUES (3, 456, 3.0); INSERT INTO fare_segments VALUES (4, 456, 3.0); INSERT INTO fare_segments VALUES (5, 456, 3.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT routes.route_id, AVG(fare_segments.fare) FROM routes INNER JOIN fare_segments ON routes.route_id = fare_segments.route_id WHERE routes.low_income_neighborhood = TRUE GROUP BY routes.route_id;"
    },
    {
        "instruction": "입력 텍스트: 오픈 교수법 활동에 참여한 학생들의 평균 정신 건강 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, mental_health_score INT, participated_in_open_pedagogy BOOLEAN); INSERT INTO students (student_id, mental_health_score, participated_in_open_pedagogy) VALUES (1, 80, TRUE), (2, 60, FALSE), (3, 90, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(mental_health_score) FROM students WHERE participated_in_open_pedagogy = TRUE;"
    },
    {
        "instruction": "입력 텍스트: Size' 테이블에 'Plus Size'를 위한 새로운 레코드를 추가하고, 평균 지출을 '150'으로 설정하세요.\n\nDDL statements:\nCREATE TABLE Size (id INT PRIMARY KEY, name VARCHAR(50), average_spending DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Size (id, name, average_spending) VALUES (6, 'Plus Size', 150);"
    },
    {
        "instruction": "입력 텍스트: 독특한 제작 연도를 가진 작품들을 찾으세요.\n\nDDL statements:\nCREATE TABLE Artworks (artwork_name TEXT, creation_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artwork_name, creation_year FROM Artworks GROUP BY artwork_name, creation_year HAVING COUNT(*) = 1;"
    },
    {
        "instruction": "입력 텍스트: \"job_change\" 및 \"employee\" 테이블에서 2021년에 직무 변경을 한 직원 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE job_change (id INT, employee_id INT, change_date DATE); CREATE TABLE employee (id INT, first_name VARCHAR(255), last_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT employee_id) as num_changes FROM job_change JOIN employee ON job_change.employee_id = employee.id WHERE change_date >= '2021-01-01' AND change_date < '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 숲에서 생산된 목재의 총량을 찾아라\n\nDDL statements:\nCREATE TABLE forests (forest_id INT, region_id INT); INSERT INTO forests (forest_id, region_id) VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 1), (6, 2), (7, 3), (8, 4); CREATE TABLE timber_production (production_id INT, forest_id INT, volume DECIMAL(10,2), year INT); INSERT INTO timber_production (production_id, forest_id, volume, year) VALUES (1, 1, 120.50, 2020), (2, 2, 150.75, 2020), (3, 3, 180.20, 2020), (4, 4, 100.90, 2020), (5, 5, 90.50, 2020), (6, 6, 110.75, 2020), (7, 7, 130.20, 2020), (8, 8, 160.90, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.forest_id, f.region_id, SUM(tp.volume) as total_volume FROM forests f INNER JOIN timber_production tp ON f.forest_id = tp.forest_id GROUP BY f.forest_id, f.region_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 지역별 보안 사건의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE incident_regions (id INT, region VARCHAR(50), incidents INT, timestamp TIMESTAMP); INSERT INTO incident_regions (id, region, incidents, timestamp) VALUES (1, 'North America', 150, '2022-02-01 10:00:00'), (2, 'Europe', 100, '2022-02-02 12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(incidents) as total_incidents FROM incident_regions WHERE timestamp >= '2022-02-01' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 인상주의' 운동에 속하는 작품들의 최대 제작 연도는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Artworks (artwork_id INT, title TEXT, creation_year INT, art_movement TEXT); INSERT INTO Artworks (artwork_id, title, creation_year, art_movement) VALUES (1, 'Impression, Sunrise', 1872, 'Impressionism'), (2, 'Ballet Rehearsal', 1874, 'Impressionism');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(creation_year) FROM Artworks WHERE art_movement = 'Impressionism';"
    },
    {
        "instruction": "입력 텍스트: 알래스카와 하와이의 수처리 시설 이름을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE water_treatment_facilities(facility_name TEXT, state TEXT); INSERT INTO water_treatment_facilities(facility_name, state) VALUES ('Anchorage Water Treatment', 'Alaska'), ('Honolulu Water Treatment', 'Hawaii'), ('Juneau Water Treatment', 'Alaska'), ('Maui Water Treatment', 'Hawaii');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE water_treatment_facilities SET facility_name = CASE WHEN state = 'Alaska' THEN 'Fairbanks Water Treatment' WHEN state = 'Hawaii' THEN 'Kauai Water Treatment' ELSE facility_name END WHERE state IN ('Alaska', 'Hawaii');"
    },
    {
        "instruction": "입력 텍스트: 지역별 군인 수의 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Military_Personnel (Region VARCHAR(255), Personnel INT); INSERT INTO Military_Personnel (Region, Personnel) VALUES ('North America', 2000000), ('South America', 1000000), ('Europe', 3000000), ('Asia', 5000000), ('Africa', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, SUM(Personnel) FROM Military_Personnel GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 사하라 사막 이남 아프리카 지역에서 해안 공동체를 대상으로 지난 2년간 시작된 기후 소통 캠페인의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE climate_communication (campaign VARCHAR(50), region VARCHAR(50), target VARCHAR(50), year INT); INSERT INTO climate_communication (campaign, region, target, year) VALUES ('Campaign 1', 'Sub-Saharan Africa', 'Coastal Communities', 2020); INSERT INTO climate_communication (campaign, region, target, year) VALUES ('Campaign 2', 'Sub-Saharan Africa', 'Coastal Communities', 2021); INSERT INTO climate_communication (campaign, region, target, year) VALUES ('Campaign 3', 'Sub-Saharan Africa', 'Urban Population', 2019); INSERT INTO climate_communication (campaign, region, target, year) VALUES ('Campaign 4', 'Sub-Saharan Africa', 'Rural Population', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM climate_communication WHERE region = 'Sub-Saharan Africa' AND target = 'Coastal Communities' AND year BETWEEN 2020 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: investigative_journalism' 테이블에서 총 단어 수 기준 상위 3명의 기고자는 누구인가요?\n\nDDL statements:\nCREATE TABLE investigative_journalism (article_id INT, author VARCHAR(50), title VARCHAR(100), published_date DATE, category VARCHAR(30), word_count INT); INSERT INTO investigative_journalism (article_id, author, title, published_date, category, word_count) VALUES (1, 'John Doe', 'Article 3', '2021-01-03', 'Crime', 2000), (2, 'Jane Smith', 'Article 4', '2021-01-04', 'Politics', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT author, SUM(word_count) AS total_word_count FROM investigative_journalism GROUP BY author ORDER BY total_word_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 기술별로 증가 추세를 보이는 군사 기술 거래를 확인하세요.\n\nDDL statements:\nCREATE TABLE tech_transactions (tech_id INT, transact_date DATE, transact_count INT); INSERT INTO tech_transactions (tech_id, transact_date, transact_count) VALUES (1, '2021-01-01', 10), (1, '2021-02-01', 15), (1, '2021-03-01', 20), (2, '2021-01-01', 5), (2, '2021-02-01', 8), (2, '2021-03-01', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT tech_id, transact_date, transact_count, LAG(transact_count, 1) OVER (PARTITION BY tech_id ORDER BY transact_date) as previous_count, transact_count - LAG(transact_count, 1) OVER (PARTITION BY tech_id ORDER BY transact_date) as trend FROM tech_transactions WHERE transact_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 독일에서 제작된 제품들의 평균 이산화탄소 배출량을 계산하세요.\n\nDDL statements:\nCREATE TABLE co2_emissions (product_id INT, product_name TEXT, co2_emissions INT); INSERT INTO co2_emissions (product_id, product_name, co2_emissions) VALUES (1, 'Leather Jacket', 50), (2, 'Wool Sweater', 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(co2_emissions) FROM co2_emissions WHERE product_name IN ('Leather Jacket', 'Wool Sweater') AND country_of_origin = 'Germany';"
    },
    {
        "instruction": "입력 텍스트: 도시 지역의 평균 부동산 가격보다 높은 가격을 가진 공동 소유 부동산은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE co_ownership ( id INT PRIMARY KEY, price FLOAT, location VARCHAR(255) ); INSERT INTO co_ownership (id, price, location) VALUES (1, 800000, 'urban'), (2, 700000, 'urban'), (3, 600000, 'rural');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.price FROM co_ownership c JOIN (SELECT AVG(price) AS avg_price FROM property WHERE location = 'urban') AS p ON 1=1 WHERE c.price > p.avg_price;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 보건 의료 분야에서 발생한 사이버 보안 사고 유형 중 가장 흔한 상위 3가지와 그 발생 총 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE sector_incidents (id INT, incident_type VARCHAR(255), sector VARCHAR(255), incident_date DATE, affected_assets INT); INSERT INTO sector_incidents (id, incident_type, sector, incident_date, affected_assets) VALUES (1, 'Data breach', 'Healthcare', '2021-01-01', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT incident_type, SUM(affected_assets) as total_occurrences FROM sector_incidents WHERE sector = 'Healthcare' AND incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY incident_type ORDER BY total_occurrences DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 스트레인별로 지난 달 동안의 일일 판매 변화량을 확인하세요.\n\nDDL statements:\nCREATE TABLE Sales (SaleID INT, StrainID INT, QuantitySold INT, SaleDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT StrainID, SaleDate, QuantitySold, QuantitySold - LAG(QuantitySold) OVER (PARTITION BY StrainID ORDER BY SaleDate) AS DailySalesChange FROM Sales WHERE SaleDate >= DATEADD(month, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 해양 분지에서의 해양 생물 종 수를 계산하세요\n\nDDL statements:\nCREATE TABLE species (id INT, name VARCHAR(255), habitat VARCHAR(255)); CREATE TABLE ocean_basin (id INT, name VARCHAR(255), species_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO ocean_basin (name, species_count) SELECT habitat, COUNT(*) FROM species GROUP BY habitat;"
    },
    {
        "instruction": "입력 텍스트: 각 역마다 있는 경찰관과 소방관의 총 인원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Station (sid INT, name VARCHAR(255), type VARCHAR(255)); CREATE TABLE Employee (eid INT, sid INT, role VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Station.name, SUM(CASE WHEN Employee.role = 'police officer' THEN 1 ELSE 0 END) as total_police, SUM(CASE WHEN Employee.role = 'firefighter' THEN 1 ELSE 0 END) as total_firefighters FROM Station INNER JOIN Employee ON Station.sid = Employee.sid GROUP BY Station.name;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 미국에서 개최된 자동차 쇼는 몇 개였습니까?\n\nDDL statements:\nCREATE TABLE Auto_Shows (id INT, show_name VARCHAR(255), show_year INT, location VARCHAR(255)); INSERT INTO Auto_Shows (id, show_name, show_year, location) VALUES (1, 'New York International Auto Show', 2019, 'United States'); INSERT INTO Auto_Shows (id, show_name, show_year, location) VALUES (2, 'Chicago Auto Show', 2019, 'United States'); INSERT INTO Auto_Shows (id, show_name, show_year, location) VALUES (3, 'North American International Auto Show', 2018, 'United States');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Auto_Shows WHERE show_year = 2019 AND location = 'United States';"
    },
    {
        "instruction": "입력 텍스트: 2020년 상업 부문의 총 폐기물 발생량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE waste_generation (year INT, sector TEXT, amount INT); INSERT INTO waste_generation (year, sector, amount) VALUES (2018, 'commercial', 1200), (2018, 'residential', 800), (2019, 'commercial', 1500), (2019, 'residential', 900), (2020, 'commercial', NULL), (2020, 'residential', 1100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM waste_generation WHERE sector = 'commercial' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 금속가공' 부서에서 급여가 4000보다 많은 모든 근로자를 나열하세요.\n\nDDL statements:\nCREATE TABLE department (id INT, name TEXT); INSERT INTO department (id, name) VALUES (1, 'textile'), (2, 'metalworking'), (3, 'electronics'); CREATE TABLE worker (id INT, salary REAL, department_id INT); INSERT INTO worker (id, salary, department_id) VALUES (1, 3000, 1), (2, 3500, 1), (3, 4000, 2), (4, 4500, 2), (5, 5000, 3), (6, 5200, 3), (7, 5500, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM worker INNER JOIN department ON worker.department_id = department.id WHERE department.name = 'metalworking' AND worker.salary > 4000;"
    },
    {
        "instruction": "입력 텍스트: 린넨 바지의 평균 생산 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production_costs (item VARCHAR(255), material VARCHAR(255), cost DECIMAL(10, 2)); INSERT INTO production_costs (item, material, cost) VALUES ('linen pants', 'linen', 15.00), ('jacket', 'linen', 20.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM production_costs WHERE item = 'linen pants';"
    },
    {
        "instruction": "입력 텍스트: 고객별 총 투자금액을 내림차순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name TEXT, investment FLOAT); INSERT INTO clients (client_id, name, investment) VALUES (1, 'John Doe', 5000.00), (2, 'Jane Smith', 7000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT client_id, name, SUM(investment) OVER (PARTITION BY client_id ORDER BY client_id) as total_investment FROM clients ORDER BY total_investment DESC;"
    },
    {
        "instruction": "입력 텍스트: 세계 식량 계획이 중동에서 수행한 인도주의 지원 활동은 무엇인가요?\n\nDDL statements:\nCREATE TABLE humanitarian_operations (id INT, organization VARCHAR(50), location VARCHAR(50)); INSERT INTO humanitarian_operations (id, organization, location) VALUES (1, 'United Nations', 'Syria'), (2, 'World Food Programme', 'Yemen'), (3, 'World Food Programme', 'Iraq'), (4, 'International Committee of the Red Cross', 'Syria');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM humanitarian_operations WHERE organization = 'World Food Programme' AND location LIKE '%Middle East%';"
    },
    {
        "instruction": "입력 텍스트: \"ev_prices\" 뷰에서 전기차량의 최대 가격은 얼마인가요?\n\nDDL statements:\nCREATE VIEW ev_prices AS SELECT gv.*, price FROM green_vehicles gv JOIN vehicle_prices vp ON gv.id = vp.vehicle_id WHERE gv.type = 'Electric';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM ev_prices;"
    },
    {
        "instruction": "입력 텍스트: green_technology' 투자의 평균 위험 수준은 얼마입니까?\n\nDDL statements:\nCREATE TABLE investments (id INT, sector VARCHAR(20), risk_level INT)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(risk_level) FROM investments WHERE sector = 'green_technology'"
    },
    {
        "instruction": "입력 텍스트: 제품과 재고 테이블에 있는 제품의 총 수량을 지속 가능한 제품인지 여부에 따라 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, is_sustainable BOOLEAN); INSERT INTO products VALUES (1, 'Eco Shirt', TRUE); INSERT INTO products VALUES (2, 'Regular Shirt', FALSE); CREATE TABLE inventory (product_id INT, quantity INT); INSERT INTO inventory VALUES (1, 100); INSERT INTO inventory VALUES (2, 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.is_sustainable, SUM(inventory.quantity) FROM products INNER JOIN inventory ON products.product_id = inventory.product_id GROUP BY products.is_sustainable;"
    },
    {
        "instruction": "입력 텍스트: 브라질에 있는 노조 중 가장 적은 회원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE UnionMembers (id INT, union_name VARCHAR(50), country VARCHAR(50), member_count INT); INSERT INTO UnionMembers (id, union_name, country, member_count) VALUES (1, 'JAW', 'Japan', 150000), (2, 'ALU', 'Australia', 200000), (3, 'AWU', 'Australia', 100000), (8, 'CUT', 'Brazil', 150000), (9, 'FORCA', 'Brazil', 120000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(member_count) as min_members FROM UnionMembers WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 농구 경기에 참석한 남성 및 여성 팬의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE fans (fan_id INT, gender VARCHAR(10), last_attended_game DATE); INSERT INTO fans (fan_id, gender, last_attended_game) VALUES (1, 'Male', '2022-02-15'), (2, 'Female', '2022-03-01'), (3, 'Male', '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) as num_fans FROM fans WHERE last_attended_game >= DATEADD(year, -1, GETDATE()) GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: SpaceX 미션의 가장 이른 발사 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE spacex_missions (id INT, launch_company VARCHAR(255), launch_date DATE); INSERT INTO spacex_missions (id, launch_company, launch_date) VALUES (1, 'SpaceX', '2006-03-24'), (2, 'SpaceX', '2008-09-29'), (3, 'SpaceX', '2012-05-25'), (4, 'SpaceX', '2020-05-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(launch_date) FROM spacex_missions WHERE launch_company = 'SpaceX';"
    },
    {
        "instruction": "입력 텍스트: 2020년 한 해 동안 월별 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (donation_id INT, donation_amount DECIMAL, donation_date DATE); INSERT INTO donations (donation_id, donation_amount, donation_date) VALUES (1, 100.00, '2020-01-01'), (2, 150.00, '2020-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(donation_date, '%Y-%m') as month, AVG(donation_amount) as avg_donation FROM donations WHERE donation_date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 자원봉사자들의 총 수와 그들이 기여한 고유 프로그램 수, 그리고 기여한 총 시간을 표시합니다.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerName VARCHAR(50)); INSERT INTO Volunteers (VolunteerID, VolunteerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'); CREATE TABLE Programs (ProgramID INT, ProgramName VARCHAR(50)); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Feeding America'), (2, 'Habitat for Humanity'), (3, 'Red Cross'); CREATE TABLE Volunteer_Programs (VolunteerID INT, ProgramID INT, Hours INT); INSERT INTO Volunteer_Programs (VolunteerID, ProgramID, Hours) VALUES (1, 1, 20), (1, 2, 30), (1, 3, 25), (2, 1, 35), (2, 3, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT V.VolunteerName, COUNT(DISTINCT VP.ProgramID) as ProgramsContributed, SUM(VP.Hours) as TotalHours FROM Volunteers V JOIN Volunteer_Programs VP ON V.VolunteerID = VP.VolunteerID GROUP BY V.VolunteerName;"
    },
    {
        "instruction": "입력 텍스트: DroughtImpact' 뷰에서 가뭄 영향을 받은 모든 지역을 나열하세요.\n\nDDL statements:\nCREATE VIEW DroughtImpact AS SELECT region, impact_level FROM DroughtAssessments WHERE drought_severity = 'Severe' UNION SELECT region, impact_level FROM WaterScarcity;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region FROM DroughtImpact;"
    },
    {
        "instruction": "입력 텍스트: ID 3, 이름 'Cyber Attacks', 값 150인 새로운 위협 인텔리전스 지표 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE threat_intelligence (id INT, name VARCHAR(50), value INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO threat_intelligence (id, name, value) VALUES (3, 'Cyber Attacks', 150);"
    },
    {
        "instruction": "입력 텍스트: 아이디가 3인 회사의 창립자 이름을 'Alex'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE founder (id INT, name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE company SET founder_gender = 'Other' WHERE id = 3; UPDATE founder SET name = 'Alex' WHERE id = 3;"
    },
    {
        "instruction": "입력 텍스트: 2021년 텍사스에서 보고된 감염병 사례의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE CasesByYear (CaseID INT, Age INT, Gender VARCHAR(10), City VARCHAR(20), Disease VARCHAR(20), Year INT); INSERT INTO CasesByYear (CaseID, Age, Gender, City, Disease, Year) VALUES (1, 25, 'Male', 'Dallas', 'Influenza', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM CasesByYear WHERE City = 'Texas' AND Year = 2021 AND Disease IN ('Cholera', 'Tuberculosis', 'Measles', 'Influenza');"
    },
    {
        "instruction": "입력 텍스트: 북극 지역의 모든 환경오염 통제 계획의 이름과 위치를 나열하시오.\n\nDDL statements:\nCREATE TABLE pollution_control_initiatives (id INT, name TEXT, location TEXT); INSERT INTO pollution_control_initiatives (id, name, location) VALUES (1, 'Initiative A', 'Arctic'); INSERT INTO pollution_control_initiatives (id, name, location) VALUES (2, 'Initiative B', 'Antarctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location FROM pollution_control_initiatives WHERE location = 'Arctic';"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 지역의 총 재활용률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE RecyclingAmount (region VARCHAR(50), year INT, amount FLOAT); INSERT INTO RecyclingAmount (region, year, amount) VALUES ('Region1', 2018, 600000.0), ('Region1', 2019, 700000.0), ('Region1', 2020, 800000.0), ('Region2', 2018, 500000.0), ('Region2', 2019, 600000.0), ('Region2', 2020, 700000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.region, (SUM(r.amount) / (SELECT SUM(wg.amount) FROM WasteGeneration wg WHERE wg.year = 2020 AND EXISTS (SELECT 1 FROM RecyclingCenters rc WHERE rc.region = wg.city)) * 100) FROM RecyclingAmount r WHERE r.year = 2020 GROUP BY r.region;"
    },
    {
        "instruction": "입력 텍스트: 필수 안전 교육을 완료하지 않은 모든 직원을 나열합니다.\n\nDDL statements:\nCREATE TABLE Employees (id INT, name VARCHAR(255), department VARCHAR(255)); CREATE TABLE Training (id INT, employee INT, completed BOOLEAN); INSERT INTO Employees (id, name, department) VALUES (1, 'John Doe', 'DeptA'), (2, 'Jane Smith', 'DeptB'); INSERT INTO Training (id, employee, completed) VALUES (1, 1, TRUE), (2, 2, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.name, e.department FROM Employees e LEFT JOIN Training t ON e.id = t.employee WHERE t.completed IS NULL"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 각 매체별로 등록된 작품 수는 얼마이며, 어떤 매체가 가장 많은 등록을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE Artwork (ArtworkID INT, Medium TEXT); INSERT INTO Artwork (ArtworkID, Medium) VALUES (1, 'Oil on canvas'), (2, 'Watercolor');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Medium, COUNT(*) as ArtworkCount FROM Artwork WHERE Continent = 'Europe' GROUP BY Medium ORDER BY ArtworkCount DESC;"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역 각 국가별로 2022년 7월 1일 기준으로 궤도에 있는 위성의 수를 위성의 수가 많은 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE satellites_in_orbit(id INT, country VARCHAR(255), satellites INT, last_update DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, satellites FROM satellites_in_orbit WHERE last_update <= '2022-07-01' AND country IN ('China', 'India', 'Japan', 'South Korea', 'Australia', 'Indonesia', 'Malaysia', 'Thailand', 'Vietnam', 'Philippines', 'New Zealand') GROUP BY country ORDER BY satellites DESC;"
    },
    {
        "instruction": "입력 텍스트: Sales' 테이블에서 'Organic' 제품의 총 수익을 보여주세요.\n\nDDL statements:\nCREATE TABLE Sales (id INT PRIMARY KEY, product VARCHAR(255), price DECIMAL(5,2), quantity INT); INSERT INTO Sales (id, product, price, quantity) VALUES (1, 'Apples', 1.50, 10), (2, 'Organic Apples', 2.50, 15), (3, 'Bananas', 0.99, 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * quantity) FROM Sales WHERE product LIKE 'Organic%';"
    },
    {
        "instruction": "입력 텍스트: 공연 예술 프로그램 중 소외된 커뮤니티를 대상으로 한 프로그램이 받은 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE PerformingArtsPrograms (programID INT, communityType VARCHAR(20), fundingAmount DECIMAL(10,2)); INSERT INTO PerformingArtsPrograms (programID, communityType, fundingAmount) VALUES (1, 'Underserved', 25000.00), (2, 'General', 15000.00), (3, 'Underserved', 30000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fundingAmount) FROM PerformingArtsPrograms WHERE communityType = 'Underserved';"
    },
    {
        "instruction": "입력 텍스트: \"bioprocess_engineering\" 스키마에서 고유한 생물반응기 유형의 개수를 확인하세요.\n\nDDL statements:\nCREATE SCHEMA bioprocess_engineering; CREATE TABLE bioreactor (bioreactor_id INT, type VARCHAR(20)); INSERT INTO bioreactor (bioreactor_id, type) VALUES (1, 'Stirred Tank'), (2, 'Bubble Column');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT type) FROM bioprocess_engineering.bioreactor;"
    },
    {
        "instruction": "입력 텍스트: 중동과 북아프리카에 위치하며 재생 에너지에 초점을 맞추고 예산이 50만 달러를 초과하는 프로젝트의 세부 사항은 무엇인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), sector VARCHAR(255), budget DECIMAL(10,2), impact_score INT);CREATE VIEW renewable_energy_projects AS SELECT * FROM projects WHERE sector = 'Renewable energy';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM renewable_energy_projects WHERE location IN ('Middle East', 'North Africa') AND budget > 500000;"
    },
    {
        "instruction": "입력 텍스트: 2018년 이후에 'union_membership_statistics' 조합에 가입한 모든 회원을 나열하세요.\n\nDDL statements:\nCREATE TABLE union_membership_statistics (member_id INT, name VARCHAR(50), union_joined_date DATE); INSERT INTO union_membership_statistics (member_id, name, union_joined_date) VALUES (21, 'Xavier Clark', '2019-11-14'), (22, 'Zoey Wright', '2020-05-10'), (23, 'Avery Allen', '2016-09-05'), (24, 'Brooklyn Davis', '2018-09-24');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM union_membership_statistics WHERE YEAR(union_joined_date) > 2018;"
    },
    {
        "instruction": "입력 텍스트: 창업 팀의 연령대가 다양한 스타트업은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE startup_founders (id INT PRIMARY KEY, name VARCHAR(255), age INT, industry VARCHAR(255)); CREATE TABLE diversity_metrics (startup_id INT PRIMARY KEY, unique_founders INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT startup_id) FROM startup_founders JOIN diversity_metrics ON startup_founders.id = diversity_metrics.startup_id WHERE age BETWEEN 20 AND 30 OR age BETWEEN 40 AND 50 OR age BETWEEN 60 AND 70;"
    },
    {
        "instruction": "입력 텍스트: materials' 테이블에서 친환경 재료의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE materials (material_id INT PRIMARY KEY, eco_friendly BOOLEAN, price DECIMAL(5, 2), order_quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * order_quantity) AS total_revenue FROM materials WHERE eco_friendly = TRUE;"
    },
    {
        "instruction": "입력 텍스트: ABC Corp' 고객의 모든 화물 운송 주문 목록을 보여주세요.\n\nDDL statements:\nCREATE TABLE freight_forwarding (id INT, customer_name VARCHAR(15), order_date DATE); INSERT INTO freight_forwarding VALUES (1, 'ABC Corp', '2021-09-01'), (2, 'XYZ Inc', '2021-09-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM freight_forwarding WHERE customer_name = 'ABC Corp';"
    },
    {
        "instruction": "입력 텍스트: 2017년 칠레에서 구리 채굴을 위한 지질 조사 정보는 무엇인가요?\n\nDDL statements:\nCREATE TABLE GeologicalSurvey (Country VARCHAR(255), Year INT, MiningType VARCHAR(255), SurveyInfo TEXT); INSERT INTO GeologicalSurvey (Country, Year, MiningType, SurveyInfo) VALUES ('Chile', 2017, 'Copper', 'Survey 1'), ('Chile', 2017, 'Copper', 'Survey 2'), ('Chile', 2017, 'Copper', 'Survey 3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Context.Country, Context.SurveyInfo FROM GeologicalSurvey as Context WHERE Context.Year = 2017 AND Context.MiningType = 'Copper';"
    },
    {
        "instruction": "입력 텍스트: 퓨전 플레이버스' 레스토랑에서 지난 주 각 메뉴 카테고리별 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE revenue (restaurant_id INT, date DATE, revenue INT, category VARCHAR(50)); INSERT INTO revenue (restaurant_id, date, revenue, category) VALUES (11, '2022-06-01', 5000, 'Asian Fusion'), (11, '2022-06-02', 6000, 'Mediterranean Fusion'), (11, '2022-06-01', 4000, 'Latin Fusion'), (11, '2022-06-02', 7000, 'Asian Fusion');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, SUM(revenue) as total_revenue FROM revenue WHERE restaurant_id = 11 AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 어떤 성분들이 얼마나 많은 양으로 조달되었나요?\n\nDDL statements:\nCREATE TABLE ingredient_sources (id INT, product VARCHAR(50), ingredient VARCHAR(50), country VARCHAR(50), quantity INT); INSERT INTO ingredient_sources (id, product, ingredient, country, quantity) VALUES (1, 'Lipstick', 'Wax', 'Brazil', 25); INSERT INTO ingredient_sources (id, product, ingredient, country, quantity) VALUES (2, 'Lipstick', 'Oil', 'Mexico', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ingredient, SUM(quantity) as total_quantity FROM ingredient_sources WHERE country = 'India' GROUP BY ingredient;"
    },
    {
        "instruction": "입력 텍스트: 시간이 지남에 따른 평균 점검 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Inspections (id INT, restaurant_id INT, inspection_date DATE, score INT); INSERT INTO Inspections (id, restaurant_id, inspection_date, score) VALUES (1, 1, '2021-01-01', 95); INSERT INTO Inspections (id, restaurant_id, inspection_date, score) VALUES (2, 1, '2021-04-01', 92); INSERT INTO Inspections (id, restaurant_id, inspection_date, score) VALUES (3, 2, '2021-02-01', 88); INSERT INTO Inspections (id, restaurant_id, inspection_date, score) VALUES (4, 2, '2021-05-01', 93);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT YEAR(inspection_date) AS year, AVG(score) FROM Inspections GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 유럽 호텔' 뷰에서 가상 투어 참여도에 따른 호텔의 순위는 어떻게 되나요?\n\nDDL statements:\nCREATE VIEW europe_hotels AS SELECT * FROM hotels WHERE continent = 'Europe'; CREATE VIEW virtual_tour_stats AS SELECT hotel_id, COUNT(*) as views FROM virtual_tours GROUP BY hotel_id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, ROW_NUMBER() OVER (ORDER BY views DESC) as ranking FROM europe_hotels JOIN virtual_tour_stats ON europe_hotels.id = virtual_tour_stats.hotel_id;"
    },
    {
        "instruction": "입력 텍스트: 2010년부터 2015년 사이에 미국에서 제작된 영화들의 평균 평점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(255), rating DECIMAL(3,2), production_country VARCHAR(50)); INSERT INTO movies (id, title, rating, production_country) VALUES (1, 'Movie1', 7.5, 'USA'), (2, 'Movie2', 8.2, 'Canada'), (3, 'Movie3', 6.8, 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM movies WHERE production_country = 'USA' AND YEAR(release_date) BETWEEN 2010 AND 2015;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 각 장르별로 가장 높은 판매 가격을 기록한 작가는 누구인가요?\n\nDDL statements:\nCREATE TABLE Artwork (ArtworkID INT, ArtistID INT, Genre TEXT, SellingPrice DECIMAL); INSERT INTO Artwork (ArtworkID, ArtistID, Genre, SellingPrice) VALUES (1, 2, 'Impressionism', 200000), (2, 2, 'Surrealism', 300000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistID, Genre, MAX(SellingPrice) as HighestSellingPrice FROM Artwork WHERE Continent = 'Africa' GROUP BY ArtistID, Genre;"
    },
    {
        "instruction": "입력 텍스트: 로마에 있는 평점 4 이상의 문화 유산 명소의 이름과 평점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE heritage_sites (site_id INT, name TEXT, city TEXT, rating FLOAT); INSERT INTO heritage_sites (site_id, name, city, rating) VALUES (1, 'Colosseum', 'Rome', 4.7), (2, 'Roman Forum', 'Rome', 4.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, rating FROM heritage_sites WHERE city = 'Rome' AND rating > 4;"
    },
    {
        "instruction": "입력 텍스트: 장애가 있는 환자들에서 치료받는 가장 흔한 정신 건강 상태는 무엇인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, has_disability BOOLEAN, condition VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT condition, COUNT(patient_id) AS cases_count FROM patients WHERE has_disability = TRUE GROUP BY condition ORDER BY cases_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 유럽 지역의 모바일 가입자들의 총 데이터 사용량을 계산하세요.\n\nDDL statements:\nCREATE TABLE eu_data_usage (subscriber_id INT, subscriber_type VARCHAR(10), country VARCHAR(10), data_usage FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(data_usage) FROM eu_data_usage JOIN country ON eu_data_usage.country = country.country WHERE country.region = 'European' AND eu_data_usage.subscriber_type = 'mobile';"
    },
    {
        "instruction": "입력 텍스트: 법적 선례가 있는 사건들의 총 청구 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Cases (CaseID INT, HasLegalPrecedent BOOLEAN); INSERT INTO Cases (CaseID, HasLegalPrecedent) VALUES (1, TRUE), (2, FALSE), (3, TRUE), (4, FALSE), (5, TRUE); CREATE TABLE CaseBilling (CaseID INT, BillingAmount DECIMAL(10,2)); INSERT INTO CaseBilling (CaseID, BillingAmount) VALUES (1, 5000.00), (2, 4000.00), (3, 6000.00), (4, 3000.00), (5, 7000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(BillingAmount) FROM CaseBilling INNER JOIN Cases ON CaseBilling.CaseID = Cases.CaseID WHERE HasLegalPrecedent = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 토양 분석과 위성 영상 테이블에서 유기물 수치가 12보다 큰 토양 분석의 필드 아이디를 결합한 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SoilAnalysis (id INT, field_id INT, sample_date DATE, nutrient_level FLOAT, organic_matter FLOAT); INSERT INTO SoilAnalysis (id, field_id, sample_date, nutrient_level, organic_matter) VALUES (1, 1, '2021-07-25', 3.4, 12.8), (2, 3, '2021-07-27', 3.8, 14.2), (3, 5, '2021-07-29', 3.1, 11.9); CREATE TABLE SatelliteImagery (id INT, field_id INT, image_date DATE, moisture_level FLOAT); INSERT INTO SatelliteImagery (id, field_id, image_date, moisture_level) VALUES (1, 2, '2021-07-26', 65.3), (2, 4, '2021-07-28', 68.1), (3, 6, '2021-07-30', 70.5)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SoilAnalysis.field_id FROM SoilAnalysis WHERE SoilAnalysis.organic_matter > 12 UNION SELECT SatelliteImagery.field_id FROM SatelliteImagery"
    },
    {
        "instruction": "입력 텍스트: 스페인과 이탈리아의 문화 유산 사이트 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE heritage_sites (site_id INT, name TEXT, country TEXT); INSERT INTO heritage_sites (site_id, name, country) VALUES (1, 'Alhambra', 'Spain'), (2, 'Colosseum', 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM heritage_sites GROUP BY country HAVING country IN ('Spain', 'Italy');"
    },
    {
        "instruction": "입력 텍스트: 2019년 철광석 생산량이 가장 높은 상위 3개국과 그에 해당하는 생산량을 찾아주세요.\n\nDDL statements:\nCREATE TABLE iron_ore_production (country VARCHAR(50), production_amount INT); INSERT INTO iron_ore_production (country, production_amount) VALUES ('Australia', 900), ('Brazil', 460), ('China', 340), ('India', 210), ('Russia', 115), ('South Africa', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, production_amount FROM iron_ore_production ORDER BY production_amount DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: agro_regions 데이터셋의 각 지역에서 농업에 사용되는 최대 토지 면적(헥타르 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE agro_regions (id INT, region VARCHAR(255), land_area INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(land_area) FROM agro_regions GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: WTA 테니스 서브의 평균 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE wta_serves (serve_id INT, player VARCHAR(50), team VARCHAR(50), speed DECIMAL(5,2)); INSERT INTO wta_serves (serve_id, player, team, speed) VALUES (1, 'Serena Williams', 'United States', 125.6); INSERT INTO wta_serves (serve_id, player, team, speed) VALUES (2, 'Ashleigh Barty', 'Australia', 115.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(speed) FROM wta_serves;"
    },
    {
        "instruction": "입력 텍스트: \"investment\" 테이블에서 \"buy\" 유형의 거래에 대해 각 날짜별 총 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE date (date DATE); CREATE TABLE investment (transaction_id INT, date DATE, value DECIMAL(10,2), type VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.date, SUM(i.value) as total_value FROM date d JOIN investment i ON d.date = i.date WHERE i.type = 'buy' GROUP BY d.date;"
    },
    {
        "instruction": "입력 텍스트: 남미의 평균 매립지 용량을 계산하세요.\n\nDDL statements:\nCREATE TABLE LandfillCapacityByCountry (country VARCHAR(50), capacity INT); INSERT INTO LandfillCapacityByCountry (country, capacity) VALUES ('Brazil', 6000000), ('Argentina', 4000000), ('Colombia', 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(capacity) FROM LandfillCapacityByCountry;"
    },
    {
        "instruction": "입력 텍스트: 각 부서별 직원들의 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE employee (id INT, department VARCHAR(255), salary FLOAT); INSERT INTO employee (id, department, salary) VALUES (1, 'IT', 80000), (2, 'HR', 70000), (3, 'Finance', 90000), (4, 'Marketing', 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, AVG(salary) FROM employee GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 미국 내에서 재생 가능 에너지 포트폴리오 기준(RPS)이 50% 이상인 주는 어디인가요?\n\nDDL statements:\nCREATE TABLE state_energy (state VARCHAR(20), rps_percentage DECIMAL(5,2)); INSERT INTO state_energy (state, rps_percentage) VALUES ('California', 0.6), ('New York', 0.51), ('Vermont', 0.75), ('Oregon', 0.5), ('Minnesota', 0.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state FROM state_energy WHERE rps_percentage >= 0.5;"
    },
    {
        "instruction": "입력 텍스트: 도자기 전문가들이 분석한 유물의 총 개수와 가장 많은 유물을 분석한 전문가의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Artifacts (id INT, site VARCHAR(50), artifact_name VARCHAR(50), date_found DATE, description TEXT, analyzed_by VARCHAR(50), analyzed_date DATE); INSERT INTO Artifacts (id, site, artifact_name, date_found, description, analyzed_by, analyzed_date) VALUES (1, 'Site1', 'Pottery', '2020-01-01', 'Fine pottery with unique symbols', 'Expert3', '2021-01-01'), (2, 'Site2', 'Clay Figurine', '2019-02-01', 'Small clay figure of a human', 'Expert4', '2021-02-01'); CREATE TABLE Experts (id INT, name VARCHAR(50), expertise VARCHAR(50), country VARCHAR(50)); INSERT INTO Experts (id, name, expertise, country) VALUES (3, 'Expert3', 'Ceramics', 'Country1'), (4, 'Expert4', 'Sculpture', 'Country2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(a.artifact_count) as total_artifacts, e.name as expert_name FROM (SELECT analyzed_by, COUNT(id) as artifact_count FROM Artifacts WHERE analyzed_by IN (SELECT name FROM Experts WHERE expertise = 'Ceramics') GROUP BY analyzed_by) a JOIN (SELECT name, MAX(artifact_count) as max_artifacts FROM (SELECT analyzed_by, COUNT(id) as artifact_count FROM Artifacts WHERE analyzed_by IN (SELECT name FROM Experts WHERE expertise = 'Ceramics') GROUP BY analyzed_by) b GROUP BY name) c ON a.artifact_count = c.max_artifacts JOIN Experts e ON a.analyzed_by = e.name;"
    },
    {
        "instruction": "입력 텍스트: explainability_report' 테이블에서 사용된 설명 가능한 AI 기법들은 무엇이며, 각각 몇 번 사용되었나요?\n\nDDL statements:\nCREATE TABLE explainability_report (technique VARCHAR(20), usage INT); INSERT INTO explainability_report (technique, usage) VALUES ('SHAP', 5), ('LIME', 3), ('anchors', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT technique, SUM(usage) as total_usage FROM explainability_report GROUP BY technique;"
    },
    {
        "instruction": "입력 텍스트: 일본의 화석 연료 차량의 평균 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Fossil_Fuel_Vehicles_Japan (Id INT, Vehicle VARCHAR(50), CO2_Emission DECIMAL(5,2)); INSERT INTO Fossil_Fuel_Vehicles_Japan (Id, Vehicle, CO2_Emission) VALUES (1, 'Toyota Corolla', 155.0), (2, 'Honda Civic', 165.0), (3, 'Nissan Sentra', 145.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(CO2_Emission) FROM Fossil_Fuel_Vehicles_Japan;"
    },
    {
        "instruction": "입력 텍스트: 콘서트 총 수익이 가장 높은 상위 3개 도시를 찾으세요.\n\nDDL statements:\nCREATE TABLE Concerts (id INT, artist_id INT, city VARCHAR(50), revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(revenue) AS total_revenue FROM Concerts GROUP BY city ORDER BY total_revenue DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 기부한 기부자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, cause_id INT, first_donation_date DATE); INSERT INTO donors (id, cause_id, first_donation_date) VALUES (1, 1, '2022-01-01'), (2, 2, '2022-01-15'), (3, 1, '2022-02-03'), (4, 3, '2022-03-01'), (5, 2, '2022-01-30'), (6, 1, '2022-02-25'), (7, 3, '2022-03-01'), (8, 2, '2022-01-28'), (9, 1, '2022-02-27'), (10, 3, '2022-03-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cause_id, COUNT(DISTINCT id) as num_donors FROM donors WHERE first_donation_date BETWEEN DATEADD(day, -30, GETDATE()) AND GETDATE() GROUP BY cause_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 기록된 작물의 최저 기온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE weather_record (date DATE, temp INT); INSERT INTO weather_record (date, temp) VALUES ('2021-05-01', 20), ('2021-05-02', 22), ('2021-05-03', 18), ('2021-05-04', 25), ('2021-05-05', 19), ('2021-05-06', 15), ('2021-05-07', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(temp) FROM weather_record WHERE date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월에 '#sustainability' 해시태그를 포함한 게시물이 하루에 몇 개였나요?\n\nDDL statements:\nCREATE SCHEMA socialdata; CREATE TABLE posts(post_id INT, hashtags VARCHAR(255), post_date DATE); INSERT INTO posts (post_id, hashtags, post_date) VALUES (1, '#sustainability, #ecofriendly', '2022-02-01'); INSERT INTO posts (post_id, hashtags, post_date) VALUES (2, '#sustainability', '2022-02-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE(post_date) AS post_date, COUNT(*) AS posts_per_day FROM socialdata.posts WHERE hashtags LIKE '%#sustainability%' GROUP BY post_date;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에 있는 원주민 공동체는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE indigenous_communities (id INT, community_name VARCHAR(255), region VARCHAR(255)); INSERT INTO indigenous_communities (id, community_name, region) VALUES (1, 'Community A', 'arctic_circle'), (2, 'Community B', 'canada'), (3, 'Community C', 'greenland'), (4, 'Community D', 'arctic_circle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM indigenous_communities GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 모든 공급업체와 그들의 연락처 정보 및 공급하는 제품 목록\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, supplier_name VARCHAR(255), contact_name VARCHAR(255), contact_email VARCHAR(255)); INSERT INTO suppliers (supplier_id, supplier_name, contact_name, contact_email) VALUES (1, 'Supplier 1', 'John Smith', 'john.smith@supplier1.com'), (2, 'Supplier 2', 'Jane Doe', 'jane.doe@supplier2.com'); CREATE TABLE supplier_products (supplier_id INT, product_id INT); INSERT INTO supplier_products (supplier_id, product_id) VALUES (1, 1), (1, 2), (2, 3), (2, 4); CREATE TABLE products (product_id INT, product_name VARCHAR(255)); INSERT INTO products (product_id, product_name) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'), (4, 'Product D');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT suppliers.supplier_name, suppliers.contact_name, suppliers.contact_email, products.product_name FROM suppliers JOIN supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN products ON supplier_products.product_id = products.product_id;"
    },
    {
        "instruction": "입력 텍스트: patents' 테이블에서 여성 발명가들의 접근 가능한 기술 특허 수의 총합을 보여주세요.\n\nDDL statements:\nCREATE TABLE patents (inventor_name VARCHAR(50), inventor_gender VARCHAR(50), patent_name VARCHAR(50), technology_accessibility INTEGER);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(technology_accessibility) FROM patents WHERE inventor_gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 2010년부터 2020년까지 각 기관이 발사한 위성의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE satellite_launches (launch_year INT, launch_agency VARCHAR(50)); INSERT INTO satellite_launches (launch_year, launch_agency) VALUES (2010, 'NASA'), (2011, 'ESA'), (2012, 'NASA'), (2013, 'Russia'), (2014, 'China'), (2015, 'India'), (2016, 'USA'), (2017, 'ESA'), (2018, 'China'), (2019, 'USA'), (2020, 'Russia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT launch_agency, COUNT(*) as satellite_count FROM satellite_launches WHERE launch_year BETWEEN 2010 AND 2020 GROUP BY launch_agency;"
    },
    {
        "instruction": "입력 텍스트: 경매에서 100,000달러 이상에 팔린 조각상들의 평균 가격을 찾아보세요.\n\nDDL statements:\nCREATE TABLE sculpture_sales (id INT, sculpture_name VARCHAR(50), artist_name VARCHAR(50), price DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) as avg_price FROM sculpture_sales WHERE price > 100000 AND sculpture_name LIKE '%sculpture%';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 출신 변호사들이 매년 평균적으로 처리하는 사건 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE AttorneyLocationYear (AttorneyID INT, StartYear INT, Location VARCHAR(50)); INSERT INTO AttorneyLocationYear (AttorneyID, StartYear, Location) VALUES (1, 2018, 'New York'), (2, 2019, 'Texas'), (3, 2015, 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(YEAR, StartYear, GETDATE())) FROM AttorneyLocationYear WHERE Location = 'California';"
    },
    {
        "instruction": "입력 텍스트: 중동과 동남아시아 지역의 기관들이 제공하는 디지털 리터러시 교육의 월별 최소 및 최대 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DigitalLiteracyTraining(org VARCHAR(255), region VARCHAR(255), hours DECIMAL(5,2));INSERT INTO DigitalLiteracyTraining(org, region, hours) VALUES('OrgA', 'Middle East', 10.00), ('OrgB', 'Southeast Asia', 12.00), ('OrgC', 'Middle East', 15.00), ('OrgD', 'Southeast Asia', 8.00), ('OrgE', 'Middle East', 11.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(hours), MAX(hours) FROM DigitalLiteracyTraining WHERE region IN ('Middle East', 'Southeast Asia');"
    },
    {
        "instruction": "입력 텍스트: 화학물질 'F'의 시간에 따른 생산량 추이는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE chemical_production_5 (date DATE, chemical VARCHAR(10), quantity INT); INSERT INTO chemical_production_5 VALUES ('2021-01-01', 'F', 500), ('2021-01-05', 'F', 550), ('2021-02-10', 'F', 600), ('2021-03-20', 'F', 650);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date, quantity FROM chemical_production_5 WHERE chemical = 'F' ORDER BY date;"
    },
    {
        "instruction": "입력 텍스트: \"accommodations\" 테이블에서 이동 장애가 있는 학생들을 위한 숙박 시설의 총 비용을 계산하세요.\n\nDDL statements:\nCREATE TABLE accommodations (id INT, student_id INT, accommodation_type VARCHAR(255), cost FLOAT); INSERT INTO accommodations (id, student_id, accommodation_type, cost) VALUES (1, 123, 'visual_aids', 250.0), (2, 456, 'mobility_aids', 300.0), (3, 789, 'large_print_materials', 120.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM accommodations WHERE accommodation_type = 'mobility_aids';"
    },
    {
        "instruction": "입력 텍스트: 연령대별 1인당 평균 식량 지원금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE FoodAid (AgeGroup VARCHAR(20), PersonID INT, FoodAidAmount DECIMAL(10,2)); INSERT INTO FoodAid (AgeGroup, PersonID, FoodAidAmount) VALUES ('0-5', 1, 10.00), ('6-10', 2, 12.00), ('11-15', 3, 15.00), ('16-20', 4, 18.00), ('21-25', 5, 20.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AgeGroup, AVG(FoodAidAmount) as AvgFoodAidPerPerson FROM FoodAid GROUP BY AgeGroup;"
    },
    {
        "instruction": "입력 텍스트: restorative_justice_programs 테이블에서 ID가 3인 범죄자의 기록을 수정하여 주(State)를 'Oregon'으로 변경하세요.\n\nDDL statements:\nCREATE TABLE restorative_justice_programs (id INT, offender_name TEXT, age INT, state TEXT); INSERT INTO restorative_justice_programs (id, offender_name, age, state) VALUES (1, 'John Doe', 34, 'California'); INSERT INTO restorative_justice_programs (id, offender_name, age, state) VALUES (2, 'Jane Smith', 27, 'California'); INSERT INTO restorative_justice_programs (id, offender_name, age, state) VALUES (3, 'Mike Brown', 30, 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE restorative_justice_programs SET state = 'Oregon' WHERE id = 3;"
    },
    {
        "instruction": "입력 텍스트: 플로리다에서 한 해에 1000건 이상의 사건을 처리한 법률 지원 기관들이 처리한 평균 사건 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE legal_aid_organizations (org_id INT, cases_handled INT, year INT, state VARCHAR(20)); INSERT INTO legal_aid_organizations (org_id, cases_handled, year, state) VALUES (1, 2000, 2021, 'Florida'), (2, 1200, 2020, 'Florida'), (3, 1500, 2019, 'Florida'), (4, 1100, 2018, 'Florida'), (5, 1400, 2017, 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cases_handled) FROM legal_aid_organizations WHERE cases_handled > 1000 AND year >= 2017 AND state = 'Florida';"
    },
    {
        "instruction": "입력 텍스트: Alberta'에 있는 차선이 5개 이상인 고속도로의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE highways (id INT, name VARCHAR(50), location VARCHAR(50), num_lanes INT); INSERT INTO highways (id, name, location, num_lanes) VALUES (1, 'Calgary-Edmonton Corridor', 'Alberta', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM highways WHERE location = 'Alberta' GROUP BY location HAVING COUNT(*) > 5;"
    },
    {
        "instruction": "입력 텍스트: 라틴 음악 장르의 디지털 및 물리적 판매로부터의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE sales (id INT, genre TEXT, digital FLOAT, physical FLOAT); INSERT INTO sales (id, genre, digital, physical) VALUES (1, 'Latin', 50000.0, 30000.0), (2, 'Pop', 60000.0, 40000.0), (3, 'Latin', 70000.0, 25000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(digital + physical) FROM sales WHERE genre = 'Latin';"
    },
    {
        "instruction": "입력 텍스트: 인도양에 서식하는 개체 수가 50만 마리를 초과하는 해양 생물 종의 수는 몇 종인가요?\n\nDDL statements:\nCREATE TABLE marine_species_indian (species_name TEXT, population NUMERIC); INSERT INTO marine_species_indian (species_name, population) VALUES ('Whale Shark', '1000000'); INSERT INTO marine_species_indian (species_name, population) VALUES ('Manta Ray', '700000');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_species_indian WHERE population > 500000;"
    },
    {
        "instruction": "입력 텍스트: HR 부서에서 심각도가 높은 취약점의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, department VARCHAR(255), severity VARCHAR(255)); INSERT INTO vulnerabilities (id, department, severity) VALUES (1, 'Finance', 'medium'), (2, 'HR', 'high'), (3, 'Finance', 'low');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vulnerabilities WHERE department = 'HR' AND severity = 'high';"
    },
    {
        "instruction": "입력 텍스트: 각 프로젝트의 '설계' 단계를 완료하는 데 평균적으로 얼마나 걸리나요?\n\nDDL statements:\nCREATE TABLE Project_Timeline (id INT, project VARCHAR(30), phase VARCHAR(20), start_date DATE, end_date DATE, labor_cost FLOAT); INSERT INTO Project_Timeline (id, project, phase, start_date, end_date, labor_cost) VALUES (1, 'Green Tower', 'Planning', '2021-05-01', '2021-07-31', 50000.00), (2, 'Solar Park', 'Design', '2021-01-01', '2021-03-31', 35000.00), (3, 'Wind Farm', 'Design', '2022-06-01', '2022-09-30', 30000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT phase, AVG(DATEDIFF(end_date, start_date)) FROM Project_Timeline WHERE phase = 'Design' GROUP BY phase;"
    },
    {
        "instruction": "입력 텍스트: 가장 많은 플레이 시간을 가진 상위 3명의 플레이어를 찾으세요.\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), TotalPlaytime INT); INSERT INTO Players (PlayerID, PlayerName, TotalPlaytime) VALUES (1, 'John Doe', 100); INSERT INTO Players (PlayerID, PlayerName, TotalPlaytime) VALUES (2, 'Jane Smith', 200); INSERT INTO Players (PlayerID, PlayerName, TotalPlaytime) VALUES (3, 'Mike Johnson', 150); INSERT INTO Players (PlayerID, PlayerName, TotalPlaytime) VALUES (4, 'Sara Lee', 250); INSERT INTO Players (PlayerID, PlayerName, TotalPlaytime) VALUES (5, 'Tom White', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT PlayerName, TotalPlaytime FROM Players ORDER BY TotalPlaytime DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 어떤 예술가들이 그림과 조각 모두를 만들었으며, 그들의 작품은 갤러리 C에 몇 점이나 있나요?\n\nDDL statements:\nCREATE TABLE GalleryC(id INT, type VARCHAR(20), artist VARCHAR(30)); INSERT INTO GalleryC(id, type, artist) VALUES (1, 'Painting', 'Picasso'), (2, 'Sculpture', 'Picasso'), (3, 'Painting', 'Dali'), (4, 'Sculpture', 'Dali');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist FROM GalleryC WHERE type = 'Painting' INTERSECT SELECT artist FROM GalleryC WHERE type = 'Sculpture'; SELECT COUNT(*) FROM (SELECT artist FROM GalleryC WHERE type = 'Painting' INTERSECT SELECT artist FROM GalleryC WHERE type = 'Sculpture') AS subquery WHERE artist IN (SELECT artist FROM GalleryC);"
    },
    {
        "instruction": "입력 텍스트: 각 회사별로 발사된 우주선은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE spacecraft (id INT, name VARCHAR(255), launch_company VARCHAR(255), launch_date DATE, max_speed FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT launch_company, COUNT(*) as num_spacecraft FROM spacecraft GROUP BY launch_company;"
    },
    {
        "instruction": "입력 텍스트: 2022년 기준 캐나다에 존재하는 전기차 충전소는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE ChargingStations (Id INT, Country VARCHAR(255), Year INT, Stations INT); INSERT INTO ChargingStations (Id, Country, Year, Stations) VALUES (1, 'Canada', 2020, 5000), (2, 'Canada', 2021, 6000), (3, 'Canada', 2022, NULL), (4, 'USA', 2020, 12000), (5, 'USA', 2021, 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ChargingStations WHERE Country = 'Canada' AND Year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 100일 이상 우주 임무에 참여한 우주비행사들의 고유한 의료 상태를 나열하세요.\n\nDDL statements:\nCREATE TABLE Astronaut_Medical_3 (Astronaut_ID INT, Medical_Condition VARCHAR(50), Mission_Duration INT); INSERT INTO Astronaut_Medical_3 (Astronaut_ID, Medical_Condition, Mission_Duration) VALUES (1, 'Motion Sickness', 300); INSERT INTO Astronaut_Medical_3 (Astronaut_ID, Medical_Condition, Mission_Duration) VALUES (2, 'Space Adaptation Syndrome', 35); INSERT INTO Astronaut_Medical_3 (Astronaut_ID, Medical_Condition, Mission_Duration) VALUES (3, 'Back Pain', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT Medical_Condition FROM Astronaut_Medical_3 WHERE Mission_Duration > 100;"
    },
    {
        "instruction": "입력 텍스트: GreenTown'에 있는 지속 가능한 도시 개발 인증을 받은 부동산의 공동 소유주는 누구인가요?\n\nDDL statements:\nCREATE TABLE properties (id INT, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), price INT, certification_type VARCHAR(255)); INSERT INTO properties (id, address, city, state, price, certification_type) VALUES (5, '321 Green Ave', 'GreenTown', 'OR', 650000, 'GreenUrb');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT co_owners.owner_name FROM co_owners INNER JOIN properties ON co_owners.property_id = properties.id WHERE properties.city = 'GreenTown' AND properties.certification_type = 'GreenUrb';"
    },
    {
        "instruction": "입력 텍스트: VR 게임에서 최소 점수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Scores (Score INT, GameType VARCHAR(20)); INSERT INTO Scores (Score, GameType) VALUES (1000, 'VR'); INSERT INTO Scores (Score, GameType) VALUES (200, 'Non-VR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Score) FROM Scores WHERE GameType = 'VR';"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 정신 건강을 위해 할당된 병원 침대는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE hospitals (id INT, state VARCHAR(20), beds INT, mental_health BOOLEAN); INSERT INTO hospitals (id, state, beds, mental_health) VALUES (1, 'California', 100, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(beds) FROM hospitals WHERE mental_health = TRUE GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2018년 이전에 설립된 회사들의 평균 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE funding (funding_id INT, company_id INT, amount DECIMAL(10,2)); CREATE TABLE companies (company_id INT, founding_year INT); INSERT INTO funding (funding_id, company_id, amount) VALUES (1, 1, 150000.00), (2, 2, 200000.00), (3, 3, 250000.00); INSERT INTO companies (company_id, founding_year) VALUES (1, 2018), (2, 2017), (3, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(funding.amount) as avg_funding_pre_2018 FROM funding JOIN companies ON funding.company_id = companies.company_id WHERE companies.founding_year < 2018;"
    },
    {
        "instruction": "입력 텍스트: 수학과 대학원생 중 지난 1년 이내에 첫 연구 장학금을 받은 학생들의 연구 출판물 이름과 출판 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE students (student_id INT PRIMARY KEY, name VARCHAR(50), department VARCHAR(50), grant_recipient BOOLEAN, first_grant_date DATE); INSERT INTO students (student_id, name, department, grant_recipient, first_grant_date) VALUES (1, 'Fiona', 'Mathematics', TRUE, '2022-01-01'); CREATE TABLE publications (publication_id INT PRIMARY KEY, student_id INT, publication_date DATE); INSERT INTO publications (publication_id, student_id, publication_date) VALUES (1, 1, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name, p.publication_date FROM students s INNER JOIN publications p ON s.student_id = p.student_id WHERE s.department = 'Mathematics' AND s.grant_recipient = TRUE AND s.first_grant_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 야생 서식지의 총 면적이 헥타르 단위로 얼마인가요?\n\nDDL statements:\nCREATE TABLE wildlife_habitats (id INT, name VARCHAR(50), area_ha FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(area_ha) FROM wildlife_habitats;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 '소매' 및 '운송' 조합에 가입한 회원 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE retail_union (id INT, name VARCHAR, dob DATE); INSERT INTO retail_union (id, name, dob) VALUES (1, 'Irene', '2020-02-03'); CREATE TABLE transportation_union (id INT, name VARCHAR, dob DATE); INSERT INTO transportation_union (id, name, dob) VALUES (1, 'Jack', '2020-05-18');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ( (SELECT * FROM retail_union WHERE YEAR(dob) = 2020) UNION (SELECT * FROM transportation_union WHERE YEAR(dob) = 2020) ) AS all_unions;"
    },
    {
        "instruction": "입력 텍스트: 각 기부자가 기부한 총 금액을 기부한 총액 순으로 나열하시오.\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, Name varchar(50), TotalDonation numeric(10,2)); INSERT INTO Donors (DonorID, Name, TotalDonation) VALUES (1, 'John Doe', 500.00), (2, 'Jane Smith', 350.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, SUM(TotalDonation) AS TotalDonated FROM Donors GROUP BY Name ORDER BY TotalDonated DESC;"
    },
    {
        "instruction": "입력 텍스트: 주택 부문에서의 최소 및 최대 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE housing_investments (investment_amount INT); INSERT INTO housing_investments (investment_amount) VALUES (1200000), (1800000), (1000000), (2000000), (2500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(investment_amount) as min_investment, MAX(investment_amount) as max_investment FROM housing_investments;"
    },
    {
        "instruction": "입력 텍스트: 2021년 6월 한 달간 회원 0002의 일일 체크인 횟수를 확인하세요.\n\nDDL statements:\nCREATE TABLE check_ins (check_in_id INT, member_id INT, check_in_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(check_in_id) as daily_checkins FROM check_ins WHERE member_id = 0002 AND check_in_date BETWEEN '2021-06-01' AND '2021-06-30';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 뉴저지 주의 폐수 처리 시설 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE wastewater_facilities (id INT PRIMARY KEY, state VARCHAR(50), facility_count INT); INSERT INTO wastewater_facilities (id, state, facility_count) VALUES (1, 'New York', 25), (2, 'New Jersey', 35), (3, 'Pennsylvania', 45), (4, 'Maryland', 55), (5, 'Virginia', 65);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, facility_count FROM wastewater_facilities WHERE state IN ('New York', 'New Jersey');"
    },
    {
        "instruction": "입력 텍스트: MLB에서 'C'로 시작하는 마스코트를 가진 팀들이 이긴 게임 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE mlb_teams_mascots (id INT, name VARCHAR(100), mascot VARCHAR(50), wins INT); INSERT INTO mlb_teams_mascots (id, name, mascot, wins) VALUES (1, 'Cardinals', 'Cardinal', 75), (2, 'Cubs', 'Cub', 65), (3, 'Rangers', 'Ranger', 60), (4, 'Reds', 'Red', 68), (5, 'Royals', 'Royal', 62), (6, 'Tigers', 'Tiger', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(wins) FROM mlb_teams_mascots WHERE mascot LIKE 'C%';"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역에 위치한 매장에서 총 수량이 100개 이상 판매된 제품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE stores (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), region VARCHAR(50)); CREATE TABLE inventory (id INT PRIMARY KEY, store_id INT, product_id INT, quantity INT, FOREIGN KEY (store_id) REFERENCES stores(id), FOREIGN KEY (product_id) REFERENCES products(id)); CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), price DECIMAL(5,2), supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES suppliers(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.name AS product_name, SUM(inventory.quantity) AS total_quantity FROM products INNER JOIN inventory ON products.id = inventory.product_id INNER JOIN stores ON inventory.store_id = stores.id WHERE stores.region = 'Asia' GROUP BY products.name HAVING total_quantity > 100;"
    },
    {
        "instruction": "입력 텍스트: 새로운 메뉴 항목 '스테이크'를 가격 25.50달러로 추가하세요.\n\nDDL statements:\nCREATE TABLE menu_items (item_id INT, item_name TEXT, price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO menu_items (item_name, price) VALUES ('Steak', 25.50);"
    },
    {
        "instruction": "입력 텍스트: basketball_teams 테이블에 있는 선수들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE basketball_teams (team_id INT, team_name VARCHAR(100), player_name VARCHAR(100), player_age INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(player_age) FROM basketball_teams;"
    },
    {
        "instruction": "입력 텍스트: 도시 농업 프로젝트 중 수확량이 2.5톤을 초과하는 프로젝트는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE urban_agriculture (crop_id INT, crop_name TEXT, yield FLOAT); INSERT INTO urban_agriculture (crop_id, crop_name, yield) VALUES (1, 'Tomatoes', 2.3), (2, 'Lettuce', 1.9), (3, 'Cucumbers', 3.1), (4, 'Carrots', 2.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM urban_agriculture WHERE yield > 2.5;"
    },
    {
        "instruction": "입력 텍스트: 일본 도시 지역에서 1인당 전기 스쿠터의 평균 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE urban_transportation (id INT, city VARCHAR(255), country VARCHAR(255), population INT, electric_scooters INT); INSERT INTO urban_transportation (id, city, country, population, electric_scooters) VALUES (1, 'Tokyo', 'Japan', 9000000, 30000), (2, 'Osaka', 'Japan', 2500000, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(electric_scooters/population) FROM urban_transportation WHERE country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기 각 차량 유형별 총 유지보수 비용은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE vehicle_maintenance (id INT, vehicle_type VARCHAR(20), maintenance_date DATE, cost FLOAT); INSERT INTO vehicle_maintenance (id, vehicle_type, maintenance_date, cost) VALUES (1, 'Bus', '2021-07-05', 500), (2, 'Tram', '2021-07-07', 800), (3, 'Train', '2021-07-09', 1200), (4, 'Bus', '2021-10-05', 600), (5, 'Tram', '2021-10-07', 900), (6, 'Train', '2021-10-09', 1300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_type, SUM(cost) as total_cost FROM vehicle_maintenance WHERE maintenance_date BETWEEN '2021-07-01' AND '2021-09-30' GROUP BY vehicle_type;"
    },
    {
        "instruction": "입력 텍스트: 아메리카 대륙의 각 국가에서 진행 중인 기후 적응 프로젝트 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE climate_adaptation (project_name TEXT, country TEXT);INSERT INTO climate_adaptation (project_name, country) VALUES ('Coastal Protection', 'USA'), ('Water Management', 'Mexico'), ('Disaster Preparedness', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(project_name) as num_projects FROM climate_adaptation WHERE country IN ('USA', 'Canada', 'Mexico') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 날짜별로 전날 대비 CO2 가격 변동은 얼마인가요?\n\nDDL statements:\nCREATE TABLE CO2Price (Date DATE, Price INT); INSERT INTO CO2Price (Date, Price) VALUES ('2022-01-01', 20), ('2022-01-02', 22), ('2022-01-03', 24);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Date, LAG(Price) OVER (ORDER BY Date) AS PreviousDayPrice, Price, Price - LAG(Price) OVER (ORDER BY Date) AS CO2PriceChange FROM CO2Price;"
    },
    {
        "instruction": "입력 텍스트: 중동 지역 여성 투자자들의 샤리아 준수 투자 포트폴리오의 연도별 평균 수익률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Investments (Id INT, InvestorGender VARCHAR(10), Location VARCHAR(20), InvestmentType VARCHAR(20), Return DECIMAL(5,2), InvestmentYear INT); INSERT INTO Investments (Id, InvestorGender, Location, InvestmentType, Return, InvestmentYear) VALUES (1, 'Female', 'Middle East', 'Shariah Compliant', 8.56, 2020), (2, 'Female', 'Middle East', 'Shariah Compliant', 9.15, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Return) AS Avg_Return, InvestmentYear FROM Investments WHERE InvestmentType = 'Shariah Compliant' AND InvestorGender = 'Female' GROUP BY InvestmentYear;"
    },
    {
        "instruction": "입력 텍스트: 20명 이상의 저자가 있는 AI 안전 연구 논문 기록을 'Many Authors'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE AI_Safety_Papers2 (id INT, title TEXT, authors INT); INSERT INTO AI_Safety_Papers2 (id, title, authors) VALUES (1, 'Paper1', 15), (2, 'Paper2', 25), (3, 'Paper3', 35), (4, 'Paper4', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE AI_Safety_Papers2 SET title = 'Many Authors' WHERE authors > 20;"
    },
    {
        "instruction": "입력 텍스트: \"cargo_id\", \"vessel_id\", \"destination\", \"delivery_date\" 열을 가진 \"cargo\"라는 이름의 테이블을 생성하세요.\n\nDDL statements:\nCREATE TABLE cargo (cargo_id INT, vessel_id INT, destination VARCHAR(50), delivery_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE cargo (cargo_id INT, vessel_id INT, destination VARCHAR(50), delivery_date DATE);"
    },
    {
        "instruction": "입력 텍스트: 모든 고유한 교량 유형과 그들의 최대 건설 높이를 교량 유형별로 오름차순으로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE BridgeConstruction (BridgeID INT, BridgeType VARCHAR(50), ConstructionHeight DECIMAL(5,2)); INSERT INTO BridgeConstruction (BridgeID, BridgeType, ConstructionHeight) VALUES (1, 'Suspension', 350.00), (2, 'Arch', 120.50), (3, 'Beam', 45.60), (4, 'Cable-stayed', 220.75), (5, 'Truss', 80.25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT BridgeType, MAX(ConstructionHeight) as MaxHeight FROM BridgeConstruction GROUP BY BridgeType ORDER BY BridgeType ASC;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 농촌 지역에 설립된 의료 시설의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE rural_areas (area_id INT, area_name VARCHAR(255));CREATE TABLE medical_facilities (facility_id INT, facility_name VARCHAR(255), area_id INT, establishment_date DATE);INSERT INTO rural_areas (area_id, area_name) VALUES (1, 'Rural A'), (2, 'Rural B');INSERT INTO medical_facilities (facility_id, facility_name, area_id, establishment_date) VALUES (1, 'Clinic 1', 1, '2018-01-01'), (2, 'Hospital 1', 1, '2020-01-01'), (3, 'Clinic 2', 2, '2017-01-01'), (4, 'Hospital 2', 2, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM medical_facilities m JOIN rural_areas r ON m.area_id = r.area_id WHERE r.area_name IN ('Rural A', 'Rural B') AND m.establishment_date >= DATEADD(year, -5, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 청각 장애가 있는 학생들에게 제공되는 숙박 시설의 최소 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Accommodations (id INT, student VARCHAR(255), cost FLOAT); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(cost) FROM Accommodations INNER JOIN Students ON Accommodations.student = Students.id WHERE disability = 'hearing impairment';"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 댄스 공연에 대한 총 자금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DanceEvents (id INT, title VARCHAR(50), date DATE); INSERT INTO DanceEvents (id, title, date) VALUES (1, 'Ballet Performance', '2019-06-01'); INSERT INTO DanceEvents (id, title, date) VALUES (2, 'Contemporary Dance', '2021-02-20'); CREATE TABLE DanceFunding (id INT, event_id INT, source VARCHAR(50), amount FLOAT, funding_date DATE); INSERT INTO DanceFunding (id, event_id, source, amount, funding_date) VALUES (1, 1, 'City Grant', 10000, '2018-12-01'); INSERT INTO DanceFunding (id, event_id, source, amount, funding_date) VALUES (2, 2, 'Private Donor', 15000, '2022-01-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM DanceFunding WHERE funding_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND CURDATE();"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 중동 지역에서 VR 기술을 채택한 사람들의 평균 나이를 성별로 그룹화하여 찾으세요.\n\nDDL statements:\nCREATE TABLE players (id INT, name VARCHAR(50), age INT, gender VARCHAR(50), country VARCHAR(50)); INSERT INTO players (id, name, age, gender, country) VALUES (1, 'Ahmed Al-Said', 30, 'Male', 'Saudi Arabia'); INSERT INTO players (id, name, age, gender, country) VALUES (2, 'Fatima Al-Fahad', 25, 'Female', 'UAE'); CREATE TABLE vr_adopters (id INT, player_id INT, adoption_date DATE); INSERT INTO vr_adopters (id, player_id, adoption_date) VALUES (1, 1, '2022-03-01'); INSERT INTO vr_adopters (id, player_id, adoption_date) VALUES (2, 2, '2022-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT players.gender, AVG(players.age) FROM players INNER JOIN vr_adopters ON players.id = vr_adopters.player_id WHERE vr_adopters.adoption_date >= DATEADD(year, -1, GETDATE()) AND players.country IN ('Saudi Arabia', 'UAE', 'Qatar');"
    },
    {
        "instruction": "입력 텍스트: 브라질'에서 공연한 모든 아티스트의 이름과 장르를 보여주세요.\n\nDDL statements:\nCREATE TABLE artists (id INT, name VARCHAR(255), genre VARCHAR(255), home_country VARCHAR(255)); CREATE TABLE artist_concerts (artist_id INT, country VARCHAR(255), city VARCHAR(255)); INSERT INTO artists (id, name, genre, home_country) VALUES (1, 'Taylor Swift', 'Country Pop', 'United States'); INSERT INTO artist_concerts (artist_id, country, city) VALUES (1, 'Canada', 'Toronto'), (1, 'Brazil', 'Rio de Janeiro');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, a.genre FROM artists a JOIN artist_concerts ac ON a.id = ac.artist_id WHERE ac.country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 동등성 상담 횟수가 가장 많은 커뮤니티 보건 근로자의 우편번호는 무엇인가요?\n\nDDL statements:\nCREATE TABLE community_health_workers (id INT, name TEXT, zip TEXT, consultations INT); INSERT INTO community_health_workers (id, name, zip, consultations) VALUES (1, 'John Doe', '12345', 30), (2, 'Jane Smith', '67890', 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT zip FROM community_health_workers WHERE consultations = (SELECT MAX(consultations) FROM community_health_workers);"
    },
    {
        "instruction": "입력 텍스트: 정치 관련 스토리가 출판된 수에 따라 상위 3개 국가를 내림차순으로 순위를 매기세요.\n\nDDL statements:\nCREATE TABLE stories (id INT, title VARCHAR(100), country VARCHAR(50), story_type VARCHAR(50)); INSERT INTO stories (id, title, country, story_type) VALUES (1, 'Election coverage', 'USA', 'Political'), (2, 'Government policy analysis', 'Canada', 'Political'), (3, 'Political scandal expose', 'Mexico', 'Political');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, RANK() OVER (ORDER BY COUNT(*) DESC) ranking FROM stories WHERE story_type = 'Political' GROUP BY country HAVING ranking <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2023년 1월에 데이터베이스에 추가된 호텔은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE hotels (id INT, name TEXT, region TEXT, added_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hotels WHERE MONTH(added_date) = 1 AND YEAR(added_date) = 2023;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티에 위치한 매립지의 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfill_capacity_city_v2 (location VARCHAR(20), city VARCHAR(20), capacity INT); INSERT INTO landfill_capacity_city_v2 (location, city, capacity) VALUES ('New York', 'New York City', 50000), ('Los Angeles', 'Los Angeles', 45000), ('Miami', 'Miami', 30000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT capacity FROM landfill_capacity_city_v2 WHERE location = 'New York' AND city = 'New York City';"
    },
    {
        "instruction": "입력 텍스트: 어느 우주 임무가 가장 짧은 기간 동안 수행되었나요?\n\nDDL statements:\nCREATE TABLE space_missions (id INT, name VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO space_missions VALUES (1, 'Apollo 11', '1969-07-16', '1969-07-24'), (2, 'Apollo 13', '1970-04-11', '1970-04-17'), (3, 'Mars Pathfinder', '1996-12-04', '1997-09-27'), (4, 'Cassini-Huygens', '1997-10-15', '2017-09-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, DATEDIFF(end_date, start_date) as mission_duration FROM space_missions ORDER BY mission_duration ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 소수 대표 개발자들이 만든 모든 스마트 계약의 이름과 생성 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE smart_contracts (id INT, name VARCHAR(255), developer VARCHAR(255), creation_date DATE, country VARCHAR(255)); INSERT INTO smart_contracts (id, name, developer, creation_date, country) VALUES (1, 'Contract 1', 'Aisha Abdalla', '2020-12-12', 'Kenya'), (2, 'Contract 2', 'Kwame Opoku', '2021-03-05', 'Ghana');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, creation_date FROM smart_contracts WHERE developer IN ('Aisha Abdalla', 'Kwame Opoku');"
    },
    {
        "instruction": "입력 텍스트: NBA 게임에서 한 선수가 한 경기에서 기록한 최고 득점은 몇 점인가요?\n\nDDL statements:\nCREATE TABLE highest_scores (player VARCHAR(100), team VARCHAR(50), points INT); INSERT INTO highest_scores (player, team, points) VALUES ('Kobe Bryant', 'Los Angeles Lakers', 81), ('Michael Jordan', 'Chicago Bulls', 69);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(points) FROM highest_scores;"
    },
    {
        "instruction": "입력 텍스트: 마스코트 이름이 'B'로 시작하는 팀들의 총 승리 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(50), wins INT, mascot VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(teams.wins) FROM teams WHERE teams.mascot LIKE 'B%';"
    },
    {
        "instruction": "입력 텍스트: 각 월에 유기농 제품을 구매한 고유 고객 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Purchases (PurchaseID INT, ProductID INT, CustomerID INT, PurchaseDate DATE, Organic BOOLEAN); INSERT INTO Purchases (PurchaseID, ProductID, CustomerID, PurchaseDate, Organic) VALUES (1, 1, 1, '2021-01-01', TRUE), (2, 2, 2, '2021-01-05', FALSE), (3, 3, 3, '2021-01-10', TRUE), (4, 4, 1, '2021-02-01', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM PurchaseDate) AS Month, COUNT(DISTINCT CustomerID) FROM Purchases WHERE Organic = TRUE GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: 여성 예술가들의 조각 작품 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, Name VARCHAR(100), Nationality VARCHAR(50), Gender VARCHAR(10)); INSERT INTO Artists VALUES (1, 'Camille Claudel', 'French', 'female'); INSERT INTO Artists VALUES (2, 'Auguste Rodin', 'French', 'male'); CREATE TABLE Artwork (ArtworkID INT, Title VARCHAR(100), Type VARCHAR(50), Price FLOAT, ArtistID INT); INSERT INTO Artwork VALUES (1, 'The Waltz', 'Sculpture', 500000, 1); INSERT INTO Artwork VALUES (2, 'The Thinker', 'Sculpture', 1000000, 2); INSERT INTO Artwork VALUES (3, 'The Mature Age', 'Sculpture', 700000, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(A.Price) FROM Artwork A JOIN Artists AR ON A.ArtistID = AR.ArtistID WHERE AR.Gender = 'female' AND A.Type = 'Sculpture';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 발행된 샤리아 준수 대출의 총 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE loans (id INT, type TEXT, issued_date DATE); INSERT INTO loans (id, type, issued_date) VALUES (1, 'Shariah-compliant', '2022-04-22'), (2, 'Conventional', '2022-02-15'), (3, 'Shariah-compliant', '2022-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM loans WHERE type = 'Shariah-compliant' AND issued_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 각 주별로 접수된 정신 건강 동등성 불만 사항은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE MentalHealthParity (ID INT, State VARCHAR(20), Year INT, Complaint INT); INSERT INTO MentalHealthParity (ID, State, Year, Complaint) VALUES (1, 'California', 2020, 120), (2, 'Texas', 2020, 150), (3, 'New York', 2020, 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, COUNT(Complaint) as Complaints FROM MentalHealthParity WHERE Year = 2020 GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: Entertainment' 카테고리에 속하고 지난 주에 발행된 기사들의 평균 단어 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE articles (id INT, category VARCHAR(255), word_count INT, publication_date DATE); INSERT INTO articles (id, category, word_count, publication_date) VALUES\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(word_count) as avg_word_count FROM articles WHERE category = 'Entertainment' AND publication_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);"
    },
    {
        "instruction": "입력 텍스트: energy_efficiency' 스키마에 있는 에너지 효율 프로그램의 수는 몇 개입니까?\n\nDDL statements:\nCREATE SCHEMA energy_efficiency; CREATE TABLE energy_efficiency_programs (id INT, name VARCHAR(100), type VARCHAR(100)); INSERT INTO energy_efficiency_programs (id, name, type) VALUES (1, 'Program E', 'Residential'), (2, 'Program F', 'Commercial');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM energy_efficiency.energy_efficiency_programs;"
    },
    {
        "instruction": "입력 텍스트: \"TrafficViolations\" 테이블에서 주거 지역에서 발생한 교통 위반 유형별로 최소 벌금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE TrafficViolations (id INT, violation_type VARCHAR(50), location VARCHAR(50), fine DECIMAL(5,2)); INSERT INTO TrafficViolations (id, violation_type, location, fine) VALUES (1, 'Speeding', 'School Zone', 100), (2, 'Illegal Parking', 'Business District', 50), (3, 'Speeding', 'Residential Area', 30), (4, 'Running Red Light', 'School Zone', 150), (5, 'Speeding', 'Residential Area', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT violation_type, MIN(fine) as min_fine FROM TrafficViolations WHERE location LIKE '%Residential%' GROUP BY violation_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 방위 산업 분야에서 발견된 사이버 보안 취약점을 확인하세요.\n\nDDL statements:\nCREATE TABLE cybersecurity_vulnerabilities (id INT, sector TEXT, vulnerability TEXT, discovery_date DATE); INSERT INTO cybersecurity_vulnerabilities (id, sector, vulnerability, discovery_date) VALUES (1, 'Defense', 'Buffer Overflow', '2021-06-01'), (2, 'Finance', 'SQL Injection', '2021-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.sector, c.vulnerability FROM cybersecurity_vulnerabilities c WHERE c.discovery_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND c.sector = 'Defense';"
    },
    {
        "instruction": "입력 텍스트: 록키 산맥에서의 광산 운영의 평균 환경 영향 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mining_operations(id INT, name VARCHAR, location VARCHAR, impact_score FLOAT); INSERT INTO mining_operations(id, name, location, impact_score) VALUES (1, 'Delta Mining', 'Rocky Mountains', 78.2), (2, 'Echo Mining', 'Appalachians', 54.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(impact_score) FROM mining_operations WHERE location = 'Rocky Mountains';"
    },
    {
        "instruction": "입력 텍스트: startups' 테이블에 Startup DEF의 펀딩 금액 7000000으로 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE startups (startup_name VARCHAR(50), funding_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO startups (startup_name, funding_amount) VALUES ('Startup DEF', 7000000);"
    },
    {
        "instruction": "입력 텍스트: Employees 테이블의 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), TrainingCompletion DATE); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, TrainingCompletion) VALUES (1, 'John', 'Doe', 'HR', '2022-01-01'), (2, 'Jane', 'Smith', 'IT', '2022-02-15'), (3, 'Mike', 'Johnson', 'Finance', NULL), (4, 'Jamal', 'Jackson', 'IT', '2022-03-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Employees;"
    },
    {
        "instruction": "입력 텍스트: 각 요리에 대한 재료 총 비용은 얼마이며, 지난 한 달 이내에 구입한 재료만 포함합니까?\n\nDDL statements:\nCREATE TABLE dishes (dish_id INT, dish_name VARCHAR(255)); CREATE TABLE ingredients (ingredient_id INT, ingredient_name VARCHAR(255), dish_id INT, quantity DECIMAL(5,2), cost DECIMAL(5,2), purchase_date DATE); INSERT INTO dishes VALUES (1, 'Spaghetti Bolognese'); INSERT INTO ingredients VALUES (1, 'Ground Beef', 1, 1.50, 5.99, '2022-03-16');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dish_name, SUM(quantity * cost) as total_cost FROM dishes d JOIN ingredients i ON d.dish_id = i.dish_id WHERE purchase_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY dish_name;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 교육과 보건 분야에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Budget (Year INT, Category VARCHAR(20), Amount INT); INSERT INTO Budget (Year, Category, Amount) VALUES (2020, 'Education', 12000), (2020, 'Healthcare', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Amount) FROM Budget WHERE Year = 2020 AND Category IN ('Education', 'Healthcare');"
    },
    {
        "instruction": "입력 텍스트: 각 차량 유형별 유지보수 요청 횟수를 구하세요.\n\nDDL statements:\nCREATE TABLE maintenance (maintenance_id INT, vehicle_id INT, maintenance_type TEXT, maintenance_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_id, maintenance_type, COUNT(*) AS num_requests FROM maintenance GROUP BY vehicle_id, maintenance_type;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 베테랑 실업률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE veteran_employment (employment_id INT, region TEXT, veteran_unemployment_rate FLOAT); INSERT INTO veteran_employment (employment_id, region, veteran_unemployment_rate) VALUES (6, 'Northeast', 0.05), (7, 'Midwest', 0.06), (8, 'South', 0.07), (9, 'West', 0.08);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(veteran_unemployment_rate) as avg_veteran_unemployment_rate FROM veteran_employment GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 재활용 프로그램이 있는 모든 공급업체를 나열합니다.\n\nDDL statements:\nCREATE TABLE suppliers (id INT, name VARCHAR(255), has_recycling_program BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM suppliers WHERE has_recycling_program = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 방위 외교 테이블에서 특정 국가의 외교 상태를 업데이트합니다.\n\nDDL statements:\nCREATE TABLE Defense_Diplomacy (id INT, country VARCHAR(255), status VARCHAR(255), last_update DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Defense_Diplomacy SET status = 'Active', last_update = CURDATE() WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 채용된 직원들의 직무별 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID int, FirstName varchar(50), LastName varchar(50), JobRole varchar(50), Ethnicity varchar(50), Salary decimal(10,2), HireDate date); INSERT INTO Employees (EmployeeID, FirstName, LastName, JobRole, Ethnicity, Salary, HireDate) VALUES (1, 'Sophia', 'Gonzales', 'Software Engineer', 'Hispanic', 85000, '2022-01-01'); INSERT INTO Employees (EmployeeID, FirstName, LastName, JobRole, Ethnicity, Salary, HireDate) VALUES (2, 'Liam', 'Johnson', 'Data Analyst', 'Caucasian', 70000, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT JobRole, AVG(Salary) as AvgSalary FROM Employees WHERE HireDate >= (CURRENT_DATE - INTERVAL '12 months') GROUP BY JobRole;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 고객들의 자산 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE client (id INT, name VARCHAR(255), address VARCHAR(255), assets DECIMAL(10, 2)); INSERT INTO client (id, name, address, assets) VALUES (1, 'Alex Rodriguez', 'New York', 150000.00), (2, 'Sarah Smith', 'New York', 200000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(assets) FROM client WHERE address = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 토론토'에 있는 도시 농업 이니셔티브는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE urban_agriculture_initiatives (id INT, name TEXT, location TEXT); INSERT INTO urban_agriculture_initiatives (id, name, location) VALUES (1, 'Initiative A', 'Toronto'), (2, 'Initiative B', 'Montreal'), (3, 'Initiative C', 'Toronto');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM urban_agriculture_initiatives WHERE location = 'Toronto';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 인도양에 도착한 선박은 몇 척입니까?\n\nDDL statements:\nCREATE TABLE vessel_tracking (id INT, vessel_name TEXT, arrival_date DATE, region TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vessel_tracking WHERE region = 'Indian ocean' AND arrival_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 도쿄 시에서의 1인당 평균 월간 수도 사용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE tokyo_water_consumption (id INT, date DATE, household_size INT, water_consumption FLOAT); INSERT INTO tokyo_water_consumption (id, date, household_size, water_consumption) VALUES (1, '2021-01-01', 4, 1000.0), (2, '2021-01-02', 3, 750.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(water_consumption / household_size) FROM tokyo_water_consumption WHERE date >= DATEADD(year, -1, CURRENT_DATE) AND city = 'Tokyo';"
    },
    {
        "instruction": "입력 텍스트: 러시아와 우크라이나에서 성공적이고 실패한 원조 임무의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE aid_missions (id INT, country VARCHAR(20), mission_type VARCHAR(10), mission_status VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, mission_type, COUNT(*) as total FROM aid_missions GROUP BY country, mission_type;"
    },
    {
        "instruction": "입력 텍스트: 미국과 중국의 화학 제조에서 발생하는 CO2 배출량 총합은 얼마입니까?\n\nDDL statements:\nCREATE TABLE CO2_Emissions (Country VARCHAR(255), Emission_Amount INT); INSERT INTO CO2_Emissions (Country, Emission_Amount) VALUES ('USA', 5000), ('China', 7000), ('India', 3000), ('Germany', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Emission_Amount) FROM CO2_Emissions WHERE Country IN ('USA', 'China');"
    },
    {
        "instruction": "입력 텍스트: 미국 출신의 플레이어들이 참가한 eSports 토너먼트의 평균 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, player_name TEXT, country TEXT); INSERT INTO players VALUES (1, 'John Doe', 'USA'), (2, 'Jane Smith', 'Canada'); CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT, country TEXT); INSERT INTO tournaments VALUES (1, 'ESL One', 'USA'), (2, 'DreamHack', 'Sweden'); CREATE TABLE scores (player_id INT, tournament_id INT, score INT); INSERT INTO scores VALUES (1, 1, 100), (1, 2, 90), (2, 1, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(scores.score) FROM scores JOIN players ON scores.player_id = players.player_id JOIN tournaments ON scores.tournament_id = tournaments.tournament_id WHERE players.country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: rural_development' 스키마에 있는 모든 농촌 인프라 프로젝트와 경제 다양화 노력의 이름과 완료 상태는 무엇이며, 중복되는 프로젝트 이름을 제외한 목록은 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA rural_development; Use rural_development; CREATE TABLE infra_diversification (project_name VARCHAR(50), completion_status VARCHAR(20)); INSERT INTO infra_diversification (project_name, completion_status) VALUES ('Project A', 'Completed'), ('Project B', 'In Progress'), ('Project A', 'In Progress');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT project_name, completion_status FROM rural_development.infra_diversification;"
    },
    {
        "instruction": "입력 텍스트: 2010년부터 2015년 사이에 완료된 모든 경제 다양화 노력을 삭제하세요.\n\nDDL statements:\nCREATE TABLE efforts (effort_id INT, effort_name VARCHAR(255), completion_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM efforts WHERE completion_year BETWEEN 2010 AND 2015;"
    },
    {
        "instruction": "입력 텍스트: 북아메리카' 지역에서 출발하여 지연된 모든 화물의 이름과 총 화물 무게는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Warehouse (id INT, name TEXT, region TEXT); INSERT INTO Warehouse (id, name, region) VALUES (1, 'New York Warehouse', 'North America'), (2, 'Los Angeles Warehouse', 'North America'), (3, 'Sao Paulo Warehouse', 'South America'); CREATE TABLE Shipment (id INT, warehouse_id INT, cargo_weight INT, delivery_status TEXT); INSERT INTO Shipment (id, warehouse_id, cargo_weight, delivery_status) VALUES (1, 1, 5000, 'Delayed'), (2, 1, 3000, 'On Time'), (3, 2, 4000, 'Delayed'), (4, 3, 6000, 'On Time');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Warehouse.name, SUM(Shipment.cargo_weight) as total_cargo_weight FROM Warehouse INNER JOIN Shipment ON Warehouse.id = Shipment.warehouse_id WHERE Warehouse.region = 'North America' AND Shipment.delivery_status = 'Delayed' GROUP BY Warehouse.name;"
    },
    {
        "instruction": "입력 텍스트: 생산량이 두 번째로 높은 우물의 생산률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wells (well_id INT, well_type VARCHAR(10), location VARCHAR(20), production_rate FLOAT); INSERT INTO wells (well_id, well_type, location, production_rate) VALUES (1, 'offshore', 'Gulf of Mexico', 1000), (2, 'onshore', 'Texas', 800), (3, 'offshore', 'North Sea', 1200), (4, 'onshore', 'Alberta', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT production_rate FROM (SELECT well_id, well_type, location, production_rate, ROW_NUMBER() OVER (ORDER BY production_rate DESC) rn FROM wells) t WHERE rn = 2;"
    },
    {
        "instruction": "입력 텍스트: 장애인 서비스 정책 중 지난 1년 이내에 업데이트된 정책은 무엇이며, 어떤 업데이트가 이루어졌나요?\n\nDDL statements:\nCREATE TABLE policies (policy_id INT, policy_name VARCHAR(255), policy_description VARCHAR(255), last_update DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_name, policy_description, last_update FROM policies WHERE last_update >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 종의 2019년과 2021년 사이 인구 변화는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE wildlife (species VARCHAR(255), population INT, year INT); INSERT INTO wildlife (species, population, year) VALUES ('Deer', 5000, 2019), ('Deer', 4500, 2020), ('Deer', 4000, 2021), ('Bear', 3000, 2019), ('Bear', 3200, 2020), ('Bear', 3400, 2021), ('Wolf', 1000, 2019), ('Wolf', 1050, 2020), ('Wolf', 1100, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, (population_2021 - population_2019) as population_change FROM (SELECT species, MAX(CASE WHEN year = 2021 THEN population END) as population_2021, MAX(CASE WHEN year = 2019 THEN population END) as population_2019 FROM wildlife GROUP BY species) as population_changes;"
    },
    {
        "instruction": "입력 텍스트: 싱가포르와 시드니에서 자율주행 택시로 이루어진 총 여행 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE autonomous_taxis(id INT, make VARCHAR(20), model VARCHAR(20), city VARCHAR(20), trips INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(trips) FROM autonomous_taxis WHERE city IN ('Singapore', 'Sydney');"
    },
    {
        "instruction": "입력 텍스트: 2021년 1분기에 유럽에서 업사이클링 이니셔티브로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, initiative_type TEXT, initiative_region TEXT, revenue DECIMAL, sale_date DATE); INSERT INTO sales (sale_id, initiative_type, initiative_region, revenue, sale_date) VALUES (1, 'Upcycling', 'Europe', 500, '2021-01-01'), (2, 'Recycling', 'North America', 1000, '2021-01-02'), (3, 'Donation', 'Asia', 250, '2021-01-03'), (4, 'Upcycling', 'Europe', 750, '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM sales WHERE initiative_type = 'Upcycling' AND initiative_region = 'Europe' AND sale_date BETWEEN '2021-01-01' AND '2021-03-31';"
    },
    {
        "instruction": "입력 텍스트: 독일 베를린에 있는 호텔들의 하루 평균 가상 투어 참여 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours (id INT, hotel_id INT, engagement_count INT, engagement_date DATE); CREATE TABLE hotels (id INT, name TEXT, city TEXT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(engagement_count) FROM virtual_tours vt INNER JOIN hotels h ON vt.hotel_id = h.id WHERE h.city = 'Berlin' AND h.country = 'Germany' GROUP BY engagement_date;"
    },
    {
        "instruction": "입력 텍스트: 기간이 24개월 미만인 방위 프로젝트의 최대 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_projects(project_id INT, project_name VARCHAR(50), duration INT, cost FLOAT); INSERT INTO defense_projects VALUES (1, 'Project A', 36, 5000000), (2, 'Project B', 24, 4000000), (3, 'Project C', 18, 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(cost) FROM defense_projects WHERE duration < 24;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 음악을 스트리밍한 고유 사용자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (user_id int, country varchar(255), timestamp datetime); INSERT INTO users (user_id, country, timestamp) VALUES (123, 'United States', '2022-01-01 10:00:00'), (124, 'Canada', '2022-01-01 11:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(DISTINCT user_id) as unique_users FROM users WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 러시아와 호주에서 진행 중인 바이오프로세스 엔지니어링 프로젝트는 총 몇 개입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists bioprocess;CREATE TABLE if not exists bioprocess.engineering_projects (id INT, name TEXT, location TEXT, type TEXT); INSERT INTO bioprocess.engineering_projects (id, name, location, type) VALUES (1, 'ProjectV', 'RU', 'Bioprocess'), (2, 'ProjectW', 'AU', 'Bioprocess'), (3, 'ProjectX', 'NZ', 'Biosensor');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM bioprocess.engineering_projects WHERE (location = 'RU' OR location = 'AU') AND type = 'Bioprocess';"
    },
    {
        "instruction": "입력 텍스트: athlete_stats' 테이블에서 경기에 참여한 횟수가 0인 선수들의 평균 나이를 0으로 설정하세요.\n\nDDL statements:\nCREATE TABLE athlete_stats (athlete_id INT, game_count INT, average_age DECIMAL(3,1));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE athlete_stats SET average_age = 0 WHERE game_count = 0;"
    },
    {
        "instruction": "입력 텍스트: 재활용 소재로 만들어진 의류 중에서 지난 3개월 동안의 최대 생산 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE RecycledMaterialsGarments (garment_id INT, production_cost DECIMAL(5,2), production_date DATE); INSERT INTO RecycledMaterialsGarments (garment_id, production_cost, production_date) VALUES (1, 22.50, '2022-01-01'), (2, 27.00, '2022-02-01'), (3, 24.75, '2022-03-01'), (4, 21.50, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(production_cost) FROM RecycledMaterialsGarments WHERE production_date BETWEEN DATEADD(month, -3, GETDATE()) AND GETDATE();"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 1960년 이전에 지어진 다리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Bridges(id INT, name TEXT, location TEXT, built DATE); INSERT INTO Bridges(id, name, location, built) VALUES (1, 'Bixby Creek Bridge', 'California', '1932-02-27');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Bridges WHERE location = 'California' AND built < '1960-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 대만에서 재활용 폴리에스터를 조달한 브랜드는 어떤 것들이 있나요?\n\nDDL statements:\nCREATE TABLE recycled_polyester (brand VARCHAR(50), country VARCHAR(50), year INT); INSERT INTO recycled_polyester (brand, country, year) VALUES ('BrandA', 'China', 2020), ('BrandB', 'Taiwan', 2020), ('BrandC', 'Japan', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand FROM recycled_polyester WHERE country = 'Taiwan' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 주문을 하지 않은 고객을 검색합니다.\n\nDDL statements:\nCREATE TABLE Customers (CustomerID INT, CustomerName VARCHAR(50), WarehouseID INT, City VARCHAR(50), State VARCHAR(50)); INSERT INTO Customers (CustomerID, CustomerName, WarehouseID, City, State) VALUES (1, 'Customer A', 1, 'New York', 'NY'), (2, 'Customer B', 2, 'Chicago', 'IL'); CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderDate DATETIME, TotalAmount DECIMAL(10,2)); INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES (1, 1, '2022-01-01 10:00:00', 500), (2, 3, '2022-01-02 11:00:00', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT C.CustomerName FROM Customers C LEFT JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.CustomerID IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 월별 신규 고객 수를 표시합니다\n\nDDL statements:\nCREATE TABLE customer_month (id INT, name VARCHAR(50), signup_date DATE); INSERT INTO customer_month (id, name, signup_date) VALUES (1, 'Hannah', '2021-01-05'); INSERT INTO customer_month (id, name, signup_date) VALUES (2, 'Ivan', '2021-02-12'); INSERT INTO customer_month (id, name, signup_date) VALUES (3, 'Judy', '2021-02-20'); INSERT INTO customer_month (id, name, signup_date) VALUES (4, 'Kevin', '2021-03-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MONTH(signup_date), COUNT(DISTINCT id) FROM customer_month GROUP BY MONTH(signup_date);"
    },
    {
        "instruction": "입력 텍스트: 가상 투어에서 '아시아-태평양' 지역에서 가장 참여도가 높은 상위 3개 도시를 나열하세요.\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, city TEXT, views INT); INSERT INTO virtual_tours (tour_id, city, views) VALUES (1, 'CityA', 200), (2, 'CityB', 300), (3, 'CityC', 150), (4, 'CityA', 250), (5, 'CityD', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(views) as total_views FROM virtual_tours WHERE city IN ('CityA', 'CityB', 'CityC', 'CityD') GROUP BY city ORDER BY total_views DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 가장 높은 지속 가능성 지수를 가진 목적지는 어디인가요?\n\nDDL statements:\nCREATE TABLE destinations (destination_id INT, name VARCHAR(50), country_id INT, sustainability_index FLOAT); INSERT INTO destinations (destination_id, name, country_id, sustainability_index) VALUES (1, 'Fiordland National Park', 1, 0.92); INSERT INTO destinations (destination_id, name, country_id, sustainability_index) VALUES (2, 'Borobudur Temple', 2, 0.85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, d.sustainability_index FROM destinations d INNER JOIN (SELECT country_id, MAX(sustainability_index) as max_sustainability FROM destinations GROUP BY country_id) ds ON d.country_id = ds.country_id WHERE d.sustainability_index = max_sustainability;"
    },
    {
        "instruction": "입력 텍스트: NHTSA'에서 안전 테스트 결과를 받은 차량은 어떤 것들이 있나요?\n\nDDL statements:\nCREATE TABLE SafetyTesting (Id INT, Vehicle VARCHAR(255), Organization VARCHAR(255), Results VARCHAR(255)); INSERT INTO SafetyTesting (Id, Vehicle, Organization, Results) VALUES (1, 'Model S', 'IIHS', 'Good'), (2, 'Model X', 'NHTSA', 'Excellent'), (3, 'Model 3', 'IIHS', 'Good');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Vehicle FROM SafetyTesting WHERE Organization = 'NHTSA';"
    },
    {
        "instruction": "입력 텍스트: 유럽 연합에 속한 국가들이 발사한 위성 제작에 사용된 재료의 총 질량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SatelliteMaterials (SatelliteID INT PRIMARY KEY, MaterialID INT, Quantity INT, Unit VARCHAR(10)); INSERT INTO SatelliteMaterials (SatelliteID, MaterialID, Quantity, Unit) VALUES (1, 1, 500, 'kg'); INSERT INTO SatelliteMaterials (SatelliteID, MaterialID, Quantity, Unit) VALUES (2, 2, 300, 'g');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(SM.Quantity * SM.Unit::numeric) FROM Satellites S INNER JOIN SatelliteMaterials SM ON S.SatelliteID = SM.SatelliteID INNER JOIN Countries C ON S.Country = C.CountryCode WHERE C.Continent = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 각 기부자의 전월 대비 기부금액 변동은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL, DonationDate DATE); INSERT INTO Donations (DonationID, DonorID, DonationAmount, DonationDate) VALUES (1, 1, 100.00, '2021-01-01'), (2, 1, 200.00, '2021-02-01'), (3, 2, 150.00, '2021-01-15'), (4, 3, 300.00, '2021-03-01'), (5, 4, 250.00, '2021-02-01'), (6, 4, 300.00, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, LAG(DonationAmount, 1) OVER (PARTITION BY DonorID ORDER BY DonationDate) AS PreviousDonation, DonationAmount, DonationAmount - LAG(DonationAmount, 1) OVER (PARTITION BY DonorID ORDER BY DonationDate) AS DonationChange FROM Donations D JOIN Donors ON D.DonorID = Donors.DonorID ORDER BY DonationDate;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 오리건 주에서 주거용 프로젝트에 발급된 건축 허가증의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE building_permits (id INT, permit_number INT, project_type TEXT, issue_date DATE); INSERT INTO building_permits (id, permit_number, project_type, issue_date) VALUES (1, 12345, 'Residential', '2022-02-15'), (2, 67890, 'Commercial', '2022-03-01'), (3, 90123, 'Residential', '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM building_permits WHERE project_type = 'Residential' AND issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND project_state = 'Oregon';"
    },
    {
        "instruction": "입력 텍스트: 각 커뮤니티 센터에서 서비스하는 시민들의 평균 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE CommunityCenters (Center TEXT, Citizens INT); INSERT INTO CommunityCenters (Center, Citizens) VALUES ('A', 3000), ('B', 4000), ('C', 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Citizens) FROM CommunityCenters;"
    },
    {
        "instruction": "입력 텍스트: 아침 시간대 버스 여행의 평균 승객 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE BusTrips (TripID INT, VehicleType VARCHAR(10), Passengers INT, TripTime VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Passengers) FROM BusTrips WHERE VehicleType = 'Bus' AND TripTime LIKE '06%' OR TripTime LIKE '07%';"
    },
    {
        "instruction": "입력 텍스트: routes 테이블에 route_id가 3이고, route_short_name은 'B', route_long_name은 'Broadway', route_type은 0인 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE routes (route_id INT, route_short_name VARCHAR(10), route_long_name VARCHAR(255), route_type INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO routes (route_id, route_short_name, route_long_name, route_type) VALUES (3, 'B', 'Broadway', 0);"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 각 공급업체의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE orders (order_id INT, product_id INT, vendor_id INT, order_date DATE, revenue INT); INSERT INTO orders (order_id, product_id, vendor_id, order_date, revenue) VALUES (1, 1, 1, '2022-01-01', 500), (2, 2, 2, '2022-01-03', 800); CREATE TABLE vendor (vendor_id INT, vendor_name TEXT); INSERT INTO vendor (vendor_id, vendor_name) VALUES (1, 'ABC Foods'), (2, 'XYZ Foods');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.vendor_name, SUM(o.revenue) as total_revenue FROM orders o JOIN vendor v ON o.vendor_id = v.vendor_id WHERE o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY v.vendor_name;"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역의 고위험 계정 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE accounts (id INT, risk_level VARCHAR(10), region VARCHAR(20)); INSERT INTO accounts (id, risk_level, region) VALUES (1, 'high', 'Asia-Pacific'), (2, 'medium', 'Europe'), (3, 'low', 'North America'), (4, 'high', 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM accounts WHERE risk_level = 'high' AND region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: 인도의 회사들이 채굴한 광물의 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE IndianMines (Company VARCHAR(50), Quantity INT); INSERT INTO IndianMines (Company, Quantity) VALUES ('DEF Mining', 2000), ('GHI Resources', 2200), ('JKL Exploration', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Quantity) FROM IndianMines"
    },
    {
        "instruction": "입력 텍스트: 플레이어 F가 몇 번의 파울을 범했나요?\n\nDDL statements:\nCREATE TABLE Player_F (fouls INT); INSERT INTO Player_F (fouls) VALUES (3), (2), (4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT fouls FROM Player_F;"
    },
    {
        "instruction": "입력 텍스트: 스포츠' 관련 기사와 '엔터테인먼트' 관련 기사 모두를 좋아한 사용자의 비율을 연령대별로 그룹화하여 나타내세요.\n\nDDL statements:\nCREATE TABLE users (id INT, name TEXT, age INT, likes INT); CREATE TABLE user_likes (user_id INT, article_id INT); CREATE TABLE articles (id INT, title TEXT, category TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT age_range, (COUNT(*) / (SELECT COUNT(*) FROM users)) * 100.0 AS percentage FROM (SELECT users.age / 10 * 10 AS age_range, users.id FROM users) AS user_age JOIN user_likes ON user_age.id = user_likes.user_id JOIN articles ON user_likes.article_id = articles.id WHERE articles.category = 'sports' INTERSECT SELECT user_age.id FROM (SELECT users.age / 10 * 10 AS age_range, users.id FROM users) AS user_age JOIN user_likes ON user_age.id = user_likes.user_id JOIN articles ON user_likes.article_id = articles.id WHERE articles.category = 'entertainment' GROUP BY age_range;"
    },
    {
        "instruction": "입력 텍스트: 각 탐험 사회가 그들의 탐험에서 도달한 최대 깊이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Expeditions (ExpeditionID INT, Society VARCHAR(25), Depth INT); INSERT INTO Expeditions (ExpeditionID, Society, Depth) VALUES (1, 'Undersea Exploration Society', 3000), (2, 'Oceanic Research Foundation', 4000), (3, 'Marine Discovery Institute', 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Society, MAX(Depth) FROM Expeditions GROUP BY Society;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 제조된 제품의 월별 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, product_id INT, quantity INT, sale_date DATE, made_in_usa BOOLEAN); INSERT INTO sales (sale_id, product_id, quantity, sale_date, made_in_usa) VALUES (1, 1, 10, '2021-01-01', true); CREATE TABLE products (product_id INT, product_name VARCHAR(255)); INSERT INTO products (product_id, product_name) VALUES (1, 'American Flag');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM sale_date) AS month, made_in_usa, SUM(quantity) AS total_quantity FROM sales JOIN products ON sales.product_id = products.product_id WHERE made_in_usa = true GROUP BY month, made_in_usa;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에 있는 문화 유산 사이트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Regions (RegionID INT, RegionName VARCHAR(50)); CREATE TABLE HeritageSites (SiteID INT, SiteName VARCHAR(50), RegionID INT); INSERT INTO Regions VALUES (1, 'RegionA'), (2, 'RegionB'), (3, 'RegionC'); INSERT INTO HeritageSites VALUES (1, 'SiteA', 1), (2, 'SiteB', 1), (3, 'SiteC', 2), (4, 'SiteD', 3), (5, 'SiteE', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT R.RegionName, COUNT(HS.SiteID) AS TotalSites FROM Regions R JOIN HeritageSites HS ON R.RegionID = HS.RegionID GROUP BY R.RegionName;"
    },
    {
        "instruction": "입력 텍스트: 각 목적지별로 운송된 화물 중 최대 무게는 얼마인가요?\n\nDDL statements:\nCREATE TABLE cargo_data(id INT, vessel_name VARCHAR(50), destination VARCHAR(50), cargo_weight DECIMAL(5,2)); INSERT INTO cargo_data(id, vessel_name, destination, cargo_weight) VALUES (1, 'Vessel A', 'Port A', 200.0), (2, 'Vessel B', 'Port A', 250.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT destination, MAX(cargo_weight) FROM cargo_data GROUP BY destination;"
    },
    {
        "instruction": "입력 텍스트: 오레곤 주의 친환경 건축 프로젝트 중 최대 프로젝트 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE project (project_id INT, state VARCHAR(50), start_date DATE, end_date DATE, is_green BOOLEAN); INSERT INTO project (project_id, state, start_date, end_date, is_green) VALUES (1, 'Oregon', '2020-01-01', '2020-12-31', true); INSERT INTO project (project_id, state, start_date, end_date, is_green) VALUES (2, 'Oregon', '2021-01-01', '2021-10-30', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(DATEDIFF('day', start_date, end_date)) FROM project WHERE is_green = true AND state = 'Oregon';"
    },
    {
        "instruction": "입력 텍스트: fashion_trend_data' 테이블에 지속 가능한 패션 아이템 'Jacket'을 새로 추가하세요.\n\nDDL statements:\nCREATE TABLE fashion_trend_data (id INT, product_name VARCHAR(30), is_sustainable BOOLEAN); INSERT INTO fashion_trend_data (id, product_name, is_sustainable) VALUES (1, 'T-shirt', true), (2, 'Jeans', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fashion_trend_data (product_name, is_sustainable) VALUES ('Jacket', true);"
    },
    {
        "instruction": "입력 텍스트: 시카고에서 2018년과 2019년 7월에 이루어진 대중교통 이용 횟수를 찾아주세요.\n\nDDL statements:\nCREATE TABLE Trips (City VARCHAR(255), Month INT, Year INT, Trips INT); INSERT INTO Trips (City, Month, Year, Trips) VALUES ('Chicago', 7, 2018, 50000), ('Chicago', 8, 2018, 60000), ('Chicago', 7, 2019, 55000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City, SUM(Trips) FROM Trips WHERE City = 'Chicago' AND Month = 7 AND Year IN (2018, 2019) GROUP BY City;"
    },
    {
        "instruction": "입력 텍스트: 2022년 예술 및 문화 프로그램의 월별 총 자원봉사 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerName VARCHAR(50)); INSERT INTO Volunteers (VolunteerID, VolunteerName) VALUES (1, 'Ethan Wilson'), (2, 'Mia Johnson'), (3, 'Liam Wright'); CREATE TABLE VolunteerHours (VolunteerHourID INT, VolunteerID INT, Program VARCHAR(50), VolunteerHours DECIMAL(10,2), VolunteerDate DATE); INSERT INTO VolunteerHours (VolunteerHourID, VolunteerID, Program, VolunteerHours, VolunteerDate) VALUES (1, 1, 'Arts and Culture', 2.00, '2022-04-01'), (2, 1, 'Arts and Culture', 3.00, '2022-05-01'), (3, 2, 'Arts and Culture', 4.00, '2022-04-15'), (4, 2, 'Arts and Culture', 5.00, '2022-05-15'), (5, 3, 'Arts and Culture', 6.00, '2022-04-20'), (6, 3, 'Arts and Culture', 7.00, '2022-05-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(VolunteerDate, '%Y-%m') as Month, SUM(VolunteerHours) as TotalHours FROM VolunteerHours INNER JOIN Volunteers ON VolunteerHours.VolunteerID = Volunteers.VolunteerID WHERE Program = 'Arts and Culture' AND Year(VolunteerDate) = 2022 GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: 민족성별 환자 수는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE patients (id INT, name VARCHAR(50), ethnicity VARCHAR(50)); INSERT INTO patients (id, name, ethnicity) VALUES (1, 'John Doe', 'Caucasian'), (2, 'Jane Smith', 'African American'), (3, 'Alice Johnson', 'Hispanic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ethnicity, COUNT(*) FROM patients GROUP BY ethnicity;"
    },
    {
        "instruction": "입력 텍스트: 각 학교 구역이 정신 건강 프로그램을 위해 받은 자금의 총액은 주별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE school_districts (sd_id INT, district_name VARCHAR(50), state VARCHAR(50), total_funding FLOAT); INSERT INTO school_districts (sd_id, district_name, state, total_funding) VALUES (1, 'District A', 'California', 50000), (2, 'District B', 'Texas', 75000), (3, 'District C', 'New York', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(total_funding) as total_mental_health_funding FROM school_districts GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 미국의 모든 물 보존 이니셔티브에서 절약된 총 물 절약량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE conservation_initiatives (id INT, country VARCHAR(50), savings FLOAT, PRIMARY KEY(id)); INSERT INTO conservation_initiatives (id, country, savings) VALUES (1, 'US', 5000), (2, 'Canada', 3000), (3, 'Mexico', 2000), (4, 'UK', 4000), (5, 'Australia', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(savings) as total_savings FROM conservation_initiatives ci WHERE ci.country = 'US';"
    },
    {
        "instruction": "입력 텍스트: 여성 창업자가 있는 스타트업 중 가장 이른 창업 연도는 언제인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, founding_year INT, founder_gender TEXT); INSERT INTO companies (id, name, founding_year, founder_gender) VALUES (1, 'Acme Inc', 2010, 'female'); INSERT INTO companies (id, name, founding_year, founder_gender) VALUES (2, 'Beta Corp', 2015, 'male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(founding_year) FROM companies WHERE founder_gender = 'female';"
    },
    {
        "instruction": "입력 텍스트: Non-binary'로 식별하는 지역 보건 근로자들의 정신 건강 동등성 점수를 92로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE MentalHealthParityScores (ScoreID INT, Score INT, Gender VARCHAR(10)); INSERT INTO MentalHealthParityScores (ScoreID, Score, Gender) VALUES (1, 80, 'Female'), (2, 85, 'Male'), (3, 90, 'Female'), (4, 87, 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE MentalHealthParityScores SET Score = 92 WHERE Gender = 'Non-binary';"
    },
    {
        "instruction": "입력 텍스트: 시애틀 시에서 주거용 건물에 발급된 허가증의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE building_permits (permit_id INT, building_type VARCHAR(20), city VARCHAR(20)); INSERT INTO building_permits (permit_id, building_type, city) VALUES (1, 'Residential', 'Seattle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM building_permits WHERE building_type = 'Residential' AND city = 'Seattle';"
    },
    {
        "instruction": "입력 텍스트: 봄22' 컬렉션의 모든 의류 제작에 사용된 지속 가능한 원단의 종류별 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fabric (type TEXT, sustainability_rating INTEGER, quantity INTEGER); INSERT INTO fabric (type, sustainability_rating, quantity) VALUES ('cotton', 10, 500), ('polyester', 5, 300), ('hemp', 15, 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, SUM(quantity) FROM fabric WHERE sustainability_rating >= 10 GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 학생ID가 1인 학생의 장애 유형을 '시각 장애'에서 '청각 장애'로 변경하세요.\n\nDDL statements:\nCREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 2018), (2, 'Jane Smith', 'Hearing Impairment', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE StudentAccommodations SET DisabilityType = 'Hearing Impairment' WHERE StudentID = 1;"
    },
    {
        "instruction": "입력 텍스트: 2000년부터 2010년 사이에 판매된 모든 큐비스트 작품의 가격을 10% 인상하세요?\n\nDDL statements:\nCREATE TABLE art_pieces (id INT, artist VARCHAR(30), style VARCHAR(20), year_sold INT, price DECIMAL(10,2)); CREATE VIEW cubist_pieces AS SELECT * FROM art_pieces WHERE style = 'Cubist' AND year_sold BETWEEN 2000 AND 2010;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE cubist_pieces SET price = price * 1.1;"
    },
    {
        "instruction": "입력 텍스트: 금융 산업에 있는 노조의 최소 및 최대 회원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE union_finance (union_id INT, union_name TEXT, industry TEXT, members INT); INSERT INTO union_finance (union_id, union_name, industry, members) VALUES (1, 'Union S', 'Finance', 8000), (2, 'Union T', 'Finance', 12000), (3, 'Union U', 'Finance', 9000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(members), MAX(members) FROM union_finance WHERE industry = 'Finance';"
    },
    {
        "instruction": "입력 텍스트: disaster_mitigation' 테이블의 프로젝트 최소 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE disaster_mitigation (id INT, project_name VARCHAR(50), location VARCHAR(50), cost FLOAT); INSERT INTO disaster_mitigation (id, project_name, location, cost) VALUES (1, 'Storm Drainage System', 'City Q', 4000000.00), (2, 'Hurricane-resistant Building Design', 'Region R', 6000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(cost) FROM disaster_mitigation;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 관개 시스템의 총 강우량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE irrigation_systems (system_id INTEGER, system_name TEXT, rainfall INTEGER); INSERT INTO irrigation_systems VALUES (1, 'Drip Irrigation', 50), (2, 'Sprinkler Irrigation', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT system_name, SUM(rainfall) as total_rainfall FROM irrigation_systems WHERE system_id IN (SELECT system_id FROM irrigation_systems_data WHERE data_date >= CURDATE() - INTERVAL 1 MONTH) GROUP BY system_name;"
    },
    {
        "instruction": "입력 텍스트: 수학을 가르치는 선생님들의 평균 경력은 얼마인가요?\n\nDDL statements:\nCREATE TABLE teachers (id INT, name VARCHAR(50), subject VARCHAR(50), years_experience INT); INSERT INTO teachers (id, name, subject, years_experience) VALUES (1, 'Alice Brown', 'Math', 10); INSERT INTO teachers (id, name, subject, years_experience) VALUES (2, 'Bob Johnson', 'Science', 15); INSERT INTO teachers (id, name, subject, years_experience) VALUES (3, 'Charlie Smith', 'Math', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(years_experience) FROM teachers WHERE subject = 'Math';"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드의 전년 대비 윤리 의식 점수 변화를 계산하세요.\n\nDDL statements:\nCREATE TABLE Brand_Scores (Brand_Name VARCHAR(255), Year INT, Ethical_Awareness_Score FLOAT); INSERT INTO Brand_Scores (Brand_Name, Year, Ethical_Awareness_Score) VALUES ('BrandA', 2020, 7.8), ('BrandA', 2021, 8.2), ('BrandB', 2020, 6.2), ('BrandB', 2021, 6.5), ('BrandC', 2020, 9.1), ('BrandC', 2021, 9.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Brand_Name, Ethical_Awareness_Score - LAG(Ethical_Awareness_Score) OVER (PARTITION BY Brand_Name ORDER BY Year) AS Score_Change FROM Brand_Scores;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후로 여성 감독들과 그들이 연출한 영화 수를 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE directors (name varchar(50), gender varchar(10), movies_count int); INSERT INTO directors (name, gender, movies_count) VALUES ('Greta Gerwig', 'Female', 2); INSERT INTO directors (name, gender, movies_count) VALUES ('Kathryn Bigelow', 'Female', 3); INSERT INTO directors (name, gender, movies_count) VALUES ('Ava DuVernay', 'Female', 4); INSERT INTO directors (name, gender, movies_count) VALUES ('Patty Jenkins', 'Female', 1); INSERT INTO directors (name, gender, movies_count) VALUES ('Jordan Peele', 'Male', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, movies_count FROM directors WHERE gender = 'Female' AND release_year >= 2015;"
    },
    {
        "instruction": "입력 텍스트: 오클랜드에 있는 포괄적 주택 계획의 모든 부동산의 총 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE inclusive_housing (property_id INT, city VARCHAR(50), price INT, inclusive_scheme BOOLEAN); INSERT INTO inclusive_housing (property_id, city, price, inclusive_scheme) VALUES (1, 'Oakland', 600000, TRUE), (2, 'Portland', 500000, FALSE), (3, 'Oakland', 700000, TRUE), (4, 'Seattle', 800000, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) FROM inclusive_housing WHERE city = 'Oakland' AND inclusive_scheme = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 새로운 해양보호구역을 \"Great Barrier Reef\"라는 이름과 50미터의 깊이로 추가하세요.\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name VARCHAR(255), depth FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO marine_protected_areas (name, depth) VALUES ('Great Barrier Reef', 50);"
    },
    {
        "instruction": "입력 텍스트: 역사적으로 소외된 커뮤니티의 일원으로 자신을 식별하는 커뮤니티 건강 근로자들에게 서비스를 제공하는 정신 건강 제공자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE MentalHealthProvider (ProviderID INT, WorkerID INT, WorkerIdentity VARCHAR(50)); INSERT INTO MentalHealthProvider (ProviderID, WorkerID, WorkerIdentity) VALUES (1, 1, 'African American'), (2, 2, 'Hispanic'), (3, 3, 'Asian American'), (4, 4, 'Native American'), (5, 5, 'Caucasian'), (6, 1, 'African American'), (7, 2, 'Hispanic'), (8, 3, 'Asian American'), (9, 4, 'Native American'), (10, 5, 'Caucasian'), (11, 1, 'African American'), (12, 2, 'Hispanic'), (13, 3, 'Asian American'), (14, 4, 'Native American'), (15, 5, 'Caucasian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as Total FROM MentalHealthProvider WHERE WorkerIdentity IN ('African American', 'Hispanic', 'Asian American', 'Native American');"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 있는 지속 가능한 관광 사업체는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE sustainable_tourism (business_id INT, business_name TEXT, country TEXT); INSERT INTO sustainable_tourism (business_id, business_name, country) VALUES (1, 'Eco Adventures Canada', 'Canada'), (2, 'Green Tours Vancouver', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sustainable_tourism WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 국립 우주국에서 지난 10년 동안 수행한 모든 우주 탐사 임무를 나열하십시오.\n\nDDL statements:\nCREATE TABLE SpaceExploration (mission_id INT, agency VARCHAR(255), year INT, mission_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name FROM SpaceExploration WHERE agency = 'National Space Agency' AND year >= (YEAR(CURRENT_DATE) - 10);"
    },
    {
        "instruction": "입력 텍스트: 어떤 스마트 시티 이니셔티브가 가장 높은 투자를 받았나요?\n\nDDL statements:\nCREATE TABLE initiatives (id INT, name TEXT, category TEXT, investment FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, MAX(investment) FROM initiatives GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 모든 프로그램과 그 결과를 자원봉사자 수에 따라 내림차순으로 정렬하여 나열합니다.\n\nDDL statements:\nCREATE TABLE Programs (id INT, program_name VARCHAR(50), total_volunteers INT); CREATE TABLE Outcomes (id INT, program_id INT, outcome_name VARCHAR(50), outcome_description VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Programs.program_name, Outcomes.outcome_name, Outcomes.outcome_description, Programs.total_volunteers FROM Programs INNER JOIN Outcomes ON Programs.id = Outcomes.program_id ORDER BY Programs.total_volunteers DESC;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기에 가장 많은 취약점을 악용한 상위 5개 위협 행위자를 식별합니다.\n\nDDL statements:\nCREATE TABLE vulnerabilities (id integer, threat text, exploited integer, timestamp timestamp); INSERT INTO vulnerabilities (id, threat, exploited, timestamp) VALUES (1, 'APT29', 1, '2022-04-01 10:00:00'), (2, 'APT35', 0, '2022-04-02 11:00:00'), (3, 'APT29', 1, '2022-04-03 12:00:00'), (4, 'APT35', 0, '2022-04-04 13:00:00'), (5, 'APT28', 1, '2022-04-05 14:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT threat, SUM(exploited) as total_exploited FROM vulnerabilities WHERE timestamp >= '2022-04-01' AND timestamp < '2022-07-01' GROUP BY threat ORDER BY total_exploited DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: community_development' 스키마의 'transactions' 테이블에서 지역사회 개발에 중점을 둔 계정의 거래 총액은 얼마이며, 최근 60일 이내에 이루어진 거래는 제외하고 계산하시겠습니까?\n\nDDL statements:\nCREATE TABLE community_development.transactions (transaction_id INT, account_number INT, transaction_amount DECIMAL(10, 2), transaction_date DATE); INSERT INTO community_development.transactions (transaction_id, account_number, transaction_amount, transaction_date) VALUES (1, 1001, 100.00, '2022-01-01'), (2, 1002, 200.00, '2022-01-15'), (3, 1001, 50.00, '2022-02-01'), (4, 1003, 300.00, '2022-02-10'), (5, 1001, 250.00, '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(transaction_amount) FROM community_development.transactions WHERE account_number IN (SELECT account_number FROM community_development.accounts WHERE is_community_development = true) AND transaction_date < NOW() - INTERVAL '60 days';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 선박별로 기록된 사고 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT); CREATE TABLE incidents (id INT, vessel_id INT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.name, COUNT(i.id) FROM vessels v JOIN incidents i ON v.id = i.vessel_id WHERE i.date >= DATE_SUB(NOW(), INTERVAL 1 YEAR) GROUP BY v.name;"
    },
    {
        "instruction": "입력 텍스트: 2019년부터 2021년 사이에 '아프리카'의 농촌 지역에서 완료된 인프라 프로젝트는 무엇인가요?\n\nDDL statements:\nCREATE TABLE infrastructure_projects (project_id INT, project_name TEXT, location TEXT, completion_year INT); INSERT INTO infrastructure_projects (project_id, project_name, location, completion_year) VALUES (1, 'Bridge Construction', 'Rural Area, Africa', 2019); INSERT INTO infrastructure_projects (project_id, project_name, location, completion_year) VALUES (2, 'Road Paving', 'Urban Area, Asia', 2020); INSERT INTO infrastructure_projects (project_id, project_name, location, completion_year) VALUES (3, 'Water Supply System', 'Rural Area, Africa', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM infrastructure_projects WHERE completion_year BETWEEN 2019 AND 2021 AND location LIKE '%Rural Area, Africa%';"
    },
    {
        "instruction": "입력 텍스트: 성별과 관련된 모든 인력 다양성 통계를 삭제하고 요약 정보를 제공하세요.\n\nDDL statements:\nCREATE TABLE WorkforceDiversity (Gender VARCHAR(10), TotalEmployees INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH diversity_deleted AS (DELETE FROM WorkforceDiversity WHERE Gender IS NOT NULL RETURNING *) SELECT COUNT(*) as DiversityDeleted FROM diversity_deleted;"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2019년 남아프리카에서 경제 다양화 노력을 위한 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE economic_diversification_efforts (id INT, project_name VARCHAR(50), country VARCHAR(50), budget FLOAT, year INT); INSERT INTO economic_diversification_efforts (id, project_name, country, budget, year) VALUES (1, 'Industrial Policy Action Plan', 'South Africa', 15000000.00, 2018), (2, 'Black Economic Empowerment', 'South Africa', 12000000.00, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM economic_diversification_efforts WHERE country = 'South Africa' AND year IN (2018, 2019);"
    },
    {
        "instruction": "입력 텍스트: 2021년 'PharmaCorp' 회사의 연구개발 지출은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rd_expenditure (company_name VARCHAR(50), expenditure_year INT, amount DECIMAL(10,2)); INSERT INTO rd_expenditure (company_name, expenditure_year, amount) VALUES ('PharmaCorp', 2021, 5000000), ('PharmaCorp', 2019, 6000000), ('BioTech', 2021, 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT amount FROM rd_expenditure WHERE company_name = 'PharmaCorp' AND expenditure_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: \"지속 가능성 등급이 85 이상인 모든 건물을 포함하는 'sustainable_buildings'라는 이름의 뷰를 생성하세요\"\n\nDDL statements:\nCREATE TABLE buildings (building_id INT, property_id INT, building_name VARCHAR(255), sustainability_rating INT); INSERT INTO buildings (building_id, property_id, building_name, sustainability_rating) VALUES (1, 1, 'Green Heights Tower', 88), (2, 2, 'Sunrise Village Apartments', 75), (3, 3, 'EcoHaven Condos', 89);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW sustainable_buildings AS SELECT * FROM buildings WHERE sustainability_rating > 85;"
    },
    {
        "instruction": "입력 텍스트: 2024년에 사설 계약자가 제공하는 서비스를 위해 'StateData' 스키마의 'StateInfrastructure' 테이블에 할당된 인프라 프로젝트의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA StateData; CREATE TABLE StateInfrastructure (Service varchar(255), Year int, Budget int, Contractor varchar(255)); INSERT INTO StateInfrastructure (Service, Year, Budget, Contractor) VALUES ('Roads', 2024, 300000, 'Public'), ('Roads', 2024, 700000, 'Private'), ('Bridges', 2024, 500000, 'Public');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget) FROM StateData.StateInfrastructure WHERE Year = 2024 AND Contractor = 'Private';"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기에 활성화되어 있던 모든 우물의 이름과 생산량을 생산량 순으로 정렬해서 알려주세요.\n\nDDL statements:\nCREATE TABLE wells (well_id INT, well_name TEXT, production_qty INT, start_date DATE, end_date DATE); INSERT INTO wells (well_id, well_name, production_qty, start_date, end_date) VALUES (1, 'Well A', 500, '2020-01-01', '2022-02-28'), (2, 'Well B', 700, '2021-01-01', '2023-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT well_name, production_qty FROM wells WHERE start_date <= '2021-10-01' AND end_date >= '2021-01-01' ORDER BY production_qty DESC;"
    },
    {
        "instruction": "입력 텍스트: 서부 지역에 위치한 모든 탱크의 총 생산 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Production (tank VARCHAR(20), capacity INT, location VARCHAR(20)); INSERT INTO Production (tank, capacity, location) VALUES ('Tank7', 200000, 'Western'), ('Tank8', 250000, 'Western');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM Production WHERE location = 'Western';"
    },
    {
        "instruction": "입력 텍스트: 16세기 여성 예술가들이 만든 작품 수와 그들의 평균 문화적 영향 점수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(50), Gender VARCHAR(10), BirthYear INT); INSERT INTO Artists (ArtistID, ArtistName, Gender, BirthYear) VALUES (1, 'Artemisia Gentileschi', 'Female', 1593); CREATE TABLE Artworks (ArtworkID INT, ArtistID INT, ArtworkName VARCHAR(50), CulturalImpactScore FLOAT); INSERT INTO Artworks (ArtworkID, ArtistID, ArtworkName, CulturalImpactScore) VALUES (1, 1, 'Judith Slaying Holofernes', 75.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(Artworks.ArtworkID), AVG(Artworks.CulturalImpactScore) FROM Artists INNER JOIN Artworks ON Artists.ArtistID = Artworks.ArtistID WHERE Artists.Gender = 'Female' AND Artists.BirthYear BETWEEN 1501 AND 1600;"
    },
    {
        "instruction": "입력 텍스트: 연령대별 교통 위반 총 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE TrafficViolations (ID INT, AgeGroup VARCHAR(50), Violation VARCHAR(50)); INSERT INTO TrafficViolations VALUES (1, '18-24', 'Speeding'), (2, '25-34', 'Reckless Driving'), (3, '18-24', 'Running Red Light');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AgeGroup, COUNT(*) OVER (PARTITION BY AgeGroup) AS TotalViolations FROM TrafficViolations;"
    },
    {
        "instruction": "입력 텍스트: NorthPacific' 및 'SouthAtlantic' 지역에서 조사를 수행한 모든 선박을 나열합니다.\n\nDDL statements:\nCREATE TABLE SurveyLocations (vessel VARCHAR(255), region VARCHAR(255)); INSERT INTO SurveyLocations (vessel, region) VALUES ('VesselA', 'NorthPacific'), ('VesselB', 'SouthAtlantic'), ('VesselC', 'NorthPacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel FROM SurveyLocations WHERE region = 'NorthPacific' INTERSECT SELECT vessel FROM SurveyLocations WHERE region = 'SouthAtlantic';"
    },
    {
        "instruction": "입력 텍스트: 콜로라도 강 유역에서 콜로라도와 뉴멕시코를 제외한 상업 부문의 총 물 소비량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE colorado_river_basin(state VARCHAR(20), sector VARCHAR(20), consumption NUMERIC(10,2)); INSERT INTO colorado_river_basin VALUES ('Utah', 'Commercial', 2345.67), ('Colorado', 'Commercial', 3456.78), ('New Mexico', 'Commercial', 4567.89), ('Wyoming', 'Commercial', 5678.90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT consumption FROM colorado_river_basin WHERE state NOT IN ('Colorado', 'New Mexico') AND sector = 'Commercial';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 정신 건강 캠페인이 가장 많은 상위 3개 도시를 나열하세요.\n\nDDL statements:\nCREATE TABLE campaigns (campaign_id INT, campaign_name TEXT, city TEXT, start_date DATE, end_date DATE); INSERT INTO campaigns (campaign_id, campaign_name, city, start_date, end_date) VALUES (1, 'Healthy Minds', 'Los Angeles', '2019-05-01', '2020-04-30'); INSERT INTO campaigns (campaign_id, campaign_name, city, start_date, end_date) VALUES (2, 'Mindful Living', 'New York', '2019-12-01', '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(campaign_id) as num_campaigns FROM campaigns WHERE start_date <= '2020-12-31' AND end_date >= '2020-01-01' GROUP BY city ORDER BY num_campaigns DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 동남아시아에 있는 각 금융기관이 발행한 사회적 책임 대출의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE financial_institutions (name TEXT, location TEXT); CREATE TABLE loans (institution_name TEXT, loan_type TEXT, socially_responsible BOOLEAN); INSERT INTO financial_institutions (name, location) VALUES ('ABC Bank', 'Singapore'), ('Islamic Finance Corporation', 'Malaysia'); INSERT INTO loans (institution_name, loan_type, socially_responsible) VALUES ('ABC Bank', 'Microfinance Loan', TRUE), ('Islamic Finance Corporation', 'Green Loan', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, COUNT(l.institution_name) FROM financial_institutions f INNER JOIN loans l ON f.name = l.institution_name WHERE f.location LIKE 'Southeast%' AND l.socially_responsible = TRUE GROUP BY f.name;"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 기후 완화 프로젝트 중 기후 자금으로 300만 미만을 받은 프로젝트는 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE climate_finance (region VARCHAR(50), amount FLOAT, sector VARCHAR(50)); INSERT INTO climate_finance (region, amount, sector) VALUES ('Asia', 2500000, 'Mitigation'), ('Asia', 5000000, 'Mitigation'), ('Europe', 7000000, 'Adaptation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, region FROM climate_finance WHERE region = 'Asia' AND sector = 'Mitigation' AND amount < 3000000;"
    },
    {
        "instruction": "입력 텍스트: ID가 2인 논문을 삭제하고 해당 저자의 소속을 'Meta AI'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE authors (author_id INT, name VARCHAR(50), affiliation VARCHAR(100)); INSERT INTO authors (author_id, name, affiliation) VALUES (1, 'Alice', 'University of Oxford'); INSERT INTO authors (author_id, name, affiliation) VALUES (2, 'Bob', 'Google Research'); CREATE TABLE papers (paper_id INT, title VARCHAR(100), author_id INT, published_date DATE, category VARCHAR(50)); INSERT INTO papers (paper_id, title, author_id, published_date, category) VALUES (1, 'Fairness in AI', 1, '2021-06-01', 'Algorithmic Fairness'); INSERT INTO papers (paper_id, title, author_id, published_date, category) VALUES (2, 'AI Safety Challenges', 2, '2021-07-15', 'AI Safety'); INSERT INTO papers (paper_id, title, author_id, published_date, category) VALUES (3, 'Interpretable AI Models', 1, '2020-12-20', 'Explainable AI');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM papers WHERE paper_id = 2; UPDATE authors SET affiliation = 'Meta AI' WHERE author_id = 2;"
    },
    {
        "instruction": "입력 텍스트: community_education' 테이블에 각 동물 종류별로 몇 개의 교육 프로그램이 있나요?\n\nDDL statements:\nCREATE TABLE community_education (education_id INT, program_name VARCHAR(50), animal_name VARCHAR(50), description TEXT); INSERT INTO community_education (education_id, program_name, animal_name, description) VALUES (1, 'Wildlife Awareness', 'Tiger', 'Raising awareness about wildlife conservation'), (2, 'Habitat Restoration', 'Elephant', 'Restoring and preserving animal habitats'), (3, 'Education Workshops', 'Lion', 'Organizing educational workshops for communities');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal_name, COUNT(*) FROM community_education GROUP BY animal_name;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 북극에서 기록된 최저 기온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE TemperatureHistory (Year INT, Temperature DECIMAL(5,2)); INSERT INTO TemperatureHistory (Year, Temperature) VALUES (2017, -17.5), (2018, -15.8), (2019, -13.2), (2020, -16.9), (2021, -14.5), (2022, -12.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Temperature) FROM TemperatureHistory WHERE Year BETWEEN 2017 AND 2022;"
    },
    {
        "instruction": "입력 텍스트: 2020년도 'energy_efficiency_stats' 테이블에서의 에너지 효율 절감 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_efficiency_stats (stat_id INT, year INT, energy_efficiency_savings FLOAT); INSERT INTO energy_efficiency_stats (stat_id, year, energy_efficiency_savings) VALUES (1, 2019, 1000.0), (2, 2020, 1500.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(energy_efficiency_savings) FROM energy_efficiency_stats WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: Garden A'의 면적을 0.7헥타르로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE gardens (id INT, name TEXT, location TEXT, area_ha FLOAT); INSERT INTO gardens (id, name, location, area_ha) VALUES (1, 'Garden A', 'San Francisco', 0.5), (2, 'Garden B', 'San Francisco', 0.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE gardens SET area_ha = 0.7 WHERE name = 'Garden A';"
    },
    {
        "instruction": "입력 텍스트: id가 3인 스마트 계약의 개발자 이름을 'Jamila Nguyen'으로 변경하세요.\n\nDDL statements:\nCREATE TABLE smart_contracts (id INT, name VARCHAR(255), developer VARCHAR(255), creation_date DATE, country VARCHAR(255)); INSERT INTO smart_contracts (id, name, developer, creation_date, country) VALUES (1, 'Contract 1', 'Alice Johnson', '2020-12-12', 'Germany'), (2, 'Contract 2', 'Bruno Alvarez', '2021-03-05', 'France'), (3, 'Contract 3', 'Chris Park', '2022-01-10', 'South Korea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE smart_contracts SET developer = 'Jamila Nguyen' WHERE id = 3;"
    },
    {
        "instruction": "입력 텍스트: stations' 테이블에서 승객 통행량이 가장 많은 역과 가장 적은 역은 어디인가요?\n\nDDL statements:\nCREATE TABLE stations (station_id INT, station_name VARCHAR(255), num_platforms INT, daily_passengers INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT station_name, daily_passengers FROM (SELECT station_name, daily_passengers, ROW_NUMBER() OVER (ORDER BY daily_passengers DESC) as rank FROM stations) AS subquery WHERE rank <= 2 OR rank >= (SELECT COUNT(*) FROM stations) - 1;"
    },
    {
        "instruction": "입력 텍스트: 마지막 분기에 각 네트워크 인프라 투자가 서비스한 모바일 가입자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE network_investments (investment_id INT, investment_date DATE, served_subscribers INT); INSERT INTO network_investments (investment_id, investment_date, served_subscribers) VALUES (1, '2022-01-01', 500), (2, '2022-01-15', 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT investment_id, COUNT(DISTINCT mobile_subscriber_id) FROM network_investments JOIN mobile_subscribers ON network_investments.served_subscribers >= mobile_subscribers.subscriber_id GROUP BY investment_id;"
    },
    {
        "instruction": "입력 텍스트: 열대 지역에서 지난 10년 동안 벌채된 숲의 총 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE forest (id INT, name TEXT, area_sqkm FLOAT, is_deforested BOOLEAN, year_deforested INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(area_sqkm) FROM forest WHERE is_deforested = TRUE AND year_deforested BETWEEN (SELECT MAX(year) FROM forest) - 10 AND (SELECT MAX(year) FROM forest);"
    },
    {
        "instruction": "입력 텍스트: 2021년 '아시아'에서 열린 '지속 가능한 패션' 관련 이벤트의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE asia_events (id INT, event_type VARCHAR(30), event_year INT);INSERT INTO asia_events (id, event_type, event_year) VALUES (1, 'Sustainable Fashion', 2021), (2, 'Fashion Trend', 2022), (3, 'Sustainable Fashion', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM asia_events WHERE event_type = 'Sustainable Fashion' AND event_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: ai_safety' 테이블에서 안전 등급이 0.8보다 높은 AI 모델의 평균 편향 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ai_safety (app_id INT, app_name TEXT, safety_rating FLOAT, bias_score FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(bias_score) FROM ai_safety WHERE safety_rating > 0.8;"
    },
    {
        "instruction": "입력 텍스트: 어떤 국가들이 완화 프로젝트를 위한 기후 자금을 가장 많이 받았습니까?\n\nDDL statements:\nCREATE TABLE climate_finance (country VARCHAR(255), sector VARCHAR(255), amount DECIMAL(10,2)); INSERT INTO climate_finance (country, sector, amount) VALUES ('Brazil', 'Forest Conservation', 1000000.00), ('India', 'Solar Power', 2000000.00), ('China', 'Wind Power', 3000000.00), ('Indonesia', 'Geothermal Energy', 1500000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(amount) as total_amount FROM climate_finance WHERE sector = 'mitigation' GROUP BY country ORDER BY total_amount DESC;"
    },
    {
        "instruction": "입력 텍스트: 시카고의 한 자전거 공유 스테이션에서 이용 가능한 자전거의 최소 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE bike_station_info (station_id INT, city VARCHAR(20), bikes_available INT); INSERT INTO bike_station_info (station_id, city, bikes_available) VALUES (1, 'Chicago', 15), (2, 'Chicago', 20), (3, 'Chicago', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(bikes_available) FROM bike_station_info WHERE city = 'Chicago';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 'Deluxe' 멤버십에서 발생한 총 수익을 계산하세요?\n\nDDL statements:\nCREATE TABLE memberships (id INT, user_id INT, membership_type VARCHAR(255), start_date DATE, end_date DATE, price FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) FROM memberships WHERE membership_type = 'Deluxe' AND start_date <= DATE(NOW()) - INTERVAL 3 MONTH AND end_date >= DATE(NOW()) - INTERVAL 3 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 월별로 'arctic_weather' 테이블에 기록된 평균 기온이 지역('arctic_weather' 테이블의 'region' 열)별로 어떻게 되는지 알려주세요.\n\nDDL statements:\nCREATE TABLE arctic_weather (id INT, date DATE, temperature FLOAT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MONTH(date) AS month, region, AVG(temperature) AS avg_temp FROM arctic_weather WHERE YEAR(date) = 2020 GROUP BY month, region;"
    },
    {
        "instruction": "입력 텍스트: 2021년 'Anna Lee'의 평균 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donation_amount FLOAT, cause TEXT, donation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(donation_amount) FROM donors WHERE donor_name = 'Anna Lee' AND donation_date BETWEEN '2021-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 'Special Operations Group'에 의해 수행된 성공적인 정보 작전은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE intelligence_operations (id INT, group_name VARCHAR(255), operation_date DATE, success BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as num_successful_ops FROM intelligence_operations WHERE group_name = 'Special Operations Group' AND success = TRUE AND operation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 보험 번호 4에 해당하는 모든 청구 기록을 claims 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE claims (claim_number INT, policy_number INT, claim_amount INT, claim_date DATE); INSERT INTO claims (claim_number, policy_number, claim_amount, claim_date) VALUES (1, 4, 3000, '2019-06-20'); INSERT INTO claims (claim_number, policy_number, claim_amount, claim_date) VALUES (2, 4, 4000, '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM claims WHERE policy_number = 4;"
    },
    {
        "instruction": "입력 텍스트: 북부 지역에서의 최대 저축 잔액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE customers (id INT, name TEXT, region TEXT, savings REAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(savings) FROM customers WHERE region = 'North';"
    },
    {
        "instruction": "입력 텍스트: 종과 보전 상태별로 멸종 위기 동물의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE endangered_species (id INT, species VARCHAR(255), status VARCHAR(255), population INT); INSERT INTO endangered_species (id, species, status, population) VALUES (1, 'Gorilla', 'Critically Endangered', 250), (2, 'Koala', 'Vulnerable', 350), (3, 'Orangutan', 'Endangered', 450);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, status, SUM(population) FROM endangered_species GROUP BY species, status;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양' 지역 출신이며 최소 한 번 이상 투자한 투자자는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE regions (region_id INT, region_name VARCHAR(20)); CREATE TABLE investors (investor_id INT, investor_name VARCHAR(30), region_id INT); CREATE TABLE investments (investment_id INT, investor_id INT, sector_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM investors i INNER JOIN regions r ON i.region_id = r.region_id WHERE r.region_name = 'Asia-Pacific' AND i.investor_id IN (SELECT investment_id FROM investments);"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 전기차량의 시장 점유율이 하이브리드 차량에 비해 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE vehicles (vehicle_id INT, vehicle_type VARCHAR(50), registration_date TIMESTAMP, city VARCHAR(50)); INSERT INTO vehicles (vehicle_id, vehicle_type, registration_date, city) VALUES (1, 'electric', '2021-01-01', 'Tokyo'), (2, 'hybrid', '2021-01-02', 'Tokyo'), (3, 'gasoline', '2021-01-03', 'Tokyo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(CASE WHEN vehicle_type = 'electric' THEN 1 END) / COUNT(*) AS electric_market_share, 100.0 * COUNT(CASE WHEN vehicle_type = 'hybrid' THEN 1 END) / COUNT(*) AS hybrid_market_share FROM vehicles WHERE city = 'Tokyo';"
    },
    {
        "instruction": "입력 텍스트: 온타리오 주에 있는 모든 치과 클리닉의 이름에 'Dental'이라는 단어가 포함되도록 이름을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE dental_clinics (id INT, province VARCHAR(255), name VARCHAR(255)); INSERT INTO dental_clinics (id, province, name) VALUES (1, 'Ontario', 'General Clinic'); INSERT INTO dental_clinics (id, province, name) VALUES (2, 'Quebec', 'Dental Clinic B'); INSERT INTO dental_clinics (id, province, name) VALUES (3, 'British Columbia', 'Pharmacy C');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE dental_clinics SET name = CONCAT('Dental ', name) WHERE province = 'Ontario';"
    },
    {
        "instruction": "입력 텍스트: 2020년 이전에 완공된 모든 지속 가능한 건설 프로젝트의 이름과 건설 비용은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SustainableProjects (ProjectID int, Name varchar(50), ConstructionCost int, CompletionDate date); INSERT INTO SustainableProjects (ProjectID, Name, ConstructionCost, CompletionDate) VALUES (1, 'Green Building', 30000, '2019-06-30'); INSERT INTO SustainableProjects (ProjectID, Name, ConstructionCost, CompletionDate) VALUES (2, 'Eco-friendly School', 40000, '2018-12-15'); INSERT INTO SustainableProjects (ProjectID, Name, ConstructionCost, CompletionDate) VALUES (3, 'Solar Powered Office', 50000, '2019-11-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, ConstructionCost FROM SustainableProjects WHERE CompletionDate < '2020-01-01';"
    },
    {
        "instruction": "입력 텍스트: 남미에서 가장 큰 구리 매장량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE geological_survey (mineral VARCHAR(50), country VARCHAR(50), deposit_size INT, PRIMARY KEY (mineral, country));INSERT INTO geological_survey (mineral, country, deposit_size) VALUES ('Gold', 'Colombia', 1000), ('Silver', 'Peru', 1300), ('Copper', 'Chile', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sql.mineral, sql.country, sql.deposit_size FROM geological_survey sql WHERE sql.mineral = 'Copper' AND sql.country = 'Chile' AND sql.deposit_size = (SELECT MAX(deposit_size) FROM geological_survey WHERE mineral = 'Copper')"
    },
    {
        "instruction": "입력 텍스트: 연구 출판물이 가장 많은 상위 3명의 대학원생을 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE GraduateStudents (StudentID int, StudentName varchar(255), UniversityID int); CREATE TABLE Publications (PublicationID int, StudentID int, Title varchar(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT StudentName, COUNT(*) as NumPublications FROM Publications p JOIN GraduateStudents gs ON p.StudentID = gs.StudentID GROUP BY StudentName ORDER BY NumPublications DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 인도와 파키스탄의 농촌 병원에서 병상 수의 평균은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rural_hospitals (country VARCHAR(20), hospital_name VARCHAR(50), num_beds INT); INSERT INTO rural_hospitals (country, hospital_name, num_beds) VALUES ('India', 'Hospital A', 50), ('India', 'Hospital B', 75), ('Pakistan', 'Hospital C', 100), ('Pakistan', 'Hospital D', 125);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(num_beds) FROM rural_hospitals GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: e스포츠 이벤트에 참여한 플레이어 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, ParticipatedInEsports BOOLEAN); INSERT INTO Players (PlayerID, ParticipatedInEsports) VALUES (1, TRUE); INSERT INTO Players (PlayerID, ParticipatedInEsports) VALUES (2, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Players WHERE ParticipatedInEsports = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2020년 모든 지역에서 발생한 총 폐기물 양은 kg 단위로 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_generation(region VARCHAR(255), year INT, waste_kg FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(waste_kg) FROM waste_generation WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 공학 부서에 최소한 하나의 연구비를 받은 여성 교수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE department (name VARCHAR(255), id INT);CREATE TABLE professor (name VARCHAR(255), gender VARCHAR(255), department_id INT, grant_amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT name) FROM professor WHERE gender = 'Female' AND department_id IN (SELECT id FROM department WHERE name = 'Engineering') AND grant_amount IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 어떤 소매업체들이 동일한 공급업체로부터 여러 번 제품을 공급받았나요?\n\nDDL statements:\nCREATE TABLE retailers (retailer_id INT, retailer_name TEXT);CREATE TABLE suppliers (supplier_id INT, supplier_name TEXT);CREATE TABLE products (product_id INT, product_name TEXT, supplier_id INT);CREATE TABLE inventory (retailer_id INT, product_id INT, quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT retailers.retailer_name FROM retailers JOIN inventory ON retailers.retailer_id = inventory.retailer_id JOIN products ON inventory.product_id = products.product_id JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY retailers.retailer_name HAVING COUNT(DISTINCT suppliers.supplier_id) > 1;"
    },
    {
        "instruction": "입력 텍스트: 2018년에 참석자 수가 100명 미만인 이벤트는 각 이벤트 유형별로 몇 개였나요?\n\nDDL statements:\nCREATE TABLE Events (EventID int, EventDate date, EventAttendance int, EventType varchar(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EventType, COUNT(*) FROM Events WHERE EventAttendance < 100 AND EventDate BETWEEN '2018-01-01' AND '2018-12-31' GROUP BY EventType;"
    },
    {
        "instruction": "입력 텍스트: 1850년부터 1900년 사이에 프랑스에서 만들어진 유명한 그림들은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Art (id INT, title VARCHAR(255), creation_date DATE, country VARCHAR(50)); INSERT INTO Art (id, title, creation_date, country) VALUES (1, 'Impression, Sunrise', '1872-12-15', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title FROM Art WHERE country = 'France' AND creation_date BETWEEN '1850-01-01' AND '1900-12-31';"
    },
    {
        "instruction": "입력 텍스트: 미드웨스트 지역의 풋볼 경기 평균 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sports (id INT, name VARCHAR(255)); INSERT INTO sports (id, name) VALUES (1, 'Basketball'), (2, 'Soccer'), (3, 'Football'); CREATE TABLE regions (id INT, name VARCHAR(255)); INSERT INTO regions (id, name) VALUES (1, 'Northeast'), (2, 'Southeast'), (3, 'Midwest'), (4, 'West'); CREATE TABLE games (id INT, sport_id INT, region_id INT, price INT, date DATE); INSERT INTO games (id, sport_id, region_id, price, date) VALUES (1, 3, 3, 100, '2022-06-01'), (2, 2, 2, 75, '2022-07-01'), (3, 3, 3, 90, '2022-08-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(g.price) as avg_price FROM games g JOIN regions r ON g.region_id = r.id JOIN sports s ON g.sport_id = s.id WHERE s.name = 'Football' AND r.name = 'Midwest';"
    },
    {
        "instruction": "입력 텍스트: 디지털 채널별 방문자 인구 통계 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE visitor_demographics (id INT, age INT, gender TEXT, digital_channel TEXT); INSERT INTO visitor_demographics (id, age, gender, digital_channel) VALUES (1, 23, 'Female', 'Website'), (2, 35, 'Male', 'Email');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT digital_channel, age, gender, COUNT(*) FROM visitor_demographics GROUP BY digital_channel, age, gender;"
    },
    {
        "instruction": "입력 텍스트: 에너지 종류별 총 에너지 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE TotalEnergyProduction (EnergyType VARCHAR(50), Production FLOAT); INSERT INTO TotalEnergyProduction (EnergyType, Production) VALUES ('Solar', 150.0), ('Wind', 250.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EnergyType, SUM(Production) AS TotalProduction FROM TotalEnergyProduction GROUP BY EnergyType;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에는 몇 개의 군사 기지가 있습니까?\n\nDDL statements:\nCREATE TABLE MilitaryBases (ID INT, Country VARCHAR(20), Quantity INT); INSERT INTO MilitaryBases (ID, Country, Quantity) VALUES (1, 'France', 28);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Quantity FROM MilitaryBases WHERE Country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 노동 위반에 대한 각 계약자별 평균 벌금을 보여주세요.\n\nDDL statements:\nCREATE TABLE labor_stats (contractor VARCHAR(100), fine INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT contractor, AVG(fine) AS avg_fine FROM labor_stats GROUP BY contractor;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 교육 프로그램의 수를 세어주세요.\n\nDDL statements:\nCREATE TABLE education_programs (id INT, name VARCHAR(50), region VARCHAR(50)); INSERT INTO education_programs (id, name, region) VALUES (1, 'Wildlife Rangers', 'North America'), (2, 'Conservation Kids', 'Europe'), (3, 'Eco Warriors', 'Africa'), (4, 'Nature Guardians', 'Asia'), (5, 'Ocean Explorers', 'Oceania'), (6, 'Forest Friends', 'North America'), (7, 'Seaside Scholars', 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) as program_count FROM education_programs GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 투자 전략별 평균 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investment_strategies (id INT, strategy_name VARCHAR(50)); INSERT INTO investment_strategies (id, strategy_name) VALUES (1, 'Value Investing'), (2, 'Growth Investing'); CREATE TABLE transactions (strategy_id INT, transaction_amount DECIMAL(10,2)); INSERT INTO transactions (strategy_id, transaction_amount) VALUES (1, 200.00), (1, 300.00), (2, 100.00), (2, 400.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.strategy_name, AVG(t.transaction_amount) as avg_transaction_amount FROM investment_strategies i JOIN transactions t ON i.id = t.strategy_id GROUP BY i.strategy_name;"
    },
    {
        "instruction": "입력 텍스트: 광업 작업에서 사용된 물 중 재활용된 물의 비율을 계산하세요\n\nDDL statements:\nCREATE TABLE water_usage(year INT, operation VARCHAR(20), total_water_used INT, recycled_water INT); INSERT INTO water_usage VALUES (2018, 'mining', 1000000, 400000), (2019, 'mining', 1200000, 450000), (2020, 'mining', 1400000, 500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(recycled_water) * 100.0 / SUM(total_water_used)) as percentage FROM water_usage WHERE year BETWEEN 2018 AND 2020 AND operation = 'mining';"
    },
    {
        "instruction": "입력 텍스트: BUS-789'라는 버스 ID를 가진 'BusE'라는 이름의 'Accessible' 버스에 대한 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE vehicles (vehicle_id VARCHAR(20), vehicle_type VARCHAR(20), vehicle_name VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO vehicles (vehicle_id, vehicle_type, vehicle_name) VALUES ('BUS-789', 'Bus', 'BusE'), ('TRAIN-123', 'Train', 'TrainA');"
    },
    {
        "instruction": "입력 텍스트: 도시 지역의 공공 안전을 위해 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE areas (id INT, name VARCHAR(20)); INSERT INTO areas (id, name) VALUES (1, 'Urban'), (2, 'Rural'); CREATE TABLE budget (item VARCHAR(20), area_id INT, amount INT); INSERT INTO budget (item, area_id, amount) VALUES ('Public Safety', 1, 8000000), ('Public Safety', 2, 4500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM budget WHERE item = 'Public Safety' AND area_id = (SELECT id FROM areas WHERE name = 'Urban');"
    },
    {
        "instruction": "입력 텍스트: 알로에 베라' 성분이 포함된 화장품 제품의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, rating INT, has_aloe_vera BOOLEAN); INSERT INTO products (product_id, product_name, rating, has_aloe_vera) VALUES (1, 'Moisturizer', 4, true), (2, 'Cleanser', 3, false), (3, 'Toner', 5, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) as avg_rating FROM products WHERE has_aloe_vera = true;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 캘리포니아에서 설치된 태양 에너지 설비는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE solar_installations (id INT, state VARCHAR(50), year INT, installed BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM solar_installations WHERE state = 'California' AND year = 2020 AND installed = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2019년 'Nigeria' 지역의 우물 총 생산량(배럴)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE well_production (well_id INT, region VARCHAR(20), year INT, production INT); INSERT INTO well_production (well_id, region, year, production) VALUES (1, 'Nigeria', 2019, 200000), (2, 'Nigeria', 2018, 220000), (3, 'Houston', 2020, 150000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production) FROM well_production WHERE region = 'Nigeria' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: charging_stations' 테이블에 캘리포니아에 있는 전기차 충전소는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE charging_stations (station_id INT, location VARCHAR(50), state VARCHAR(2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM charging_stations WHERE state = 'CA';"
    },
    {
        "instruction": "입력 텍스트: 샤리아 준수 금융 기관 수가 가장 많은 상위 3개 국가를 찾으세요.\n\nDDL statements:\nCREATE TABLE shariah_compliant_finance (id INT, institution_name VARCHAR(100), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as institution_count FROM shariah_compliant_finance GROUP BY country ORDER BY institution_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에서 집단 치료의 성공률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE therapy_sessions (id INT PRIMARY KEY, patient_id INT, therapy_type VARCHAR(50), country VARCHAR(50), success BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM therapy_sessions WHERE country = 'France' AND therapy_type = 'group therapy' AND success = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 월별로 ocean_health_monitor 테이블에서 측정된 용존 산소 농도(DO)의 최대값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ocean_health_monitor (date DATE, do_value DECIMAL(3,1)); INSERT INTO ocean_health_monitor (date, do_value) VALUES ('2022-01-01', 6.5), ('2022-01-02', 6.2), ('2022-02-01', 5.9), ('2022-02-02', 6.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health_monitor WHERE date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY EXTRACT(MONTH FROM date);"
    },
    {
        "instruction": "입력 텍스트: 오세아니아에 있는 모든 광산 작업들과 관련된 인력 다양성 지표를 나열하세요(해당하는 경우).\n\nDDL statements:\nCREATE TABLE mining_operations (id INT, name VARCHAR(50), continent VARCHAR(50)); CREATE TABLE diversity (operation_id INT, gender_diversity FLOAT, cultural_diversity FLOAT); INSERT INTO mining_operations (id, name, continent) VALUES (1, 'Mine X', 'Oceania'), (2, 'Mine Y', 'Africa'); INSERT INTO diversity (operation_id, gender_diversity, cultural_diversity) VALUES (1, 0.7, 0.4), (1, 0.8, 0.4), (2, 0.6, 0.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mo.name, d.gender_diversity, d.cultural_diversity FROM mining_operations mo LEFT JOIN diversity d ON mo.id = d.operation_id WHERE mo.continent = 'Oceania';"
    },
    {
        "instruction": "입력 텍스트: 2021년도에 carbon_prices 테이블에서 평균 탄소 가격(USD/톤 단위)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE carbon_prices (year INT, price DECIMAL(5,2)); INSERT INTO carbon_prices (year, price) VALUES (2018, 10.5), (2019, 12.3), (2020, 14.2), (2021, 16.1), (2022, 18.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) as avg_price FROM carbon_prices WHERE year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 SPF 15 이상인 립스틱의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE cosmetics.lipstick_spf_data (lipstick_id INT, has_spf BOOLEAN, spf_level INT, country VARCHAR(50)); INSERT INTO cosmetics.lipstick_spf_data (lipstick_id, has_spf, spf_level, country) VALUES (1, true, 15, 'India'), (2, true, 20, 'India'), (3, false, 0, 'India'), (4, true, 10, 'India'), (5, false, 0, 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cosmetics.lipstick_spf_data WHERE country = 'India') as percentage FROM cosmetics.lipstick_spf_data WHERE country = 'India' AND has_spf = true AND spf_level >= 15;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 바이오테크 스타트업이 받은 최대 자금은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists biotech;CREATE TABLE if not exists biotech.startups (id INT PRIMARY KEY, name VARCHAR(100), country VARCHAR(50), funding DECIMAL(10, 2)); INSERT INTO biotech.startups (id, name, country, funding) VALUES (1, 'StartupA', 'USA', 1500000.00), (2, 'StartupB', 'USA', 2000000.00), (3, 'StartupC', 'Canada', 1200000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(funding) FROM biotech.startups WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 인구가 50만 명을 초과하는 지구에서 시행된 탄소 상쇄 프로그램의 이름과 지구는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Carbon_Offset_Initiatives (id INT, initiative_name VARCHAR(50), district VARCHAR(50), population INT); INSERT INTO Carbon_Offset_Initiatives (id, initiative_name, district, population) VALUES (1, 'Tree Planting', 'Downtown', 800000), (2, 'Recycling Program', 'Uptown', 600000), (3, 'Solar Panels', 'Suburbs', 400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name, district FROM Carbon_Offset_Initiatives WHERE district IN (SELECT district FROM Cities WHERE population > 500000);"
    },
    {
        "instruction": "입력 텍스트: 순환 경제에 참여하는 회사가 가장 많은 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE circular_economy_companies (company_id INT, company_name VARCHAR(50), country VARCHAR(50)); INSERT INTO circular_economy_companies (company_id, company_name, country) VALUES (1, 'Green Innovations', 'USA'), (2, 'Eco-Friendly Solutions', 'Canada'), (3, 'Sustainable Systems', 'Mexico'), (4, 'Eco-Conscious Enterprises', 'Brazil'), (5, 'Renewable Resources', 'USA'), (6, 'Circular Solutions', 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM circular_economy_companies GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기에 아시아에서 매출이 500 이상인 모든 소매업체를 나열합니다.\n\nDDL statements:\nCREATE TABLE Retailers (retailer_id INT, retailer_name VARCHAR(100), country VARCHAR(50), PRIMARY KEY (retailer_id)); INSERT INTO Retailers (retailer_id, retailer_name, country) VALUES (1, 'Retailer1', 'China'), (2, 'Retailer2', 'Japan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Retailers.retailer_name FROM Retailers JOIN Sales ON Retailers.country = Sales.country WHERE Sales.sale_date BETWEEN '2022-04-01' AND '2022-06-30' AND Sales.revenue > 500;"
    },
    {
        "instruction": "입력 텍스트: 나토 국가들에 대한 군사 장비 판매의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Military_Equipment_Sales(id INT, country VARCHAR(50), equipment_type VARCHAR(50), sale_value FLOAT); INSERT INTO Military_Equipment_Sales(id, country, equipment_type, sale_value) VALUES (1, 'USA', 'Aircraft', 50000000), (2, 'Canada', 'Vehicles', 30000000), (3, 'Germany', 'Naval', 40000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN ('USA', 'Canada', 'Germany', 'France', 'UK', 'Italy', 'Spain');"
    },
    {
        "instruction": "입력 텍스트: 인도에서 진행 중인 바이오센서 기술 개발 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE SCHEMA biosensors; CREATE TABLE biosensors.projects (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO biosensors.projects (id, name, country) VALUES (1, 'ProjectG', 'India'); INSERT INTO biosensors.projects (id, name, country) VALUES (2, 'ProjectH', 'India'); INSERT INTO biosensors.projects (id, name, country) VALUES (3, 'ProjectI', 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM biosensors.projects WHERE country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 각 사용자 계정별로 하루 평균 실패한 로그인 시도 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE login_attempts (id INT, user_account VARCHAR(255), success BOOLEAN, login_date DATE); INSERT INTO login_attempts (id, user_account, success, login_date) VALUES (1, 'user1', false, '2022-01-01'), (2, 'user2', true, '2022-01-01'), (3, 'user1', false, '2022-01-02'), (4, 'user3', false, '2022-01-02'), (5, 'user2', false, '2022-01-03'), (6, 'user1', false, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT user_account, AVG(failed_attempts) as avg_failed_attempts_per_day FROM (SELECT user_account, success, login_date, CASE WHEN success = false THEN 1 ELSE 0 END as failed_attempts FROM login_attempts) as subquery GROUP BY user_account;"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년에 있는 독특한 적응 프로젝트의 수를 파악하고, 프로젝트 이름과 해당 자금 조달 부문을 나열하세요.\n\nDDL statements:\nCREATE TABLE climate_adaptation_projects (year INT, project VARCHAR(20), sector VARCHAR(10)); INSERT INTO climate_adaptation_projects (year, project, sector) VALUES (2019, 'Project1', 'Public'), (2019, 'Project2', 'Private'), (2020, 'Project3', 'Public'), (2020, 'Project4', 'Public'), (2020, 'Project4', 'Private');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project, sector FROM climate_adaptation_projects WHERE year IN (2019, 2020) GROUP BY project, sector;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 가장 낮은 식품 안전 점수를 가진 레스토랑을 확인하세요.\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID INT, RestaurantName VARCHAR(255), Region VARCHAR(255), FoodSafetyScore INT); INSERT INTO Restaurants VALUES (1,'Restaurant A','North',90),(2,'Restaurant B','North',85),(3,'Restaurant C','South',80),(4,'Restaurant D','South',82),(5,'Restaurant E','East',95),(6,'Restaurant F','East',93),(7,'Restaurant G','West',75),(8,'Restaurant H','West',88);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Restaurants.RestaurantName, Restaurants.Region, Restaurants.FoodSafetyScore FROM Restaurants WHERE Restaurants.FoodSafetyScore = (SELECT MIN(FoodSafetyScore) FROM Restaurants AS T WHERE T.Region = Restaurants.Region) GROUP BY Restaurants.Region;"
    },
    {
        "instruction": "입력 텍스트: 동남아시아 지역의 공장 근로자들의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Factory_Workers (worker_id INT, worker_name TEXT, salary DECIMAL, region TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM Factory_Workers WHERE region = 'Southeast Asia';"
    },
    {
        "instruction": "입력 텍스트: 모든 해양 생명 연구 프로젝트의 총 바이오매스를 계산하세요.\n\nDDL statements:\nCREATE TABLE marine_life_research (id INT, project_name TEXT, biomass FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(biomass) FROM marine_life_research;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 온 방문객들이 참석한 특별 이벤트의 평균 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Countries (id INT, name VARCHAR(20)); ALTER TABLE Visitors ADD COLUMN country_id INT; ALTER TABLE Visitors ADD COLUMN attended_event BOOLEAN DEFAULT FALSE; CREATE TABLE Events (id INT, name VARCHAR(20)); CREATE TABLE Event_Attendance (visitor_id INT, event_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Event_Attendance_agg.event_attendance) FROM (SELECT Visitors.id, COUNT(Event_Attendance.event_id) AS event_attendance FROM Visitors JOIN Countries ON Visitors.country_id = Countries.id JOIN Event_Attendance ON Visitors.id = Event_Attendance.visitor_id JOIN Events ON Event_Attendance.event_id = Events.id WHERE Countries.name = 'United States' GROUP BY Visitors.id) AS Event_Attendance_agg;"
    },
    {
        "instruction": "입력 텍스트: Europe' 지역의 모든 블록체인 기술의 이름과 규제 프레임워크는 무엇인가요?\n\nDDL statements:\nCREATE TABLE blockchain_tech (name TEXT, region TEXT, framework TEXT); INSERT INTO blockchain_tech (name, region, framework) VALUES ('Tech1', 'Europe', 'Regulation1'), ('Tech2', 'Asia-Pacific', 'Regulation2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, framework FROM blockchain_tech WHERE region = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 2020년 오세아니아 도시 지역에서 플라스틱, 유리, 금속의 재활용률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE recycling_rates_oceania (material TEXT, rate REAL, year INTEGER, area TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material, rate FROM recycling_rates_oceania WHERE area = 'Oceania' AND year = 2020 AND material IN ('plastic', 'glass', 'metal');"
    },
    {
        "instruction": "입력 텍스트: 북미 지역의 서식지 보존 프로젝트에서 최대 몇 개까지 가능한가요?\n\nDDL statements:\nCREATE TABLE Habitat (ProjectID INT, Project VARCHAR(50), Maximum INT, Location VARCHAR(50)); INSERT INTO Habitat (ProjectID, Project, Maximum, Location) VALUES (1, 'Forest Protection', 120, 'North America'); INSERT INTO Habitat (ProjectID, Project, Maximum, Location) VALUES (2, 'Wetland Restoration', 90, 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Maximum) FROM Habitat WHERE Location = 'North America';"
    },
    {
        "instruction": "입력 텍스트: 아시아 출신이며 시즌에 75경기 이상 출전한 선수들의 경기당 평균 3점 슛 성공 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, first_name VARCHAR(50), last_name VARCHAR(50), country VARCHAR(50), games_played INT, three_point_shots_made INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(three_point_shots_made) FROM players WHERE country = 'Asia' GROUP BY country HAVING games_played > 75;"
    },
    {
        "instruction": "입력 텍스트: jupiter_missions' 테이블에서 목성 탐사 임무의 이름과 발사 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE jupiter_missions (id INT, mission_name VARCHAR(50), launch_date DATE); INSERT INTO jupiter_missions (id, mission_name, launch_date) VALUES (1, 'Galileo Orbiter', '1989-10-18'), (2, 'Juno', '2011-08-05'), (3, 'Europa Clipper', '2024-10-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name, launch_date FROM jupiter_missions WHERE destination = 'Jupiter';"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 '재난 대비'와 관련된 모든 기후 적응 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE climate_adaptation (id INT, project VARCHAR(255), location VARCHAR(255), budget FLOAT); INSERT INTO climate_adaptation (id, project, location, budget) VALUES (1, 'Flood Resistant Infrastructure', 'Europe', 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM climate_adaptation WHERE project LIKE '%disaster preparedness%' AND location = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 제조업' 산업에서 노조에 소속된 근로자의 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Workers (EmployeeID INT, Industry VARCHAR(20), UnionMember BOOLEAN, Salary FLOAT); INSERT INTO Workers (EmployeeID, Industry, UnionMember, Salary) VALUES (1, 'Manufacturing', true, 60000.0), (2, 'Manufacturing', false, 55000.0), (3, 'Manufacturing', true, 62000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM Workers WHERE Industry = 'Manufacturing' AND UnionMember = true;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 지속 가능한 재료를 공급하는 상위 5개 업체는 누구인가요?\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, country VARCHAR(50), material_type VARCHAR(50), quantity INT); INSERT INTO suppliers (supplier_id, country, material_type, quantity) VALUES (1, 'Kenya', 'Organic Cotton', 500), (2, 'Tanzania', 'Recycled Polyester', 300), (3, 'Uganda', 'Tencel', 400), (4, 'Ethiopia', 'Hemp', 600), (5, 'Morocco', 'Bamboo', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_id, country, material_type, quantity FROM suppliers WHERE country IN ('Kenya', 'Tanzania', 'Uganda', 'Ethiopia', 'Morocco') ORDER BY quantity DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 유럽 지역의 양식 밀도가 5000 이상인 담수 양식장에 있는 물고기는 총 몇 마리인가요?\n\nDDL statements:\nCREATE TABLE freshwater_fish_farms (id INT, name TEXT, region TEXT, fish_count INT, stocking_density INT); INSERT INTO freshwater_fish_farms (id, name, region, fish_count, stocking_density) VALUES (1, 'Farm X', 'Europe', 25000, 4000), (2, 'Farm Y', 'Europe', 30000, 6000), (3, 'Farm Z', 'Asia', 15000, 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fish_count) FROM freshwater_fish_farms WHERE region = 'Europe' AND stocking_density > 5000;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 여성 건설 근로자의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE construction_workers (worker_id INT, gender VARCHAR(50), state VARCHAR(50), occupation VARCHAR(50), salary INT); INSERT INTO construction_workers (worker_id, gender, state, occupation, salary) VALUES (1, 'Female', 'Texas', 'Carpenter', 55000); INSERT INTO construction_workers (worker_id, gender, state, occupation, salary) VALUES (2, 'Male', 'Texas', 'Electrician', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM construction_workers WHERE state = 'Texas' AND gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 안전 검사를 받지 않은 선박은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE vessel (id INT, name VARCHAR(50), last_inspection DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM vessel WHERE last_inspection < DATE(NOW(), INTERVAL -2 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 스페인 마드리드에서 풍력 프로젝트의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE budgets (id INT, city VARCHAR(20), country VARCHAR(20), year INT, budget FLOAT, project_type VARCHAR(20)); INSERT INTO budgets (id, city, country, year, budget, project_type) VALUES (1, 'Madrid', 'Spain', 2014, 5000000, 'Wind'), (2, 'Madrid', 'Spain', 2016, 6000000, 'Wind'), (3, 'Madrid', 'Spain', 2017, 7000000, 'Solar'), (4, 'Madrid', 'Spain', 2018, 8000000, 'Wind');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM budgets WHERE city = 'Madrid' AND country = 'Spain' AND project_type = 'Wind' AND year >= 2015;"
    },
    {
        "instruction": "입력 텍스트: 하키 선수가 한 시즌에 기록한 최대 어시스트 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE season_assists (id INT, player_name VARCHAR(50), team VARCHAR(50), season VARCHAR(10), assists INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(assists) FROM season_assists WHERE sport = 'Hockey' GROUP BY player_name, season;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 얼마나 많은 스킨케어 제품이 있나요?\n\nDDL statements:\nCREATE TABLE SkincareInventory (product_id INT, product_name VARCHAR(100), country VARCHAR(50)); INSERT INTO SkincareInventory VALUES (301, 'Vitamin C Serum', 'USA'), (302, 'Retinol Moisturizer', 'Canada'), (303, 'Tea Tree Oil', 'Australia'), (304, 'Green Tea Toner', 'Japan'), (305, 'Hyaluronic Acid Cream', 'Korea'), (306, 'AHA Exfoliant', 'USA'), (307, 'BHA Exfoliant', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(product_id) AS product_count FROM SkincareInventory GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 북극 지역에 있는 해양 포유류 종의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE marine_mammals (name VARCHAR(255), region VARCHAR(255)); INSERT INTO marine_mammals (name, region) VALUES ('Species 1', 'Arctic'); INSERT INTO marine_mammals (name, region) VALUES ('Species 2', 'Antarctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_mammals WHERE region = 'Arctic';"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에 있는 경찰관의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE police_officers_tx (id INT, state VARCHAR(20), num_officers INT); INSERT INTO police_officers_tx (id, state, num_officers) VALUES (1, 'Texas', 60000), (2, 'Texas', 65000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_officers) FROM police_officers_tx WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 각 리사이클러가 재활용한 각 희토류 원소의 총 수량을 나열하시오.\n\nDDL statements:\nCREATE TABLE recyclers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255));CREATE TABLE recycling_stats (recycler_id INT, year INT, element VARCHAR(255), quantity INT, PRIMARY KEY (recycler_id, year, element), FOREIGN KEY (recycler_id) REFERENCES recyclers(id));INSERT INTO recycling_stats (recycler_id, year, element, quantity) VALUES (1, 2019, 'Neodymium', 500), (1, 2019, 'Praseodymium', 700), (2, 2019, 'Neodymium', 800), (2, 2019, 'Praseodymium', 1000), (1, 2020, 'Neodymium', 550), (1, 2020, 'Praseodymium', 750), (2, 2020, 'Neodymium', 850), (2, 2020, 'Praseodymium', 1100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT recycler_id, element, SUM(quantity) AS Total_Recycled FROM recycling_stats GROUP BY recycler_id, element;"
    },
    {
        "instruction": "입력 텍스트: 몇 개의 독특한 브랜드가 비건 신발을 제공하나요?\n\nDDL statements:\nCREATE TABLE shoes (id INT, brand VARCHAR(255), model VARCHAR(255), is_vegan BOOLEAN); INSERT INTO shoes (id, brand, model, is_vegan) VALUES (1, 'Adidas', 'Stan Smith', true), (2, 'Vans', 'Slip-On', false), (3, 'Nike', 'Air Max', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT brand) FROM shoes WHERE is_vegan = true;"
    },
    {
        "instruction": "입력 텍스트: 어느 지역의 평균 작물 수확량이 가장 높은가요?\n\nDDL statements:\nCREATE TABLE crops_table (region VARCHAR(50), crop VARCHAR(50), yield INT); INSERT INTO crops_table (region, crop, yield) VALUES ('RegionA', 'corn', 100), ('RegionA', 'wheat', 80), ('RegionB', 'corn', 110), ('RegionB', 'wheat', 90), ('RegionC', 'corn', 95), ('RegionC', 'wheat', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(yield) as avg_yield FROM crops_table GROUP BY region ORDER BY avg_yield DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 버스 유지보수 이벤트의 총 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE BusMaintenance (MaintenanceID INT, MaintenanceDate DATE, VehicleID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(MaintenanceID) FROM BusMaintenance WHERE MaintenanceDate >= DATEADD(YEAR, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 에티오피아에서 공정 무역 커피 콩의 최소 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE coffee_prices (id INT, price DECIMAL(5,2), product VARCHAR(255), country VARCHAR(255)); INSERT INTO coffee_prices (id, price, product, country) VALUES (1, 3.50, 'Coffee Beans', 'Ethiopia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(price) FROM coffee_prices WHERE product = 'Coffee Beans' AND country = 'Ethiopia';"
    },
    {
        "instruction": "입력 텍스트: 각 지구에서 교사들이 수강한 전문 개발 과정의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE teacher_pd (teacher_id INT, district_id INT, course_id INT); INSERT INTO teacher_pd (teacher_id, district_id, course_id) VALUES (1, 101, 1001), (2, 101, 1002), (3, 102, 1003), (4, 102, 1004);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_id, COUNT(course_id) as num_courses FROM teacher_pd GROUP BY district_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 4분기에 아시아-태평양 지역에서 'BAE Systems' 소유의 해군 함정이 받은 유지보수의 총 횟수를 유지보수 유형별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE NavalVessels (id INT, owner VARCHAR(50), region VARCHAR(20), maintenance_type VARCHAR(50), maintenance_date DATE); INSERT INTO NavalVessels (id, owner, region, maintenance_type, maintenance_date) VALUES (1, 'BAE Systems', 'Asia-Pacific', 'Routine Check', '2020-11-17'); INSERT INTO NavalVessels (id, owner, region, maintenance_type, maintenance_date) VALUES (2, 'BAE Systems', 'Asia-Pacific', 'Major Overhaul', '2020-12-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT maintenance_type, COUNT(*) as total_maintenance FROM NavalVessels WHERE owner = 'BAE Systems' AND region = 'Asia-Pacific' AND maintenance_date BETWEEN '2020-10-01' AND '2020-12-31' GROUP BY maintenance_type;"
    },
    {
        "instruction": "입력 텍스트: ID가 C005인 작물의 질소 수준을 150으로 설정하세요.\n\nDDL statements:\nCREATE TABLE crops (crop_id VARCHAR(10), nitrogen_level INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE crops SET nitrogen_level = 150 WHERE crop_id = 'C005';"
    },
    {
        "instruction": "입력 텍스트: tennis_players' 테이블에 있는 테니스 선수들과 그들의 랭킹을 나열하세요.\n\nDDL statements:\nCREATE TABLE tennis_players (player_id INT, name VARCHAR(50), ranking INT); INSERT INTO tennis_players (player_id, name, ranking) VALUES (1, 'Novak Djokovic', 1); INSERT INTO tennis_players (player_id, name, ranking) VALUES (2, 'Rafael Nadal', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, ranking FROM tennis_players;"
    },
    {
        "instruction": "입력 텍스트: 각 문화유산 사이트에서 개최된 커뮤니티 참여 이벤트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE events (id INT, site_id INT, event_type VARCHAR); INSERT INTO events (id, site_id, event_type) VALUES (1, 1, 'Community Engagement'), (2, 2, 'Educational'); CREATE TABLE heritage_sites (id INT, name VARCHAR); INSERT INTO heritage_sites (id, name) VALUES (1, 'Heritage Site A'), (2, 'Heritage Site B');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT heritage_sites.name, COUNT(events.id) AS total_events FROM heritage_sites INNER JOIN events ON heritage_sites.id = events.site_id WHERE events.event_type = 'Community Engagement' GROUP BY heritage_sites.id;"
    },
    {
        "instruction": "입력 텍스트: 전기 자동차의 평균 안전 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Vehicles (Id INT, Type VARCHAR(20), SafetyRating FLOAT); INSERT INTO Vehicles (Id, Type, SafetyRating) VALUES (1, 'Electric', 4.3), (2, 'Gasoline', 4.0), (3, 'Diesel', 4.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(SafetyRating) FROM Vehicles WHERE Type = 'Electric';"
    },
    {
        "instruction": "입력 텍스트: 서울의 각 지하철역별로 승차와 하차 인원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE subway_stations_seoul(station_name VARCHAR(50), entries INTEGER, exits INTEGER); INSERT INTO subway_stations_seoul (station_name, entries, exits) VALUES ('Station A', 1500, 1600), ('Station B', 1200, 1300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT station_name, SUM(entries) AS total_entries, SUM(exits) AS total_exits FROM subway_stations_seoul GROUP BY station_name;"
    },
    {
        "instruction": "입력 텍스트: 페어 트레이드, 레인포레스트 얼라이언스 또는 유기농 인증을 받은 제품의 수를 세어주세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(100), certification VARCHAR(50)); INSERT INTO products (product_id, name, certification) VALUES (1, 'Fair Trade Coffee', 'Fair Trade'); INSERT INTO products (product_id, name, certification) VALUES (2, 'Rainforest Alliance Tea', 'Rainforest Alliance'); INSERT INTO products (product_id, name, certification) VALUES (3, 'Organic Vegetables', 'organic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM products WHERE certification IN ('Fair Trade', 'Rainforest Alliance', 'organic');"
    },
    {
        "instruction": "입력 텍스트: 각 부서의 평균 급여보다 높은 급여를 받는 직원들의 이름과 급여는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10, 2)); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (1, 'John', 'Doe', 'IT', 75000.00); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (2, 'Jane', 'Smith', 'IT', 80000.00); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (3, 'Mike', 'Johnson', 'Marketing', 60000.00); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (4, 'Alice', 'Williams', 'HR', 85000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FirstName, LastName, Salary FROM Employees e1 WHERE Salary > (SELECT AVG(Salary) FROM Employees e2 WHERE e1.Department = e2.Department);"
    },
    {
        "instruction": "입력 텍스트: 유기농 제품의 성분별 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product VARCHAR(255), brand_id INT, price DECIMAL(5,2), organic BOOLEAN); CREATE TABLE product_ingredients (ingredient_id INT, product_id INT, ingredient VARCHAR(255)); INSERT INTO products (product_id, product, brand_id, price, organic) VALUES (1, 'Organic Shampoo', 1, 12.99, TRUE), (2, 'Conventional Shampoo', 1, 9.99, FALSE), (3, 'Organic Conditioner', 1, 14.99, TRUE), (4, 'Conventional Conditioner', 1, 10.99, FALSE); INSERT INTO product_ingredients (ingredient_id, product_id, ingredient) VALUES (1, 1, 'Aloe Vera'), (2, 1, 'Rosemary'), (3, 2, 'Sulfates'), (4, 3, 'Aloe Vera'), (5, 3, 'Jojoba Oil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT pi.ingredient, AVG(p.price) as avg_price FROM products p JOIN product_ingredients pi ON p.product_id = pi.product_id WHERE p.organic = TRUE GROUP BY pi.ingredient;"
    },
    {
        "instruction": "입력 텍스트: 이집트의 농업 혁신 프로젝트 중 최소 면적은 몇 헥타르입니까?\n\nDDL statements:\nCREATE TABLE agricultural_innovation_projects (id INT, name TEXT, size_ha FLOAT, country TEXT); INSERT INTO agricultural_innovation_projects (id, name, size_ha, country) VALUES (1, 'Project O', 12.5, 'Egypt'); INSERT INTO agricultural_innovation_projects (id, name, size_ha, country) VALUES (2, 'Project P', 25.6, 'Egypt');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(size_ha) FROM agricultural_innovation_projects WHERE country = 'Egypt';"
    },
    {
        "instruction": "입력 텍스트: 남미 시장에서 판매된 유기농 재료로 만들어진 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE products (product_id INT, material VARCHAR(20), price DECIMAL(5,2), market VARCHAR(20)); INSERT INTO products (product_id, material, price, market) VALUES (1, 'organic cotton', 50.00, 'South America'), (2, 'sustainable wood', 80.00, 'Asia'), (3, 'recycled polyester', 60.00, 'Europe'), (4, 'organic linen', 70.00, 'South America'), (5, 'organic hemp', 65.00, 'South America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM sales JOIN products ON sales.product_id = products.product_id WHERE products.market = 'South America' AND products.material LIKE 'organic%';"
    },
    {
        "instruction": "입력 텍스트: artifacts' 테이블에는 고대 이집트 유물이 몇 개 있습니까?\n\nDDL statements:\nCREATE TABLE artifacts (artifact_id INT PRIMARY KEY, artifact_name VARCHAR(100), artifact_period VARCHAR(50), artifact_type VARCHAR(50)); INSERT INTO artifacts (artifact_id, artifact_name, artifact_period, artifact_type) VALUES (1, 'Pottery Shard', 'Stone Age', 'Ceramic'), (2, 'Flint Tool', 'Bronze Age', 'Stone'), (3, 'Anubis Statue', 'Ancient Egyptian', 'Sculpture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM artifacts WHERE artifact_period = 'Ancient Egyptian';"
    },
    {
        "instruction": "입력 텍스트: 2021년 미국과 호주 사이의 모든 항공편에 대한 총 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE flights (id INT, origin TEXT, destination TEXT, CO2_emissions FLOAT, year INT); INSERT INTO flights (id, origin, destination, CO2_emissions, year) VALUES (1, 'US', 'Australia', 120.5, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CO2_emissions) FROM flights WHERE (origin = 'US' AND destination = 'Australia') OR (origin = 'Australia' AND destination = 'US') AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: community' 스키마의 'donors' 테이블과 'donations' 테이블에서 각 기부자가 기부한 총액을 가장 높은 금액부터 낮은 금액 순으로 나열해주세요.\n\nDDL statements:\nCREATE SCHEMA community; CREATE TABLE community.donors (donor_id INT, donor_name VARCHAR(100)); CREATE TABLE community.donations (donation_id INT, donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE); INSERT INTO community.donors (donor_id, donor_name) VALUES (1, 'Garcia'), (2, 'Patel'), (3, 'Lee'), (4, 'Johnson'); INSERT INTO community.donations (donation_id, donor_id, donation_amount, donation_date) VALUES (1, 1, 200.00, '2021-05-01'), (2, 2, 300.00, '2021-06-15'), (3, 1, 50.00, '2021-07-28'), (4, 3, 100.00, '2021-09-12'), (5, 4, 250.00, '2021-10-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dn.donor_name, SUM(d.donation_amount) AS total_donated FROM community.donors dn INNER JOIN community.donations d ON dn.donor_id = d.donor_id GROUP BY dn.donor_name ORDER BY total_donated DESC;"
    },
    {
        "instruction": "입력 텍스트: 2020년 팝 장르 디지털 음악 판매로 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MusicSales (sale_id INT, sale_date DATE, sale_amount DECIMAL(10,2), genre VARCHAR(20)); CREATE TABLE Genres (genre_id INT, genre VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(ms.sale_amount) FROM MusicSales ms INNER JOIN Genres g ON ms.genre = g.genre WHERE g.genre = 'Pop' AND sale_date BETWEEN '2020-01-01' AND '2020-12-31';"
    },
    {
        "instruction": "입력 텍스트: 각 산업 분야별로 이민자에 의해 설립된 회사는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founder TEXT, industry TEXT, funding FLOAT); INSERT INTO company (id, name, founder, industry, funding) VALUES (1, 'Acme Inc', 'Immigrant', 'Tech', 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, COUNT(*) FROM company WHERE founder LIKE '%Immigrant%' GROUP BY industry;"
    },
    {
        "instruction": "입력 텍스트: 지난 해에 Pandora에서 라틴 음악의 일 평균 스트리밍 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE DailyStreams (StreamID INT, TrackID INT, PlatformID INT, Date DATE, Streams INT); INSERT INTO DailyStreams (StreamID, TrackID, PlatformID, Date, Streams) VALUES (1, 1, 2, '2022-01-01', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(StreamsPerDay) as AvgStreamsPerDay FROM (SELECT EXTRACT(DAY FROM Date) as Day, EXTRACT(MONTH FROM Date) as Month, EXTRACT(YEAR FROM Date) as Year, SUM(Streams) as StreamsPerDay FROM DailyStreams JOIN Tracks ON DailyStreams.TrackID = Tracks.TrackID JOIN StreamingPlatforms ON DailyStreams.PlatformID = StreamingPlatforms.PlatformID WHERE Genre = 'Latin' AND PlatformName = 'Pandora' GROUP BY Day, Month, Year) as Subquery WHERE Year = EXTRACT(YEAR FROM CURRENT_DATE) - 1;"
    },
    {
        "instruction": "입력 텍스트: London' 스키마의 각 노선별로 접근 가능한 역의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE london.lines (id INT, line_name VARCHAR); CREATE TABLE london.stations (id INT, line_id INT, is_accessible BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT london.lines.line_name, COUNT(*) FROM london.lines INNER JOIN london.stations ON london.lines.id = london.stations.line_id WHERE london.stations.is_accessible = TRUE GROUP BY london.lines.line_name;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 20시간 이상 기부한 모든 자원봉사자를 나열하세요.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID int, VolunteerName varchar(50), HoursDonated int, VolunteerYear int); INSERT INTO Volunteers (VolunteerID, VolunteerName, HoursDonated, VolunteerYear) VALUES (1, 'Charlie Green', 25, 2021), (2, 'David White', 30, 2021), (3, 'Ella Black', 15, 2021), (4, 'Frank Red', 40, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT VolunteerName FROM Volunteers WHERE HoursDonated > 20 AND VolunteerYear = 2021;"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 20년 이상 운영된 커뮤니티 참여 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE community_engagement (id INT, program_name TEXT, location TEXT, years_operating INT); INSERT INTO community_engagement (id, program_name, location, years_operating) VALUES (1, 'Scottish Heritage Preservation Society', 'Scotland', 30), (2, 'French Language and Culture Club', 'France', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name, location FROM community_engagement WHERE years_operating > 20 AND location LIKE '%%Europe%%';"
    },
    {
        "instruction": "입력 텍스트: 2021년 2분기에 캐나다로 판매된 군사 장비의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MilitaryEquipmentSales (id INT, country VARCHAR(50), amount FLOAT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, country, amount, sale_date) VALUES (1, 'Canada', 5000000, '2021-04-01'); INSERT INTO MilitaryEquipmentSales (id, country, amount, sale_date) VALUES (2, 'Canada', 7000000, '2021-07-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM MilitaryEquipmentSales WHERE country = 'Canada' AND sale_date BETWEEN '2021-04-01' AND '2021-06-30';"
    },
    {
        "instruction": "입력 텍스트: 비건 가죽 바지'의 판매량이 가장 높은 상위 5개 매장을 확인하세요.\n\nDDL statements:\nCREATE TABLE Sales_2 (sale_id INT, product_name VARCHAR(50), store_id INT, quantity_sold INT); INSERT INTO Sales_2 VALUES (1, 'Vegan Leather Pants', 1, 50), (2, 'Vegan Leather Pants', 2, 75), (3, 'Vegan Leather Pants', 3, 80), (4, 'Vegan Leather Pants', 4, 90), (5, 'Vegan Leather Pants', 5, 100), (6, 'Vegan Leather Pants', 6, 110), (7, 'Vegan Leather Pants', 7, 120); CREATE TABLE Stores_2 (store_id INT, store_name VARCHAR(50)); INSERT INTO Stores_2 VALUES (1, 'Store D'), (2, 'Store E'), (3, 'Store F'), (4, 'Store G'), (5, 'Store H'), (6, 'Store I'), (7, 'Store J');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT store_id, store_name, SUM(quantity_sold) as total_sold FROM Sales_2 JOIN Stores_2 ON Sales_2.store_id = Stores_2.store_id WHERE product_name = 'Vegan Leather Pants' GROUP BY store_id, store_name ORDER BY total_sold DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 각 회사의 연도별 총 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE wells (well_id INT, well_name VARCHAR(255), location VARCHAR(255), company VARCHAR(255), production_figures DECIMAL(10,2)); INSERT INTO wells (well_id, well_name, location, company, production_figures) VALUES (1, 'Well A', 'North Sea', 'Company A', 12000.50), (2, 'Well B', 'North Sea', 'Company B', 15000.25), (3, 'Well C', 'Gulf of Mexico', 'Company A', 20000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company, EXTRACT(YEAR FROM date) AS year, SUM(production_figures) AS total_production FROM wells GROUP BY company, year;"
    },
    {
        "instruction": "입력 텍스트: 에너지 소비량을 지속적으로 줄인 호텔 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, country TEXT, energy_consumption FLOAT, year INT); INSERT INTO hotels (hotel_id, hotel_name, city, country, energy_consumption, year) VALUES (1, 'Hotel A', 'Rome', 'Italy', 12000.0, 2021), (1, 'Hotel A', 'Rome', 'Italy', 11000.0, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_name, energy_consumption FROM (SELECT hotel_name, energy_consumption, energy_consumption - LAG(energy_consumption) OVER (PARTITION BY hotel_name ORDER BY year) as diff FROM hotels) where diff < 0;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 국가에서 판매된 하이브리드 차량의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE hybrid_sales (id INT, country VARCHAR(20), year INT, quantity INT); INSERT INTO hybrid_sales (id, country, year, quantity) VALUES (1, 'USA', 2018, 10000), (2, 'USA', 2019, 15000), (3, 'USA', 2020, 20000), (4, 'China', 2018, 12000), (5, 'China', 2019, 18000), (6, 'China', 2020, 22000), (7, 'Germany', 2018, 8000), (8, 'Germany', 2019, 12000), (9, 'Germany', 2020, 16000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, year, SUM(quantity) FROM hybrid_sales WHERE year = 2020 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 제약 생산에 사용되는 화학물질의 종류는 몇 가지입니까?\n\nDDL statements:\nCREATE TABLE chemicals (id INT, name TEXT, type TEXT); INSERT INTO chemicals (id, name, type) VALUES (1, 'ChemA', 'Pharma'), (2, 'ChemB', 'Industrial'), (3, 'ChemC', 'Pharma'), (4, 'ChemD', 'Agriculture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT type) FROM chemicals WHERE type = 'Pharma';"
    },
    {
        "instruction": "입력 텍스트: route' 테이블에서 각 노선 유형별로 수집된 총 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE route (id INT, name TEXT, type TEXT, fare FLOAT); INSERT INTO route (id, name, type, fare) VALUES (1, 'Central Line', 'Underground', 3.5), (2, 'Circle Line', 'Underground', 4.2), (3, 'Jubilee Line', 'Underground', 5.0), (4, 'Bus Route 123', 'Bus', 2.5), (5, 'Bus Route 456', 'Bus', 3.0); CREATE TABLE fare_collection (id INT, route_id INT, fare FLOAT); INSERT INTO fare_collection (id, route_id, fare) VALUES (1, 1, 100.0), (2, 1, 75.0), (3, 2, 50.0), (4, 3, 75.0), (5, 4, 50.0), (6, 4, 75.0), (7, 5, 100.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.type, SUM(f.fare) as total_fare FROM route r JOIN fare_collection f ON r.id = f.route_id GROUP BY r.type;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서의 녹색 건물과 재생 에너지 프로젝트의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_buildings (id INT, building_name VARCHAR(255), state VARCHAR(255));   CREATE TABLE renewable_projects (id INT, project_name VARCHAR(255), state VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(gb.building_name) + COUNT(rp.project_name) FROM green_buildings gb RIGHT JOIN renewable_projects rp ON gb.state = rp.state GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 호주의 채식 요리에서 나트륨 함량의 평균은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Dishes(id INT, name TEXT, sodium INT, is_vegetarian BOOLEAN, country TEXT); INSERT INTO Dishes(id, name, sodium, is_vegetarian, country) VALUES (1, 'Vegetable Lasagna', 800, TRUE, 'Australia'), (2, 'Mushroom Risotto', 550, TRUE, 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(sodium) FROM Dishes WHERE is_vegetarian = TRUE AND country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: games' 테이블에서 모든 축구 선수들이 기록한 골의 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE games (game_id INT, team VARCHAR(50), opponent VARCHAR(50), goals INT); INSERT INTO games (game_id, team, opponent, goals) VALUES (1, 'Barcelona', 'Real Madrid', 3); INSERT INTO games (game_id, team, opponent, goals) VALUES (2, 'Real Madrid', 'Barcelona', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(goals) FROM games WHERE team IN (SELECT team FROM players WHERE position = 'Soccer Player');"
    },
    {
        "instruction": "입력 텍스트: 우주 탐사 임무 유형별 평균 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SpaceExploration (Id INT, MissionType VARCHAR(20), Country VARCHAR(20), Cost INT); INSERT INTO SpaceExploration VALUES (1, 'Rover', 'USA', 2000000), (2, 'Lander', 'Russia', 1500000), (3, 'Orbiter', 'China', 1800000), (4, 'Rover', 'USA', 3000000), (5, 'Lander', 'India', 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MissionType, AVG(Cost) as AvgCost FROM SpaceExploration GROUP BY MissionType;"
    },
    {
        "instruction": "입력 텍스트: 공공 공원은 총 몇 개이며, 그 중 휠체어 접근이 가능한 공원은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Parks (Accessible TEXT, Count INT); INSERT INTO Parks (Accessible, Count) VALUES ('Yes', 80), ('No', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Accessible, SUM(Count) FROM Parks GROUP BY Accessible;"
    },
    {
        "instruction": "입력 텍스트: 학생 테이블에서 중국 출신 학생들의 이메일 주소를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE students (id INT, name VARCHAR(50), email VARCHAR(50), country VARCHAR(50)); INSERT INTO students (id, name, email, country) VALUES (104, 'Li Miller', 'limiller@example.com', 'China'), (105, 'Huang Smith', 'huangsmith@example.com', 'China');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE students SET email = 'newemail@example.com' WHERE country = 'China';"
    },
    {
        "instruction": "입력 텍스트: 최근 3개월 내에 자금을 조달받은 바이오테크 스타트업을 나열하세요.\n\nDDL statements:\nCREATE TABLE biotech_startups (id INT, name VARCHAR(50), location VARCHAR(50), funding FLOAT, funding_date DATE); INSERT INTO biotech_startups (id, name, location, funding, funding_date) VALUES (1, 'Genomic Inc', 'California', 1500000, '2021-03-01'); INSERT INTO biotech_startups (id, name, location, funding, funding_date) VALUES (2, 'BioSense', 'Texas', 1200000, '2021-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM biotech_startups WHERE funding_date >= DATE(NOW()) - INTERVAL 3 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 베트남에서 생산된 의류에서 사용된 지속 가능한 재료의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Garments (garment_id INT, garment_material VARCHAR(50), garment_quantity INT, garment_country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(garment_quantity) AS total_quantity FROM Garments WHERE garment_material IN ('organic cotton', 'recycled polyester', 'hemp') AND garment_country = 'Vietnam';"
    },
    {
        "instruction": "입력 텍스트: 연방 시설에서 5년 이상 수감된 모든 사람들의 이름과 수감 시설을 보여주세요.\n\nDDL statements:\nCREATE TABLE Inmates (Id INT, Name VARCHAR(50), Facility VARCHAR(50), YearsIncarcerated INT); INSERT INTO Inmates (Id, Name, Facility, YearsIncarcerated) VALUES (1, 'John Doe', 'Federal Prison', 6), (2, 'Jane Smith', 'County Jail', 2), (3, 'Bob Johnson', 'Federal Prison', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, Facility FROM Inmates WHERE YearsIncarcerated > 5 AND Facility LIKE 'Federal%';"
    },
    {
        "instruction": "입력 텍스트: Tesla'에서 제조한 차량의 최대 안전 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE safety_test_results (vehicle_id INT, make VARCHAR(50), model VARCHAR(50), safety_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(safety_rating) FROM safety_test_results WHERE make = 'Tesla';"
    },
    {
        "instruction": "입력 텍스트: 스페인의 문화 유산 보존 프로젝트가 지역 경제에 미친 영향은 무엇인가요?\n\nDDL statements:\nCREATE TABLE cultural_heritage (country VARCHAR(50), project_name VARCHAR(100), local_economic_impact FLOAT); INSERT INTO cultural_heritage (country, project_name, local_economic_impact) VALUES ('Spain', 'Ancient City Restoration', 12000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT local_economic_impact FROM cultural_heritage WHERE country = 'Spain' AND project_name = 'Ancient City Restoration';"
    },
    {
        "instruction": "입력 텍스트: 2021년 12월 한 달 동안 제품별로 USD로 계산한 총 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, transaction_date DATE, transaction_product VARCHAR(50), transaction_amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT transaction_product, SUM(transaction_amount) as total_transaction_amount FROM transactions WHERE transaction_date BETWEEN '2021-12-01' AND '2021-12-31' AND transaction_amount = 'USD' GROUP BY transaction_product;"
    },
    {
        "instruction": "입력 텍스트: 각 섬유 공급업체의 평균 지속 가능한 원단 수량(톤 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SupplierFabric (Supplier VARCHAR(255), Quantity FLOAT); INSERT INTO SupplierFabric (Supplier, Quantity) VALUES ('SupplierA', 12.5), ('SupplierB', 15.8), ('SupplierC', 10.4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Quantity) FROM SupplierFabric;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 가장 많은 위협을 보고한 위협 정보 출처는 어디인가요?\n\nDDL statements:\nCREATE TABLE threat_intelligence (id INT, source TEXT, threats INT, reported_date DATE); INSERT INTO threat_intelligence (id, source, threats, reported_date) VALUES (1, 'MI6', 50, '2021-02-01'); INSERT INTO threat_intelligence (id, source, threats, reported_date) VALUES (2, 'CIA', 75, '2021-03-10'); INSERT INTO threat_intelligence (id, source, threats, reported_date) VALUES (3, 'Mossad', 100, '2021-04-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT source, SUM(threats) as total_threats FROM threat_intelligence WHERE reported_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY source ORDER BY total_threats DESC;"
    },
    {
        "instruction": "입력 텍스트: 남아메리카' 지역의 모든 커뮤니티 교육 프로그램을 '프로그램 ID'별로 나열하세요.\n\nDDL statements:\nCREATE TABLE community_education (program_id INT, program_name VARCHAR(255), region VARCHAR(255), animals_covered INT); INSERT INTO community_education (program_id, program_name, region, animals_covered) VALUES (1, 'Amazon Protectors', 'South America', 80), (2, 'Pampas Guardians', 'South America', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, program_name, animals_covered FROM community_education WHERE region = 'South America';"
    },
    {
        "instruction": "입력 텍스트: 라틴계로 신원을 밝힌 창업자들이 설립한 스타트업의 평균 설립 연도는 무엇인가요?\n\nDDL statements:\nCREATE TABLE startups(id INT, name TEXT, industry TEXT, founding_year INT, founder_identity TEXT); INSERT INTO startups VALUES (1, 'StartupA', 'Healthcare', 2010, 'Latinx'); INSERT INTO startups VALUES (2, 'StartupB', 'Tech', 2015, 'Asian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(founding_year) FROM startups WHERE founder_identity = 'Latinx';"
    },
    {
        "instruction": "입력 텍스트: IPL(인도 프리미어 리그) 시즌에서 한 선수가 기록한 가장 높은 득점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ipl_runs (player_name VARCHAR(50), team VARCHAR(50), season YEAR, runs INT); INSERT INTO ipl_runs (player_name, team, season, runs) VALUES ('Virat Kohli', 'Royal Challengers Bangalore', 2016, 973);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(runs) FROM ipl_runs;"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2017년 사이에 인도에 설치된 에너지 저장 기술은 무엇인가요?\n\nDDL statements:\nCREATE TABLE storage_projects (name TEXT, country TEXT, technology TEXT, year_built INTEGER); INSERT INTO storage_projects (name, country, technology, year_built) VALUES ('Talcher Thermal', 'India', 'Pumped Hydro', 1985); INSERT INTO storage_projects (name, country, technology, year_built) VALUES ('Kameng', 'India', 'Pumped Hydro', 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM storage_projects WHERE country = 'India' AND technology IN ('Batteries', 'Flywheels', 'Compressed Air') AND year_built BETWEEN 2015 AND 2017;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 각 연도별 세륨 생산량을 모두 나열하시오.\n\nDDL statements:\nCREATE TABLE cerium_production (country VARCHAR(20), quantity INT, year INT); INSERT INTO cerium_production (country, quantity, year) VALUES ('Canada', 3500, 2018), ('Canada', 3700, 2019), ('Canada', 4000, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, year, quantity FROM cerium_production WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 보레알 숲에 있는 소나무과에 속하는 나무들의 총 부피는 얼마인가요?\n\nDDL statements:\nCREATE TABLE biomes (biome_id INT PRIMARY KEY, name VARCHAR(50), area_km2 FLOAT); INSERT INTO biomes (biome_id, name, area_km2) VALUES (1, 'Tropical Rainforest', 15000000.0), (2, 'Temperate Rainforest', 250000.0), (3, 'Boreal Forest', 12000000.0); CREATE TABLE trees (tree_id INT PRIMARY KEY, species VARCHAR(50), biome_id INT, family VARCHAR(50), volume FLOAT, FOREIGN KEY (biome_id) REFERENCES biomes(biome_id)); INSERT INTO trees (tree_id, species, biome_id, family, volume) VALUES (1, 'White Pine', 3, 'Pinus', 400.0), (2, 'Red Pine', 3, 'Pinus', 500.0), (3, 'Jack Pine', 3, 'Pinus', 300.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(trees.volume) FROM trees JOIN biomes ON trees.biome_id = biomes.biome_id WHERE trees.family = 'Pinus' AND biomes.name = 'Boreal Forest';"
    },
    {
        "instruction": "입력 텍스트: 2019년 4월에 몇 명의 자원봉사자가 등록했나요?\n\nDDL statements:\nCREATE TABLE volunteers (id INT, signup_date DATE); INSERT INTO volunteers (id, signup_date) VALUES (1, '2019-04-01'), (2, '2019-04-15'), (3, '2019-04-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM volunteers WHERE signup_date BETWEEN '2019-04-01' AND '2019-04-30';"
    },
    {
        "instruction": "입력 텍스트: 2023년 각 양식 구역의 최대 용존 산소 농도(mg/L)는 얼마입니까?\n\nDDL statements:\nCREATE TABLE aquaculture_zones (zone_id INT, year INT, max_dissolved_oxygen FLOAT); INSERT INTO aquaculture_zones (zone_id, year, max_dissolved_oxygen) VALUES (1, 2023, 8.5), (2, 2023, 8.2), (3, 2023, 8.8), (4, 2023, 8.6), (5, 2023, 8.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT zone_id, MAX(max_dissolved_oxygen) as max_dissolved_oxygen_mg_l FROM aquaculture_zones WHERE year = 2023 GROUP BY zone_id;"
    },
    {
        "instruction": "입력 텍스트: 2015년에 '북아메리카'에서 완료된 프로젝트들에 의한 총 CO2 상쇄량을 보여주세요.\n\nDDL statements:\nCREATE TABLE carbon_offset_projects (id INT PRIMARY KEY, project_name VARCHAR(255), location VARCHAR(255), offset_tons_co2 INT, start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(offset_tons_co2) FROM carbon_offset_projects WHERE location = 'north_america' AND completion_date BETWEEN '2015-01-01' AND '2015-12-31';"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 발견되고 '멸종 위기' 보전 상태인 모든 해양 생물을 나열하세요.\n\nDDL statements:\nCREATE TABLE species (id INT, name VARCHAR(255), conservation_status VARCHAR(255), ocean_basin VARCHAR(255)); INSERT INTO species (id, name, conservation_status, ocean_basin) VALUES (1, 'Atlantic Salmon', 'Endangered', 'Atlantic'), (2, 'Blue Whale', 'Critically Endangered', 'Pacific'), (3, 'Vaquita', 'Critically Endangered', 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM species WHERE conservation_status = 'Endangered' AND ocean_basin = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 북극해에 서식하는 해양 생물 종별로 기후 변화가 미치는 영향은 무엇인가요?\n\nDDL statements:\nCREATE TABLE marine_species_arctic_ocean (species_name VARCHAR(255), habitat VARCHAR(255)); INSERT INTO marine_species_arctic_ocean (species_name, habitat) VALUES ('Walrus', 'Arctic Ocean'), ('Beluga Whale', 'Arctic Ocean'); CREATE TABLE climate_change_impacts_arctic_ocean (species_name VARCHAR(255), impacts TEXT); INSERT INTO climate_change_impacts_arctic_ocean (species_name, impacts) VALUES ('Walrus', 'Shrinking habitats'), ('Beluga Whale', 'Melting sea ice');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.species_name, c.impacts FROM marine_species_arctic_ocean m FULL OUTER JOIN climate_change_impacts_arctic_ocean c ON m.species_name = c.species_name WHERE m.habitat = 'Arctic Ocean' OR c.species_name IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 나이지리아의 주별 병원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE nigerian_hospitals (id INT, name VARCHAR(50), state VARCHAR(50)); INSERT INTO nigerian_hospitals (id, name, state) VALUES (1, 'Hospital A', 'Lagos');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) as hospital_count FROM nigerian_hospitals GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 기부자 수가 전체 기부자 수에서 차지하는 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors_region (id INT, name TEXT, region TEXT); INSERT INTO donors_region (id, name, region) VALUES (1, 'John Smith', 'Asia-Pacific'), (2, 'Jane Doe', 'North America'), (3, 'James Lee', 'Asia-Pacific'), (4, 'Jessica White', 'North America'), (5, 'Mohammed Al-Hassan', 'Middle East');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM donors_region) AS percentage FROM donors_region GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 플로리다 주에 있는 수처리 시설들 중 지난 5년간 업그레이드된 시설의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Water_Treatment_Plant_Upgrades (ID INT, Plant_Name VARCHAR(50), State VARCHAR(20), Upgrade_Date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Water_Treatment_Plant_Upgrades WHERE State = 'Florida' AND Upgrade_Date >= DATEADD(year, -5, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 평균 티켓 가격이 가장 높은 상위 5개 스포츠를 확인하세요.\n\nDDL statements:\nCREATE TABLE tickets (id INT, game_id INT, team VARCHAR(50), tickets_sold INT, price DECIMAL(5, 2)); INSERT INTO tickets (id, game_id, team, tickets_sold, price) VALUES (1, 101, 'Basketball', 50, 50.00), (2, 102, 'Soccer', 30, 75.00), (3, 103, 'Basketball', 20, 100.00), (4, 104, 'Baseball', 40, 35.00), (5, 105, 'Soccer', 50, 25.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sport, AVG(price) as avg_price FROM tickets GROUP BY sport ORDER BY avg_price DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 각 종류의 긴급 상황에 대한 평균 대응 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE emergency_responses (id INT, response_type VARCHAR(255), response_time TIMESTAMP); INSERT INTO emergency_responses (id, response_type, response_time) VALUES (1, 'Fire', '2021-01-01 10:15:00'); INSERT INTO emergency_responses (id, response_type, response_time) VALUES (2, 'Medical', '2021-01-02 10:16:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT response_type, AVG(EXTRACT(EPOCH FROM response_time)) as avg_response_time FROM emergency_responses GROUP BY response_type;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티에 있는 LEED 인증 건물들의 평균 평방 피트는 건축 유형별로 어떻게 나뉘어져 있나요?\n\nDDL statements:\nCREATE TABLE leed_buildings (id INT, building_name VARCHAR(50), square_footage FLOAT, construction_type VARCHAR(50), city VARCHAR(50), state VARCHAR(50)); INSERT INTO leed_buildings (id, building_name, square_footage, construction_type, city, state) VALUES (1, 'GreenHQ', 120000, 'Steel', 'New York', 'NY'), (2, 'EcoTower', 200000, 'Concrete', 'New York', 'NY'), (3, 'SustainableSpire', 180000, 'Wood', 'New York', 'NY');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT construction_type, AVG(square_footage) as avg_square_footage FROM leed_buildings WHERE city = 'New York' AND state = 'NY' AND construction_type IN ('Steel', 'Concrete', 'Wood') GROUP BY construction_type;"
    },
    {
        "instruction": "입력 텍스트: tech_ops' 뷰에서 각 군사 기술에 연관된 정보 작전의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE military_tech (tech VARCHAR(255)); INSERT INTO military_tech (tech) VALUES ('drone'), ('stealth_aircraft'), ('submarine'), ('artillery'); CREATE TABLE intel_ops (op VARCHAR(255)); INSERT INTO intel_ops (op) VALUES ('surveillance'), ('reconnaissance'), ('communications_jamming'), ('decoy'); CREATE VIEW tech_ops AS SELECT mt.tech, io.op FROM military_tech mt CROSS JOIN intel_ops io;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mt.tech, COUNT(*) FROM tech_ops mt GROUP BY mt.tech;"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 평균 배송 시간이 가장 긴 상위 10개 노선을 찾으세요.\n\nDDL statements:\nCREATE TABLE Routes (id INT, origin_city VARCHAR(255), destination_city VARCHAR(255), distance INT, etd DATE, eta DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT origin_city, destination_city, AVG(DATEDIFF(day, etd, eta)) as avg_delivery_time FROM Routes WHERE origin_city IN (SELECT city FROM Warehouse WHERE country = 'Europe') GROUP BY origin_city, destination_city ORDER BY avg_delivery_time DESC LIMIT 10;"
    },
    {
        "instruction": "입력 텍스트: 서울 지역의 산업 부문에서 발생하는 폐기물의 양과 이 부문을 서비스하는 재활용 센터는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE waste_generation (id INT, sector VARCHAR(20), location VARCHAR(20), amount DECIMAL(10,2), date DATE); CREATE TABLE recycling_centers (id INT, name VARCHAR(20), location VARCHAR(20), sector VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(waste_generation.amount), COUNT(recycling_centers.name) FROM waste_generation INNER JOIN recycling_centers ON waste_generation.sector = recycling_centers.sector WHERE waste_generation.sector = 'industrial' AND waste_generation.location = 'Seoul';"
    },
    {
        "instruction": "입력 텍스트: 유럽의 각 목적지별 최대 마케팅 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists destinations (id INT, name VARCHAR(50)); CREATE TABLE if not exists marketing_budgets (id INT, destination_id INT, budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, MAX(mb.budget) FROM marketing_budgets mb JOIN destinations d ON mb.destination_id = d.id GROUP BY d.name;"
    },
    {
        "instruction": "입력 텍스트: 범죄율이 높은 지구의 경찰서에서 처리한 긴급 사건의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE station_crime_rates (sid INT, rate INT, PRIMARY KEY(sid)); CREATE TABLE station_emergencies (eid INT, sid INT, time TIMESTAMP, PRIMARY KEY(eid), FOREIGN KEY(sid) REFERENCES stations(sid));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(1) FROM station_emergencies se JOIN station_crime_rates sc ON se.sid = sc.sid WHERE sc.rate > (SELECT AVG(rate) FROM (SELECT did, AVG(rate) AS rate FROM crime_rates GROUP BY did) cr);"
    },
    {
        "instruction": "입력 텍스트: Virtual_Tourism 테이블에서 'Great Wall of China Tour'의 User_Experience 값을 현재 값에 150을 더하여 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Virtual_Tourism (Experience VARCHAR(50), Platform VARCHAR(50), User_Experience INT); INSERT INTO Virtual_Tourism (Experience, Platform, User_Experience) VALUES ('Great Wall of China Tour', 'Google Arts & Culture', 4800), ('Eiffel Tower Tour', 'AirPano', 3500), ('Vatican City Tour', 'Yandex', 5200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Virtual_Tourism SET User_Experience = User_Experience + 150 WHERE Experience = 'Great Wall of China Tour';"
    },
    {
        "instruction": "입력 텍스트: 양식장에서 가장 흔한 어종별로 순위를 매긴 어종의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE fish_species (site_id INT, species VARCHAR(50), quantity INT); INSERT INTO fish_species VALUES (1, 'Salmon', 20), (2, 'Trout', 15), (3, 'Tuna', 10), (4, 'Cod', 12), (5, 'Shrimp', 18), (6, 'Lobster', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, COUNT(*) AS species_count, RANK() OVER (ORDER BY COUNT(*) DESC) AS species_rank FROM fish_species GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 2021년 상반기에 각 요일별 총 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, transaction_date DATE, transaction_category VARCHAR(255), transaction_value DECIMAL(10,2)); INSERT INTO transactions (transaction_id, transaction_date, transaction_category, transaction_value) VALUES (1, '2021-01-02', 'Food', 50.00), (2, '2021-01-05', 'Electronics', 300.00), (3, '2021-01-10', 'Clothing', 150.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(transaction_date, '%W') as day_of_week, SUM(transaction_value) as total_value FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-06-30' GROUP BY day_of_week;"
    },
    {
        "instruction": "입력 텍스트: 시리즈 B 투자 라운드에서의 최소 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investments(id INT, startup_id INT, round_number INT, investment_amount INT); INSERT INTO investments VALUES (1, 1, 1, 3000000); INSERT INTO investments VALUES (2, 1, 2, 7000000); INSERT INTO investments VALUES (3, 2, 1, 5000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(investment_amount) FROM investments WHERE round_number = 2;"
    },
    {
        "instruction": "입력 텍스트: GreenBuildings' 테이블에 있는 건물들의 평균 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GreenBuildings (id INT, name VARCHAR(50), location VARCHAR(50), energyConsumption DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energyConsumption) FROM GreenBuildings;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 지역의 기후 금융 프로젝트 중 최소 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (id INT, project_name TEXT, budget INT, location TEXT); INSERT INTO climate_finance (id, project_name, budget, location) VALUES (1, 'Coral Reef Restoration', 25000, 'Oceania'); INSERT INTO climate_finance (id, project_name, budget, location) VALUES (2, 'Mangrove Planting', 30000, 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(budget) FROM climate_finance WHERE location = 'Oceania';"
    },
    {
        "instruction": "입력 텍스트: 총 기부금이 1000달러를 초과하지 않은 기부자의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donor_name TEXT, country TEXT, total_donation_amount FLOAT); INSERT INTO donors (donor_id, donor_name, country, total_donation_amount) VALUES (1, 'John Doe', 'USA', 5000.00), (2, 'Jane Smith', 'Canada', 700.00), (3, 'Bob Johnson', 'USA', 800.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM donors WHERE total_donation_amount <= 1000;"
    },
    {
        "instruction": "입력 텍스트: HospitalLocations' 테이블에 있는 각 주별로 농촌 병원은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE HospitalLocations (hospital_id INT, hospital_name VARCHAR(50), state VARCHAR(20)); INSERT INTO HospitalLocations (hospital_id, hospital_name, state) VALUES (1, 'RuralHospitalTX', 'Texas'), (2, 'RuralHospitalCA', 'California'), (3, 'RuralHospitalTX', 'Texas'), (4, 'RuralHospitalFL', 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM HospitalLocations GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 각 주에서 탐지된 사기 사례는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE fraud_detections (detection_id INT, customer_id INT, detection_date DATE, state VARCHAR(50)); INSERT INTO fraud_detections (detection_id, customer_id, detection_date, state) VALUES (1, 1, '2021-04-01', 'NY'); INSERT INTO fraud_detections (detection_id, customer_id, detection_date, state) VALUES (2, 2, '2021-04-15', 'CA'); INSERT INTO fraud_detections (detection_id, customer_id, detection_date, state) VALUES (3, 3, '2021-04-20', 'FL');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) as num_fraud_cases FROM fraud_detections WHERE detection_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: \"rural_clinics\" 테이블에 있는 남성 의료 제공자의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rural_clinics (id INT, name TEXT, age INT, gender TEXT); INSERT INTO rural_clinics (id, name, age, gender) VALUES (1, 'Clinic A', 45, 'Male'), (2, 'Clinic B', 35, 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM rural_clinics WHERE gender = 'Male';"
    },
    {
        "instruction": "입력 텍스트: 주어진 날짜에 각 항목 카테고리별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Sales (sale_id INT PRIMARY KEY, sale_date DATE, item_sold VARCHAR(255), quantity INT, sale_price DECIMAL(5,2)); CREATE TABLE Menu (menu_id INT PRIMARY KEY, item_name VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.category, SUM(s.quantity * s.sale_price) FROM Sales s JOIN Menu m ON s.item_sold = m.item_name WHERE s.sale_date = '2022-01-01' GROUP BY m.category;"
    },
    {
        "instruction": "입력 텍스트: 직물 산업에서 견습 프로그램을 이수한 근로자들의 평균 급여가 국가별로 어떻게 되는지?\n\nDDL statements:\nCREATE TABLE TextileWorkers (WorkerID INT, Salary DECIMAL(5,2), Country VARCHAR(50), ApprenticeshipProgram BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, AVG(Salary) as AvgSalary FROM TextileWorkers WHERE ApprenticeshipProgram = TRUE GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 수학과에서 3편 이상의 논문을 발표한 대학원생의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE GraduateStudents(StudentID INT, Department VARCHAR(255), NumPapers INT); INSERT INTO GraduateStudents(StudentID, Department, NumPapers) VALUES (1, 'Mathematics', 4), (2, 'Mathematics', 2), (3, 'Mathematics', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(StudentID) FROM GraduateStudents WHERE Department = 'Mathematics' HAVING NumPapers > 3;"
    },
    {
        "instruction": "입력 텍스트: 시카고에서 HIV 양성 판정을 받고 50세 이상인 환자의 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE patients (id INT, age INT, hiv TEXT, city TEXT, date DATE); INSERT INTO patients (id, age, hiv, city, date) VALUES (1, 55, 'Positive', 'Chicago', '2021-01-15'); INSERT INTO patients (id, age, hiv, city, date) VALUES (2, 48, 'Negative', 'Chicago', '2021-02-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM patients WHERE hiv = 'Positive' AND age > 50 AND city = 'Chicago';"
    },
    {
        "instruction": "입력 텍스트: 러시아 시베리아에 있는 'Sapphire Sky' 광산의 새로운 인력 다양성 통계를 입력하세요.\n\nDDL statements:\nCREATE TABLE workforce_diversity (mine_id INT, gender VARCHAR(10), percentage FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO workforce_diversity (mine_id, gender, percentage) VALUES (6, 'Male', 0.65);"
    },
    {
        "instruction": "입력 텍스트: culture' 스키마에 있는 모든 박물관의 이름과 개관 시간은 무엇인가요?\n\nDDL statements:\nCREATE TABLE museums (name VARCHAR(255), opening_hours VARCHAR(255)); INSERT INTO museums (name, opening_hours) VALUES ('Museum of Natural History', '09:00-17:00'), ('Art Museum', '10:00-18:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, opening_hours FROM culture.museums;"
    },
    {
        "instruction": "입력 텍스트: 어떤 우주 미션들이 5억 이상의 비용이 들었나요?\n\nDDL statements:\nCREATE TABLE space_missions_2 (id INT, name VARCHAR(50), cost INT); INSERT INTO space_missions_2 (id, name, cost) VALUES (1, 'Mars Rover', 2500000), (2, 'ISS', 150000000), (3, 'Hubble Space Telescope', 1000000000), (4, 'Space Shuttle', 500000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM space_missions_2 WHERE cost > 500000000;"
    },
    {
        "instruction": "입력 텍스트: 2023년 1월 1일에 'train' 서비스에 대해 3.00달러 요금의 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE fares (service text, date date, fare decimal);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fares (service, date, fare) VALUES ('train', '2023-01-01', 3.00);"
    },
    {
        "instruction": "입력 텍스트: 금으로 만들어진 모든 유물들의 역사적 배경과 설명은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Artifacts (ArtifactID int, Age varchar(20), Material varchar(20), Description varchar(100)); CREATE TABLE HistoricalContexts (ContextID int, ArtifactID int, Era varchar(20), Culture varchar(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Artifacts.Description, HistoricalContexts.Era, HistoricalContexts.Culture FROM Artifacts INNER JOIN HistoricalContexts ON Artifacts.ArtifactID = HistoricalContexts.ArtifactID WHERE Artifacts.Material = 'gold';"
    },
    {
        "instruction": "입력 텍스트: 인도네시아에 있는 양식장 중 생물량이 1000톤을 초과하는 양식장의 이름과 생물량을 확인하세요.\n\nDDL statements:\nCREATE TABLE fish_farms (id INT, name TEXT, country TEXT, biomass FLOAT); INSERT INTO fish_farms (id, name, country, biomass) VALUES (1, 'Farm H', 'Indonesia', 1200.5); INSERT INTO fish_farms (id, name, country, biomass) VALUES (2, 'Farm I', 'Indonesia', 800.3); INSERT INTO fish_farms (id, name, country, biomass) VALUES (3, 'Farm J', 'Indonesia', 500.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, biomass FROM fish_farms WHERE country = 'Indonesia' AND biomass > 1000;"
    },
    {
        "instruction": "입력 텍스트: 연구 장학금을 받지 않은 대학원생들의 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE GraduateStudents (StudentID INT, Name VARCHAR(50)); INSERT INTO GraduateStudents VALUES (1, 'Jane Smith'); CREATE TABLE ResearchGrants (GrantID INT, StudentID INT); INSERT INTO ResearchGrants VALUES (1, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT GraduateStudents.Name FROM GraduateStudents LEFT JOIN ResearchGrants ON GraduateStudents.StudentID = ResearchGrants.StudentID WHERE ResearchGrants.GrantID IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 호주에 기반을 둔 회사들이 발행한 디지털 자산은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE digital_assets (id INT, issue_date DATE, company TEXT, country TEXT); INSERT INTO digital_assets (id, issue_date, company, country) VALUES (1, '2022-01-01', 'ExampleCompany1', 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM digital_assets WHERE issue_date BETWEEN '2022-01-01' AND '2022-03-31' AND country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 남미 출신이며 \"Cybernetic Mayhem\"을 플레이한 플레이어 ID가 3보다 큰 플레이어의 최소 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerRegion VARCHAR(10), Playtime INT, GameName VARCHAR(20)); INSERT INTO Players (PlayerID, PlayerRegion, Playtime, GameName) VALUES (4, 'South America', 45, 'Cybernetic Mayhem'), (5, 'Africa', 55, 'Cybernetic Mayhem'), (6, 'South America', 60, 'Cybernetic Mayhem');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Playtime) FROM Players WHERE PlayerRegion = 'South America' AND GameName = 'Cybernetic Mayhem' AND PlayerID > 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 정보 오류 탐지에 대해 게시한 인플루언서들 중 최대 팔로워 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE influencers (id INT, name VARCHAR(255), followers INT, last_post_date DATE, topic VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(followers) FROM influencers WHERE topic = 'disinformation detection' AND last_post_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 목재 생산 지역과 겹치는 모든 야생동물 보호구역을 나열하세요.\n\nDDL statements:\nCREATE TABLE wildlife_sanctuaries (id INT, name VARCHAR(50), location POINT); CREATE TABLE timber_production (id INT, location POINT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w.name FROM wildlife_sanctuaries w INNER JOIN timber_production t ON ST_Intersects(w.location, t.location);"
    },
    {
        "instruction": "입력 텍스트: Garcia' 또는 'Patel' 성을 가진 변호사들이 처리한 사건은 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Attorneys (AttorneyID INT, LastName VARCHAR(50), CaseID INT); INSERT INTO Attorneys (AttorneyID, LastName, CaseID) VALUES (1, 'Garcia', 1), (2, 'Patel', 4), (3, 'Lee', 5), (4, 'Garcia', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Attorneys WHERE LastName IN ('Garcia', 'Patel');"
    },
    {
        "instruction": "입력 텍스트: 유럽 도시들의 평균 재활용률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE recycling_rates (city VARCHAR(50), region VARCHAR(50), year INT, recycling_rate FLOAT); INSERT INTO recycling_rates (city, region, year, recycling_rate) VALUES ('Paris', 'Europe', 2018, 0.40), ('London', 'Europe', 2018, 0.35), ('Berlin', 'Europe', 2018, 0.45), ('Paris', 'Europe', 2019, 0.42), ('London', 'Europe', 2019, 0.38), ('Berlin', 'Europe', 2019, 0.48);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(recycling_rate) FROM recycling_rates WHERE region = 'Europe' AND year IN (2018, 2019);"
    },
    {
        "instruction": "입력 텍스트: 영국과 프랑스에서 체결된 방위 계약의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_contracts (id INT, country VARCHAR(50), cost FLOAT); INSERT INTO defense_contracts (id, country, cost) VALUES (1, 'UK', 1250000), (2, 'UK', 800000), (3, 'France', 920000); INSERT INTO defense_contracts (id, country, cost) VALUES (4, 'France', 1300000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM defense_contracts WHERE country IN ('UK', 'France');"
    },
    {
        "instruction": "입력 텍스트: 아시아 시장에서 운영되는 지속 가능한 브랜드는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE brands (id INT, region VARCHAR(20), sustainability_rating DECIMAL); INSERT INTO brands (id, region, sustainability_rating) VALUES (1, 'Asia', 0.85), (2, 'Europe', 0.9), (3, 'Asia', 0.95);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM brands WHERE region = 'Asia' AND sustainability_rating = 1;"
    },
    {
        "instruction": "입력 텍스트: 업데이트가 한 번 이상 된 규제 프레임워크의 이름과 네트워크는 무엇인가요?\n\nDDL statements:\nCREATE TABLE regulatory_frameworks (framework_id INT, name VARCHAR(255), network VARCHAR(255), last_updated DATE); INSERT INTO regulatory_frameworks (framework_id, name, network, last_updated) VALUES (1, 'Framework1', 'polygon', '2022-01-01'), (2, 'Framework2', 'ethereum', '2022-01-02'), (3, 'Framework3', 'polygon', '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, network FROM regulatory_frameworks WHERE framework_id IN (SELECT framework_id FROM regulatory_frameworks GROUP BY framework_id HAVING COUNT(*) > 1);"
    },
    {
        "instruction": "입력 텍스트: 2021년 캘리포니아에서 판매된 자율 주행 차량은 몇 대인가요?\n\nDDL statements:\nCREATE TABLE if not exists Cars (id INT, type VARCHAR(20), state VARCHAR(20), year INT, quantity INT); INSERT INTO Cars (id, type, state, year, quantity) VALUES (1, 'Self-driving', 'California', 2021, 1500), (2, 'Hybrid', 'California', 2021, 3000), (3, 'Self-driving', 'California', 2022, 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM Cars WHERE type = 'Self-driving' AND state = 'California' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 농촌' 지역의 각 도시 의회에 제출된 시민들의 피드백 양식 최소 개수는 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA Government;CREATE TABLE Government.Region (name VARCHAR(255), budget INT);CREATE TABLE Government.City (name VARCHAR(255), region VARCHAR(255), feedbacks INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MIN(feedbacks) FROM Government.City WHERE region = 'Rural' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램에 참여하고 있는 자원봉사자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE volunteers (volunteer_id INT, program_id VARCHAR(20), hours INT); INSERT INTO volunteers (volunteer_id, program_id, hours) VALUES (1, 'Education', 50), (2, 'Health', 75), (3, 'Education', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, COUNT(*) AS num_volunteers FROM volunteers GROUP BY program_id;"
    },
    {
        "instruction": "입력 텍스트: marine_life_populations 테이블에는 어떤 물고기 종이 몇 종류나 있나요?\n\nDDL statements:\nCREATE TABLE marine_life_populations (species TEXT, population INTEGER); INSERT INTO marine_life_populations (species, population) VALUES ('Whale Shark', 30000), ('Dolphin', 250000), ('Clownfish', 500000), ('Blue Whale', 12000), ('Tuna', 80000), ('Salmon', 40000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(species) FROM marine_life_populations WHERE species LIKE '%fish%';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 판매된 동물 실험을 하지 않은 헤어케어 제품은 얼마나 되나요?\n\nDDL statements:\nCREATE TABLE haircare_sales(product_id INT, sale_quantity INT, country VARCHAR(50)); INSERT INTO haircare_sales(product_id, sale_quantity, country) VALUES (1, 100, 'Canada'); INSERT INTO haircare_sales(product_id, sale_quantity, country) VALUES (2, 75, 'Canada'); CREATE TABLE product_info(product_id INT, is_cruelty_free BOOLEAN); INSERT INTO product_info(product_id, is_cruelty_free) VALUES (1, TRUE); INSERT INTO product_info(product_id, is_cruelty_free) VALUES (2, FALSE); CREATE TABLE product_categories(product_id INT, category_name VARCHAR(50)); INSERT INTO product_categories(product_id, category_name) VALUES (1, 'Haircare'); INSERT INTO product_categories(product_id, category_name) VALUES (2, 'Skincare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(haircare_sales.sale_quantity) FROM haircare_sales INNER JOIN product_info ON haircare_sales.product_id = product_info.product_id INNER JOIN product_categories ON haircare_sales.product_id = product_categories.product_id WHERE haircare_sales.country = 'Canada' AND product_info.is_cruelty_free = TRUE AND product_categories.category_name = 'Haircare';"
    },
    {
        "instruction": "입력 텍스트: 북극 지역의 모든 해양 보호 구역(MPAs)의 이름과 위치를 확인하세요.\n\nDDL statements:\nCREATE TABLE MARINE_PROTECTED_AREAS (NAME TEXT, LOCATION TEXT, REGION TEXT); INSERT INTO MARINE_PROTECTED_AREAS (NAME, LOCATION, REGION) VALUES ('Arctic National Wildlife Refuge', 'Alaska, USA', 'Arctic'), ('Norwegian Arctic Archipelago', 'Svalbard, Norway', 'Arctic'), ('Gulf of Bothnia National Park', 'Sweden', 'Arctic'), ('Franz Josef Land Nature Reserve', 'Russia', 'Arctic'), ('Arctic Bay Wildlife Sanctuary', 'Canada', 'Arctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT NAME, LOCATION FROM MARINE_PROTECTED_AREAS WHERE REGION = 'Arctic';"
    },
    {
        "instruction": "입력 텍스트: 캐나다 주식 시장에서 5000달러 이상의 투자를 한 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE Investments (CustomerID INT, Market VARCHAR(20), Value DECIMAL(10,2)); INSERT INTO Investments (CustomerID, Market, Value) VALUES (1, 'Canada', 5000); INSERT INTO Investments (CustomerID, Market, Value) VALUES (2, 'Canada', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CustomerID FROM Investments WHERE Market = 'Canada' AND Value > 5000"
    },
    {
        "instruction": "입력 텍스트: \"disability_services\" 스키마의 \"accessibility_resources\" 부서에서 근무하는 직원들의 이름과 편의 제공 정보를 찾으세요.\n\nDDL statements:\nCREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), department VARCHAR(50), accommodation VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, accommodation FROM disability_services.staff WHERE department = 'accessibility_resources';"
    },
    {
        "instruction": "입력 텍스트: 회사별 평균 펀딩 라운드 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE funding_rounds (id INT, company_id INT, round_date DATE); INSERT INTO funding_rounds (id, company_id, round_date) VALUES (1, 3, '2011-01-15'); INSERT INTO funding_rounds (id, company_id, round_date) VALUES (2, 4, '2011-04-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cnt) FROM (SELECT company_id, COUNT(*) as cnt FROM funding_rounds GROUP BY company_id) as subquery;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 헬스케어 서비스에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE HealthBudget (Year INT, Service VARCHAR(255), Budget FLOAT); INSERT INTO HealthBudget VALUES (2018, 'Healthcare', 15000000), (2019, 'Healthcare', 16000000), (2020, 'Healthcare', ?);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget) FROM HealthBudget WHERE Service = 'Healthcare' AND Year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 미국에서 판매된 립스틱의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cosmetics_sales (product VARCHAR(255), country VARCHAR(255), revenue DECIMAL(10,2)); CREATE VIEW q1_sales AS SELECT * FROM cosmetics_sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31'; CREATE TABLE countries (country VARCHAR(255), continent VARCHAR(255)); INSERT INTO countries (country, continent) VALUES ('USA', 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM q1_sales JOIN cosmetics ON q1_sales.product = cosmetics.product JOIN countries ON q1_sales.country = countries.country WHERE cosmetics.product_category = 'Lipsticks' AND countries.country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리별 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (donation_id INT, donation_amount DECIMAL(10,2), donation_category VARCHAR(255)); INSERT INTO donations (donation_id, donation_amount, donation_category) VALUES (1, 50.00, 'Food'), (2, 100.00, 'Clothing'), (3, 250.00, 'Education'), (4, 300.00, 'Food'), (5, 800.00, 'Health');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT donation_category, AVG(donation_amount) as avg_donation FROM donations GROUP BY donation_category;"
    },
    {
        "instruction": "입력 텍스트: warehouse_shipments' 테이블에서 미국의 각 주로 배송된 패키지의 총 무게는 얼마이며, 택배사별로 구분하고 총 무게가 가장 높은 순으로 정렬된 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE warehouse_shipments AS SELECT order_id, 'USA' as country, state, courier_id, weight FROM orders WHERE shipping_address LIKE ' USA%';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, courier_id, state, SUM(weight) as total_weight FROM warehouse_shipments GROUP BY country, courier_id, state ORDER BY total_weight DESC;"
    },
    {
        "instruction": "입력 텍스트: 불안 장애를 가진 환자들의 치료 방법 성공률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, patient_name TEXT, condition TEXT); CREATE TABLE treatments (treatment_id INT, treatment_name TEXT, patient_id INT, success BOOLEAN); INSERT INTO patients (patient_id, patient_name, condition) VALUES (1, 'Bella Smith', 'Anxiety Disorder'); INSERT INTO treatments (treatment_id, treatment_name, patient_id, success) VALUES (1, 'Cognitive Behavioral Therapy', 1, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(treatments.success) * 100.0 / (SELECT COUNT(*) FROM treatments WHERE patients.condition = 'Anxiety Disorder') FROM patients JOIN treatments ON patients.patient_id = treatments.patient_id WHERE patients.condition = 'Anxiety Disorder' AND treatments.success = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 제품 이름과 1개 이상의 국가에서 공급받는 제품들의 평균 지속 가능성 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE product_suppliers (product_id INT, supplier_id INT, supplier_name VARCHAR(50), supplier_country VARCHAR(50), sustainability_rating INT); INSERT INTO product_suppliers (product_id, supplier_id, supplier_name, supplier_country, sustainability_rating) VALUES (1, 1, 'Green Cotton Inc.', 'India', 90), (2, 2, 'Happy Hemp Farms', 'Nepal', 95), (3, 3, 'Eco Rubber Co.', 'Malaysia', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ps.product_id, AVG(ps.sustainability_rating) FROM product_suppliers ps GROUP BY ps.product_id HAVING COUNT(DISTINCT ps.supplier_country) > 1;"
    },
    {
        "instruction": "입력 텍스트: 직급별로 아시아계 커뮤니티 보건 근로자는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE CommunityHealthWorkers (CHW_ID INT, Name VARCHAR(50), Job_Title VARCHAR(50), Ethnicity VARCHAR(50)); INSERT INTO CommunityHealthWorkers (CHW_ID, Name, Job_Title, Ethnicity) VALUES (1, 'Leung', 'Community Health Worker', 'Asian'); INSERT INTO CommunityHealthWorkers (CHW_ID, Name, Job_Title, Ethnicity) VALUES (2, 'Kim', 'Senior Community Health Worker', 'Asian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Job_Title, COUNT(*) FROM CommunityHealthWorkers WHERE Ethnicity = 'Asian' GROUP BY Job_Title;"
    },
    {
        "instruction": "입력 텍스트: fleet 테이블에서 port_office 테이블의 'North America' 지역에 속하는 선박들은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE fleet ( id INT PRIMARY KEY, name VARCHAR(255), max_cargo_capacity INT, country VARCHAR(255) ); CREATE TABLE port_office ( id INT PRIMARY KEY, port VARCHAR(255), region VARCHAR(255) ); INSERT INTO port_office (id, port, region) VALUES (1, 'Port A', 'North America'), (2, 'Port B', 'Europe'), (3, 'Port C', 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name FROM fleet f JOIN (SELECT country FROM port_office WHERE region = 'North America') AS po ON f.country = po.country;"
    },
    {
        "instruction": "입력 텍스트: student_mental_health' 테이블에서 지난 한 달 동안 정신 건강 평가 점수가 70 미만인 모든 학생들을 나열하세요.\n\nDDL statements:\nCREATE TABLE student_mental_health (student_id INT, assessment_date DATE, assessment_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT student_id, assessment_score FROM student_mental_health WHERE assessment_score < 70 AND assessment_date >= DATE(NOW()) - INTERVAL 1 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에서 발생한 모든 사이버 보안 사고 유형과 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE cyber_incidents (id INT, incident_type TEXT, incident_date DATE, region TEXT); INSERT INTO cyber_incidents (id, incident_type, incident_date, region) VALUES (1, 'Data Breach', '2020-01-01', 'Asia-Pacific'), (2, 'Phishing', '2019-12-15', 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ci.incident_type, ci.incident_date FROM cyber_incidents ci WHERE ci.region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: 프로그램별 총 자원봉사자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE volunteer_programs (id INT, volunteer_id INT, program TEXT); INSERT INTO volunteer_programs VALUES (1, 1, 'Education'), (2, 1, 'Healthcare'), (3, 2, 'Education'), (4, 3, 'Healthcare'); CREATE TABLE volunteers (id INT, name TEXT); INSERT INTO volunteers VALUES (1, 'James Lee'), (2, 'Anna Chen'), (3, 'Mohammed Ahmed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, COUNT(DISTINCT volunteer_id) FROM volunteer_programs GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 한 달 동안 발생한 알고리즘 공정성 사건의 최대 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE algorithmic_fairness_incidents_monthly (incident_id INT PRIMARY KEY, incident_date DATE, region VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM incident_date) AS month, MAX(COUNT(*)) AS max_incidents FROM algorithmic_fairness_incidents_monthly WHERE region = 'Asia' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 지역에서 발생한 가뭄 사건은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE drought_data (region TEXT, year INT, incidents INT); INSERT INTO drought_data (region, year, incidents) VALUES ('North', 2018, 3), ('North', 2019, 4), ('South', 2018, 1), ('South', 2019, 2), ('East', 2018, 5), ('East', 2019, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(incidents) as total_incidents FROM drought_data WHERE year = 2019 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 재정 복지 점수가 70 미만이고 예금 잔액이 5000 미만인 고객은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE clients (client_id INT, financial_wellbeing_score INT, savings DECIMAL(10, 2)); INSERT INTO clients (client_id, financial_wellbeing_score, savings) VALUES (1, 60, 4000.00), (2, 80, 7000.00), (3, 75, 6000.00), (4, 65, 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM clients WHERE financial_wellbeing_score < 70 AND savings < 5000;"
    },
    {
        "instruction": "입력 텍스트: rural_development' 스키마에 있는 'livestock'이라는 단어가 포함되지 않은 모든 농업 프로젝트의 이름은 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS rural_development;CREATE TABLE IF NOT EXISTS rural_development.agriculture_projects (name VARCHAR(255), id INT);INSERT INTO rural_development.agriculture_projects (name, id) VALUES ('sustainable_farming', 1), ('organic_gardening', 2), ('livestock_support', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM rural_development.agriculture_projects WHERE name NOT LIKE '%livestock%';"
    },
    {
        "instruction": "입력 텍스트: CityA'에서 시행되고 있는 스마트 시티 기술 사업은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SmartCityTech (id INT, name TEXT, location TEXT); INSERT INTO SmartCityTech (id, name, location) VALUES (1, 'SmartGrid', 'CityA'), (2, 'SmartTransit', 'CityB'), (3, 'SmartWasteManagement', 'CityA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM SmartCityTech WHERE location = 'CityA';"
    },
    {
        "instruction": "입력 텍스트: 게재된 연구 논문이 가장 많은 상위 3개의 대학원 프로그램을 나열하세요.\n\nDDL statements:\nCREATE TABLE programs (program_name VARCHAR(255), num_students INT, num_published_articles INT); INSERT INTO programs (program_name, num_students, num_published_articles) VALUES ('Computer_Science', 40, 80), ('Physics', 30, 60), ('English', 50, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name, num_published_articles FROM programs ORDER BY num_published_articles DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 어느 나라가 가장 많은 광물 추출량을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE mineral_extraction (mine_id INT, country TEXT, quantity INT); INSERT INTO mineral_extraction (mine_id, country, quantity) VALUES (1, 'USA', 5000), (2, 'Canada', 6000), (3, 'Mexico', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(quantity) FROM mineral_extraction GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 회사에는 남성과 여성 직원이 각각 몇 명 있나요?\n\nDDL statements:\nCREATE TABLE employees (id INT, name VARCHAR(50), gender VARCHAR(10), department VARCHAR(50)); INSERT INTO employees (id, name, gender, department) VALUES (1, 'John Doe', 'Male', 'Marketing'), (2, 'Jane Smith', 'Female', 'Marketing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) FROM employees GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 각 변호사의 사건별 총 청구 금액을 청구 금액이 높은 순으로 보여주세요.\n\nDDL statements:\nCREATE TABLE CaseBilling (CaseID INT, AttorneyID INT, Billing FLOAT); INSERT INTO CaseBilling (CaseID, AttorneyID, Billing) VALUES (1, 1, 1500.00), (2, 2, 3000.00), (3, 3, 5000.00), (4, 1, 2000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.Name AS AttorneyName, SUM(cb.Billing) AS TotalBilling FROM Attorneys a JOIN CaseBilling cb ON a.AttorneyID = cb.AttorneyID GROUP BY a.Name ORDER BY TotalBilling DESC;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 월별로 분류된 응급 전화 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE emergencies (eid INT, call_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(e.call_time, '%Y-%m') AS month, COUNT(e.eid) FROM emergencies e WHERE e.call_time >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 YEAR) GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 2022년의 매립지 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfill_capacity (year INT, capacity INT); INSERT INTO landfill_capacity (year, capacity) VALUES (2018, 12000), (2019, 13000), (2020, 14000), (2021, 15000), (2022, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT capacity FROM landfill_capacity WHERE year = 2022;"
    },
    {
        "instruction": "입력 텍스트: IT 부서에서 교육 프로그램을 이수한 직원들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE employees (employee_id INT, department VARCHAR(255), age INT); INSERT INTO employees (employee_id, department, age) VALUES (1, 'IT', 30), (2, 'HR', 25), (3, 'IT', 35), (4, 'Finance', 40); CREATE TABLE training_programs (program_id INT, department VARCHAR(255)); INSERT INTO training_programs (program_id, department) VALUES (1, 'IT'), (2, 'HR'); CREATE TABLE completed_training (employee_id INT, program_id INT); INSERT INTO completed_training (employee_id, program_id) VALUES (1, 1), (2, 2), (3, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(e.age) FROM employees e JOIN completed_training ct ON e.employee_id = ct.employee_id JOIN training_programs tp ON ct.program_id = tp.program_id WHERE e.department = 'IT';"
    },
    {
        "instruction": "입력 텍스트: 독일과 프랑스의 1인당 평균 매립지 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Population (country VARCHAR(255), population INT); INSERT INTO Population (country, population) VALUES ('Germany', 83166711), ('France', 67061625); CREATE TABLE LandfillCapacity (country VARCHAR(255), capacity INT); INSERT INTO LandfillCapacity (country, capacity) VALUES ('Germany', 850000), ('France', 650000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(capacity/population*1000000) FROM Population, LandfillCapacity WHERE Population.country IN ('Germany', 'France') AND LandfillCapacity.country = Population.country"
    },
    {
        "instruction": "입력 텍스트: 각 미술관에 있는 예술품은 몇 점입니까?\n\nDDL statements:\nCREATE TABLE MuseumArt (id INT, museum_name VARCHAR(255), art_category VARCHAR(255), quantity INT); INSERT INTO MuseumArt (id, museum_name, art_category, quantity) VALUES (1, 'Museum A', 'Painting', 20), (2, 'Museum B', 'Sculpture', 30), (3, 'Museum A', 'Photography', 10), (4, 'Museum C', 'Painting', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT museum_name, art_category, SUM(quantity) FROM MuseumArt GROUP BY museum_name, art_category;"
    },
    {
        "instruction": "입력 텍스트: 기술 분야에서 여성에 의해 설립된 스타트업이 받은 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founder_gender TEXT); INSERT INTO companies (id, name, industry, founder_gender) VALUES (1, 'TechFem', 'Technology', 'Female'); INSERT INTO companies (id, name, industry, founder_gender) VALUES (2, 'GreenTechMale', 'GreenTech', 'Male'); CREATE TABLE funding (company_id INT, amount FLOAT); INSERT INTO funding (company_id, amount) VALUES (1, 500000); INSERT INTO funding (company_id, amount) VALUES (2, 750000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding.amount) FROM companies INNER JOIN funding ON companies.id = funding.company_id WHERE companies.founder_gender = 'Female' AND companies.industry = 'Technology';"
    },
    {
        "instruction": "입력 텍스트: 캐나다 자원봉사자들이 몇 건의 기부를 했나요?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, name TEXT, country TEXT); INSERT INTO Volunteers (id, name, country) VALUES (1, 'Alice', 'USA'), (2, 'Bob', 'Canada'); CREATE TABLE Donations (id INT, volunteer_id INT, amount FLOAT); INSERT INTO Donations (id, volunteer_id, amount) VALUES (3, 1, 50.0), (4, 2, 75.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Donations INNER JOIN Volunteers ON Donations.volunteer_id = Volunteers.id WHERE Volunteers.country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 2020년 오리건 주의 평균 건설 임금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE labor_statistics (state VARCHAR(255), year INTEGER, avg_wage DECIMAL(5,2)); INSERT INTO labor_statistics (state, year, avg_wage) VALUES ('Oregon', 2020, 26.50), ('Oregon', 2019, 25.75), ('Florida', 2020, 24.25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(avg_wage) FROM labor_statistics WHERE state = 'Oregon' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 전시회에 참석한 미국에서 온 방문객 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Visitors (visitor_id INT, visitor_name VARCHAR(50), country VARCHAR(50)); INSERT INTO Visitors (visitor_id, visitor_name, country) VALUES (1, 'John Doe', 'USA'); INSERT INTO Visitors (visitor_id, visitor_name, country) VALUES (2, 'Jane Doe', 'Canada'); CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), exhibition_year INT); INSERT INTO Exhibitions (exhibition_id, exhibition_name, exhibition_year) VALUES (1, 'Art of the 20th Century', 2021); INSERT INTO Exhibitions (exhibition_id, exhibition_name, exhibition_year) VALUES (2, 'Nature Photography', 2020); CREATE TABLE Attendance (attendance_id INT, visitor_id INT, exhibition_id INT, attendance_date DATE); INSERT INTO Attendance (attendance_id, visitor_id, exhibition_id, attendance_date) VALUES (1, 1, 1, '2021-06-01'); INSERT INTO Attendance (attendance_id, visitor_id, exhibition_id, attendance_date) VALUES (2, 2, 2, '2020-07-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Visitors v JOIN Attendance a ON v.visitor_id = a.visitor_id JOIN Exhibitions e ON a.exhibition_id = e.exhibition_id WHERE v.country = 'USA' AND e.exhibition_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 각 학과에서 1편 이상의 논문을 발표한 대학원생은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE department_publications (id INT, department VARCHAR(255), num_publications INT); INSERT INTO department_publications (id, department, num_publications) VALUES (1, 'Computer Science', 1), (2, 'Physics', 2), (3, 'Mathematics', 1), (4, 'Computer Science', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, COUNT(*) as num_students FROM department_publications WHERE num_publications > 1 GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: VESSEL006의 평균 연료 소비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE vessels (id VARCHAR(20), name VARCHAR(20)); INSERT INTO vessels (id, name) VALUES ('VES006', 'VESSEL006'); CREATE TABLE fuel_consumption (vessel_id VARCHAR(20), consumption_rate DECIMAL(5,2)); INSERT INTO fuel_consumption (vessel_id, consumption_rate) VALUES ('VES006', 4.1), ('VES006', 4.3), ('VES006', 4.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(consumption_rate) FROM fuel_consumption WHERE vessel_id = 'VES006';"
    },
    {
        "instruction": "입력 텍스트: 특정 연도의 각 제품별로 발생한 사고 건수의 총합을 계산하세요.\n\nDDL statements:\nCREATE TABLE ProductSafety (id INT, product_id INT, year INT, incident_count INT); INSERT INTO ProductSafety (id, product_id, year, incident_count) VALUES (1, 1, 2020, 2), (2, 1, 2019, 1), (3, 2, 2020, 0), (4, 2, 2019, 3), (5, 3, 2020, 1), (6, 3, 2019, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_id, SUM(incident_count) as total_incident_count FROM ProductSafety WHERE year = 2020 GROUP BY product_id;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 판매되는 전기차의 제조사와 모델은 무엇인가요?\n\nDDL statements:\nCREATE TABLE EVSales (make VARCHAR(20), model VARCHAR(20), country VARCHAR(10)); INSERT INTO EVSales (make, model, country) VALUES ('Tesla', 'Model 3', 'USA'); INSERT INTO EVSales (make, model, country) VALUES ('Chevrolet', 'Bolt', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT make, model FROM EVSales WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 지난 90일 동안 다르에스살람에 도착한 선박은 몇 척입니까?\n\nDDL statements:\nCREATE TABLE VesselArrivals (ID INT, VesselName VARCHAR(50), ArrivalPort VARCHAR(50), ArrivalDate DATE); INSERT INTO VesselArrivals (ID, VesselName, ArrivalPort, ArrivalDate) VALUES (1, 'Test Vessel 1', 'Dar es Salaam', '2022-01-01'), (2, 'Test Vessel 2', 'Dar es Salaam', '2022-01-02'), (3, 'Test Vessel 3', 'Dar es Salaam', '2022-02-03'), (4, 'Test Vessel 4', 'Dar es Salaam', '2022-02-04'), (5, 'Test Vessel 5', 'Dar es Salaam', '2022-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM VesselArrivals WHERE ArrivalPort = 'Dar es Salaam' AND ArrivalDate >= DATEADD(day, -90, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 미국에서 유기농 스킨케어 제품의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SkincareSales (product_id INT, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2), quantity INT, sale_date DATE, country VARCHAR(50)); INSERT INTO SkincareSales (product_id, product_name, category, price, quantity, sale_date, country) VALUES (1, 'Rose Hip Oil', 'Organic Skincare', 25.99, 50, '2021-09-01', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * quantity) FROM SkincareSales WHERE category = 'Organic Skincare' AND country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 지난 10년간 인도에서 열린 크리켓 경기의 평균 관중 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists countries (country_id INT, country VARCHAR(255)); INSERT INTO countries (country_id, country) VALUES (1, 'India'), (2, 'Australia'), (3, 'England'); CREATE TABLE if not exists matches (match_id INT, country_id INT, spectators INT, date DATE); INSERT INTO matches (match_id, country_id, spectators, date) VALUES (1, 1, 50000, '2012-01-01'), (2, 2, 30000, '2012-01-02'), (3, 3, 40000, '2012-01-03'), (4, 1, 60000, '2013-01-01'), (5, 1, 70000, '2014-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(spectators) FROM matches WHERE country_id = 1 AND date >= DATE_SUB(NOW(), INTERVAL 10 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 2021년 멕시코에서 열린 댄스 이벤트의 총 참석자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE attendance (id INT, event VARCHAR(50), country VARCHAR(50), year INT, attendees INT); INSERT INTO attendance (id, event, country, year, attendees) VALUES (1, 'Dance Event', 'Mexico', 2021, 1500), (2, 'Dance Event', 'Mexico', 2021, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(attendees) FROM attendance WHERE event = 'Dance Event' AND country = 'Mexico' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 연도별 천연가스 평균 생산량은 얼마였나요?\n\nDDL statements:\nCREATE TABLE us_platforms (platform_id INT, platform_name VARCHAR(50), location VARCHAR(50), operational_status VARCHAR(15)); INSERT INTO us_platforms VALUES (1, 'Baker Hughes 1', 'Texas', 'Active'); INSERT INTO us_platforms VALUES (2, 'Baker Hughes 2', 'Louisiana', 'Active'); CREATE TABLE gas_production (platform_id INT, year INT, production FLOAT); INSERT INTO gas_production VALUES (1, 2015, 12000000); INSERT INTO gas_production VALUES (1, 2016, 13000000); INSERT INTO gas_production VALUES (2, 2015, 10000000); INSERT INTO gas_production VALUES (2, 2016, 11000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, AVG(production) FROM gas_production GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 로스앤젤레스 카운티에 있는 차터 스쿨을 제외한 공립학교의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE public_schools (school_id INT, school_name TEXT, school_type TEXT, county TEXT, enrollment INT); INSERT INTO public_schools (school_id, school_name, school_type, county, enrollment) VALUES (1, 'Los Angeles High School', 'Traditional', 'Los Angeles', 2500); INSERT INTO public_schools (school_id, school_name, school_type, county, enrollment) VALUES (2, 'LAUSD Magnet School', 'Magnet', 'Los Angeles', 300); INSERT INTO public_schools (school_id, school_name, school_type, county, enrollment) VALUES (3, 'LAUSD Charter School', 'Charter', 'Los Angeles', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM public_schools WHERE county = 'Los Angeles' AND school_type != 'Charter';"
    },
    {
        "instruction": "입력 텍스트: 2018년에 아프리카에서 UNHCR에 의해 지원받은 난민의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE refugees (id INT, organization VARCHAR(255), location VARCHAR(255), assist_date DATE, gender VARCHAR(10), age INT); INSERT INTO refugees (id, organization, location, assist_date, gender, age) VALUES (1, 'UNHCR', 'Africa', '2018-02-12', 'Female', 34), (2, 'Red Cross', 'Africa', '2017-04-01', 'Male', 27), (3, 'UNHCR', 'Africa', '2018-05-20', 'Female', 19);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) as average_age FROM refugees WHERE organization = 'UNHCR' AND location = 'Africa' AND YEAR(assist_date) = 2018;"
    },
    {
        "instruction": "입력 텍스트: 한 달 동안 교사가 전문 개발에 투자한 최대 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE teacher_pd_hours (teacher_id INT, date DATE, hours_spent DECIMAL(5,2)); INSERT INTO teacher_pd_hours (teacher_id, date, hours_spent) VALUES (1001, '2022-01-01', 2.5), (1001, '2022-02-15', 3.0), (1002, '2022-03-10', 6.0), (1003, '2022-04-01', 4.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(hours_spent) as max_hours_spent FROM teacher_pd_hours WHERE date >= DATEADD(month, -1, GETDATE()) GROUP BY MONTH(date), YEAR(date);"
    },
    {
        "instruction": "입력 텍스트: 미국에 있는 개인들의 최대 재정 복지 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE financial_wellbeing (id INT, individual_id INT, score INT, country VARCHAR(255)); INSERT INTO financial_wellbeing (id, individual_id, score, country) VALUES (1, 1001, 70, 'USA'), (2, 1002, 80, 'USA'), (3, 1003, 90, 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(score) FROM financial_wellbeing WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 각 기관이 받은 총 기부금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Organizations (OrgID INT, OrgName TEXT); INSERT INTO Organizations (OrgID, OrgName) VALUES (1, 'Habitat for Humanity'), (2, 'American Red Cross'); CREATE TABLE Donations (DonationID INT, OrgID INT, DonationDate DATE, Amount DECIMAL); INSERT INTO Donations (DonationID, OrgID, DonationDate, Amount) VALUES (1, 1, '2022-01-01', 5000), (2, 1, '2022-03-15', 7000), (3, 2, '2022-01-10', 6000), (4, 2, '2022-02-20', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT OrgName, SUM(Amount) as TotalDonations FROM Donations JOIN Organizations ON Donations.OrgID = Organizations.OrgID WHERE DonationDate BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY OrgName;"
    },
    {
        "instruction": "입력 텍스트: 각 dapp별로 'Polygon' 네트워크에 배포된 스마트 계약은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE smart_contracts_table (dapp_name VARCHAR(20), network VARCHAR(20), smart_contracts INT); INSERT INTO smart_contracts_table (dapp_name, network, smart_contracts) VALUES ('Aave', 'Polygon', 30), ('Curve', 'Polygon', 40), ('SushiSwap', 'Polygon', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dapp_name, network, smart_contracts, COUNT(*) OVER (PARTITION BY dapp_name) as deployed_contracts FROM smart_contracts_table WHERE network = 'Polygon';"
    },
    {
        "instruction": "입력 텍스트: 재생 에너지 프로젝트가 일년 동안 달성한 최대 탄소 상쇄량을 찾으세요.\n\nDDL statements:\nCREATE TABLE renewable_energy (id INT, project_name TEXT, location TEXT, start_date DATE, annual_carbon_offsets INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(annual_carbon_offsets) FROM renewable_energy WHERE annual_carbon_offsets > 0;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 인도의 문화 유산 중 가장 적은 가상 방문객을 가진 곳은 어디인가요?\n\nDDL statements:\nCREATE TABLE cultural_sites (site_id INT, site_name TEXT, country TEXT); INSERT INTO cultural_sites (site_id, site_name, country) VALUES (1, 'Temple A', 'India'), (2, 'Shrine B', 'India'); CREATE TABLE virtual_visitors (site_id INT, year INT, quarter INT, visitors INT); INSERT INTO virtual_visitors (site_id, year, quarter, visitors) VALUES (1, 2021, 1, 100), (1, 2021, 2, 120), (1, 2021, 3, 150), (1, 2021, 4, 180), (2, 2021, 1, 110), (2, 2021, 2, 130), (2, 2021, 3, 160), (2, 2021, 4, 190);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_name, MIN(visitors) FROM (SELECT site_name, year, quarter, SUM(visitors) AS visitors FROM cultural_sites INNER JOIN virtual_visitors ON cultural_sites.site_id = virtual_visitors.site_id WHERE country = 'India' AND year = 2021 GROUP BY site_name, year, quarter) AS t GROUP BY site_name;"
    },
    {
        "instruction": "입력 텍스트: 태국의 열대 양식장의 평균 수온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_farms (id INT, name TEXT, country TEXT, water_type TEXT, temperature DECIMAL(5,2)); INSERT INTO fish_farms (id, name, country, water_type, temperature) VALUES (1, 'Farm1', 'Thailand', 'Tropical', 28.5); INSERT INTO fish_farms (id, name, country, water_type, temperature) VALUES (2, 'Farm2', 'Thailand', 'Tropical', 29.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(temperature) FROM fish_farms WHERE country = 'Thailand' AND water_type = 'Tropical';"
    },
    {
        "instruction": "입력 텍스트: 스마트 시티 이니셔티브에 의한 총 CO2 배출 감소량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE smart_cities (city_id INT, initiative_id INT, co2_reduction FLOAT); INSERT INTO smart_cities VALUES (1, 1, 5000), (1, 2, 7000), (2, 1, 6000), (2, 3, 8000), (3, 2, 9000); CREATE TABLE initiatives (initiative_id INT, initiative_name VARCHAR(100)); INSERT INTO initiatives VALUES (1, 'Smart Lighting'), (2, 'Smart Transportation'), (3, 'Smart Waste Management');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.initiative_name, SUM(sc.co2_reduction) as total_reduction FROM smart_cities sc JOIN initiatives i ON sc.initiative_id = i.initiative_id GROUP BY i.initiative_name;"
    },
    {
        "instruction": "입력 텍스트: 해당 함대의 모든 화물선의 총 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE CargoShips(id INT, name VARCHAR(50), flag VARCHAR(50), capacity INT); CREATE TABLE Fleet(id INT, name VARCHAR(50), manager VARCHAR(50)); INSERT INTO CargoShips VALUES (1, 'Sea Titan', 'Panama', 150000); INSERT INTO Fleet VALUES (1, 'ABC Shipping', 'John Doe'); ALTER TABLE CargoShips ADD COLUMN fleet_id INT; UPDATE CargoShips SET fleet_id = 1 WHERE id = 1;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CargoShips.capacity) FROM CargoShips INNER JOIN Fleet ON CargoShips.fleet_id = Fleet.id;"
    },
    {
        "instruction": "입력 텍스트: 모든 수생 생물의 이름과 해당하는 먹이 습성 및 서식지를 나열하세요.\n\nDDL statements:\nCREATE TABLE aquatic_species (id INT, name VARCHAR(255), feeding_habit VARCHAR(255), habitat VARCHAR(255)); INSERT INTO aquatic_species (id, name, feeding_habit, habitat) VALUES (1, 'Salmon', 'Carnivore', 'Freshwater'), (2, 'Tilapia', 'Omnivore', 'Freshwater'), (3, 'Tuna', 'Carnivore', 'Saltwater');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, feeding_habit, habitat FROM aquatic_species;"
    },
    {
        "instruction": "입력 텍스트: Quebec' 지역에서 지속 가능한 건축 프로젝트의 평균 기간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE project_duration (id INT, duration INT, sustainable BOOLEAN, province TEXT); INSERT INTO project_duration (id, duration, sustainable, province) VALUES (1, 120, true, 'Quebec'), (2, 180, true, 'Quebec');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(duration) FROM project_duration WHERE sustainable = true AND province = 'Quebec';"
    },
    {
        "instruction": "입력 텍스트: 농구 경기 중 판매된 티켓 수의 최소값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE tickets_3 (team TEXT, quantity INTEGER, sport TEXT); INSERT INTO tickets_3 (team, quantity, sport) VALUES ('Celtics', 12000, 'Basketball'), ('76ers', 10000, 'Basketball'), ('Nets', 15000, 'Basketball');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(quantity) FROM tickets_3 WHERE sport = 'Basketball';"
    },
    {
        "instruction": "입력 텍스트: 상파울루에 있는 창고에 2개의 아이템을 새로 기록하고, 그 창고의 warehouse_id는 40입니다.\n\nDDL statements:\nCREATE TABLE item_inventory (item_id INT, item_name VARCHAR(50), quantity INT, warehouse_id INT); CREATE TABLE warehouse (warehouse_id INT, warehouse_name VARCHAR(50), city VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO item_inventory (item_id, item_name, quantity, warehouse_id) VALUES (2001, 'Item 4', 150, 40), (2002, 'Item 5', 250, 40); INSERT INTO warehouse (warehouse_id, warehouse_name, city, country) VALUES (40, 'Sāo Paulo Warehouse', 'Sāo Paulo', 'Brazil');"
    },
    {
        "instruction": "입력 텍스트: grants' 테이블에서 grant_amount가 50000보다 작은 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE grants (id INT PRIMARY KEY, grant_name TEXT, grant_amount INT, grant_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM grants WHERE grant_amount < 50000;"
    },
    {
        "instruction": "입력 텍스트: 각 광산에서 채굴된 석탄, 철, 그리고 금의 총량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Mine (MineID int, MineName varchar(50), Location varchar(50)); CREATE TABLE Coal (CoalID int, MineID int, CoalQuantity int); CREATE TABLE Iron (IronID int, MineID int, IronQuantity int); CREATE TABLE Gold (GoldID int, MineID int, GoldQuantity int); INSERT INTO Mine VALUES (1, 'ABC Mine', 'Colorado'), (2, 'DEF Mine', 'Wyoming'), (3, 'GHI Mine', 'West Virginia'); INSERT INTO Coal VALUES (1, 1, 5000), (2, 2, 7000), (3, 3, 6000); INSERT INTO Iron VALUES (1, 1, 8000), (2, 2, 9000), (3, 3, 10000); INSERT INTO Gold VALUES (1, 1, 12000), (2, 2, 15000), (3, 3, 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MineName, SUM(CoalQuantity) as TotalCoalQuantity, SUM(IronQuantity) as TotalIronQuantity, SUM(GoldQuantity) as TotalGoldQuantity FROM Mine LEFT JOIN Coal ON Mine.MineID = Coal.MineID LEFT JOIN Iron ON Mine.MineID = Iron.MineID LEFT JOIN Gold ON Mine.MineID = Gold.MineID GROUP BY MineName;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 판매된 의류의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ClothingSales (ItemID INT, ItemName TEXT, Country TEXT, Quantity INT); INSERT INTO ClothingSales (ItemID, ItemName, Country, Quantity) VALUES (1, 'Top', 'US', 250), (2, 'Pants', 'Canada', 300), (3, 'Dress', 'Mexico', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, SUM(Quantity) as TotalQuantitySold FROM ClothingSales GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 오염 방제 활동에 참여한 모든 연구선들과 그들이 참여한 활동의 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE research_vessels (id INT, name VARCHAR(100), type VARCHAR(50)); CREATE TABLE pollution_initiatives (id INT, vessel_id INT, year INT, initiative_type VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT rv.name, COUNT(pi.id) as num_initiatives FROM research_vessels rv INNER JOIN pollution_initiatives pi ON rv.id = pi.vessel_id GROUP BY rv.name;"
    },
    {
        "instruction": "입력 텍스트: 2020년과 2021년에 포르투갈을 방문한 국제 관광객의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE tourists (id INT, country TEXT, year INT, tourists INT); INSERT INTO tourists (id, country, year, tourists) VALUES (1, 'Portugal', 2020, 1200000), (2, 'Portugal', 2021, 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tourists) FROM tourists WHERE country = 'Portugal' AND year IN (2020, 2021);"
    },
    {
        "instruction": "입력 텍스트: 북미에서 판매된 토착 예술 작품들이 생성한 총 수익은 국가별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(50), Country VARCHAR(50), Ethnicity VARCHAR(50)); CREATE TABLE ArtPieces (ArtPieceID INT, ArtistID INT, Price INT); CREATE TABLE Sales (SaleID INT, ArtPieceID INT, Year INT, Quantity INT); INSERT INTO Artists VALUES (1, 'Artist 1', 'USA', 'Indigenous'), (2, 'Artist 2', 'Canada', 'Indigenous'), (3, 'Artist 3', 'Mexico', 'Indigenous'); INSERT INTO ArtPieces VALUES (1, 1, 5000), (2, 1, 7000), (3, 2, 6000), (4, 2, 8000), (5, 3, 11000), (6, 3, 13000); INSERT INTO Sales VALUES (1, 1, 2021, 2), (2, 2, 2021, 1), (3, 3, 2021, 3), (4, 4, 2021, 2), (5, 5, 2021, 1), (6, 6, 2021, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT A.Country, SUM(AP.Price * S.Quantity) AS TotalRevenue FROM Artists A INNER JOIN ArtPieces AP ON A.ArtistID = AP.ArtistID INNER JOIN Sales S ON AP.ArtPieceID = S.ArtPieceID WHERE A.Ethnicity = 'Indigenous' AND A.Country IN ('USA', 'Canada', 'Mexico') GROUP BY A.Country;"
    },
    {
        "instruction": "입력 텍스트: 비건이 아닌 점심 메뉴 항목의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menus (menu_id INT, menu_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), is_vegan BOOLEAN); INSERT INTO menus (menu_id, menu_name, category, price, is_vegan) VALUES (1, 'Quinoa Salad', 'Lunch', 12.99, FALSE), (2, 'Vegan Scramble', 'Breakfast', 7.99, TRUE), (3, 'Cheeseburger', 'Lunch', 9.99, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM menus WHERE category = 'Lunch' AND is_vegan = FALSE;"
    },
    {
        "instruction": "입력 텍스트: 각 회원의 운동 활동 평균 시간을 계산하세요.\n\nDDL statements:\nCREATE TABLE member_activity (member_id INT, activity VARCHAR(50), duration INT); INSERT INTO member_activity (member_id, activity, duration) VALUES (1, 'Running', 60); INSERT INTO member_activity (member_id, activity, duration) VALUES (1, 'Cycling', 45); INSERT INTO member_activity (member_id, activity, duration) VALUES (2, 'Yoga', 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT member_id, AVG(duration) as avg_duration FROM member_activity GROUP BY member_id;"
    },
    {
        "instruction": "입력 텍스트: Department 테이블에 'Sustainability'라는 새로운 부서를 추가하세요.\n\nDDL statements:\nCREATE TABLE Department (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Department (DepartmentID, DepartmentName) VALUES (6, 'Sustainability');"
    },
    {
        "instruction": "입력 텍스트: visitor_exhibition 테이블에 방문자 1234의 'Modern Art' 전시회에 대한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE visitor_exhibition (visitor_id INT, exhibition_id INT, visit_date DATE); CREATE TABLE exhibitions (id INT, name TEXT, start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO visitor_exhibition (visitor_id, exhibition_id, visit_date) VALUES (1234, (SELECT id FROM exhibitions WHERE name = 'Modern Art'), '2023-02-14');"
    },
    {
        "instruction": "입력 텍스트: 건강 인식 프로그램에 대한 총 기부금이 가장 많은 상위 2개 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(255), Country VARCHAR(255)); CREATE TABLE DonationCategories (CategoryID INT, CategoryName VARCHAR(255)); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL(10, 2), DonationDate DATE, CategoryID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CategoryID, Country, SUM(DonationAmount) AS TotalDonations, RANK() OVER (PARTITION BY CategoryID ORDER BY SUM(DonationAmount) DESC) AS CountryRank FROM Donations JOIN Donors ON Donations.DonorID = Donors.DonorID JOIN DonationCategories ON Donations.CategoryID = DonationCategories.CategoryID WHERE DonationCategories.CategoryName = 'Health Awareness' GROUP BY CategoryID, Country;"
    },
    {
        "instruction": "입력 텍스트: 공급자' 테이블에 'Green Supplies'라는 이름과 '평점' 90으로 새로운 레코드를 추가합니다.\n\nDDL statements:\nCREATE TABLE supplier (id INT PRIMARY KEY, name VARCHAR(50), rating INT); INSERT INTO supplier (id, name, rating) VALUES (1, 'Blue Supplies', 80), (2, 'Red Supplies', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO supplier (name, rating) VALUES ('Green Supplies', 90);"
    },
    {
        "instruction": "입력 텍스트: 인도에 위치한 공정 무역 공장에서 제조된 유기농 면 의류의 평균 생산 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE OrganicCottonGarments (id INT, production_cost DECIMAL(5,2), country VARCHAR(20));CREATE TABLE FairTradeFactories (id INT, factory_id INT, location VARCHAR(20)); INSERT INTO OrganicCottonGarments (id, production_cost, country) VALUES (1, 25.50, 'India'), (2, 30.00, 'Nepal'); INSERT INTO FairTradeFactories (id, factory_id, location) VALUES (1, 1, 'India'), (2, 2, 'Nepal');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_cost) FROM OrganicCottonGarments JOIN FairTradeFactories ON OrganicCottonGarments.id = FairTradeFactories.factory_id WHERE OrganicCottonGarments.country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 가장 인기 있는 상위 3개의 국제 관광지와 그 방문객 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE african_tourism (destination VARCHAR(255), continent VARCHAR(255), visitors INT); INSERT INTO african_tourism (destination, continent, visitors) VALUES ('Cape Town', 'Africa', 2000000); INSERT INTO african_tourism (destination, continent, visitors) VALUES ('Marrakech', 'Africa', 1500000); INSERT INTO african_tourism (destination, continent, visitors) VALUES ('Zanzibar', 'Africa', 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT destination, continent, visitors, RANK() OVER (PARTITION BY continent ORDER BY visitors DESC) as popularity_rank FROM african_tourism WHERE continent = 'Africa' AND popularity_rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: mammals' 테이블에서 늑대의 개체 수를 1600으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE mammals (id INT PRIMARY KEY, name VARCHAR(50), population INT); INSERT INTO mammals (id, name, population) VALUES (1, 'Tiger', 2000), (2, 'Elephant', 3000), (3, 'Wolf', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE mammals SET population = 1600 WHERE name = 'Wolf';"
    },
    {
        "instruction": "입력 텍스트: Tech_Workers_Union'에서 안전 등급이 9 이상인 구성원들의 평균 급여를 계산하세요.\n\nDDL statements:\nCREATE TABLE Tech_Workers_Union (union_member_id INT, member_id INT, safety_rating FLOAT, salary FLOAT); INSERT INTO Tech_Workers_Union (union_member_id, member_id, safety_rating, salary) VALUES (1, 101, 9.75, 85000.00), (1, 102, 9.25, 90000.00), (1, 103, 9.50, 82000.00), (2, 201, 9.00, 95000.00), (2, 202, 9.75, 88000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM Tech_Workers_Union WHERE safety_rating > 9;"
    },
    {
        "instruction": "입력 텍스트: Habitat 3'에서 'Herbivora' 종의 개체 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Habitat3(animal_id INT, species VARCHAR(20), population INT, habitat VARCHAR(20)); INSERT INTO Habitat3 VALUES (1, 'Zebra', 50, 'Habitat3'), (2, 'Giraffe', 60, 'Habitat3'), (3, 'Rhinoceros', 70, 'Habitat3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(population) FROM Habitat3 WHERE species IN (SELECT species FROM AnimalData WHERE order_class = 'Herbivora') AND habitat = 'Habitat3';"
    },
    {
        "instruction": "입력 텍스트: 2019년도에 나이가 30세에서 40세 사이인 고객들의 평균 금융 복지 점수를 찾으세요?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, age INT, wellbeing_score INT, registration_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(wellbeing_score) FROM customers WHERE age BETWEEN 30 AND 40 AND EXTRACT(YEAR FROM registration_date) = 2019;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 독일에서 텐셀을 공급받은 브랜드는 어떤 것들이 있나요?\n\nDDL statements:\nCREATE TABLE tencel_sources (brand VARCHAR(50), country VARCHAR(50), year INT); INSERT INTO tencel_sources (brand, country, year) VALUES ('BrandG', 'Germany', 2022), ('BrandH', 'Austria', 2022), ('BrandI', 'China', 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand FROM tencel_sources WHERE country = 'Germany' AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 원주민 커뮤니티에서의 평균 기대 수명은 얼마입니까?\n\nDDL statements:\nCREATE TABLE life_expectancy (id INT, community_type TEXT, life_expectancy FLOAT, country TEXT); INSERT INTO life_expectancy (id, community_type, life_expectancy, country) VALUES (1, 'Indigenous', 70.5, 'Canada'); INSERT INTO life_expectancy (id, community_type, life_expectancy, country) VALUES (2, 'Non-Indigenous', 82.0, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT life_expectancy FROM life_expectancy WHERE community_type = 'Indigenous' AND country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 함대당 평균 선박 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE fleets (fleet_id INT, number_of_vessels INT); INSERT INTO fleets (fleet_id, number_of_vessels) VALUES (1, 10), (2, 15), (3, 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(number_of_vessels) FROM fleets;"
    },
    {
        "instruction": "입력 텍스트: 금속' 부문에서 순환 경제 관행을 준수하는 공장의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE circular_economy (id INT, sector VARCHAR(255), circular BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM circular_economy WHERE sector = 'Metals' AND circular = TRUE;"
    },
    {
        "instruction": "입력 텍스트: \"exit_strategies\" 테이블에서 퇴사 날짜가 2022-01-01 이후인 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE exit_strategies (id INT, company_name VARCHAR(100), exit_type VARCHAR(50), acquisition_price FLOAT, exit_date DATE); INSERT INTO exit_strategies (id, company_name, exit_type, acquisition_price, exit_date) VALUES (7, 'India Inc.', 'Acquisition', 50000000, '2021-10-01'), (8, 'Japan Corp.', 'IPO', 100000000, '2022-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM exit_strategies WHERE exit_date > '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: 호주의 어떤 에너지 저장 시설의 최대 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_storage (id INT, country VARCHAR(255), name VARCHAR(255), capacity FLOAT); INSERT INTO energy_storage (id, country, name, capacity) VALUES (1, 'Australia', 'Storage A', 120.5); INSERT INTO energy_storage (id, country, name, capacity) VALUES (2, 'Australia', 'Storage B', 150.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(capacity) FROM energy_storage WHERE country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 1990년부터 2010년 사이에 우주 임무를 발사한 모든 국가를 나열하시오.\n\nDDL statements:\nCREATE TABLE space_missions (id INT, mission_name VARCHAR(50), launch_date DATE, launch_country VARCHAR(50)); INSERT INTO space_missions (id, mission_name, launch_date, launch_country) VALUES (1, 'STS-31', '1990-04-24', 'USA'); INSERT INTO space_missions (id, mission_name, launch_date, launch_country) VALUES (2, 'Mir EO-11', '1990-12-01', 'Russia'); INSERT INTO space_missions (id, mission_name, launch_date, launch_country) VALUES (3, 'STS-133', '2011-02-24', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT launch_country FROM space_missions WHERE YEAR(launch_date) BETWEEN 1990 AND 2010 GROUP BY launch_country;"
    },
    {
        "instruction": "입력 텍스트: 각 주의 정신 건강 동등 지위를 알파벳 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE MentalHealthParity (State TEXT, ParityStatus TEXT); INSERT INTO MentalHealthParity (State, ParityStatus) VALUES ('Alabama', 'Parity'); INSERT INTO MentalHealthParity (State, ParityStatus) VALUES ('Alaska', 'Non-Parity'); INSERT INTO MentalHealthParity (State, ParityStatus) VALUES ('Arizona', 'Parity');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, ParityStatus FROM MentalHealthParity ORDER BY State;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 '광업' 산업에서 진행된 작업장 안전 검사는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE if not exists inspections (id INT PRIMARY KEY, industry VARCHAR(255), inspection_date DATE); INSERT INTO inspections (id, industry, inspection_date) VALUES (1, 'mining', '2022-02-03'), (2, 'mining', '2022-05-12'), (3, 'manufacturing', '2022-07-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM inspections WHERE industry = 'mining' AND inspection_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 2016년도에 생산된 이터븀의 최대 생산량(톤 단위)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production (id INT, mine_id INT, year INT, element TEXT, production_quantity INT); INSERT INTO production (id, mine_id, year, element, production_quantity) VALUES (1, 1, 2016, 'Ytterbium', 50), (2, 2, 2016, 'Ytterbium', 100), (3, 3, 2016, 'Ytterbium', 150), (4, 1, 2016, 'Europium', 150), (5, 2, 2016, 'Europium', 200), (6, 3, 2016, 'Europium', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(production_quantity) FROM production WHERE year = 2016 AND element = 'Ytterbium';"
    },
    {
        "instruction": "입력 텍스트: 문화 역량 훈련을 완료한 정신 건강 제공자의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mental_health_providers (id INT, name VARCHAR(50), age INT, completed_training BOOLEAN); INSERT INTO mental_health_providers (id, name, age, completed_training) VALUES (1, 'Sarah Lee', 45, true), (2, 'Mohammed Ahmed', 35, false), (3, 'Emily Chen', 50, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) as avg_age FROM mental_health_providers WHERE completed_training = true;"
    },
    {
        "instruction": "입력 텍스트: 각 지역 보건 요원의 정신 건강 동등성 훈련 최고 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Trainings (Training_ID INT, Training_Name VARCHAR(50), CHW_ID INT, Score FLOAT, Training_Date DATE); INSERT INTO Trainings (Training_ID, Training_Name, CHW_ID, Score, Training_Date) VALUES (1, 'Mental Health Parity', 1, 85, '2021-01-01'); INSERT INTO Trainings (Training_ID, Training_Name, CHW_ID, Score, Training_Date) VALUES (2, 'Mental Health Parity', 2, 90, '2021-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CHW_ID, MAX(Score) FROM Trainings WHERE Training_Name = 'Mental Health Parity' GROUP BY CHW_ID;"
    },
    {
        "instruction": "입력 텍스트: 오레곤에서 인디카와 사티바 종류를 모두 판매하는 모든 약국을 나열하시오.\n\nDDL statements:\nCREATE TABLE DispensarySales (dispensary_id INT, strain VARCHAR(20), quantity INT); INSERT INTO DispensarySales (dispensary_id, strain, quantity) VALUES (1, 'Sour Diesel', 50), (1, 'Blue Dream', 75), (2, 'Green Crack', 60), (2, 'Jack Herer', 80); CREATE TABLE OregonDispensaries (dispensary_id INT, location VARCHAR(20)); INSERT INTO OregonDispensaries (dispensary_id, location) VALUES (1, 'Oregon'), (2, 'Oregon');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ds.dispensary_id FROM DispensarySales ds JOIN OregonDispensaries od ON ds.dispensary_id = od.dispensary_id WHERE strain LIKE '%Indica%' INTERSECT SELECT ds.dispensary_id FROM DispensarySales ds JOIN OregonDispensaries od ON ds.dispensary_id = od.dispensary_id WHERE strain LIKE '%Sativa%';"
    },
    {
        "instruction": "입력 텍스트: AI 기반 추천 엔진을 사용하는 캐나다의 호텔들의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT, revenue FLOAT); CREATE TABLE ai_recs (hotel_id INT, rec_engine TEXT); INSERT INTO hotels VALUES (1, 'Hotel B', 'Canada', 1000000); INSERT INTO ai_recs VALUES (1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(hotels.revenue) FROM hotels INNER JOIN ai_recs ON hotels.hotel_id = ai_recs.hotel_id WHERE hotels.country = 'Canada' AND ai_recs.rec_engine = 'AI-powered';"
    },
    {
        "instruction": "입력 텍스트: 아리조나 주의 가뭄 영향을 받은 카운티와 주거 부문을 제외한 평균 물 사용량을 나열하세요.\n\nDDL statements:\nCREATE TABLE az_drought_impact (county TEXT, state TEXT, sector TEXT, avg_usage FLOAT); INSERT INTO az_drought_impact (county, state, sector, avg_usage) VALUES ('Pima County', 'Arizona', 'commercial', 123.5), ('Pima County', 'Arizona', 'industrial', 234.6), ('Maricopa County', 'Arizona', 'commercial', 345.7), ('Maricopa County', 'Arizona', 'industrial', 456.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT county, avg_usage FROM az_drought_impact WHERE sector NOT IN ('residential') AND state = 'Arizona';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 일일 생산량이 가장 높은 우물을 확인하세요.\n\nDDL statements:\nCREATE TABLE production (well_id INT, date DATE, quantity FLOAT); INSERT INTO production (well_id, date, quantity) VALUES (1, '2021-01-01', 100.0), (1, '2021-01-02', 120.0), (2, '2021-01-01', 150.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT well_id, MAX(quantity) FROM production WHERE date >= DATEADD(month, -1, CURRENT_DATE) GROUP BY well_id ORDER BY MAX(quantity) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 발견된 가장 흔한 취약점 상위 5개와 각각의 발생 횟수 및 영향을 받은 시스템을 보여주세요.\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT PRIMARY KEY, vulnerability_name VARCHAR(50), occurrence_time TIMESTAMP, affected_system VARCHAR(50)); INSERT INTO vulnerabilities (id, vulnerability_name, occurrence_time, affected_system) VALUES (1, 'CVE-2021-4034', '2022-01-01 10:00:00', 'Web Server'), (2, 'CVE-2021-44228', '2022-02-01 12:30:00', 'Application Server');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vulnerability_name, COUNT(*) as occurrences, affected_system FROM vulnerabilities WHERE occurrence_time >= NOW() - INTERVAL '6 months' GROUP BY vulnerability_name, affected_system ORDER BY occurrences DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 헤어케어 제품의 성분 목록에서 팜 오일이 언급된 횟수를 찾으세요.\n\nDDL statements:\nCREATE TABLE HaircareProducts (product_name VARCHAR(100), ingredient_list TEXT); INSERT INTO HaircareProducts (product_name, ingredient_list) VALUES ('Smoothing Shampoo', 'Aqua, Sodium Laureth Sulfate, Cocamidopropyl Betaine, Glycerin, Sodium Chloride, Parfum, ...'), ('Volume Conditioner', 'Aqua, Behentrimonium Chloride, Cetyl Alcohol, Glycerin, Parfum, Benzyl Alcohol, ...');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM HaircareProducts WHERE ingredient_list LIKE '%Palm Oil%';"
    },
    {
        "instruction": "입력 텍스트: VR 헤드셋을 소유하고 아시아에서 열린 이스포츠 이벤트에 참가한 플레이어들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, age INT, country VARCHAR(50), vr_owner BOOLEAN); CREATE TABLE esports_participants (participant_id INT, player_id INT); CREATE TABLE esports_events (event_id INT, location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(players.age) FROM players INNER JOIN esports_participants ON players.player_id = esports_participants.player_id INNER JOIN (SELECT event_id FROM esports_events WHERE location = 'Asia') AS asia_events ON esports_participants.player_id = asia_events.event_id WHERE players.vr_owner = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 각 도시에서 진행되는 유전 연구 프로젝트의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE research(id INT, project VARCHAR(50), city VARCHAR(50)); INSERT INTO research VALUES (1, 'ProjectA', 'NYC'), (2, 'ProjectB', 'SF'), (3, 'ProjectC', 'NYC'), (4, 'ProjectD', 'LA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) FROM research GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 언어별 기사 주제의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE articles (id INT PRIMARY KEY, title TEXT, topic VARCHAR(255), language VARCHAR(50), agency_id INT, FOREIGN KEY (agency_id) REFERENCES news_agency(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT language, topic, COUNT(*) as total FROM articles GROUP BY language, topic;"
    },
    {
        "instruction": "입력 텍스트: disaster_response' 테이블에서 재난 대응 팀의 최대 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE disaster_response (id INT, team_name VARCHAR(255), team_size INT); INSERT INTO disaster_response (id, team_name, team_size) VALUES (1, 'Team A', 5), (2, 'Team B', 10), (3, 'Team C', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(team_size) as max_team_size FROM disaster_response;"
    },
    {
        "instruction": "입력 텍스트: security_incidents' 테이블에 기록된 보안 사고와 관련된 고유 IP 주소는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, ip_address VARCHAR(50), date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ip_address) FROM security_incidents;"
    },
    {
        "instruction": "입력 텍스트: 모든 공장에서 친환경 의류의 최소 생산 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE garments (garment_id INT, garment_name TEXT, production_cost FLOAT, factory_id INT); INSERT INTO garments (garment_id, garment_name, production_cost, factory_id) VALUES (1, 'Organic Cotton Tee', 15.50, 1), (2, 'Cotton Tote Bag', 8.25, 1), (3, 'Recycled Polyester Hoodie', 28.99, 2), (4, 'Organic Cotton Dress', 22.00, 1), (5, 'Hemp Trousers', 35.00, 3), (6, 'Bamboo Shirt', 27.50, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(g.production_cost) FROM garments g;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 출시된 동물 실험을 하지 않은 스킨케어 제품의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(255), price DECIMAL(5,2), cruelty_free BOOLEAN, launch_date DATE); INSERT INTO products (product_id, name, price, cruelty_free, launch_date) VALUES (1, 'Cleanser', 15.99, true, '2022-01-15'), (2, 'Toner', 20.49, false, '2021-09-25'), (3, 'Moisturizer', 25.99, true, '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM products WHERE cruelty_free = true AND launch_date >= '2022-01-01' AND launch_date <= '2022-03-31';"
    },
    {
        "instruction": "입력 텍스트: \"tech_companies\" 테이블에 \"Tesla Inc.\"라는 이름으로 새로운 기록을 추가하고, 산업은 \"Electric Vehicles\"로, 설립 연도는 2003년으로, 위치는 \"Palo Alto\"로 설정하세요.\n\nDDL statements:\nCREATE TABLE tech_companies (name TEXT, industry TEXT, year_founded INTEGER, location TEXT); INSERT INTO tech_companies (name, industry, year_founded, location) VALUES ('Google', 'Cloud Computing', 1998, 'Mountain View'); INSERT INTO tech_companies (name, industry, year_founded, location) VALUES ('Microsoft', 'Cloud Computing', 1975, 'Redmond');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO tech_companies (name, industry, year_founded, location) VALUES ('Tesla Inc.', 'Electric Vehicles', 2003, 'Palo Alto');"
    },
    {
        "instruction": "입력 텍스트: 각 지역의 레스토랑들의 평균 지속 가능성 등급을 찾아주세요.\n\nDDL statements:\nCREATE TABLE restaurants (id INT, name VARCHAR(255), location VARCHAR(255), sustainability_rating INT, monthly_revenue DECIMAL(10,2)); INSERT INTO restaurants (id, name, location, sustainability_rating, monthly_revenue) VALUES (1, 'Green Garden', 'NY', 5, 25000), (2, 'Quick Bites', 'CA', 2, 18000), (3, 'Healthy Bites', 'NY', 4, 22000), (4, 'Farm Fresh', 'CA', 3, 19000), (5, 'Local Harvest', 'NY', 5, 26000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, AVG(sustainability_rating) FROM restaurants GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 도시 농업 시스템에서 글로벌 남부 지역에서 생산된 식량의 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE food_production (system VARCHAR(20), location VARCHAR(20), quantity INT); INSERT INTO food_production (system, location, quantity) VALUES ('UA1', 'Global North', 300), ('UA1', 'Global South', 500), ('UA2', 'Global North', 400), ('UA2', 'Global South', 600), ('UA3', 'Global North', 700), ('UA3', 'Global South', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM food_production WHERE location = 'Global South';"
    },
    {
        "instruction": "입력 텍스트: 농구 경기에 참석하고 상품을 구매한 팬의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE fans_merchandise_basketball (fan_id INT, merchandise_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT fans.fan_id) FROM fans JOIN (SELECT * FROM ticket_sales WHERE game_id IN (SELECT game_id FROM games WHERE game_type = 'Basketball')) AS basketball_ticket_sales ON fans.game_id = basketball_ticket_sales.game_id JOIN fans_merchandise ON fans.fan_id = fans_merchandise.fan_id;"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역의 모든 국가 안보 기관의 이름과 위치를 제공하세요.\n\nDDL statements:\nCREATE TABLE national_security_agencies (id INT, name TEXT, location TEXT); INSERT INTO national_security_agencies (id, name, location) VALUES (1, 'Defence Intelligence Organisation', 'Australia'), (2, 'National Security Bureau', 'Taiwan'), (3, 'National Intelligence Service', 'South Korea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location FROM national_security_agencies WHERE location IN ('Australia', 'Taiwan', 'South Korea');"
    },
    {
        "instruction": "입력 텍스트: 플로리다 주 교육 산업에서의 단체 교섭 협약의 최대 기간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE cb_agreements (id INT, industry VARCHAR, state VARCHAR, duration INT); INSERT INTO cb_agreements (id, industry, state, duration) VALUES (1, 'Education', 'Florida', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, MAX(duration) as max_duration FROM cb_agreements WHERE industry = 'Education' AND state = 'Florida';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 \"사이버네틱 쇼다운\" 게임에서 한 플레이어가 한 경기에서 달성한 최소 킬 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE matches (id INT, player_id INT, game VARCHAR(50), kills INT, match_date DATETIME); INSERT INTO matches VALUES (1, 1, 'Cybernetic Showdown', 15, '2022-04-01 10:00:00'); INSERT INTO matches VALUES (2, 2, 'Cybernetic Showdown', 20, '2022-04-15 14:30:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(kills) FROM matches WHERE game = 'Cybernetic Showdown' AND match_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 1900년부터 1950년 사이에 창작된 모든 작품들을 전시 횟수에 따라 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE Artworks (id INT, name TEXT, creation_date DATE, exhibitions INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, exhibitions FROM (SELECT name, exhibitions, ROW_NUMBER() OVER (ORDER BY exhibitions DESC) as rn FROM Artworks WHERE creation_date BETWEEN '1900-01-01' AND '1950-12-31') t WHERE rn <= 10;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 각 노조의 평균 조합원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE unions (id INT, name TEXT, state TEXT, members INT); INSERT INTO unions (id, name, state, members) VALUES (1, 'Union A', 'New York', 500); INSERT INTO unions (id, name, state, members) VALUES (2, 'Union B', 'California', 700); INSERT INTO unions (id, name, state, members) VALUES (3, 'Union C', 'New York', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(members) FROM unions WHERE state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 각 지역별 네트워크 인프라에 대한 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE network_investments (id INT, region VARCHAR(50), investment_amount FLOAT, investment_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(investment_amount) FROM network_investments WHERE investment_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 주에서 발급된 건축 허가증은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE BuildingPermits (id INT, permit_date DATE, state VARCHAR(20)); INSERT INTO BuildingPermits (id, permit_date, state) VALUES (1, '2020-01-01', 'California'), (2, '2019-12-31', 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM BuildingPermits WHERE YEAR(permit_date) = 2020 GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 연간 재활용 소재로 만들어진 의류는 얼마나 됩니까?\n\nDDL statements:\nCREATE TABLE GarmentProduction (garmentID INT, material VARCHAR(20), year INT, quantity INT); INSERT INTO GarmentProduction (garmentID, material, year, quantity) VALUES (1, 'Recycled Polyester', 2020, 12000), (2, 'Organic Cotton', 2020, 15000), (3, 'Recycled Denim', 2019, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM GarmentProduction WHERE material LIKE '%Recycled%' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코'를 제외하고 가장 높은 커뮤니티 참여 점수를 가진 도시는 무엇인가요?\n\nDDL statements:\nCREATE TABLE CommunityPolicing (id INT, city VARCHAR(20), community_involvement DECIMAL(5,2)); INSERT INTO CommunityPolicing (id, city, community_involvement) VALUES (1, 'SanFrancisco', 4.78), (2, 'Miami', 4.96);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, community_involvement FROM CommunityPolicing WHERE city != 'SanFrancisco' AND community_involvement > (SELECT community_involvement FROM CommunityPolicing WHERE city = 'SanFrancisco');"
    },
    {
        "instruction": "입력 텍스트: 2023-01-01' 이전의 모든 이스포츠 이벤트를 삭제하세요\n\nDDL statements:\nCREATE TABLE esports_events (id INT PRIMARY KEY, name VARCHAR(50), date DATE); INSERT INTO esports_events (id, name, date) VALUES (1, 'Fantasy Quest World Cup', '2023-08-01'); INSERT INTO esports_events (id, name, date) VALUES (2, 'Starcraft World Championship', '2022-12-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM esports_events WHERE date < '2023-01-01';"
    },
    {
        "instruction": "입력 텍스트: clinic_2022'에서 치료를 받은 환자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE clinic_2022 (patient_id INT, name VARCHAR(50), age INT, therapy_type VARCHAR(50)); INSERT INTO clinic_2022 (patient_id, name, age, therapy_type) VALUES (1, 'John Doe', 30, 'CBT'), (2, 'Jane Smith', 25, 'DBT');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM clinic_2022 WHERE therapy_type IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 북미 지역에서 발견된 취약점의 평균 심각도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, severity FLOAT, region VARCHAR(50)); INSERT INTO vulnerabilities (id, severity, region) VALUES (1, 7.5, 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(severity) FROM vulnerabilities WHERE region = 'North America';"
    },
    {
        "instruction": "입력 텍스트: rural_development' 데이터베이스에서 'Mechanization' 유형의 농업 혁신 프로젝트의 총 개수와 예산을 내림차순으로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE innovation_projects (id INT PRIMARY KEY, name TEXT, type TEXT, budget INT); INSERT INTO innovation_projects (id, name, type, budget) VALUES (1, 'Precision Agriculture', 'Technology', 1000000); INSERT INTO innovation_projects (id, name, type, budget) VALUES (2, 'Tractor Modernization', 'Mechanization', 750000); INSERT INTO innovation_projects (id, name, type, budget) VALUES (3, 'Drip Irrigation', 'Equipment', 500000); INSERT INTO innovation_projects (id, name, type, budget) VALUES (4, 'Automated Harvesting', 'Mechanization', 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(id) as total_mechanization_projects, SUM(budget) as total_budget FROM innovation_projects WHERE type = 'Mechanization' ORDER BY total_budget DESC;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에는 얼마나 많은 해양 생물 종이 있나요?\n\nDDL statements:\nCREATE TABLE marine_species (id INTEGER, scientific_name TEXT, common_name TEXT); INSERT INTO marine_species (id, scientific_name, common_name) VALUES (1, 'Loligo opalescens', 'California market squid'); INSERT INTO marine_species (id, scientific_name, common_name) VALUES (2, 'Lepidochelys kempii', 'Atlantic ridley sea turtle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_species;"
    },
    {
        "instruction": "입력 텍스트: 아이슬란드에 있는 지열 발전소의 최소 용량(MW)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE geothermal_power_plants (id INT, name TEXT, location TEXT, capacity FLOAT); INSERT INTO geothermal_power_plants (id, name, location, capacity) VALUES (1, 'Plant A', 'Iceland', 100.5), (2, 'Plant B', 'New Zealand', 150.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(capacity) FROM geothermal_power_plants WHERE location = 'Iceland';"
    },
    {
        "instruction": "입력 텍스트: 오픈 교수법 자료들과 그것들이 접근된 횟수를 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE open_pedagogy_resources (resource_id INT, resource_name VARCHAR(50), access_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM open_pedagogy_resources;"
    },
    {
        "instruction": "입력 텍스트: 어느 우물이 같은 나라에 있는 다음 우물보다 생산률이 낮은가요?\n\nDDL statements:\nCREATE TABLE Wells (WellID INT, WellName VARCHAR(50), ProductionRate FLOAT, Country VARCHAR(50)); INSERT INTO Wells (WellID, WellName, ProductionRate, Country) VALUES (1, 'Well A', 500, 'USA'), (2, 'Well B', 600, 'Canada'), (3, 'Well C', 700, 'Mexico'), (4, 'Well D', 800, 'USA'), (5, 'Well E', 900, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w1.WellName, w1.ProductionRate FROM Wells w1 WHERE w1.ProductionRate < (SELECT w2.ProductionRate FROM Wells w2 WHERE w2.Country = w1.Country AND w2.WellID > w1.WellID ORDER BY w2.WellID ASC LIMIT 1);"
    },
    {
        "instruction": "입력 텍스트: 각 기관에서 실시한 재난 대비 훈련 횟수를 나열하시오.\n\nDDL statements:\nCREATE TABLE agencies (aid INT, name VARCHAR(255)); CREATE TABLE drills (id INT, agency_id INT, drill_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, SUM(d.drill_count) FROM agencies a JOIN drills d ON a.aid = d.agency_id GROUP BY a.name;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 예술가가 판매한 작품들의 평균 가격은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE ArtWorkSales (artworkID INT, artistID INT, saleDate DATE, revenue DECIMAL(10,2)); CREATE TABLE Artists (artistID INT, artistName VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.artistName, AVG(revenue) as avg_price FROM ArtWorkSales aws JOIN Artists a ON aws.artistID = a.artistID WHERE YEAR(aws.saleDate) = 2020 GROUP BY a.artistName;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 대출로부터 얻은 이자 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE loans (bank_name VARCHAR(255), loan_amount DECIMAL(10,2), interest_rate DECIMAL(4,2), loan_date DATE, country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(loan_amount * interest_rate) FROM loans GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 화학물질의 생산량을 시설과 날짜별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Chemical(Id INT, Name VARCHAR(50)); CREATE TABLE Production(Id INT, ChemicalId INT, FacilityId INT, ProductionDate DATE, QuantityProduced INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.Name, f.Name AS FacilityName, DATE_FORMAT(p.ProductionDate, '%Y-%m-%d') AS Date, SUM(p.QuantityProduced) AS TotalQuantityProduced FROM Production p JOIN Chemical c ON p.ChemicalId = c.Id JOIN Facility f ON p.FacilityId = f.Id GROUP BY c.Name, f.Name, Date;"
    },
    {
        "instruction": "입력 텍스트: 2019년 남해에서 관찰된 해양 생물 종의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE marine_species_observations (observation_id INT, species_name VARCHAR(255), observation_date DATE, ocean_name VARCHAR(255)); INSERT INTO marine_species_observations (observation_id, species_name, observation_date, ocean_name) VALUES (1, 'Blue Whale', '2019-01-01', 'Southern Ocean'), (2, 'Krill', '2019-03-15', 'Southern Ocean'), (3, 'Orca', '2019-11-01', 'Antarctic Ocean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT species_name) FROM marine_species_observations WHERE YEAR(observation_date) = 2019 AND ocean_name IN ('Southern Ocean', 'Antarctic Ocean');"
    },
    {
        "instruction": "입력 텍스트: 2020년 'Gangetic Plains' 지역의 커뮤니티 개발 사업에 대한 총 투자액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE community_development (id INT, initiative_name VARCHAR(255), region VARCHAR(255), investment FLOAT, completion_year INT); INSERT INTO community_development (id, initiative_name, region, investment, completion_year) VALUES (1, 'Rural Health Clinic', 'Gangetic Plains', 50000, 2020), (2, 'Community Center', 'Gangetic Plains', 75000, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment) FROM community_development WHERE region = 'Gangetic Plains' AND completion_year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 각 차량 유형별로 실시된 안전 테스트는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE TestTypes (Id INT, TestType VARCHAR(20)); CREATE TABLE SafetyTests (Id INT, VehicleId INT, TestTypeId INT, TestDate DATE); INSERT INTO TestTypes (Id, TestType) VALUES (1, 'Crash Test'), (2, 'Emission Test'), (3, 'Safety Feature Test'); INSERT INTO SafetyTests (Id, VehicleId, TestTypeId, TestDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-01-02'), (3, 2, 1, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT TestTypes.TestType, COUNT(*) FROM TestTypes INNER JOIN SafetyTests ON TestTypes.Id = SafetyTests.TestTypeId GROUP BY TestTypes.TestType;"
    },
    {
        "instruction": "입력 텍스트: 각 부서별로 평균 급여보다 많은 급여를 받는 직원의 수를 찾아라\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName TEXT, LastName TEXT, Department TEXT, Salary INT); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (1, 'John', 'Doe', 'IT', 70000), (2, 'Jane', 'Doe', 'IT', 60000), (3, 'Bob', 'Smith', 'Finance', 80000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, COUNT(*) FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees) GROUP BY Department;"
    },
    {
        "instruction": "입력 텍스트: 각 보험 유형별로 청구된 총 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Policy (PolicyID INT, PolicyType VARCHAR(50)); INSERT INTO Policy VALUES (1, 'Auto'), (2, 'Home'), (3, 'Life'); CREATE TABLE Claims (ClaimID INT, PolicyID INT, ClaimAmount DECIMAL(10,2)); INSERT INTO Claims VALUES (1, 1, 500.00), (2, 1, 200.00), (3, 2, 750.00), (4, 3, 15000.00), (5, 1, 300.00)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT PolicyType, COUNT(*) as TotalClaims FROM Policy p INNER JOIN Claims c ON p.PolicyID = c.PolicyID GROUP BY PolicyType;"
    },
    {
        "instruction": "입력 텍스트: 파리에서 지난 30일 동안 정비된 기차는 몇 대인가요?\n\nDDL statements:\nCREATE TABLE paris_train (train_id INT, last_service DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM paris_train WHERE last_service >= CURDATE() - INTERVAL 30 DAY;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Sales (sale_date DATE, revenue INT); INSERT INTO Sales (sale_date, revenue) VALUES ('2022-01-01', 5000), ('2022-01-02', 6000), ('2022-01-03', 7000), ('2022-01-04', 8000), ('2022-01-05', 9000), ('2022-01-06', 10000), ('2022-01-07', 11000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) AS total_revenue FROM Sales WHERE sale_date BETWEEN DATEADD(day, -7, CURRENT_DATE) AND CURRENT_DATE;"
    },
    {
        "instruction": "입력 텍스트: 런던에서 가장 지속 가능한 건물 중 세 번째로 높은 임대료는 얼마인가요?\n\nDDL statements:\nCREATE TABLE buildings (building_id INT, city VARCHAR(20), sustainability_rating INT, rent INT); INSERT INTO buildings (building_id, city, sustainability_rating, rent) VALUES (1, 'London', 5, 7000), (2, 'London', 5, 6000), (3, 'London', 5, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT LEAD(rent, 2) OVER (ORDER BY sustainability_rating DESC, rent DESC) as third_highest_rent FROM buildings WHERE city = 'London';"
    },
    {
        "instruction": "입력 텍스트: 2020년 여름, 토론토 시에서 물 부족을 경험한 수자원 분배 구역을 확인하세요.\n\nDDL statements:\nCREATE TABLE water_distribution (zone_id INT, zone_name VARCHAR(50), city VARCHAR(50), water_shortage BOOLEAN, shortage_date DATE); INSERT INTO water_distribution (zone_id, zone_name, city, water_shortage, shortage_date) VALUES (1, 'Zone 1', 'Toronto', true, '2020-07-01'), (2, 'Zone 2', 'Toronto', false, '2020-07-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT zone_name FROM water_distribution WHERE city = 'Toronto' AND water_shortage = true AND shortage_date BETWEEN '2020-06-01' AND '2020-09-01';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 교통 위반 사건이 단 한 건도 발생하지 않은 지역 치안 섹터는 어디인가요?\n\nDDL statements:\nCREATE TABLE traffic_violations (id INT, sector VARCHAR(50), date DATE); INSERT INTO traffic_violations (id, sector, date) VALUES (1, 'Sector A', '2022-01-01'), (2, 'Sector B', '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector FROM traffic_violations WHERE date >= DATEADD(month, -1, CURRENT_DATE) GROUP BY sector HAVING COUNT(*) = 0;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 '뉴욕'에 있는 '레스토랑 B'가 메뉴 가격을 몇 번 변경했나요?\n\nDDL statements:\nCREATE TABLE menu_engineering (restaurant_id INT, price DECIMAL(10,2), change_date DATE); INSERT INTO menu_engineering (restaurant_id, price, change_date) VALUES (2, 12.99, '2021-01-01'), (2, 13.49, '2021-06-01'), (2, 14.99, '2021-12-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM menu_engineering WHERE restaurant_id = 2 AND change_date BETWEEN '2021-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 '요가' 카테고리로 진행된 피트니스 수업은 몇 개였습니까?\n\nDDL statements:\nCREATE TABLE Classes (ClassID INT, ClassType VARCHAR(20), ClassDate DATE); INSERT INTO Classes (ClassID, ClassType, ClassDate) VALUES (1, 'Yoga', '2022-01-05'), (2, 'Pilates', '2022-01-07'), (3, 'Yoga', '2022-02-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(ClassID) FROM Classes WHERE ClassType = 'Yoga' AND ClassDate BETWEEN '2022-02-01' AND '2022-02-28';"
    },
    {
        "instruction": "입력 텍스트: 웨스트버지니아에서의 오피오이드 과다복용 사망 추세는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE opioid_overdoses (id INT, date TEXT, location TEXT, deaths INT); INSERT INTO opioid_overdoses (id, date, location, deaths) VALUES (1, '2016-01-01', 'West Virginia', 100); INSERT INTO opioid_overdoses (id, date, location, deaths) VALUES (2, '2017-01-01', 'West Virginia', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date, deaths FROM opioid_overdoses WHERE location = 'West Virginia' ORDER BY date;"
    },
    {
        "instruction": "입력 텍스트: agroecology' 스키마에 있는 유기농 농장의 주별 최대 생산 가치(달러 기준)는 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA agroecology;CREATE TABLE organic_farms (id INT, state VARCHAR(50), production_value INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MAX(production_value) FROM agroecology.organic_farms GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 레스토랑 위치별로 지속 가능한 해산물 조달 방식을 나열하세요.\n\nDDL statements:\nCREATE TABLE sourcing (restaurant_id INT, item_id INT, source VARCHAR(255)); INSERT INTO sourcing (restaurant_id, item_id, source) VALUES (1, 1, 'Local Fishery'), (1, 2, 'Imported'), (2, 1, 'Local Fishery'), (2, 2, 'Local Farm'); CREATE TABLE seafood (item_id INT, name VARCHAR(255)); INSERT INTO seafood (item_id, name) VALUES (1, 'Tuna'), (2, 'Shrimp'); CREATE TABLE restaurants (restaurant_id INT, name VARCHAR(255), location VARCHAR(255)); INSERT INTO restaurants (restaurant_id, name, location) VALUES (1, 'Restaurant A', 'City A'), (2, 'Restaurant B', 'City B');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.location, s.source FROM sourcing s JOIN seafood se ON s.item_id = se.item_id JOIN restaurants r ON s.restaurant_id = r.restaurant_id WHERE se.name LIKE '%seafood%';"
    },
    {
        "instruction": "입력 텍스트: 인도, 브라질, 남아프리카에서의 최대 재생 가능 에너지 발전량(와트)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE renewable_power (country VARCHAR(50), power_watts INT); INSERT INTO renewable_power (country, power_watts) VALUES ('India', 428000), ('Brazil', 340000), ('South Africa', 225000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(power_watts) FROM renewable_power WHERE country IN ('India', 'Brazil', 'South Africa');"
    },
    {
        "instruction": "입력 텍스트: 각 연도별 연구 프로젝트의 총 수와 참여한 고유 연구원 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE projects (project_id INT, project_date DATE, researcher VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT YEAR(project_date) AS year, COUNT(*) AS total_projects, COUNT(DISTINCT researcher) AS unique_researchers FROM projects GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 'ABC Tech' 회사에 수여된 계약의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE contracts (contract_id int, company_name varchar(255), award_date date, cost int);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM contracts WHERE company_name = 'ABC Tech' AND YEAR(award_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: EcoPower' 스키마에서 각 재생 가능 에너지 유형의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA EcoPower; CREATE TABLE RenewableTypes (type VARCHAR(50), installed_capacity INT); INSERT INTO RenewableTypes (type, installed_capacity) VALUES ('Solar', 500000), ('Wind', 700000), ('Hydro', 800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, installed_capacity FROM EcoPower.RenewableTypes;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 연간 방문객이 5000명 이상인 유산지는 어디인가요?\n\nDDL statements:\nCREATE TABLE HeritageSites (id INT, name VARCHAR(50), country VARCHAR(50), annual_visitors INT); INSERT INTO HeritageSites (id, name, country, annual_visitors) VALUES (1, 'Medina of Fez', 'Morocco', 7000), (2, 'Ancient City of Grand Zimbabwe', 'Zimbabwe', 6000), (3, 'Rock-Hewn Churches, Lalibela', 'Ethiopia', 5500), (4, 'Great Mosque of Djenné', 'Mali', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, country FROM HeritageSites WHERE annual_visitors > 5000;"
    },
    {
        "instruction": "입력 텍스트: economic_diversification' 테이블에서 경제 다양화 이니셔티브와 각각의 비용을 보여주세요.\n\nDDL statements:\nCREATE TABLE economic_diversification (initiative_id INT, initiative_name VARCHAR(50), cost INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name, cost FROM economic_diversification;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기 각 판매 지역의 총 수익은 얼마였나요?\n\nDDL statements:\nCREATE TABLE sales_region (region VARCHAR(20), revenue FLOAT); INSERT INTO sales_region (region, revenue) VALUES ('North', 50000), ('South', 75000), ('East', 60000), ('West', 80000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(revenue) FROM sales_region WHERE revenue BETWEEN 0 AND 100000 AND EXTRACT(MONTH FROM timestamp) BETWEEN 1 AND 3 AND EXTRACT(YEAR FROM timestamp) = 2022 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 1900년 이전에 제작된 그림들을 위해 프랑스에서 열린 전시회는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Exhibitions (ExhibitionID INT, ExhibitionCountry VARCHAR(50), PaintingID INT, PaintingCreationYear INT); INSERT INTO Exhibitions VALUES (1, 'France', 1, 1889), (2, 'France', 2, 1893);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Exhibitions WHERE ExhibitionCountry = 'France' AND PaintingCreationYear < 1900;"
    },
    {
        "instruction": "입력 텍스트: 2021년 달라스에서 발생한 화재 사건의 월별 추이는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE dallas_fire_incidents (id INT, incident_type VARCHAR(255), city VARCHAR(255), incident_date DATE); INSERT INTO dallas_fire_incidents (id, incident_type, city, incident_date) VALUES (1, 'Fire', 'Dallas', '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(incident_date, '%Y-%m') AS Month, COUNT(*) as total FROM dallas_fire_incidents WHERE city = 'Dallas' AND incident_type = 'Fire' AND incident_date >= '2021-01-01' AND incident_date < '2022-01-01' GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: \"tourist_attractions\" 테이블에 있는 모든 관광지의 이름, 유형, 문화적 중요성을 보여주는 \"cultural_attractions\"이라는 뷰를 생성하세요.\n\nDDL statements:\nCREATE TABLE tourist_attractions (attraction_id integer, name text, type text, location text, cultural_significance text);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW cultural_attractions AS SELECT name, type, cultural_significance FROM tourist_attractions;"
    },
    {
        "instruction": "입력 텍스트: 판매' 테이블에서 재활용 소재로 만들어진 의류의 판매로부터 지난 분기 동안 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (id INT, garment_id INT, garment_material VARCHAR(50), sale_price DECIMAL(10, 2), sale_date DATE, quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sale_price * quantity) AS total_revenue FROM sales WHERE garment_material LIKE '%recycled%' AND sale_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 2018년에 입사한 직원들의 부서별 총 교육 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, HireYear INT, Department VARCHAR(20)); CREATE TABLE Trainings (TrainingID INT, EmployeeID INT, TrainingYear INT, Cost FLOAT); INSERT INTO Employees (EmployeeID, HireYear, Department) VALUES (1, 2018, 'IT'), (2, 2019, 'HR'), (3, 2018, 'IT'); INSERT INTO Trainings (TrainingID, EmployeeID, TrainingYear, Cost) VALUES (1, 1, 2018, 500.00), (2, 2, 2019, 600.00), (3, 3, 2018, 700.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, SUM(Cost) FROM Employees INNER JOIN Trainings ON Employees.EmployeeID = Trainings.EmployeeID WHERE Employees.HireYear = 2018 GROUP BY Department;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 '아시아'에서 보고된 보안 사고는 몇 건이며, 그 심각도 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, timestamp TIMESTAMP, country VARCHAR(255), incident_type VARCHAR(255), severity VARCHAR(255)); INSERT INTO security_incidents (id, timestamp, country, incident_type, severity) VALUES (1, '2022-01-01 10:00:00', 'Japan', 'Phishing', 'Low'), (2, '2022-01-01 10:00:00', 'China', 'Malware', 'High');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, severity, COUNT(*) as incident_count FROM security_incidents WHERE timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH) AND country = 'Asia' GROUP BY country, severity;"
    },
    {
        "instruction": "입력 텍스트: 독일의 친환경 호텔 중 최대 점유율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE eco_hotels (hotel_id INT, hotel_name TEXT, occupancy_rate FLOAT, country TEXT); INSERT INTO eco_hotels (hotel_id, hotel_name, occupancy_rate, country) VALUES (1, 'Eco Lodge Berlin', 0.8, 'Germany'), (2, 'Green Hotel Hamburg', 0.9, 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(occupancy_rate) FROM eco_hotels WHERE country = 'Germany';"
    },
    {
        "instruction": "입력 텍스트: 아시아 출신 선수가 대회에서 가장 많이 이긴 횟수는 몇 회인가요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, player_name TEXT, country TEXT); INSERT INTO players VALUES (1, 'John Doe', 'China'), (2, 'Jane Smith', 'Japan'), (3, 'Bob Johnson', 'Canada'); CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT, country TEXT); INSERT INTO tournaments VALUES (1, 'ESL One', 'USA'), (2, 'DreamHack', 'Sweden'); CREATE TABLE wins (player_id INT, tournament_id INT, wins INT); INSERT INTO wins VALUES (1, 1, 3), (1, 2, 2), (2, 1, 1), (3, 1, 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(wins.wins) FROM wins JOIN players ON wins.player_id = players.player_id WHERE players.country = 'China' OR players.country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 모든 해양 분지의 총 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ocean_basins (name TEXT, area REAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(area) FROM ocean_basins;"
    },
    {
        "instruction": "입력 텍스트: R&B' 장르의 아티스트들에 대한 스트림 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Genre (GenreID INT, Genre VARCHAR(50)); INSERT INTO Genre VALUES (1, 'Pop'), (2, 'Rock'), (3, 'Jazz'), (4, 'R&B');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Streams JOIN Artists ON Streams.ArtistID = Artists.ArtistID WHERE Artists.Genre = 'R&B';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 위치한 화학 제조 공장에서 하루에 발생하는 폐기물의 최대 양은 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_production (id INT, plant_location VARCHAR(50), production_date DATE, amount_wasted FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(amount_wasted) FROM waste_production WHERE plant_location = 'California';"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 '플로리다'에 추가된 장애 지원 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE program_history (program_id INT, program_name VARCHAR(50), state VARCHAR(50), start_year INT); INSERT INTO program_history (program_id, program_name, state, start_year) VALUES (1, 'Accessible Transportation', 'Florida', 2015), (2, 'Sign Language Interpretation', 'Florida', 2016), (3, 'Adaptive Equipment', 'Florida', 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM program_history WHERE state = 'Florida' AND start_year > 2015;"
    },
    {
        "instruction": "입력 텍스트: 인종/민족별 정신 건강 점수의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE mental_health_scores (id INT, race_ethnicity VARCHAR(50), score INT); INSERT INTO mental_health_scores (id, race_ethnicity, score) VALUES (1, 'African American', 75), (2, 'Hispanic', 80), (3, 'Asian', 85), (4, 'Caucasian', 70), (5, 'Native American', 90), (6, 'Pacific Islander', 65), (7, 'Two or More Races', 95), (8, 'Decline to State', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT race_ethnicity, AVG(score) as avg_score FROM mental_health_scores GROUP BY race_ethnicity;"
    },
    {
        "instruction": "입력 텍스트: 공정 무역 인증을 받은 제품의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Certifications (ProductID INT, FairTrade BOOLEAN); INSERT INTO Certifications (ProductID, FairTrade) VALUES (1, TRUE), (2, FALSE), (3, TRUE), (4, FALSE), (5, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Certifications WHERE FairTrade = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 사용자들이 수행한 운동의 총 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE workouts (id INT, user_id INT, workout_date DATE, calories INT, country VARCHAR(50)); INSERT INTO workouts (id, user_id, workout_date, calories, country) VALUES (1, 123, '2022-01-01', 300, 'USA'); INSERT INTO workouts (id, user_id, workout_date, calories, country) VALUES (2, 456, '2022-01-02', 400, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM workouts WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 2019년 전 세계 디스프로슘 생산량 중 아프리카에서 생산된 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production (element VARCHAR(10), year INT, region VARCHAR(10), quantity INT); INSERT INTO production (element, year, region, quantity) VALUES ('Dysprosium', 2019, 'Africa', 320), ('Dysprosium', 2019, 'Asia', 1200), ('Dysprosium', 2019, 'North America', 400), ('Dysprosium', 2019, 'Europe', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(CASE WHEN region = 'Africa' THEN quantity ELSE 0 END) / SUM(quantity)) * 100 FROM production WHERE element = 'Dysprosium' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 최고의 참전 용사 고용률을 가진 상위 3개 주를 구하시오\n\nDDL statements:\nCREATE TABLE veteran_occupations (state VARCHAR(2), occupation VARCHAR(50), employed_veterans INT, total_veterans INT); INSERT INTO veteran_occupations (state, occupation, employed_veterans, total_veterans) VALUES ('NY', 'Software Engineer', 1000, 2000); INSERT INTO veteran_occupations (state, occupation, employed_veterans, total_veterans) VALUES ('TX', 'Mechanic', 1500, 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, (employed_veterans/total_veterans) as employment_rate FROM veteran_occupations ORDER BY employment_rate DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 보안 사고가 발생한 시스템에서 감지된 취약점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, system_id INT, severity VARCHAR(255), timestamp TIMESTAMP); CREATE TABLE security_incidents (id INT, system_id INT, timestamp TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.name, v.severity FROM vulnerabilities v JOIN security_incidents i ON v.system_id = i.system_id WHERE v.timestamp >= NOW() - INTERVAL 3 MONTH AND i.timestamp >= NOW() - INTERVAL 3 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 스페인 마드리드에서 이용 가능한 공유 자전거의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE shared_bicycles (bicycle_id INT, dock_id INT, dock_status TEXT, city TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM shared_bicycles WHERE city = 'Madrid' AND dock_status = 'available';"
    },
    {
        "instruction": "입력 텍스트: 웨이트리프팅 운동 중 최대 운동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Workouts (WorkoutID INT, MemberID INT, Duration INT, WorkoutType VARCHAR(20)); INSERT INTO Workouts (WorkoutID, MemberID, Duration, WorkoutType) VALUES (1, 1, 60, 'Yoga'), (2, 2, 90, 'Weightlifting'), (3, 3, 60, 'Yoga'), (4, 1, 45, 'Running'), (5, 2, 120, 'Weightlifting');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Duration) FROM Workouts WHERE WorkoutType = 'Weightlifting';"
    },
    {
        "instruction": "입력 텍스트: 각 해양 연구 프로젝트가 받은 총 자금액과 각 프로젝트별 기부자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ResearchProjects (id INT PRIMARY KEY, project VARCHAR(255), start_date DATE, end_date DATE); CREATE TABLE Funding (id INT PRIMARY KEY, project VARCHAR(255), funder VARCHAR(255), amount FLOAT, grant_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT rp.project, COUNT(DISTINCT f.funder) as funders_count, SUM(f.amount) as total_funding FROM ResearchProjects rp LEFT JOIN Funding f ON rp.project = f.project GROUP BY rp.project;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 'ETH' 네트워크에서 'Tether' 디지털 자산의 일일 거래량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE daily_transaction_volume (date DATE, asset_id INT, volume DECIMAL(10,2)); INSERT INTO daily_transaction_volume (date, asset_id, volume) VALUES ('2022-01-01', 1, 5000), ('2022-01-02', 1, 5500), ('2022-01-03', 1, 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dt.date, SUM(dt.volume) as daily_volume FROM daily_transaction_volume dt WHERE dt.asset_id = 1 AND dt.date >= CURDATE() - INTERVAL 30 DAY GROUP BY dt.date;"
    },
    {
        "instruction": "입력 텍스트: 해양 생물 종 중 Cnidaria 문에 속하는 종들의 분류군별로 기록된 최소 수심은 무엇인가요?\n\nDDL statements:\nCREATE TABLE marine_species (species_id INT, species_name VARCHAR(100), max_depth FLOAT, phylum VARCHAR(50), class VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT class, MIN(max_depth) FROM marine_species WHERE phylum = 'Cnidaria' GROUP BY class;"
    },
    {
        "instruction": "입력 텍스트: \"education_programs\" 및 \"countries\" 테이블에 있는 지역별 커뮤니티 교육 프로그램의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE education_programs (program_name VARCHAR(255), country VARCHAR(255)); CREATE TABLE countries (country VARCHAR(255), region VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c1.region, COUNT(e1.program_name) as num_programs FROM education_programs e1 INNER JOIN countries c1 ON e1.country = c1.country GROUP BY c1.region;"
    },
    {
        "instruction": "입력 텍스트: 직원들의 평균 나이는 얼마입니까?\n\nDDL statements:\nEmployeeDemographics\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM EmployeeDemographics;"
    },
    {
        "instruction": "입력 텍스트: 남해에서 실행된 오염 통제 계획들의 평균 연도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE pollution_control_initiatives (id INT, name TEXT, location TEXT, year INT); INSERT INTO pollution_control_initiatives (id, name, location, year) VALUES (1, 'Ocean Plastic Reduction Project', 'Southern Ocean', 2016), (2, 'Coral Reef Protection Program', 'Southern Ocean', 2017), (3, 'Marine Life Restoration Effort', 'Southern Ocean', 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(year) FROM pollution_control_initiatives WHERE location = 'Southern Ocean';"
    },
    {
        "instruction": "입력 텍스트: music_streaming 테이블에서 가장 많은 노래를 가진 상위 5명의 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE artist_info (artist_id INT, artist VARCHAR(30), genre VARCHAR(20)); CREATE TABLE music_streaming (song_id INT, artist_id INT, album VARCHAR(30), length FLOAT); ALTER TABLE music_streaming ADD CONSTRAINT fk_artist FOREIGN KEY (artist_id) REFERENCES artist_info(artist_id);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist, COUNT(*) as song_count FROM music_streaming m INNER JOIN artist_info a ON m.artist_id = a.artist_id GROUP BY artist ORDER BY song_count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 조지아의 농촌 지역에 거주하는 당뇨병 진단을 받은 주민들의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE georgia_rural_residents (resident_id INT, rural_area VARCHAR(255), age INT, diabetes BOOLEAN); INSERT INTO georgia_rural_residents VALUES (1, 'Rural Area 1', 45, true), (2, 'Rural Area 2', 50, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM georgia_rural_residents WHERE rural_area IS NOT NULL AND diabetes = true;"
    },
    {
        "instruction": "입력 텍스트: 리더십 훈련 프로그램을 완료한 직원들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Age INT, LeadershipTraining BOOLEAN); INSERT INTO Employees (EmployeeID, Age, LeadershipTraining) VALUES (1, 30, TRUE), (2, 25, FALSE), (3, 40, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Employees WHERE LeadershipTraining = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 야외 이벤트에서 처음 참석한 참가자의 총 인원 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Events (EventID INT, EventType VARCHAR(50), Venue VARCHAR(50)); CREATE TABLE Attendance (AttendanceID INT, EventID INT, AudienceID INT, IsFirstAttendee BOOLEAN); INSERT INTO Events (EventID, EventType, Venue) VALUES (1, 'Concert', 'Park'), (2, 'Play', 'Theater'), (3, 'Exhibit', 'Museum'); INSERT INTO Attendance (AttendanceID, EventID, AudienceID, IsFirstAttendee) VALUES (1, 1, 1, true), (2, 1, 2, false), (3, 2, 1, false), (4, 2, 3, true), (5, 3, 2, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Attendance a INNER JOIN Events e ON a.EventID = e.EventID WHERE e.Venue = 'Park' AND a.IsFirstAttendee = true;"
    },
    {
        "instruction": "입력 텍스트: 북극해의 선박을 카테고리별로 세어보세요\n\nDDL statements:\nCREATE TABLE arctic_vessels (vessel_id INT, vessel_name VARCHAR(255), category VARCHAR(255), longitude DECIMAL(9,6), latitude DECIMAL(9,6)); CREATE VIEW arctic_vessels_arctic AS SELECT * FROM arctic_vessels WHERE longitude BETWEEN -180 AND -60 AND latitude BETWEEN 60 AND 90;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, COUNT(*) FROM arctic_vessels_arctic GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 하루 중 운동 세션의 피크 시간을 파악하세요.\n\nDDL statements:\nCREATE TABLE workout_sessions (id INT, user_id INT, session_date DATE, start_time TIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(HOUR FROM start_time) as hour, COUNT(*) as session_count FROM workout_sessions GROUP BY hour ORDER BY session_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 가장 높은 청구 금액을 가진 보험 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Claims (PolicyID int, ClaimAmount int, PolicyType varchar(20), SaleState varchar(20)); INSERT INTO Claims (PolicyID, ClaimAmount, PolicyType, SaleState) VALUES (1, 500, 'Auto', 'California'), (2, 2000, 'Home', 'New York'), (3, 800, 'Auto', 'Texas'), (4, 1500, 'Home', 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SaleState, PolicyType, MAX(ClaimAmount) OVER (PARTITION BY SaleState) as MaxClaimAmount FROM Claims;"
    },
    {
        "instruction": "입력 텍스트: MA에서 식품 안전 검사에 통과한 레스토랑은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE ma_restaurants (restaurant_id INT, state VARCHAR(255)); INSERT INTO ma_restaurants (restaurant_id, state) VALUES (1, 'MA'), (2, 'NY'), (3, 'MA'); CREATE TABLE ma_inspections (restaurant_id INT, state VARCHAR(255), inspection_date DATE, result VARCHAR(255)); INSERT INTO ma_inspections (restaurant_id, state, inspection_date, result) VALUES (1, 'MA', '2021-01-01', 'Pass'), (2, 'NY', '2021-01-02', 'Fail'), (3, 'MA', '2021-01-03', 'Pass');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(ma_restaurants.restaurant_id) FROM ma_restaurants INNER JOIN ma_inspections ON ma_restaurants.restaurant_id = ma_inspections.restaurant_id WHERE ma_restaurants.state = 'MA' AND ma_inspections.result = 'Pass';"
    },
    {
        "instruction": "입력 텍스트: 각 선단 관리 회사가 소유한 선박 수를 내림차순으로 정렬하여 순위를 매기고, 선박이 없는 회사도 포함하여 나타내세요.\n\nDDL statements:\nCREATE TABLE fleets(fleet_id INT, company TEXT);CREATE TABLE vessels(vessel_id INT, fleet_id INT, name TEXT);INSERT INTO fleets VALUES (1,'Company A'),(2,'Company B'),(3,'Company C');INSERT INTO vessels VALUES (1,1,'Vessel 1'),(2,1,'Vessel 2'),(3,2,'Vessel 3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.company, COUNT(v.fleet_id) as num_vessels FROM fleets f LEFT JOIN vessels v ON f.fleet_id = v.fleet_id GROUP BY f.company ORDER BY num_vessels DESC;"
    },
    {
        "instruction": "입력 텍스트: 보호 구역 내 각 동물 종의 최대 개체 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE animal_population (id INT, species VARCHAR(30), population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, MAX(population) FROM animal_population GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 투자한 고객이 소유한 계좌의 총 잔액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE clients (id INT, registered_date DATE);CREATE TABLE investments (id INT, client_id INT, investment_date DATE);CREATE TABLE accounts (id INT, client_id INT, balance FLOAT); INSERT INTO clients (id, registered_date) VALUES (1, '2020-01-01'), (2, '2019-01-01'), (3, '2018-01-01'); INSERT INTO investments (id, client_id, investment_date) VALUES (1, 1, '2021-02-01'), (2, 1, '2021-03-01'), (3, 2, '2020-04-01'), (4, 3, '2019-05-01'), (5, 4, '2018-06-01'), (6, 1, '2021-02-02'), (7, 1, '2021-02-03'); INSERT INTO accounts (id, client_id, balance) VALUES (1, 1, 10000), (2, 1, 12000), (3, 2, 15000), (4, 3, 8000), (5, 4, 18000), (6, 1, 9000), (7, 1, 11000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(balance) FROM accounts a JOIN clients c ON a.client_id = c.id WHERE c.id IN (SELECT client_id FROM investments WHERE investment_date >= c.registered_date + INTERVAL '1 week');"
    },
    {
        "instruction": "입력 텍스트: USA'에서 금 인증을 받은 모든 친환경 건물의 이름과 인증 등급을 표시합니다.\n\nDDL statements:\nCREATE TABLE GreenBuildings (id INT, building_name VARCHAR(100), certification_level VARCHAR(50), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT building_name, certification_level FROM GreenBuildings WHERE country = 'USA' AND certification_level = 'Gold';"
    },
    {
        "instruction": "입력 텍스트: 완료된 프로젝트의 기록을 milestones 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE milestones (id INT, project_id INT, title VARCHAR(255), date DATE, description TEXT, status VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM milestones WHERE status = 'completed';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 작물 유형별로 사용된 비료의 총량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fertilizer_usage (crop_type TEXT, application_date DATE, amount_used INTEGER);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crop_type, SUM(amount_used) as total_amount_used FROM fertilizer_usage WHERE application_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY crop_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 음악 콘서트에 참석한 관객들의 평균 연령은 무엇인가요?\n\nDDL statements:\nCREATE TABLE music_concerts (concert_id INT, concert_name VARCHAR(50), concert_date DATE); CREATE TABLE audience_demographics (visitor_id INT, concert_id INT, age INT); INSERT INTO music_concerts (concert_id, concert_name, concert_date) VALUES (1, 'Classical Music Concert', '2022-01-01'), (2, 'Jazz Night', '2022-02-10'), (3, 'World Music Festival', '2022-12-31'); INSERT INTO audience_demographics (visitor_id, concert_id, age) VALUES (1, 1, 45), (2, 1, 30), (3, 2, 50), (4, 2, 60), (5, 3, 25), (6, 3, 35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) as avg_age FROM audience_demographics d INNER JOIN music_concerts m ON d.concert_id = m.concert_id WHERE m.concert_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: Least Concern' 보전 상태를 가진 모든 해양 생물 종을 나열합니다.\n\nDDL statements:\nCREATE TABLE species (id INT, name VARCHAR(255), conservation_status VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM species WHERE conservation_status = 'Least Concern';"
    },
    {
        "instruction": "입력 텍스트: 사용자들이 소유한 기기의 평균 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Users (UserID INT, Devices INT); INSERT INTO Users (UserID, Devices) VALUES (1, 3), (2, 2), (3, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Devices) FROM Users;"
    },
    {
        "instruction": "입력 텍스트: 바넷 셰일에 있는 우물의 최대 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Barnett_Shale (well_id INT, production_bopd FLOAT); INSERT INTO Barnett_Shale (well_id, production_bopd) VALUES (1, 200), (2, 250), (3, 300), (4, 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(production_bopd) FROM Barnett_Shale WHERE well_id IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 1000명 미만의 사용자를 가진 언어에 대한 기록을 삭제합니다\n\nDDL statements:\nCREATE TABLE languages (id INT, language VARCHAR(50), region VARCHAR(50), num_speakers INT); INSERT INTO languages (id, language, region, num_speakers) VALUES (1, 'Livonian', 'Latvia', 0), (2, 'Ubykh', 'Turkey', 0), (3, 'Eyak', 'USA', 0)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM languages WHERE num_speakers < 1000"
    },
    {
        "instruction": "입력 텍스트: 국가별 에너지 저장 용량과 에너지 효율의 교차 분석을 제공합니다.\n\nDDL statements:\nCREATE TABLE energy_storage (country VARCHAR(20), capacity INT);CREATE TABLE energy_efficiency (country VARCHAR(20), efficiency INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.country, e.capacity, ee.efficiency FROM energy_storage e JOIN energy_efficiency ee ON e.country = ee.country;"
    },
    {
        "instruction": "입력 텍스트: 2019년 호주에서 시행된 수자원 보전 활동은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE conservation_initiatives (id INT, country VARCHAR(50), year INT, initiatives INT); INSERT INTO conservation_initiatives (id, country, year, initiatives) VALUES (1, 'Australia', 2019, 45), (2, 'Australia', 2018, 40), (3, 'Canada', 2019, 55), (4, 'Canada', 2018, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(initiatives) FROM conservation_initiatives WHERE country = 'Australia' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 지역별 커뮤니티 보건 근로자 당 평균 문화 역량 훈련 세션 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE cultural_competency_training (region VARCHAR(255), sessions INT); CREATE TABLE community_health_workers (region VARCHAR(255), training_level VARCHAR(255), workers INT); INSERT INTO cultural_competency_training (region, sessions) VALUES ('Northeast', 400), ('Southeast', 500), ('Midwest', 350), ('West', 600); INSERT INTO community_health_workers (region, training_level, workers) VALUES ('Northeast', 'Beginner', 200), ('Northeast', 'Intermediate', 150), ('Northeast', 'Advanced', 100), ('Southeast', 'Beginner', 250), ('Southeast', 'Intermediate', 200), ('Southeast', 'Advanced', 100), ('Midwest', 'Beginner', 180), ('Midwest', 'Intermediate', 120), ('Midwest', 'Advanced', 80), ('West', 'Beginner', 300), ('West', 'Intermediate', 250), ('West', 'Advanced', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.region, AVG(c.sessions / c.workers) FROM cultural_competency_training c INNER JOIN community_health_workers h ON c.region = h.region GROUP BY c.region;"
    },
    {
        "instruction": "입력 텍스트: VesselD'에 대한 새로운 안전 사고를 2022년 02월 05일에 추가하세요.\n\nDDL statements:\nCREATE TABLE Vessels (Id INT, Name VARCHAR(50), Type VARCHAR(50), MaxSpeed DECIMAL(5,2)); CREATE TABLE SafetyIncidents (Id INT, VesselId INT, IncidentDate DATE, Description VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO SafetyIncidents (VesselId, IncidentDate) VALUES ((SELECT Id FROM Vessels WHERE Name = 'VesselD'), '2022-02-05');"
    },
    {
        "instruction": "입력 텍스트: 2019년에 생산된 희토류 원소는 몇 종류입니까?\n\nDDL statements:\nCREATE TABLE production_rare_earth_elements (year INT, element VARCHAR(20)); INSERT INTO production_rare_earth_elements (year, element) VALUES (2015, 'Neodymium'), (2016, 'Praseodymium'), (2017, 'Dysprosium'), (2018, 'Terbium'), (2019, 'Gadolinium'), (2020, 'Lanthanum'), (2021, 'Cerium');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT element) FROM production_rare_earth_elements WHERE year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 동물 실험을 하지 않는 화장품 제품은 몇 개이며 파라벤을 포함하지 않나요?\n\nDDL statements:\nCREATE TABLE cosmetic_formula (product_id INT, has_parabens BOOLEAN); INSERT INTO cosmetic_formula (product_id, has_parabens) VALUES (1, false), (2, true), (3, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM cosmetic_products cp JOIN cosmetic_formula cf ON cp.product_id = cf.product_id WHERE cp.is_cruelty_free = false AND cf.has_parabens = false;"
    },
    {
        "instruction": "입력 텍스트: 2021년 지속 가능한 건축 프로젝트에 대한 총 노동 비용이 가장 높은 상위 5개 도시를 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE city_labor_cost (city VARCHAR(50), labor_cost DECIMAL(10,2), project_type VARCHAR(20), year INT); INSERT INTO city_labor_cost (city, labor_cost, project_type, year) VALUES ('San Francisco', 500000.00, 'Sustainable', 2021), ('Los Angeles', 600000.00, 'Sustainable', 2021), ('New York', 700000.00, 'Sustainable', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(labor_cost) as total_labor_cost FROM city_labor_cost WHERE project_type = 'Sustainable' AND year = 2021 GROUP BY city ORDER BY total_labor_cost DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 남미에서 가장 인기 있는 트렌드 중 가장 낮은 인기 점수를 가진 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE trend_popularity (id INT, trend VARCHAR(255), forecast_date DATE, popularity FLOAT, region VARCHAR(255)); INSERT INTO trend_popularity (id, trend, forecast_date, popularity, region) VALUES (1, 'neutrals', '2022-01-01', 0.65, 'South America'); INSERT INTO trend_popularity (id, trend, forecast_date, popularity, region) VALUES (2, 'color_blocking', '2022-02-01', 0.55, 'South America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, trend, MIN(popularity) as min_popularity FROM trend_popularity WHERE region = 'South America' GROUP BY region, trend;"
    },
    {
        "instruction": "입력 텍스트: 미국과 러시아 간의 방위 계약 협상과 관련된 지정학적 위험 평가 점수를 나열합니다.\n\nDDL statements:\nCREATE TABLE ContractNegotiations (id INT, country1 VARCHAR(50), country2 VARCHAR(50), date DATE);CREATE TABLE RiskAssessments (id INT, country VARCHAR(50), risk_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ContractNegotiations.country1, ContractNegotiations.country2, ContractNegotiations.date, RiskAssessments.risk_score FROM ContractNegotiations INNER JOIN RiskAssessments ON (ContractNegotiations.country1 = RiskAssessments.country OR ContractNegotiations.country2 = RiskAssessments.country) WHERE (ContractNegotiations.country1 = 'US' AND ContractNegotiations.country2 = 'Russia') OR (ContractNegotiations.country1 = 'Russia' AND ContractNegotiations.country2 = 'US');"
    },
    {
        "instruction": "입력 텍스트: 3번 노선의 가장 늦은 도착 시간은 언제인가요?\n\nDDL statements:\nCREATE TABLE routes (route_id INT, name VARCHAR(255)); INSERT INTO routes (route_id, name) VALUES (3, 'Route 3'); CREATE TABLE trips (trip_id INT, route_id INT, arrival_time TIME); INSERT INTO trips (trip_id, route_id, arrival_time) VALUES (1, 3, '08:45:00'), (2, 3, '09:45:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(arrival_time) FROM trips WHERE route_id = 3;"
    },
    {
        "instruction": "입력 텍스트: 숙박 시설의 모든 지속 가능한 관광 인증과 그에 해당하는 기준을 나열하세요.\n\nDDL statements:\nCREATE TABLE certifications (hotel_id INT, certification VARCHAR(50), criteria VARCHAR(255)); INSERT INTO certifications (hotel_id, certification, criteria) VALUES (1, 'Green Key', 'Energy and water conservation, waste management, and environmentally friendly operations'), (2, 'Green Globe', 'Sustainable management, social and environmental responsibility, and cultural heritage protection'), (3, 'Green Seal', 'Sustainable operations, waste minimization, and environmentally friendly products');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT certification, criteria FROM certifications;"
    },
    {
        "instruction": "입력 텍스트: 가장 성공적인 작전을 수행한 상위 세 개의 정보 기관의 국장들은 누구이며, 이러한 작전들의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE intelligence_agency (id INT, name VARCHAR(255), director VARCHAR(255)); CREATE TABLE operation (id INT, agency_id INT, name VARCHAR(255), success_level INT); INSERT INTO intelligence_agency (id, name, director) VALUES (1, 'CIA', 'James Brown'); INSERT INTO operation (id, agency_id, name, success_level) VALUES (1, 1, 'Operation Red', 90), (2, 1, 'Operation Blue', 95);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.director, o.name FROM operation o JOIN intelligence_agency i ON o.agency_id = i.id ORDER BY o.success_level DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 500000 이상의 예산을 가진 모든 사이버보안 프로젝트의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE CybersecurityBudget (id INT, project VARCHAR(100), budget FLOAT); INSERT INTO CybersecurityBudget (id, project, budget) VALUES (1, 'Project1', 250000.00); INSERT INTO CybersecurityBudget (id, project, budget) VALUES (2, 'Project2', 1000000.00); INSERT INTO CybersecurityBudget (id, project, budget) VALUES (3, 'Project3', 700000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project FROM CybersecurityBudget WHERE budget > 500000;"
    },
    {
        "instruction": "입력 텍스트: animals' 테이블에서 id가 2인 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), species VARCHAR(50), population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM animals WHERE id = 2;"
    },
    {
        "instruction": "입력 텍스트: 생물공정 공학 기술과 해당 비용을 고유하게 보여주세요\n\nDDL statements:\nCREATE TABLE techniques (id INT, name VARCHAR(50), description VARCHAR(50), cost DECIMAL(10, 2)); INSERT INTO techniques (id, name, description, cost) VALUES (1, 'Cell Culture', 'Mammalian cell culture', 1000.00); INSERT INTO techniques (id, name, description, cost) VALUES (2, 'Fermentation', 'Microbial fermentation', 2000.00); CREATE TABLE bioprocess_engineering (id INT, technique_id INT, project VARCHAR(50)); INSERT INTO bioprocess_engineering (id, technique_id, project) VALUES (1, 1, 'Enzyme Production'); INSERT INTO bioprocess_engineering (id, technique_id, project) VALUES (2, 2, 'Enzyme Production');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT t.name, t.cost FROM techniques t JOIN bioprocess_engineering be ON t.id = be.technique_id GROUP BY t.name, t.cost;"
    },
    {
        "instruction": "입력 텍스트: cargo_tracking' 테이블에서 모든 고유 화물 유형과 각각의 총 중량을 나열하세요.\n\nDDL statements:\nCREATE TABLE cargo_tracking (cargo_id INT, cargo_type TEXT, weight FLOAT, vessel_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cargo_type, SUM(weight) FROM cargo_tracking GROUP BY cargo_type;"
    },
    {
        "instruction": "입력 텍스트: 분기별로 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DonationDates (Id INT, DonationId INT, DonationDate DATE); INSERT INTO DonationDates VALUES (1, 1, '2022-01-01'), (2, 1, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_TRUNC('quarter', DonationDate) as Quarter, SUM(Amount) as TotalDonated FROM DonationDates JOIN Donations ON DonationDates.DonationId = Donations.Id GROUP BY Quarter;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 각 달에 발행된 여행 경보 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists travel_advisory (advisory_id INT, country VARCHAR(50), issue_date DATE); INSERT INTO travel_advisory (advisory_id, country, issue_date) VALUES (1, 'France', '2022-02-01'), (2, 'Japan', '2022-03-01'), (3, 'Canada', '2022-01-01'), (4, 'Egypt', '2022-04-01'), (5, 'Australia', '2022-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM issue_date) as month, country, COUNT(*) as num_advisories FROM travel_advisory GROUP BY month, country;"
    },
    {
        "instruction": "입력 텍스트: 농장 테이블에 새로운 농장을 추가하세요.\n\nDDL statements:\nCREATE TABLE farms (id INT, name VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO farms (id, name, location) VALUES (4, 'Green Acres', 'Springfield, IL');"
    },
    {
        "instruction": "입력 텍스트: 5편 이상의 영화에 출연한 남자 배우는 누구인가요?\n\nDDL statements:\nCREATE TABLE actors (name VARCHAR(255), gender VARCHAR(10), movies INTEGER); INSERT INTO actors (name, gender, movies) VALUES ('ActorA', 'Female', 3), ('ActorB', 'Male', 15), ('ActorC', 'Female', 2), ('ActorD', 'Male', 20), ('ActorE', 'Female', 8), ('ActorF', 'Male', 7), ('ActorG', 'Female', 6), ('ActorH', 'Male', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM actors WHERE gender = 'Male' AND movies > 5;"
    },
    {
        "instruction": "입력 텍스트: 참여율이 가장 높은 상위 2개 주는 어디인가요?\n\nDDL statements:\nCREATE TABLE public_participation (participation_id INT, participant_count INT, state VARCHAR(255), region VARCHAR(255)); INSERT INTO public_participation (participation_id, participant_count, state, region) VALUES (1, 500, 'California', 'West'), (2, 600, 'Texas', 'South');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(participant_count) FROM public_participation GROUP BY state ORDER BY AVG(participant_count) DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 특정 날짜 범위 동안 각 지구별 범죄 사건 및 긴급 호출 건수를 가져옵니다.\n\nDDL statements:\nCREATE TABLE districts (did INT, district_name VARCHAR(255)); INSERT INTO districts (did, district_name) VALUES (1, 'Downtown'), (2, 'Uptown'), (3, 'Harbor'); CREATE TABLE crime_incidents (incident_id INT, did INT, incident_type VARCHAR(255), incident_date DATE); INSERT INTO crime_incidents (incident_id, did, incident_type, incident_date) VALUES (1, 1, 'Theft', '2022-01-01'), (2, 2, 'Vandalism', '2022-01-02'), (3, 3, 'Assault', '2022-01-03'); CREATE TABLE emergency_calls (call_id INT, did INT, response_time INT, call_date DATE); INSERT INTO emergency_calls (call_id, did, response_time, call_date) VALUES (1, 1, 45, '2022-01-01'), (2, 2, 62, '2022-01-02'), (3, 3, 55, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.district_name, COUNT(ci.incident_id) as total_incidents, COUNT(ec.call_id) as total_calls FROM districts d LEFT JOIN crime_incidents ci ON d.did = ci.did LEFT JOIN emergency_calls ec ON d.did = ec.did WHERE ci.incident_date BETWEEN '2022-01-01' AND '2022-01-03' AND ec.call_date BETWEEN '2022-01-01' AND '2022-01-03' GROUP BY d.district_name;"
    },
    {
        "instruction": "입력 텍스트: FieldD'에서 '유기농' 작물의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE FieldD_Info (crop_type VARCHAR(50), is_organic BOOLEAN); INSERT INTO FieldD_Info (crop_type, is_organic) VALUES ('Corn', TRUE), ('Soybeans', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE is_organic)) * 100.0 / COUNT(*) FROM FieldD_Info WHERE crop_type = 'Organic';"
    },
    {
        "instruction": "입력 텍스트: 2021년 1분기에 각 프로그램에 몇 명의 자원봉사자가 등록했습니까?\n\nDDL statements:\nCREATE TABLE volunteers (id INT, volunteer_name TEXT, program TEXT, signup_date DATE); INSERT INTO volunteers (id, volunteer_name, program, signup_date) VALUES (1, 'Alice', 'Feeding the Hungry', '2021-01-05'); INSERT INTO volunteers (id, volunteer_name, program, signup_date) VALUES (2, 'Bob', 'Tree Planting', '2021-03-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, COUNT(volunteer_name) as num_volunteers FROM volunteers WHERE signup_date >= '2021-01-01' AND signup_date < '2021-04-01' GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: 아프리카'에서 '농업 혁신' 프로그램으로부터 가장 많은 자금을 받은 상위 5명의 농부는 누구인가요?\n\nDDL statements:\nCREATE TABLE Agricultural_Innovation(farmer_id INT, farmer_name VARCHAR(50), country VARCHAR(50), funding FLOAT); INSERT INTO Agricultural_Innovation(farmer_id, farmer_name, country, funding) VALUES (1, 'John Doe', 'Kenya', 10000), (2, 'Jane Smith', 'Nigeria', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT farmer_name, SUM(funding) as total_funding FROM Agricultural_Innovation WHERE country = 'Africa' GROUP BY farmer_name ORDER BY total_funding DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 현재 달에 기부를 받은 단체별로 평균 기부 금액을 계산하세요.\n\nDDL statements:\nCREATE TABLE organization (org_id INT, org_name VARCHAR(255)); CREATE TABLE donation (don_id INT, donor_id INT, org_id INT, donation_amount INT, donation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT org_id, AVG(donation_amount) AS avg_donation_amount FROM donation WHERE EXTRACT(MONTH FROM donation_date) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM donation_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY org_id;"
    },
    {
        "instruction": "입력 텍스트: PuzzleParadise'를 플레이하지 않은 플레이어를 삭제하세요.\n\nDDL statements:\nplayer (player_id, name, email, age, gender, country, total_games_played); game (game_id, name, genre, release_year); player_game (player_id, game_id, last_played)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM player WHERE player_id NOT IN (SELECT player_id FROM player_game WHERE game_id = (SELECT game_id FROM game WHERE name = 'PuzzleParadise'))"
    },
    {
        "instruction": "입력 텍스트: 각 학과별 교수당 평균 연구비 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE department (id INT, name VARCHAR(255)); CREATE TABLE faculty (id INT, department_id INT, name VARCHAR(255)); CREATE TABLE grant (id INT, faculty_id INT, year INT, amount DECIMAL(10, 2)); INSERT INTO department (id, name) VALUES (1, 'Engineering'), (2, 'Humanities'); INSERT INTO faculty (id, department_id, name) VALUES (1, 1, 'John Doe'), (2, 1, 'Jane Smith'), (3, 2, 'Bob Johnson'); INSERT INTO grant (id, faculty_id, year, amount) VALUES (1, 1, 2019, 50000), (2, 1, 2020, 75000), (3, 2, 2019, 30000), (4, 3, 2019, 25000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department.name, AVG(COUNT(grant.id)) as avg_grants_per_faculty FROM department LEFT JOIN faculty ON department.id = faculty.department_id LEFT JOIN grant ON faculty.id = grant.faculty_id GROUP BY department.name;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 건조된 컨테이너선의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE fleets (fleet_id INT, ship_name VARCHAR(50), ship_type VARCHAR(50), build_year INT); INSERT INTO fleets VALUES (1, 'MSC Maya', 'Container Ship', 2015); INSERT INTO fleets VALUES (2, 'OOCL Hong Kong', 'Container Ship', 2017); INSERT INTO fleets VALUES (3, 'Ever Given', 'Container Ship', 2010);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM fleets WHERE ship_type = 'Container Ship' AND build_year < 2010;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 진행 중인 모든 임상 시험을 나열합니다.\n\nDDL statements:\nCREATE TABLE clinical_trials (country TEXT, trial_status TEXT); INSERT INTO clinical_trials (country, trial_status) VALUES ('India', 'In Progress');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM clinical_trials WHERE country = 'India' AND trial_status = 'In Progress';"
    },
    {
        "instruction": "입력 텍스트: 각 주별 병원 수를 나타내세요\n\nDDL statements:\nCREATE TABLE hospitals (hospital_id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO hospitals (hospital_id, name, state) VALUES (1, 'Johns Hopkins Hospital', 'Maryland'); INSERT INTO hospitals (hospital_id, name, state) VALUES (2, 'Massachusetts General Hospital', 'Massachusetts');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM hospitals GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 도쿄 지하철의 각 노선별 최대 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE route_fares (route_id INT, fare DECIMAL(5,2)); INSERT INTO route_fares (route_id, fare) VALUES (1, 3.10), (2, 2.40), (3, 4.50), (4, 1.80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT route_id, MAX(fare) as max_fare FROM route_fares GROUP BY route_id;"
    },
    {
        "instruction": "입력 텍스트: 가장 비용이 많이 드는 캠페인은 무엇인가요?\n\nDDL statements:\nCREATE TABLE campaigns (id INT, name VARCHAR(50), location VARCHAR(50), budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM campaigns ORDER BY budget DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 2021년 'Fundraising Event'의 총 기부금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE events (id INT, event_name TEXT, event_date DATE, donation_amount DECIMAL); INSERT INTO events (id, event_name, event_date, donation_amount) VALUES (1, 'Fundraising Event', '2021-12-31', 15000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM events WHERE event_name = 'Fundraising Event' AND YEAR(event_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 채용된 직원들을 포함하여 성별에 따른 평균 급여를 계산하세요.\n\nDDL statements:\nCREATE TABLE salaries(emp_id INT, gender VARCHAR(10), salary DECIMAL(10, 2)); INSERT INTO salaries VALUES (1, 'Female', 70000), (2, 'Male', 80000), (3, 'Non-binary', 75000), (4, 'Female', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.gender, AVG(s.salary) as avg_salary  FROM salaries s JOIN employees e ON s.emp_id = e.emp_id WHERE e.hire_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.gender;"
    },
    {
        "instruction": "입력 텍스트: 대서양의 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE oceans (name TEXT, depth FLOAT, surface_area FLOAT); INSERT INTO oceans (name, depth, surface_area) VALUES ('Pacific Ocean', 4000, 165200000); INSERT INTO oceans (name, depth, surface_area) VALUES ('Atlantic Ocean', 3500, 82300000); INSERT INTO oceans (name, depth, surface_area) VALUES ('Indian Ocean', 3500, 73400000); INSERT INTO oceans (name, depth, surface_area) VALUES ('Southern Ocean', 3000, 20300000); INSERT INTO oceans (name, depth, surface_area) VALUES ('Arctic Ocean', 1500, 14090000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT surface_area FROM oceans WHERE name = 'Atlantic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 국가에서 발생한 사이버 보안 사건의 총 건수와 그 유형을 국가와 사건 유형별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE country (id INT, name VARCHAR(255)); INSERT INTO country (id, name) VALUES (1, 'USA'), (2, 'China'), (3, 'Russia'); CREATE TABLE incident (id INT, country_id INT, incident_type VARCHAR(255), timestamp TIMESTAMP); INSERT INTO incident (id, country_id, incident_type, timestamp) VALUES (1, 1, 'Phishing', '2022-01-01 00:00:00'), (2, 1, 'Malware', '2022-01-02 00:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, i.incident_type, COUNT(i.id) as num_incidents FROM incident i JOIN country c ON i.country_id = c.id WHERE i.timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 YEAR) GROUP BY c.name, i.incident_type;"
    },
    {
        "instruction": "입력 텍스트: 특정 수면 품질 등급을 가진 사용자들의 평균 수면 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Sleep (id INT, user_id INT, duration INT, quality TEXT); INSERT INTO Sleep (id, user_id, duration, quality) VALUES (1, 1, 8, 'good'), (2, 2, 6, 'poor');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(duration) FROM Sleep WHERE quality = 'good';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 평균 소득이 가장 높은 상위 5개 도시는 무엇인가요?\n\nDDL statements:\nCREATE TABLE us_cities (city VARCHAR(50), state VARCHAR(2), avg_income DECIMAL(10,2)); INSERT INTO us_cities (city, state, avg_income) VALUES ('Seattle', 'WA', 85000.00), ('San Francisco', 'CA', 95000.00), ('Boston', 'MA', 75000.00), ('Denver', 'CO', 79000.00), ('Portland', 'OR', 74000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, avg_income FROM us_cities ORDER BY avg_income DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 응급 의료 서비스의 평균 응답 시간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE EmergencyServices (id INT, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255), response_time INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) as 'average_response_time' FROM EmergencyServices WHERE type = 'Emergency Medical Services';"
    },
    {
        "instruction": "입력 텍스트: 멕시코만에서 발생한 기름 유출의 평균 크기는 얼마입니까?\n\nDDL statements:\nCREATE TABLE oil_spills (spill_name VARCHAR(255), location VARCHAR(255), size DECIMAL(8,2)); INSERT INTO oil_spills (spill_name, location, size) VALUES ('Deepwater Horizon', 'Gulf of Mexico', 4200000.00), ('Ixtoc I', 'Gulf of Mexico', 1400000.00), ('Athos I', 'Gulf of Mexico', 700000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(size) FROM oil_spills WHERE location = 'Gulf of Mexico';"
    },
    {
        "instruction": "입력 텍스트: donations' 테이블에서 지난 분기에 기부한 고유 기부자 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_name VARCHAR(50), donation_date DATE, amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT donor_name) FROM donations WHERE donation_date >= DATEADD(quarter, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 미디어'라는 단어를 포함하는 기사들의 최소 단어 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Articles (id INT, title VARCHAR(255), content TEXT, word_count INT); INSERT INTO Articles (id, title, content, word_count) VALUES (1, 'Media Literacy', 'Media literacy is important...', 300), (2, 'Media Representation', 'Media representation matters...', 500), (3, 'Media Bias', 'Media bias is a concern...', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(word_count) as min_word_count FROM Articles WHERE title LIKE '%media%' OR content LIKE '%media%';"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 가장 인기 있는 문화 이벤트 카테고리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE CulturalEvents (EventID INT, EventName VARCHAR(50), EventCategory VARCHAR(50), EventLocation VARCHAR(50)); INSERT INTO CulturalEvents (EventID, EventName, EventCategory, EventLocation) VALUES (1, 'EventA', 'Music', 'Japan'), (2, 'EventB', 'Theater', 'India'), (3, 'EventC', 'Dance', 'China'), (4, 'EventD', 'Art', 'Vietnam'), (5, 'EventE', 'Music', 'North Korea'), (6, 'EventF', 'Theater', 'Indonesia'), (7, 'EventG', 'Dance', 'Malaysia'), (8, 'EventH', 'Art', 'Thailand');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EventCategory, COUNT(*) as Popularity FROM CulturalEvents WHERE EventLocation LIKE '%%Asia' GROUP BY EventCategory ORDER BY Popularity DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 국가별 프로메튬의 평균 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production_data (country VARCHAR(255), element VARCHAR(255), production INT); INSERT INTO production_data (country, element, production) VALUES ('Nigeria', 'Promethium', 80), ('South Africa', 'Promethium', 110), ('Egypt', 'Promethium', 140);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(production) as avg_production FROM production_data WHERE element = 'Promethium' AND country IN ('Nigeria', 'South Africa', 'Egypt') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 농구에서 'Finals MVP' 상을 수상한 선수들의 평균 연봉은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Athletes (AthleteID INT PRIMARY KEY, Name VARCHAR(100), Sport VARCHAR(50), TeamID INT, Salary DECIMAL(10,2)); CREATE TABLE Awards (AwardID INT PRIMARY KEY, AthleteID INT, Award VARCHAR(50), Year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Athletes.Salary) FROM Athletes INNER JOIN Awards ON Athletes.AthleteID = Awards.AthleteID WHERE Awards.Award = 'Finals MVP' AND Athletes.Sport = 'Basketball';"
    },
    {
        "instruction": "입력 텍스트: 인도'의 각 주에서 완료된 커뮤니티 개발 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE community_development(id INT, state TEXT, initiative_name TEXT, completion_status TEXT); INSERT INTO community_development (id, state, initiative_name, completion_status) VALUES (1, 'Uttar Pradesh', 'Community Health Center', 'completed'); INSERT INTO community_development (id, state, initiative_name, completion_status) VALUES (2, 'Maharashtra', 'Women Empowerment Program', 'in progress');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM community_development WHERE completion_status = 'completed' AND state IN ('Uttar Pradesh', 'Maharashtra', 'West Bengal', 'Andhra Pradesh', 'Tamil Nadu', 'Karnataka', 'Gujarat', 'Rajasthan', 'Bihar', 'Madhya Pradesh') GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: renewable' 스키마에 있는 각 프로젝트 유형별로 재생 가능 에너지 프로젝트의 총 설치 용량을 확인하세요.\n\nDDL statements:\nCREATE TABLE renewable.projects (project_type VARCHAR(255), installed_capacity INT); INSERT INTO renewable.projects (project_type, installed_capacity) VALUES ('Wind', 5000), ('Solar', 7000), ('Wind', 6000), ('Hydro', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, SUM(installed_capacity) FROM renewable.projects GROUP BY project_type;"
    },
    {
        "instruction": "입력 텍스트: AI_for_social_good 테이블에서 project_category별로 구분한 프로젝트의 평균 total_cost는 무엇인가요?\n\nDDL statements:\nCREATE TABLE AI_for_social_good (project_id INT, project_category VARCHAR(255), total_cost FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_category, AVG(total_cost) OVER (PARTITION BY project_category) FROM AI_for_social_good;"
    },
    {
        "instruction": "입력 텍스트: 도시별로 구분된 각 기관의 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Organizations (OrganizationID int, OrganizationName text, City text); INSERT INTO Organizations (OrganizationID, OrganizationName, City) VALUES (1, 'Hope Foundation', 'New York'), (2, 'Compassion Coalition', 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT OrganizationID, City, SUM(DonationAmount) OVER (PARTITION BY City) FROM Donations JOIN DonationRecipients ON Donations.DonationID = DonationRecipients.DonationID JOIN Organizations ON DonationRecipients.OrganizationID = Organizations.OrganizationID;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 아시아 지역에서 분기별로 가장 높은 안전 사고 비율을 기록한 화학 제품 상위 5개를 나열하세요.\n\nDDL statements:\nCREATE TABLE safety_incident (incident_id INT, product_id INT, incident_date DATE, incident_type VARCHAR(255)); CREATE TABLE product (product_id INT, product_name VARCHAR(255), region_id INT); CREATE TABLE region (region_id INT, region_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_name, EXTRACT(QUARTER FROM incident_date) AS quarter, COUNT(incident_id) AS incident_count FROM safety_incident JOIN product ON safety_incident.product_id = product.product_id JOIN region ON product.region_id = region.region_id WHERE region_name = 'Asia' AND incident_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY product_name, EXTRACT(QUARTER FROM incident_date) ORDER BY incident_count DESC, quarter, product_name LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2018년까지 나이로비의 평균 수도 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE water_usage(city VARCHAR(20), year INT, consumption INT); INSERT INTO water_usage(city, year, consumption) VALUES ('Nairobi', 2015, 5000), ('Nairobi', 2016, 5500), ('Nairobi', 2017, 6000), ('Nairobi', 2018, 6500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(consumption) FROM water_usage WHERE city = 'Nairobi' AND year BETWEEN 2015 AND 2018;"
    },
    {
        "instruction": "입력 텍스트: 이더리움 스마트 계약에서 거래 건수가 1000건을 초과하는 계약에 대해서만 고려할 때 평균 가스 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ethereum_contracts (contract_address VARCHAR(42), gas_price DECIMAL(10,2), num_transactions INT); INSERT INTO ethereum_contracts (contract_address, gas_price, num_transactions) VALUES ('0x742d35Cc6634C0532925a3b844Bc454e4438f44e', 20, 1500), ('0x9c98e381edc5fe1004f486f35f5362cc2244e605', 50, 800), ('0xAb5801a7D398351b8be644b0c6013b3a10Ed615f', 30, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(gas_price) FROM ethereum_contracts WHERE num_transactions > 1000;"
    },
    {
        "instruction": "입력 텍스트: 지난 7일간의 일일 수익 추이는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE daily_revenue(date DATE, revenue INT); INSERT INTO daily_revenue VALUES ('2022-01-01', 1000), ('2022-01-02', 1200), ('2022-01-03', 1100), ('2022-01-04', 1300), ('2022-01-05', 1500), ('2022-01-06', 1600), ('2022-01-07', 1700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date, revenue, ROW_NUMBER() OVER (ORDER BY revenue DESC) as ranking FROM daily_revenue WHERE date >= CURRENT_DATE - INTERVAL '7 days' ORDER BY date;"
    },
    {
        "instruction": "입력 텍스트: 전기 버스의 평균 속도가 가장 빠른 상위 3개 도시를 찾으세요.\n\nDDL statements:\nCREATE TABLE cities (city_id INT, city_name VARCHAR(255), state VARCHAR(255), country VARCHAR(255)); INSERT INTO cities (city_id, city_name, state, country) VALUES (1, 'Seattle', 'WA', 'USA'), (2, 'New York', 'NY', 'USA'), (3, 'Los Angeles', 'CA', 'USA'); CREATE TABLE electric_buses (bus_id INT, city_id INT, avg_speed DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city_name, AVG(avg_speed) as avg_speed  FROM electric_buses eb JOIN cities c ON eb.city_id = c.city_id GROUP BY city_name ORDER BY avg_speed DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 현재 궤도에 있는 위성은 소유자별로 몇 개인가요?\n\nDDL statements:\nCREATE TABLE satellites_in_orbit (id INT, owner VARCHAR(255), satellite_name VARCHAR(255)); INSERT INTO satellites_in_orbit (id, owner, satellite_name) VALUES (1, 'OneWeb', 'OneWeb 1'), (2, 'SpaceX', 'Starlink 1'), (3, 'Planet Labs', 'Flock 3p 1'), (4, 'Iridium', 'Iridium NEXT 1');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT owner, COUNT(*) as total_satellites FROM satellites_in_orbit GROUP BY owner;"
    },
    {
        "instruction": "입력 텍스트: 2021년 차이나타운 지구에서 경찰 긴급 상황의 평균 대응 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE districts (id INT, name TEXT); INSERT INTO districts (id, name) VALUES (1, 'Chinatown'), (2, 'Financial District'), (3, 'North Beach'); CREATE TABLE police_emergencies (id INT, district_id INT, response_time INT, incident_date DATE); INSERT INTO police_emergencies (id, district_id, response_time, incident_date) VALUES (1, 1, 6, '2021-01-01'), (2, 1, 7, '2021-02-15'), (3, 1, 5, '2021-03-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) FROM police_emergencies WHERE district_id = 1 AND YEAR(incident_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 각 제품에 대해 인도에서 수입된 재료의 총 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE product_ingredients (ingredient_id INT, product_id INT, ingredient VARCHAR(255), source_country VARCHAR(255), weight DECIMAL(5,2)); CREATE TABLE products (product_id INT, product VARCHAR(255)); INSERT INTO product_ingredients (ingredient_id, product_id, ingredient, source_country, weight) VALUES (1, 1, 'Vitamin C', 'US', 2.00), (2, 1, 'Shea Butter', 'Ghana', 5.00), (3, 2, 'Jojoba Oil', 'India', 3.00), (4, 2, 'Aloe Vera', 'Mexico', 4.00), (5, 3, 'Coconut Oil', 'India', 6.00), (6, 3, 'Rose Water', 'India', 2.00); INSERT INTO products (product_id, product) VALUES (1, 'Face Cream'), (2, 'Hair Serum'), (3, 'Body Lotion');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.product, SUM(pi.weight) as total_india_weight FROM product_ingredients pi JOIN products p ON pi.product_id = p.product_id WHERE pi.source_country = 'India' GROUP BY p.product;"
    },
    {
        "instruction": "입력 텍스트: \"water_usage\" 테이블에서 2020년도의 총 물 사용량을 계산하세요.\n\nDDL statements:\nCREATE TABLE water_usage (id INT PRIMARY KEY AUTO_INCREMENT, location VARCHAR(255), year INT, usage FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(usage) FROM water_usage WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 과목별로 시험에 합격한 학생 수와 그들의 평균 정신 건강 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE exam_results (student_id INT, subject VARCHAR(10), passed BOOLEAN); INSERT INTO exam_results (student_id, subject, passed) VALUES (1, 'Math', TRUE), (1, 'English', FALSE), (2, 'Math', TRUE), (2, 'English', TRUE), (3, 'Math', FALSE), (3, 'English', TRUE); CREATE TABLE student_mental_health (student_id INT, score INT, subject VARCHAR(10)); INSERT INTO student_mental_health (student_id, score, subject) VALUES (1, 80, 'Math'), (1, 75, 'English'), (2, 90, 'Math'), (2, 85, 'English'), (3, 60, 'Math'), (3, 65, 'English');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT subject, COUNT(*) as num_passed, AVG(score) as avg_mental_health_score FROM exam_results JOIN student_mental_health ON exam_results.student_id = student_mental_health.student_id WHERE passed = TRUE GROUP BY subject;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 재료 중 지난 1년 동안 가장 적게 사용된 재료는 무엇인가요?\n\nDDL statements:\nCREATE TABLE materials_usage(material VARCHAR(20), usage_date DATE); INSERT INTO materials_usage(material, usage_date) VALUES('organic cotton', '2022-01-01'), ('recycled polyester', '2022-01-15'), ('hemp', '2022-02-01'), ('organic cotton', '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material, COUNT(DISTINCT usage_date) AS usage_count FROM materials_usage WHERE usage_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY material ORDER BY usage_count LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 각 요리 분류에서 칼로리가 가장 낮은 음식은 무엇인가요?\n\nDDL statements:\nCREATE TABLE dishes (dish_id INT, dish_name VARCHAR(50), dish_type VARCHAR(20), cuisine VARCHAR(20), calorie_count INT); INSERT INTO dishes (dish_id, dish_name, dish_type, cuisine, calorie_count) VALUES (1, 'Lasagna', 'pasta', 'Italian', 800), (2, 'Pizza', 'pizza', 'Italian', 700), (3, 'Ramen', 'noodles', 'Japanese', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dish_name, cuisine, calorie_count FROM (SELECT dish_name, cuisine, calorie_count, RANK() OVER (PARTITION BY cuisine ORDER BY calorie_count ASC) rnk FROM dishes) t WHERE rnk = 1;"
    },
    {
        "instruction": "입력 텍스트: 회복적 사법 프로그램에 참여한 범죄자들의 평균 나이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE restorative_justice (offender_id INT, age INT, program_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM restorative_justice;"
    },
    {
        "instruction": "입력 텍스트: 유엔과 몇 건의 계약 협상이 있었나요?\n\nDDL statements:\nCREATE TABLE contract_negotiations_un (id INT, organization VARCHAR(255), negotiation_date DATE); INSERT INTO contract_negotiations_un (id, organization, negotiation_date) VALUES (1, 'United Nations', '2021-03-05'); INSERT INTO contract_negotiations_un (id, organization, negotiation_date) VALUES (2, 'World Bank', '2021-02-12');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM contract_negotiations_un WHERE organization = 'United Nations';"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 1000명당 의사 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Doctors (Country TEXT, DoctorsPer1000 FLOAT); INSERT INTO Doctors VALUES ('Brazil', 2.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DoctorsPer1000 FROM Doctors WHERE Country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: City B'에 있는 모든 프로젝트의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE project (id INT, name VARCHAR(50), location VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO project (id, name, location, start_date, end_date) VALUES (2, 'Road Expansion', 'City B', '2019-01-01', '2019-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM project WHERE location = 'City B';"
    },
    {
        "instruction": "입력 텍스트: 영어가 아닌 TV 프로그램들의 사용자 평점 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE tv_shows (show_id INT, title VARCHAR(100), language VARCHAR(20), user_rating DECIMAL(3,2)); INSERT INTO tv_shows (show_id, title, language, user_rating) VALUES (1, 'The Crown', 'English', 8.7), (2, 'Dark', 'German', 8.8), (3, 'Money Heist', 'Spanish', 8.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT language, AVG(user_rating) as avg_rating, COUNT(*) as show_count, MIN(user_rating) as min_rating, MAX(user_rating) as max_rating FROM tv_shows WHERE language != 'English' GROUP BY language;"
    },
    {
        "instruction": "입력 텍스트: 각 여행지가 받은 지속 가능한 관광 상은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Destinations (destination_id INT, destination_name TEXT, country TEXT, awards INT); INSERT INTO Destinations (destination_id, destination_name, country, awards) VALUES (1, 'City A', 'Germany', 3), (2, 'City B', 'Switzerland', 5), (3, 'City C', 'Norway', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT destination_name, country, awards, RANK() OVER (PARTITION BY country ORDER BY awards DESC) AS rank FROM Destinations;"
    },
    {
        "instruction": "입력 텍스트: 다른 기관의 우주비행사들과 가장 많은 임무에 참여한 우주비행사는 누구인가요?\n\nDDL statements:\nCREATE TABLE Astronauts (id INT, name VARCHAR(50), agency VARCHAR(50), missions_participated INT); INSERT INTO Astronauts (id, name, agency, missions_participated) VALUES (1, 'Neil Armstrong', 'NASA', 3), (2, 'Buzz Aldrin', 'NASA', 2), (3, 'John Glenn', 'NASA', 2), (4, 'Valentina Tereshkova', 'Roscosmos', 3), (5, 'Yuri Gagarin', 'Roscosmos', 1), (6, 'Alan Shepard', 'NASA', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, COUNT(DISTINCT a.agency) as agency_count FROM Astronauts a INNER JOIN (SELECT agency FROM Astronauts GROUP BY agency HAVING COUNT(DISTINCT agency) > 1) b ON a.agency = b.agency GROUP BY a.id ORDER BY agency_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 농촌 클리닉의 평균 의사 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE rural_clinics( clinic_id INT PRIMARY KEY, name VARCHAR(255), beds INT, doctor_count INT); INSERT INTO rural_clinics(clinic_id, name, beds, doctor_count) VALUES (1, 'Clinic A', 5, 3), (2, 'Clinic B', 3, 2), (3, 'Clinic C', 4, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(doctor_count) FROM rural_clinics;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 콘서트에 참석한 사용자 수\n\nDDL statements:\nCREATE TABLE users (id INT, country TEXT); INSERT INTO users (id, country) VALUES (1, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT users.id) AS attended_count FROM users JOIN concert_attendees ON users.id = concert_attendees.user_id WHERE users.country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 각 항공기 모델별 평균 비행 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE flights (id INT, model VARCHAR(50), flight_distance DECIMAL(10,2), flight_hours DECIMAL(5,2)); INSERT INTO flights (id, model, flight_distance, flight_hours) VALUES (1, 'Boeing 737', 1500, 4.5), (2, 'Airbus A320', 1200, 3.8), (3, 'Boeing 787', 2000, 5.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT model, AVG(flight_distance/flight_hours) as avg_flight_speed FROM flights GROUP BY model;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 각 기관별 총 기부금액을 크로스 조인을 사용하여 찾기\n\nDDL statements:\nCREATE TABLE OrgDonations (OrgID INT, DonationAmount INT, DonationYear INT); CREATE TABLE Organizations (OrgID INT, OrgName TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT o.OrgName, SUM(d.DonationAmount) FROM Organizations o CROSS JOIN OrgDonations d WHERE o.OrgID = d.OrgID AND d.DonationYear = 2020 GROUP BY o.OrgName;"
    },
    {
        "instruction": "입력 텍스트: Chemical' 유형을 가진 기계를 보여주세요.\n\nDDL statements:\nCREATE TABLE Machines (Id INT, Name VARCHAR(50), Type VARCHAR(50), Status VARCHAR(50)); INSERT INTO Machines (Id, Name, Type, Status) VALUES (1, 'Reactor 1', 'Chemical', 'Operational'), (2, 'Separator 2', 'Purification', 'Under Maintenance');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Machines WHERE Type = 'Chemical';"
    },
    {
        "instruction": "입력 텍스트: 각 유럽 국가에서 고등교육을 완료한 시민의 비율.\n\nDDL statements:\nCREATE TABLE education (id INT, country VARCHAR(50), citizens INT, higher_education BOOLEAN); INSERT INTO education (id, country, citizens, higher_education) VALUES (1, 'Norway', 5200000, true), (2, 'Switzerland', 8000000, true), (3, 'Luxembourg', 600000, true), (4, 'Ireland', 4800000, true), (5, 'Denmark', 5600000, true), (6, 'Finland', 5400000, true), (7, 'Sweden', 10000000, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, 100.0 * SUM(CASE WHEN higher_education = true THEN citizens ELSE 0 END) / SUM(citizens) AS percentage FROM education GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 영양 정보 테이블에서 칼로리가 500을 초과하는 모든 제품의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE nutrition_facts (product_id VARCHAR(255), calories INT, protein INT, fat INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM nutrition_facts WHERE calories > 500;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 재생 에너지 분야의 직업능력 개발 훈련을 이수한 직원은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE employees (employee_id INT, employee_name VARCHAR(255), sector VARCHAR(255), country VARCHAR(255)); INSERT INTO employees (employee_id, employee_name, sector, country) VALUES (1, 'John Doe', 'Renewable Energy', 'India'), (2, 'Jane Smith', 'Manufacturing', 'United States'), (3, 'Bob Johnson', 'Renewable Energy', 'India'); CREATE TABLE trainings (training_id INT, training_name VARCHAR(255), sector VARCHAR(255)); INSERT INTO trainings (training_id, training_name, sector) VALUES (1, 'Solar Energy Training', 'Renewable Energy'), (2, 'Wind Energy Training', 'Renewable Energy'), (3, 'Metalworking Training', 'Manufacturing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT e.employee_id) as num_employees FROM employees e JOIN trainings t ON e.sector = t.sector WHERE e.country = 'India' AND t.training_name = 'Solar Energy Training';"
    },
    {
        "instruction": "입력 텍스트: animal_population' 테이블에서 가장 많은 개체 수를 가진 동물의 개체 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE animal_population (animal_id INT, animal_name VARCHAR(50), population INT); INSERT INTO animal_population (animal_id, animal_name, population) VALUES (1, 'Tiger', 2500), (2, 'Elephant', 5000), (3, 'Lion', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(population) FROM animal_population;"
    },
    {
        "instruction": "입력 텍스트: 테이블 'sustainable_urbanism'에서 금 또는 백금 인증을 받은 부동산의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE sustainable_urbanism (id INT, certification VARCHAR(10)); INSERT INTO sustainable_urbanism (id, certification) VALUES (1, 'gold'), (2, 'platinum'), (3, 'bronze'), (4, 'silver');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sustainable_urbanism WHERE certification IN ('gold', 'platinum');"
    },
    {
        "instruction": "입력 텍스트: LakeA'와 'LakeB'에 있는 댐의 평균 높이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE dams (id INT PRIMARY KEY, name VARCHAR(255), height INT, reservoir VARCHAR(255), built_year INT); INSERT INTO dams (id, name, height, reservoir, built_year) VALUES (1, 'DamP', 50, 'LakeA', 1940), (2, 'DamQ', 75, 'LakeB', 1975), (3, 'DamR', 60, 'LakeA', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(height) as avg_height FROM dams WHERE reservoir IN ('LakeA', 'LakeB');"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 각 프로그램 카테고리별로 참여한 자원봉사자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (volunteer_id INT, program_category VARCHAR(255), volunteer_date DATE); INSERT INTO Volunteers (volunteer_id, program_category, volunteer_date) VALUES (1, 'Education', '2022-01-02'), (2, 'Health', '2022-01-03'), (3, 'Environment', '2022-01-04'), (4, 'Education', '2022-02-05'), (5, 'Health', '2022-02-06');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_category, COUNT(DISTINCT volunteer_id) as total_volunteers FROM Volunteers WHERE volunteer_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY program_category;"
    },
    {
        "instruction": "입력 텍스트: 어느 주에서도 청구가 없는 보험 가입자는 누구인가요?\n\nDDL statements:\nCREATE TABLE Policyholders (PolicyID INT, Name VARCHAR(50)); CREATE TABLE Claims (ClaimID INT, PolicyID INT, State VARCHAR(20)); INSERT INTO Policyholders VALUES (1, 'John Smith'), (2, 'Jane Doe'), (3, 'Mike Brown'); INSERT INTO Claims VALUES (1, 1, 'California'), (2, 2, 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.Name FROM Policyholders p LEFT JOIN Claims c ON p.PolicyID = c.PolicyID WHERE c.PolicyID IS NULL;"
    },
    {
        "instruction": "입력 텍스트: VisitorDemographics 테이블에서 성별이 'Other'인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE VisitorDemographics (VisitorID INT, Country VARCHAR(50), Age INT, Gender VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM VisitorDemographics WHERE Gender = 'Other';"
    },
    {
        "instruction": "입력 텍스트: ESG 점수가 70 미만인 재생 에너지 분야의 사회적 영향 투자를 투자 날짜와 ESG 점수 순으로 나열하고, 캐나다 투자자들이 한 투자만 포함합니다.\n\nDDL statements:\nCREATE TABLE SocialImpactInvestments (InvestmentID INT, InvestmentDate DATE, Sector VARCHAR(20), ESGScore INT, InvestorCountry VARCHAR(20)); INSERT INTO SocialImpactInvestments VALUES (1, '2021-01-01', 'Renewable Energy', 65, 'Canada'), (2, '2021-02-01', 'Healthcare', 75, 'Germany'), (3, '2021-03-01', 'Renewable Energy', 80, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM SocialImpactInvestments WHERE Sector = 'Renewable Energy' AND ESGScore < 70 AND InvestorCountry = 'Canada' ORDER BY InvestmentDate, ESGScore ASC;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 소매 부문에서 발생한 고위험 보안 사건은 몇 건입니까?\n\nDDL statements:\ncreate table incidents (id int, date date, sector varchar(255), risk_level int); insert into incidents values (1, '2021-01-01', 'retail', 3); insert into incidents values (2, '2021-01-05', 'retail', 2); insert into incidents values (3, '2021-01-10', 'retail', 1); insert into incidents values (4, '2021-01-15', 'financial services', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM incidents WHERE sector = 'retail' AND risk_level = 3 AND date >= '2021-01-01' AND date < '2021-02-01';"
    },
    {
        "instruction": "입력 텍스트: StudentsMentalHealth'라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE StudentsMentalHealth (StudentID INT PRIMARY KEY, MentalHealthScore INT, AssessmentDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE StudentsMentalHealth (StudentID INT PRIMARY KEY, MentalHealthScore INT, AssessmentDate DATE);"
    },
    {
        "instruction": "입력 텍스트: public.forest_stats' 테이블에서 목재 부피가 5000 이상인 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE public.forest_stats (country VARCHAR(255), timber_volume INT); INSERT INTO public.forest_stats (country, timber_volume) VALUES ('Canada', 7000), ('US', 9000), ('Brazil', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM public.forest_stats WHERE timber_volume > 5000;"
    },
    {
        "instruction": "입력 텍스트: 공급업체 E가 제공하는 공정 무역 제품은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Suppliers (SupplierID INT, SupplierName TEXT, Country TEXT);CREATE TABLE Products (ProductID INT, ProductName TEXT, Price DECIMAL, FairTrade BOOLEAN, SupplierID INT); INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES (1, 'SupplierA', 'USA'), (2, 'SupplierB', 'Canada'), (3, 'SupplierC', 'France'), (4, 'SupplierD', 'UK'), (5, 'SupplierE', 'Germany'); INSERT INTO Products (ProductID, ProductName, Price, FairTrade, SupplierID) VALUES (1, 'Product1', 15.99, false, 1), (2, 'Product2', 12.49, true, 1), (3, 'Product3', 20.99, true, 2), (4, 'Product4', 10.99, true, 3), (5, 'Product5', 8.99, false, 4), (6, 'Product6', 25.99, true, 4), (7, 'Product7', 18.99, false, 5), (8, 'Product8', 9.99, true, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Products WHERE FairTrade = true AND SupplierID = 5;"
    },
    {
        "instruction": "입력 텍스트: 균형 잡힌 데이터셋으로 훈련된 모델들의 평균 정확도가 불균형한 데이터셋으로 훈련된 모델들과 비교하여 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE model_data (model_id INT, model_name VARCHAR(50), dataset_type VARCHAR(50), accuracy FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(md.accuracy) FROM model_data md WHERE md.dataset_type = 'balanced'"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 평균 광대역 속도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE network_investments (region VARCHAR(255), broadband_speed DECIMAL(10, 2), network_type VARCHAR(255), investment_amount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(broadband_speed) AS avg_broadband_speed FROM network_investments GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 뉴질랜드의 북섬과 남섬을 매년 방문하는 관광객 수는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE nz_tourism (name VARCHAR(255), island VARCHAR(255), year INT, tourists INT); INSERT INTO nz_tourism (name, island, year, tourists) VALUES ('Rotorua', 'North Island', 2015, 2711000), ('Fiordland National Park', 'South Island', 2015, 1201000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tourists) FROM nz_tourism WHERE island IN ('North Island', 'South Island');"
    },
    {
        "instruction": "입력 텍스트: 각 스포츠 팀의 티켓 판매, 스폰서십, 그리고 상품 판매로부터 발생한 총 수익을 나열하세요.\n\nDDL statements:\nCREATE TABLE team_revenue (team_id INT, team_name VARCHAR(50), ticket_sales DECIMAL(10, 2), sponsorships DECIMAL(10, 2), merchandise DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, SUM(ticket_sales + sponsorships + merchandise) FROM team_revenue GROUP BY team_name;"
    },
    {
        "instruction": "입력 텍스트: 국가별 학생들의 평균 정신 건강 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, student_name VARCHAR(50), country VARCHAR(50), mental_health_score FLOAT); INSERT INTO students (student_id, student_name, country, mental_health_score) VALUES (1, 'Alice', 'USA', 85), (2, 'Bob', 'Canada', 80), (3, 'Charlie', 'Mexico', 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT students.country, AVG(students.mental_health_score) as avg_mental_health FROM students GROUP BY students.country;"
    },
    {
        "instruction": "입력 텍스트: 충전소에서 가장 많은 충전 포트의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE charging_stations (station_id INT, station_name VARCHAR(255), num_chargers INT, state VARCHAR(255), city VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(num_chargers) FROM charging_stations;"
    },
    {
        "instruction": "입력 텍스트: 토양 수분 테이블에서 수분 수준이 30% 미만이고 타임스탬프가 한 달 이상 된 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE soil_moisture (field_id INT, moisture DECIMAL(5,2), measurement_timestamp DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM soil_moisture WHERE moisture < 30.0 AND measurement_timestamp <= DATEADD(month, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: \"genetic_research\" 스키마에 있는 모든 마우스의 평균 나이는 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA genetic_research; CREATE TABLE mouse (mouse_id INT, age INT, species VARCHAR(20)); INSERT INTO mouse (mouse_id, age, species) VALUES (1, 3, 'Albino'), (2, 5, 'Black');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM genetic_research.mouse;"
    },
    {
        "instruction": "입력 텍스트: TX에서 식품 안전 실패가 발생한 레스토랑은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE restaurants_tx (restaurant_id INT, state VARCHAR(255)); INSERT INTO restaurants_tx (restaurant_id, state) VALUES (1, 'TX'), (2, 'NY'), (3, 'TX'); CREATE TABLE inspections_tx (restaurant_id INT, state VARCHAR(255), inspection_date DATE, result VARCHAR(255)); INSERT INTO inspections_tx (restaurant_id, state, inspection_date, result) VALUES (1, 'TX', '2021-01-01', 'Pass'), (2, 'NY', '2021-01-02', 'Fail'), (3, 'TX', '2021-01-03', 'Fail');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(restaurants_tx.restaurant_id) FROM restaurants_tx INNER JOIN inspections_tx ON restaurants_tx.restaurant_id = inspections_tx.restaurant_id WHERE restaurants_tx.state = 'TX' AND inspections_tx.result = 'Fail';"
    },
    {
        "instruction": "입력 텍스트: 각 저자별로 발행된 총 기사 수를 내림차순으로 정렬하여 보여주세요.\n\nDDL statements:\nCREATE TABLE articles (article_id INT, author VARCHAR(50), title VARCHAR(100), category VARCHAR(50), publication_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT author, COUNT(article_id) AS total_articles FROM articles GROUP BY author ORDER BY total_articles DESC;"
    },
    {
        "instruction": "입력 텍스트: 비용이 10억 이상인 우주 미션은 무엇인가요?\n\nDDL statements:\nCREATE TABLE expensive_space_missions (id INT, name VARCHAR(50), cost INT); INSERT INTO expensive_space_missions (id, name, cost) VALUES (1, 'Mars Rover 2030', 3000000000), (2, 'Space Station 2040', 5000000000), (3, 'Moon Colony 2050', 8000000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM expensive_space_missions WHERE cost > 1000000000;"
    },
    {
        "instruction": "입력 텍스트: audience' 테이블에서 id가 1인 레코드의 위치를 업데이트하세요\n\nDDL statements:\nCREATE TABLE audience (id INT, age INT, gender VARCHAR(10), location VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE audience SET location = 'Los Angeles' WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: fleet_management' 테이블에 각 유형별로 얼마나 많은 선박이 있습니까?\n\nDDL statements:\nCREATE TABLE fleet_management (id INT, name VARCHAR(50), type VARCHAR(50), capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) FROM fleet_management GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년 사이에 연구개발 비용이 5천만 이상 들어간 약물 중 EMA에 의해 승인된 약물은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE drug_approval (drug_name VARCHAR(255), approval_body VARCHAR(255), approval_year INT); CREATE TABLE rd_expenditure (drug_name VARCHAR(255), rd_expenditure FLOAT); INSERT INTO drug_approval (drug_name, approval_body, approval_year) VALUES ('DrugA', 'FDA', 2019), ('DrugB', 'EMA', 2018), ('DrugC', 'FDA', 2020), ('DrugD', 'EMA', 2019), ('DrugE', 'EMA', 2020); INSERT INTO rd_expenditure (drug_name, rd_expenditure) VALUES ('DrugA', 40000000), ('DrugB', 60000000), ('DrugC', 30000000), ('DrugD', 55000000), ('DrugE', 70000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(drug_name) FROM drug_approval INNER JOIN rd_expenditure ON drug_approval.drug_name = rd_expenditure.drug_name WHERE approval_body = 'EMA' AND rd_expenditure > 50000000 AND approval_year BETWEEN 2018 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: model_fairness' 테이블의 각 AI 모델에서 발생한 공정성 사건은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE model_fairness (ai_model TEXT, incident_count INTEGER); INSERT INTO model_fairness (ai_model, incident_count) VALUES ('Model1', 5), ('Model2', 3), ('Model3', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ai_model, COUNT(*) OVER (PARTITION BY ai_model) AS incident_count FROM model_fairness;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 공장들의 평균 물 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE factory_water (id INT, factory VARCHAR(100), location VARCHAR(100), water_consumption DECIMAL(5,2)); INSERT INTO factory_water (id, factory, location, water_consumption) VALUES (1, 'Egypt Factory', 'Egypt', 10000), (2, 'South Africa Factory', 'South Africa', 15000), (3, 'Nigeria Factory', 'Nigeria', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(water_consumption) FROM factory_water WHERE location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 모든 공장을 통틀어 생산 사용량이 가장 높은 친환경 재료 상위 3개를 확인하세요.\n\nDDL statements:\nCREATE TABLE Material (id INT, name VARCHAR(255), eco_friendly BOOLEAN); INSERT INTO Material (id, name, eco_friendly) VALUES (1, 'Organic Cotton', TRUE), (2, 'Recycled Polyester', TRUE), (3, 'Conventional Cotton', FALSE); CREATE TABLE Material_Production (id INT, material_id INT, factory_id INT, production_usage INT); INSERT INTO Material_Production (id, material_id, factory_id, production_usage) VALUES (1, 1, 1001, 500), (2, 2, 1002, 750), (3, 1, 1003, 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name, SUM(mp.production_usage) FROM Material m INNER JOIN Material_Production mp ON m.id = mp.material_id WHERE m.eco_friendly = TRUE GROUP BY m.name ORDER BY SUM(mp.production_usage) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 위치한 정신 건강 센터에서 진행된 원주민 언어로 된 치료 세션의 총 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE mental_health_center (center_id INT, name VARCHAR(255), location VARCHAR(255)); INSERT INTO mental_health_center (center_id, name, location) VALUES (1, 'Mental Health Center 1', 'Canada'), (2, 'Mental Health Center 2', 'Canada'), (3, 'Mental Health Center 3', 'USA'); CREATE TABLE therapy_session (session_id INT, patient_id INT, therapist_id INT, session_language VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN session_language IN ('Cree', 'Inuktitut', 'Ojibwe') THEN 1 ELSE 0 END) AS indigenous_sessions FROM therapy_session JOIN mental_health_center ON therapy_session.center_id = mental_health_center.center_id WHERE mental_health_center.location = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 환경에 가장 큰 영향을 미치는 상위 3개의 화학물질을 확인하세요?\n\nDDL statements:\nCREATE TABLE environmental_impact (chemical_id INT, environmental_impact_score INT); INSERT INTO environmental_impact (chemical_id, environmental_impact_score) VALUES (101, 78), (102, 82), (103, 85), (104, 60), (105, 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT chemical_id, environmental_impact_score FROM (SELECT chemical_id, environmental_impact_score, RANK() OVER (ORDER BY environmental_impact_score DESC) as impact_rank FROM environmental_impact) WHERE impact_rank <= 3"
    },
    {
        "instruction": "입력 텍스트: 미드웨스트 지역의 건축 자재별 월별 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Midwest_Materials (location VARCHAR(20), material VARCHAR(30), cost FLOAT, order_date DATE); INSERT INTO Midwest_Materials VALUES ('WI', 'Concrete', 1500, '2022-01-05'), ('IL', 'Cement', 800, '2022-02-10'), ('MI', 'Insulation', 600, '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, material, SUM(cost) OVER (PARTITION BY EXTRACT(MONTH FROM order_date)) as total_cost FROM Midwest_Materials;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 중재자가 처리한 사건 수를 사건 수가 많은 순으로 내림차순으로 정렬하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Mediators (MediatorID INT, Name VARCHAR(50)); CREATE TABLE Cases (CaseID INT, MediatorID INT, Date DATE); INSERT INTO Mediators (MediatorID, Name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'), (4, 'Bob Brown'); INSERT INTO Cases (CaseID, MediatorID, Date) VALUES (1, 1, '2021-01-01'), (2, 1, '2021-02-01'), (3, 2, '2021-03-01'), (4, 3, '2021-04-01'), (5, 3, '2021-05-01'), (6, 4, '2021-06-01'), (7, 1, '2020-01-01'), (8, 2, '2020-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MediatorID, Name, COUNT(*) as NumCases FROM Mediators JOIN Cases ON Mediators.MediatorID = Cases.MediatorID WHERE Date >= DATEADD(year, -1, GETDATE()) GROUP BY MediatorID, Name ORDER BY NumCases DESC;"
    },
    {
        "instruction": "입력 텍스트: 아시아 각국의 관광객 한 명당 평균 에너지 소비량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_consumption (country VARCHAR(50), tourists INT, energy_consumption FLOAT); INSERT INTO energy_consumption (country, tourists, energy_consumption) VALUES ('Japan', 11000, 4500000), ('China', 18000, 7000000), ('India', 15000, 5000000), ('Indonesia', 14000, 6000000); CREATE TABLE carbon_emissions (country VARCHAR(50), tourists INT, emissions FLOAT); INSERT INTO carbon_emissions (country, tourists, emissions) VALUES ('Japan', 11000, 1000000), ('China', 18000, 1500000), ('India', 15000, 1200000), ('Indonesia', 14000, 1300000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.country, AVG(e.energy_consumption / t.tourists) AS avg_energy_consumption FROM energy_consumption e JOIN (SELECT country, SUM(tourists) AS tourists FROM energy_consumption GROUP BY country) t ON e.country = t.country GROUP BY e.country;"
    },
    {
        "instruction": "입력 텍스트: 각 모니터링 구역에서 기록된 용존 산소 농도의 최대값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE monitoring_zones (id INT, zone_name TEXT, dissolved_oxygen FLOAT); INSERT INTO monitoring_zones (id, zone_name, dissolved_oxygen) VALUES (1, 'Zone A', 8.1), (2, 'Zone B', 7.9), (3, 'Zone C', 8.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT zone_name, MAX(dissolved_oxygen) FROM monitoring_zones GROUP BY zone_name;"
    },
    {
        "instruction": "입력 텍스트: 남아메리카에 있는 서식지의 최소 크기(제곱킬로미터 단위)는 얼마인가요?\n\nDDL statements:\nCREATE TABLE habitat (id INT, location TEXT, size FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(size) FROM habitat WHERE location = 'South America';"
    },
    {
        "instruction": "입력 텍스트: 각 요리 종류별로 최근에 팔리지 않은 음식을 포함하여 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cuisine (cuisine_id INT, cuisine_name VARCHAR(255)); INSERT INTO cuisine VALUES (1, 'Italian'); INSERT INTO cuisine VALUES (2, 'Indian'); CREATE TABLE dishes (dish_id INT, dish_name VARCHAR(255), cuisine_id INT, price DECIMAL(5,2), last_sold DATE); INSERT INTO dishes VALUES (1, 'Pizza Margherita', 1, 12.99, '2022-04-15'); INSERT INTO dishes VALUES (2, 'Chole Bhature', 2, 9.99, '2022-04-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine_name, SUM(price) as total_revenue FROM cuisine JOIN dishes ON cuisine.cuisine_id = dishes.cuisine_id GROUP BY cuisine_name;"
    },
    {
        "instruction": "입력 텍스트: 아프리카의 농촌 인프라 프로젝트 당 평균 농업 혁신 투자액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE rural_projects (id INT, name VARCHAR(100), country VARCHAR(50), investment FLOAT); INSERT INTO rural_projects (id, name, country, investment) VALUES (1, 'Namibia Irrigation', 'Namibia', 250000.0), (2, 'Kenya Green Energy', 'Kenya', 500000.0), (3, 'Mali Road Construction', 'Mali', 300000.0); CREATE TABLE agri_innovations (id INT, project_id INT, type VARCHAR(50), cost FLOAT); INSERT INTO agri_innovations (id, project_id, type, cost) VALUES (1, 1, 'Drip Irrigation', 50000.0), (2, 2, 'Solar Powered Pumps', 80000.0), (3, 3, 'Modern Tractors', 120000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(a.cost) FROM agri_innovations a JOIN rural_projects r ON a.project_id = r.id WHERE r.country LIKE 'Africa%';"
    },
    {
        "instruction": "입력 텍스트: 신체 장애가 있는 학생들을 위한 모든 지원 프로그램을 나열합니다.\n\nDDL statements:\nCREATE TABLE support_programs (program_id INT, program_name VARCHAR(30), disability_type VARCHAR(20)); INSERT INTO support_programs (program_id, program_name, disability_type) VALUES (1, 'Mobility Support', 'Physical'), (2, 'Assistive Technology', 'Cognitive'), (3, 'Note Taking', 'Hearing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name FROM support_programs WHERE disability_type = 'Physical';"
    },
    {
        "instruction": "입력 텍스트: Sanctuary A'에서 모든 해에 걸쳐 수용된 동물의 최대 수는 얼마였나요?\n\nDDL statements:\nCREATE TABLE SanctuaryAnimals (year INT, sanctuary VARCHAR(20), animal_count INT);INSERT INTO SanctuaryAnimals (year, sanctuary, animal_count) VALUES (2015, 'Sanctuary A', 300), (2016, 'Sanctuary A', 350), (2017, 'Sanctuary A', 400), (2018, 'Sanctuary A', 450), (2019, 'Sanctuary A', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(animal_count) FROM SanctuaryAnimals WHERE sanctuary = 'Sanctuary A';"
    },
    {
        "instruction": "입력 텍스트: 네덜란드에 있는 운하를 보여주세요.\n\nDDL statements:\nCREATE TABLE Canals (id INT, name TEXT, length FLOAT, location TEXT); INSERT INTO Canals (id, name, length, location) VALUES (1, 'Amsterdam-Rhine Canal', 72.0, 'Netherlands'); INSERT INTO Canals (id, name, length, location) VALUES (2, 'Venetian Lagoon', 38.0, 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Canals WHERE location = 'Netherlands';"
    },
    {
        "instruction": "입력 텍스트: \"audience\" 테이블의 \"age\" 열을 각 관객의 현재 나이로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE audience (id INT, name TEXT, age INT, gender TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE audience SET age = DATEDIFF(CURDATE(), birth_date) / 365;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 국가별 1인당 평균 쓰레기 배출량(킬로그램)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE country_waste_generation (country VARCHAR(255), waste_kg INT, population INT, year INT); INSERT INTO country_waste_generation (country, waste_kg, population, year) VALUES ('CountryX', 500, 1000000, 2021), ('CountryY', 700, 1500000, 2021), ('CountryZ', 800, 2000000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(waste_kg / population) FROM country_waste_generation WHERE year = 2021 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 지난 10년 동안 화학 분야의 연구 지원금 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE grants (grant_id INT, field VARCHAR(50), amount FLOAT, grant_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(g.amount) FROM grants g WHERE g.field = 'Chemistry' AND g.grant_date >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 필리핀에 거주하며 35세 미만인 고객들의 총 수입은 얼마인가요?\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name VARCHAR(100), age INT, country VARCHAR(50), income DECIMAL(10,2));  INSERT INTO clients (client_id, name, age, country, income) VALUES (7, 'Maria Santos', 30, 'Philippines', 35000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(income) FROM clients WHERE country = 'Philippines' AND age < 35;"
    },
    {
        "instruction": "입력 텍스트: 2021년 'SiteB'의 'landfill_capacity' 테이블에 있는 매립지 용량을 48000으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE landfill_capacity (year INT, location TEXT, capacity INT); INSERT INTO landfill_capacity (year, location, capacity) VALUES (2019, 'SiteA', 60000), (2019, 'SiteB', 45000), (2019, 'SiteC', 52000), (2020, 'SiteA', 62000), (2020, 'SiteB', 46000), (2020, 'SiteC', 53000), (2021, 'SiteA', 64000), (2021, 'SiteC', 55000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE landfill_capacity SET capacity = 48000 WHERE year = 2021 AND location = 'SiteB';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 몇 명의 아티스트가 있나요?\n\nDDL statements:\nCREATE TABLE Country (CountryID INT, Name VARCHAR(50), ArtistID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country.Name, COUNT(Country.ArtistID) as ArtistCount FROM Country GROUP BY Country.Name;"
    },
    {
        "instruction": "입력 텍스트: 성이 'S'로 시작하는 모든 고객을 나열합니다.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, first_name VARCHAR(50), last_name VARCHAR(50)); INSERT INTO clients (client_id, first_name, last_name) VALUES (1, 'John', 'Doe'), (2, 'Jane', 'Smith');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM clients WHERE last_name LIKE 'S%';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 발견된 취약점의 총 개수를 심각도별로 구분하여 알려주세요.\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, discovered_date DATE, severity VARCHAR(10)); INSERT INTO vulnerabilities (id, discovered_date, severity) VALUES (1, '2021-10-01', 'low'), (2, '2021-11-01', 'medium'), (3, '2021-12-01', 'high'), (4, '2022-01-01', 'low');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT severity, COUNT(*) as vulnerability_count FROM vulnerabilities WHERE discovered_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY severity;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 소재로 만든 의류의 최대 생산 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SustainableProduction (id INT, garment_type VARCHAR(255), material VARCHAR(255), cost DECIMAL(10,2)); INSERT INTO SustainableProduction (id, garment_type, material, cost) VALUES (1, 'T-Shirt', 'Organic Cotton', 15.50), (2, 'Pants', 'Recycled Polyester', 35.00), (3, 'Dress', 'Hemp', 55.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(cost) FROM SustainableProduction WHERE material IN ('Organic Cotton', 'Recycled Polyester', 'Hemp');"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 각 직원별로 기록된 안전 규정 위반 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Violations (id INT, employee VARCHAR(255), violation_date DATE); INSERT INTO Violations (id, employee, violation_date) VALUES (1, 'John Doe', '2022-01-15'), (2, 'Jane Smith', '2022-02-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT employee, COUNT(*) FROM Violations WHERE violation_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY employee"
    },
    {
        "instruction": "입력 텍스트: 블루 웨일 쉬핑이 소유한 모든 선박의 총 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name VARCHAR(50), company VARCHAR(50), capacity INT); INSERT INTO vessels (id, name, company, capacity) VALUES (1, 'MV Horizon', 'Blue Whale Shipping', 12000), (2, 'MV Oceanus', 'Blue Whale Shipping', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM vessels WHERE company = 'Blue Whale Shipping';"
    },
    {
        "instruction": "입력 텍스트: 디지털 격차 점수가 가장 높은 상위 2개 국가의 이름과 디지털 격차 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE countries (id INT, name VARCHAR(50), digital_divide_score DECIMAL(3,2)); INSERT INTO countries (id, name, digital_divide_score) VALUES (1, 'Country1', 6.3); INSERT INTO countries (id, name, digital_divide_score) VALUES (2, 'Country2', 7.1); INSERT INTO countries (id, name, digital_divide_score) VALUES (3, 'Country3', 5.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, digital_divide_score, RANK() OVER (ORDER BY digital_divide_score DESC) AS rank FROM countries;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 제조된 우주선으로 성공적으로 완료된 우주 임무는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Spacecraft (id INT, name TEXT, manufacturer TEXT, country TEXT); CREATE TABLE SpaceMissions (id INT, spacecraft_id INT, mission TEXT, status TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(sm.id) FROM SpaceMissions sm JOIN Spacecraft s ON sm.spacecraft_id = s.id WHERE s.country = 'USA' AND sm.status = 'successful';"
    },
    {
        "instruction": "입력 텍스트: 아라비아 해에서 단일 날짜에 관찰된 해양 생물 종의 최대 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE marine_species_observations (observation_id INTEGER, observation_date DATE, species_name TEXT, ocean TEXT, number_of_observations INTEGER);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(number_of_observations) FROM marine_species_observations WHERE ocean = 'Arabian Sea' AND observation_date BETWEEN '2000-01-01' AND '2022-12-31' GROUP BY ocean, DATE_TRUNC('day', observation_date);"
    },
    {
        "instruction": "입력 텍스트: 건설 근로자의 주별 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE WorkerSalaries (WorkerID int, Name varchar(50), State varchar(25), Salary decimal(10,2)); INSERT INTO WorkerSalaries (WorkerID, Name, State, Salary) VALUES (1, 'John Doe', 'NY', 50000.00), (2, 'Jane Smith', 'CA', 60000.00), (3, 'Mike Johnson', 'TX', 55000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, AVG(Salary) AS AvgSalaryPerState FROM WorkerSalaries GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: nba_games' 테이블에서 각 팀이 이긴 게임 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE nba_games (game_id INT, home_team_id INT, away_team_id INT, home_team_points INT, away_team_points INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT home_team_id AS team_id, COUNT(*) AS games_won FROM nba_games WHERE home_team_points > away_team_points GROUP BY home_team_id UNION ALL SELECT away_team_id, COUNT(*) FROM nba_games WHERE away_team_points > home_team_points GROUP BY away_team_id;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 월별로 발급된 벌목 허가증은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE harvest_permits (id INT, issue_month INT, issued_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM issued_date) as month, COUNT(*) as num_permits FROM harvest_permits WHERE EXTRACT(YEAR FROM issued_date) = 2019 GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 고유한 알고리즘 편향 카테고리와 해당 설명을 나열하세요.\n\nDDL statements:\nCREATE TABLE bias_categories (category_id INT, category VARCHAR(50), description TEXT); INSERT INTO bias_categories (category_id, category, description) VALUES (1, 'Racial', 'Bias related to race and ethnicity'), (2, 'Gender', 'Bias related to gender and gender identity'), (3, 'Age', 'Bias related to age');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT category, description FROM bias_categories;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 위치한 스튜디오에서 제작된 영화 중 상영 시간이 2시간을 초과하는 영화들의 연도별 개봉 편수를 찾아보세요.\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(255), release_year INT, runtime INT, studio_location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT release_year, COUNT(*) as num_movies FROM movies WHERE studio_location = 'California' AND runtime > 120 GROUP BY release_year;"
    },
    {
        "instruction": "입력 텍스트: 전체 평균 연료 소비율보다 낮은 연료 소비율을 가진 선박의 최소 연료 소비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Vessels (Id INT, Name VARCHAR(100), FuelConsumption FLOAT); INSERT INTO Vessels (Id, Name, FuelConsumption) VALUES (1, 'VesselA', 1000), (2, 'VesselB', 1500), (3, 'VesselC', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(FuelConsumption) FROM Vessels WHERE FuelConsumption < (SELECT AVG(FuelConsumption) FROM Vessels);"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 디스프로슘을 가장 적게 생산한 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE dysprosium_production (id INT, country TEXT, year INT, dysprosium_prod FLOAT); INSERT INTO dysprosium_production (id, country, year, dysprosium_prod) VALUES (1, 'China', 2017, 2500.0), (2, 'China', 2018, 2800.0), (3, 'China', 2019, 3100.0), (4, 'China', 2020, 3500.0), (5, 'India', 2017, 50.0), (6, 'India', 2018, 60.0), (7, 'India', 2019, 70.0), (8, 'India', 2020, 80.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MIN(dysprosium_prod) as least_dysprosium_prod FROM dysprosium_production WHERE year BETWEEN 2017 AND 2020 GROUP BY country ORDER BY least_dysprosium_prod ASC;"
    },
    {
        "instruction": "입력 텍스트: 각 도시와 이니셔티브별 총 수도 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE water_consumption (id INT, city VARCHAR(255), initiative VARCHAR(255), consumption INT); INSERT INTO water_consumption (id, city, initiative, consumption) VALUES (1, 'Miami', 'Smart Irrigation', 15000); INSERT INTO water_consumption (id, city, initiative, consumption) VALUES (2, 'Chicago', 'Rainwater Harvesting', 20000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, initiative, SUM(consumption) FROM water_consumption GROUP BY city, initiative;"
    },
    {
        "instruction": "입력 텍스트: 의료 분야에서 여성에 의해 설립된 회사는 어디인가요?\n\nDDL statements:\nCREATE TABLE companies(id INT, name TEXT, industry TEXT, founder_gender TEXT); INSERT INTO companies (id, name, industry, founder_gender) VALUES (1, 'MedHealth', 'Healthcare', 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM companies WHERE founder_gender = 'Female' AND industry = 'Healthcare';"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 미국과 캐나다에서 하루에 발행된 뉴스 기사 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE news_articles (id INT, title VARCHAR(50), publication_date DATE, country VARCHAR(50)); INSERT INTO news_articles (id, title, publication_date, country) VALUES (1, 'Article1', '2022-01-01', 'United States'), (2, 'Article2', '2022-01-02', 'Canada'), (3, 'Article3', '2022-01-03', 'United States'), (4, 'Article4', '2022-01-04', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE(publication_date) as date, COUNT(*) as num_articles FROM news_articles WHERE country IN ('United States', 'Canada') AND publication_date >= NOW() - INTERVAL 30 DAY GROUP BY date ORDER BY date DESC;"
    },
    {
        "instruction": "입력 텍스트: 콘서트 티켓 판매로 50,000달러 이상 벌어들인 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, Name VARCHAR(100), Genre VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT A.Name, SUM(T.Price) as TotalEarnings FROM Artists A INNER JOIN Concerts C ON A.ArtistID = C.ArtistID INNER JOIN Tickets T ON C.ConcertID = T.ConcertID GROUP BY A.Name HAVING TotalEarnings > 50000;"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년까지 아프리카의 농촌 인프라 프로젝트에 대한 평균 투자액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE infrastructure_projects (project_id INT, project_type VARCHAR(255), investment INT, country VARCHAR(255), year INT); INSERT INTO infrastructure_projects (project_id, project_type, investment, country, year) VALUES (1, 'Irrigation System', 50000, 'Kenya', 2018), (2, 'Rural Road', 75000, 'Nigeria', 2019), (3, 'Electricity Grid', 100000, 'South Africa', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(investment) FROM infrastructure_projects WHERE country IN ('Kenya', 'Nigeria', 'South Africa') AND year BETWEEN 2018 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 유럽 연합에서 시작된 기후 커뮤니케이션 캠페인의 총 수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE climate_communication (id INT, campaign VARCHAR(255), location VARCHAR(255), launch_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(*) FROM climate_communication WHERE location LIKE '%European Union%' AND launch_year >= 2015;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아에서 제작된 콘텐츠의 평균 평점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE content (content_id INT, content_type VARCHAR(20), country VARCHAR(50), rating FLOAT); INSERT INTO content VALUES (1, 'documentary', 'Australia', 4.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM content WHERE country IN ('Australia', 'New Zealand');"
    },
    {
        "instruction": "입력 텍스트: Islands' 지역에 에너지 효율 등급이 85보다 높은 녹색 건물은 몇 개가 있나요?\n\nDDL statements:\nCREATE TABLE green_buildings (building_id INT, building_name VARCHAR(100), location VARCHAR(50), energy_efficiency_rating FLOAT); INSERT INTO green_buildings (building_id, building_name, location, energy_efficiency_rating) VALUES (1, 'Green Building 7', 'Islands', 90.0); INSERT INTO green_buildings (building_id, building_name, location, energy_efficiency_rating) VALUES (2, 'Green Building 8', 'Islands', 85.0); INSERT INTO green_buildings (building_id, building_name, location, energy_efficiency_rating) VALUES (3, 'Green Building 9', 'Islands', 95.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM green_buildings WHERE location = 'Islands' AND energy_efficiency_rating > 85;"
    },
    {
        "instruction": "입력 텍스트: 유엔이 지난 5년간 수행한 평화유지 작전의 평균 횟수는 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists defense; CREATE TABLE if not exists un_peacekeeping_operations (id INT PRIMARY KEY, year INT, operation_count INT); INSERT INTO un_peacekeeping_operations (id, year, operation_count) VALUES (1, 2017, 12), (2, 2018, 15), (3, 2019, 18), (4, 2020, 20), (5, 2021, 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(operation_count) FROM defense.un_peacekeeping_operations WHERE year BETWEEN 2017 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: 2018년 멕시코와 아르헨티나의 교육 예산 평균을 비교하세요.\n\nDDL statements:\nCREATE SCHEMA latam_schema;CREATE TABLE latam_schema.education_budget (country VARCHAR(20), year INT, avg_budget DECIMAL(5,2));INSERT INTO latam_schema.education_budget (country, year, avg_budget) VALUES ('Mexico', 2018, 3000.00), ('Argentina', 2018, 4000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, avg_budget FROM latam_schema.education_budget WHERE (country = 'Mexico' OR country = 'Argentina') AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 최근 3년간 각 주에서 발생한 정신 건강 동등 위반 건수를 위반 날짜 기준으로 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE MentalHealthParityViolations (ViolationID INT, State VARCHAR(255), ViolationDate DATE); INSERT INTO MentalHealthParityViolations (ViolationID, State, ViolationDate) VALUES (1, 'California', '2019-04-01'); INSERT INTO MentalHealthParityViolations (ViolationID, State, ViolationDate) VALUES (2, 'Texas', '2020-01-15'); INSERT INTO MentalHealthParityViolations (ViolationID, State, ViolationDate) VALUES (3, 'California', '2021-03-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, COUNT(*) as NumberOfViolations, ViolationDate FROM MentalHealthParityViolations WHERE ViolationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) GROUP BY State, ViolationDate ORDER BY ViolationDate DESC;"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역의 기후 변화 이니셔티브에 대한 평균 커뮤니케이션 점수는 얼마이며, 평균 이상의 점수를 가진 이니셔티브는 무엇인가요?\n\nDDL statements:\nCREATE TABLE communication_scores (id INT PRIMARY KEY, initiative_id INT, year INT, region VARCHAR(255), score DECIMAL(10,2)); CREATE VIEW avg_communication_scores AS SELECT region, AVG(score) AS avg_score FROM communication_scores GROUP BY region;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.initiative_id, c.score, a.avg_score FROM communication_scores c JOIN avg_communication_scores a ON c.region = a.region WHERE c.region = 'Asia' AND c.score > a.avg_score;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별로 고유한 자원봉사자 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, ProgramID INT); INSERT INTO Volunteers (VolunteerID, ProgramID) VALUES (1, 1), (2, 1), (3, 2), (4, 3), (5, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProgramID, COUNT(DISTINCT VolunteerID) FROM Volunteers GROUP BY ProgramID;"
    },
    {
        "instruction": "입력 텍스트: 2018년 아프리카의 농촌 지역의 의료 접근성 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE HealthcareAccess (Location VARCHAR(50), Continent VARCHAR(50), Year INT, Score FLOAT); INSERT INTO HealthcareAccess (Location, Continent, Year, Score) VALUES ('Rural', 'Africa', 2018, 65.2), ('Urban', 'Africa', 2018, 80.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Score FROM HealthcareAccess WHERE Location = 'Rural' AND Continent = 'Africa' AND Year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 접근성 감사를 위한 새로운 기록을 추가하세요. 해당 기록은 2022년 4월 15일에 실시되었으며, 대학의 점수는 85입니다.\n\nDDL statements:\nCREATE TABLE accessibility_audits (id INT PRIMARY KEY, university VARCHAR(255), score INT, audit_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO accessibility_audits (university, score, audit_date) VALUES ('Stanford University', 85, '2022-04-15');"
    },
    {
        "instruction": "입력 텍스트: 남아메리카' 지역에서 가장 많은 유기농 농장을 가진 나라는 어디인가요?\n\nDDL statements:\nCREATE TABLE organic_farms (id INT, country VARCHAR(50), region VARCHAR(50), no_farms INT); INSERT INTO organic_farms (id, country, region, no_farms) VALUES (1, 'Brazil', 'South America', 2000); INSERT INTO organic_farms (id, country, region, no_farms) VALUES (2, 'Argentina', 'South America', 3000); INSERT INTO organic_farms (id, country, region, no_farms) VALUES (3, 'Colombia', 'South America', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(no_farms) FROM organic_farms WHERE region = 'South America';"
    },
    {
        "instruction": "입력 텍스트: 아시아 시장에서 지속 가능한 재료로 만들어진 제품의 최대 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE products (product_id INT, material VARCHAR(20), price DECIMAL(5,2), market VARCHAR(20)); INSERT INTO products (product_id, material, price, market) VALUES (1, 'organic cotton', 50.00, 'Europe'), (2, 'sustainable wood', 80.00, 'Asia'), (3, 'recycled polyester', 60.00, 'Europe'), (4, 'organic linen', 70.00, 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM products WHERE market = 'Asia' AND material IN ('organic cotton', 'sustainable wood', 'recycled polyester', 'organic linen');"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 조달 테이블에서 원산지가 '스페이인'인 경우 유기농 인증 플래그를 1로 설정하세요.\n\nDDL statements:\nCREATE TABLE sustainable_sourcing (ingredient_name VARCHAR(50), country_of_origin VARCHAR(50), organic_certified INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE sustainable_sourcing SET organic_certified = 1 WHERE country_of_origin = 'Spain';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 런던에 있는 '사설' 부문의 박물관들이 창출한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE museums (id INT, name VARCHAR(50), sector VARCHAR(50), revenue DECIMAL(10,2), city VARCHAR(50)); INSERT INTO museums (id, name, sector, revenue, city) VALUES (1, 'Metropolitan Museum of Art', 'private', 350000000.00, 'New York'); INSERT INTO museums (id, name, sector, revenue, city) VALUES (2, 'British Museum', 'public', 400000000.00, 'London'); INSERT INTO museums (id, name, sector, revenue, city) VALUES (3, 'Museum of Modern Art', 'private', 220000000.00, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, city, SUM(revenue) FROM museums WHERE city IN ('New York', 'London') AND sector = 'private' GROUP BY sector, city;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 군사 장비 판매를 하지 않은 방위산업 계약자들을 나열하시오.\n\nDDL statements:\nCREATE TABLE ContractorSales (contractor_id INT, sale_year INT, sales_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT contractor_id FROM ContractorSales WHERE sale_year = 2019 AND sales_count = 0;"
    },
    {
        "instruction": "입력 텍스트: 필라델피아에서 경찰 긴급 상황의 평균 대응 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE philadelphia_police_emergencies (id INT, incident_type VARCHAR(255), city VARCHAR(255), response_time INT, incident_date DATE); INSERT INTO philadelphia_police_emergencies (id, incident_type, city, response_time, incident_date) VALUES (1, 'Police', 'Philadelphia', 9, '2022-01-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) as avg_response_time FROM philadelphia_police_emergencies WHERE city = 'Philadelphia' AND incident_type = 'Police';"
    },
    {
        "instruction": "입력 텍스트: 문화 유산 투어 예약이 가상 투어 예약에 비해 어느 정도 비율인가요?\n\nDDL statements:\nCREATE TABLE bookings (id INT PRIMARY KEY, tour_type VARCHAR(255), FOREIGN KEY (tour_type) REFERENCES tour_types(type)); CREATE TABLE tour_types (type VARCHAR(255) PRIMARY KEY, category VARCHAR(255)); INSERT INTO tour_types (type, category) VALUES ('Cultural Heritage', 'Real'), ('Virtual City', 'Virtual');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) / (SELECT COUNT(*) FROM bookings WHERE tour_type IN (SELECT type FROM tour_types WHERE category = 'Virtual')) AS ratio FROM bookings WHERE tour_type IN (SELECT type FROM tour_types WHERE category = 'Cultural Heritage');"
    },
    {
        "instruction": "입력 텍스트: 다양성 이니셔티브가 없는 조직을 삭제하세요.\n\nDDL statements:\nCREATE TABLE organizations (id INT, name VARCHAR(255), diversity_initiatives BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM organizations WHERE id NOT IN (SELECT o.id FROM organizations o WHERE o.diversity_initiatives = true);"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역에서 작년에 발생한 총 폐기물 양은 얼마입니까?\n\nDDL statements:\nCREATE TABLE WasteGeneration (region VARCHAR(20), year INT, amount INT); INSERT INTO WasteGeneration (region, year, amount) VALUES ('Asia-Pacific', 2021, 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM WasteGeneration WHERE region = 'Asia-Pacific' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 카리브 해에서 측정된 월별 최소 해양 산성도 수준은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE ocean_acidity_records (record_id INTEGER, month INTEGER, acidity_level FLOAT, ocean TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT month, MIN(acidity_level) FROM ocean_acidity_records WHERE ocean = 'Caribbean Sea' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 같은 제조업체에서 연속된 두 해 동안 생산된 각 화학물질의 무게 차이를 찾으세요.\n\nDDL statements:\nCREATE TABLE chemicals_annual (manufacturer_id INT, chemical_id INT, chemical_type VARCHAR(50), year INT, weight FLOAT); INSERT INTO chemicals_annual (manufacturer_id, chemical_id, chemical_type, year, weight) VALUES (1, 1, 'Acid', 2020, 150.5), (1, 1, 'Acid', 2021, 155.6), (1, 2, 'Alkali', 2020, 200.3), (1, 2, 'Alkali', 2021, 205.4), (2, 3, 'Solvent', 2020, 120.7), (2, 3, 'Solvent', 2021, 125.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.manufacturer_id, a.chemical_id, a.chemical_type, a.year, a.weight, b.weight, a.weight - b.weight as weight_difference FROM chemicals_annual a JOIN chemicals_annual b ON a.manufacturer_id = b.manufacturer_id AND a.chemical_id = b.chemical_id AND a.year = b.year + 1;"
    },
    {
        "instruction": "입력 텍스트: 2023 FIFA 여자 월드컵에 등록된 여성 팬의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE IF NOT EXISTS fans (id INT, name VARCHAR(50), gender VARCHAR(50), game VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE gender = 'Female')) * 100.0 / COUNT(*) FROM fans WHERE game = '2023 FIFA Women''s World Cup';"
    },
    {
        "instruction": "입력 텍스트: 각 방위산업 계약자의 군사 장비 판매 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_contractors (contractor_id INT, contractor_name VARCHAR(255)); INSERT INTO defense_contractors (contractor_id, contractor_name) VALUES (1, 'Lockheed Martin'), (2, 'Raytheon'), (3, 'Boeing'); CREATE TABLE military_sales (sale_id INT, contractor_id INT, sale_value FLOAT); INSERT INTO military_sales (sale_id, contractor_id, sale_value) VALUES (1, 1, 12000000), (2, 2, 15000000), (3, 3, 18000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.contractor_name, SUM(m.sale_value) as total_sales FROM defense_contractors d INNER JOIN military_sales m ON d.contractor_id = m.contractor_id GROUP BY d.contractor_name;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 숲에서 가장 높은 탄소 흡수 잠재력을 가진 수종을 확인하세요.\n\nDDL statements:\nCREATE TABLE forest_species (species VARCHAR(255), sequestration_rate DECIMAL(5,2)); INSERT INTO forest_species (species, sequestration_rate) VALUES ('Oak', 45.3), ('Pine', 34.6), ('Teak', 56.2), ('Mahogany', 49.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, MAX(sequestration_rate) FROM forest_species;"
    },
    {
        "instruction": "입력 텍스트: 다음 세부 정보를 가진 취약점의 새로운 레코드를 \"vulnerabilities\" 테이블에 추가하세요: [(1, 'SQL 인젝션', '중간'), (2, '크로스사이트 스크립팅', '낮음'), (3, '권한 상승', '높음')]\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT PRIMARY KEY, name VARCHAR(50), severity VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO vulnerabilities (id, name, severity) VALUES (1, 'SQL injection', 'medium'), (2, 'Cross-site scripting', 'low'), (3, 'Privilege escalation', 'high');"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기에 유기농 제품의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (product VARCHAR(255), sale_date DATE, revenue NUMERIC(10, 2), is_organic BOOLEAN); INSERT INTO sales (product, sale_date, revenue, is_organic) VALUES ('Cleanser', '2021-10-01', 20, true), ('Foundation', '2021-11-03', 30, false), ('Shampoo', '2021-12-07', 40, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) as total_revenue FROM sales WHERE sale_date BETWEEN '2021-10-01' AND '2021-12-31' AND is_organic = true;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 지난 30일 동안 발생한 범죄 사건은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE crime_incidents (incident_id INT, neighborhood_id INT, date DATE); INSERT INTO crime_incidents (incident_id, neighborhood_id, date) VALUES (1, 1, '2021-01-01'), (2, 2, '2021-01-02'), (3, 3, '2021-01-03'), (4, 1, '2021-01-15'), (5, 3, '2021-01-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT neighborhood_id, name, COUNT(*) as total_crimes FROM crime_incidents ci JOIN neighborhoods n ON ci.neighborhood_id = n.neighborhood_id WHERE date >= CURDATE() - INTERVAL 30 DAY GROUP BY neighborhood_id, name;"
    },
    {
        "instruction": "입력 텍스트: 토론토에서 치킨을 포함한 메뉴 아이템의 재료 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MenuItems (menu_item_id INT, menu_item VARCHAR(50), price INT, cost INT, location VARCHAR(50), ingredient VARCHAR(50)); INSERT INTO MenuItems (menu_item_id, menu_item, price, cost, location, ingredient) VALUES (1, 'Grilled Chicken Salad', 12, 4, 'Toronto', 'Chicken'), (2, 'Cheeseburger', 8, 3, 'Toronto', 'Beef'), (3, 'Veggie Burger', 9, 3, 'Toronto', 'Vegetables');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) AS total_cost FROM MenuItems WHERE location = 'Toronto' AND ingredient = 'Chicken';"
    },
    {
        "instruction": "입력 텍스트: 북극에서 발견된 해양 생물 종은 몇 종인가요?\n\nDDL statements:\nCREATE TABLE arctic_marine_species (id INT, species VARCHAR(255), year_discovered INT); INSERT INTO arctic_marine_species (id, species, year_discovered) VALUES (1, 'Narwhal', 1700), (2, 'Beluga Whale', 1745), (3, 'Greenland Shark', 1850), (4, 'Bearded Seal', 1860), (5, 'Hooded Seal', 1950);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(species) FROM arctic_marine_species;"
    },
    {
        "instruction": "입력 텍스트: talent_acquisition' 테이블에 새로운 인재 채용 기록을 추가합니다\n\nDDL statements:\nCREATE TABLE talent_acquisition (id INT PRIMARY KEY, job_title VARCHAR(50), job_location VARCHAR(50), number_of_openings INT, source VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO talent_acquisition (id, job_title, job_location, number_of_openings, source) VALUES (2001, 'Software Engineer', 'Seattle', 3, 'LinkedIn');"
    },
    {
        "instruction": "입력 텍스트: readers' 테이블에 있는 남성과 여성 독자의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE readers (id INT, name VARCHAR(50), age INT, gender VARCHAR(10)); INSERT INTO readers (id, name, age, gender) VALUES (1, 'John Doe', 25, 'Male'), (2, 'Jane Smith', 30, 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) as avg_age, gender FROM readers GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: \"가르시아\"라는 성을 가진 고객들의 모든 펀드에 대한 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name VARCHAR(50), investment FLOAT); CREATE TABLE fund_investments (client_id INT, fund_name VARCHAR(50), investment FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment) FROM clients INNER JOIN fund_investments ON clients.client_id = fund_investments.client_id WHERE clients.name LIKE '%Garcia%';"
    },
    {
        "instruction": "입력 텍스트: 2021년 텍사스의 보존 프로그램에서 절약된 총 물 절약률을 구하세요.\n\nDDL statements:\nCREATE TABLE Conservation (id INT, state VARCHAR(20), year INT, savings_percentage FLOAT); INSERT INTO Conservation (id, state, year, savings_percentage) VALUES (1, 'Texas', 2018, 5), (2, 'Texas', 2019, 7), (3, 'Texas', 2020, 8), (4, 'Texas', 2021, 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(savings_percentage) FROM Conservation WHERE state = 'Texas' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 가장 추운 기후에서 사는 원주민 공동체는 어디인가요?\n\nDDL statements:\nCREATE TABLE Climate (id INT PRIMARY KEY, location VARCHAR(255), temperature DECIMAL(5,2)); CREATE TABLE IndigenousCommunities (id INT PRIMARY KEY, name VARCHAR(255), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT IndigenousCommunities.name FROM IndigenousCommunities INNER JOIN Climate ON IndigenousCommunities.climate_id = Climate.id WHERE Climate.temperature = (SELECT MIN(temperature) FROM Climate);"
    },
    {
        "instruction": "입력 텍스트: 학생들의 성별에 따른 정신 건강 점수의 평균을 계산하세요.\n\nDDL statements:\nCREATE TABLE Student (StudentID INT, Gender VARCHAR(10), MentalHealthScore INT); INSERT INTO Student (StudentID, Gender, MentalHealthScore) VALUES (1, 'Male', 70), (2, 'Female', 75), (3, 'Male', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Gender, AVG(MentalHealthScore) FROM Student GROUP BY Gender;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 위협 행위자 그룹에 기인된 사이버 공격은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE cyber_attacks (attack_id INT, attack_date DATE, attack_country VARCHAR(50), attack_ip VARCHAR(50), threat_actor_group VARCHAR(50)); INSERT INTO cyber_attacks (attack_id, attack_date, attack_country, attack_ip, threat_actor_group) VALUES (1, '2022-01-01', 'USA', '192.168.1.1', 'APT28'), (2, '2022-01-02', 'Canada', '192.168.1.2', 'APT29'), (3, '2022-01-01', 'USA', '192.168.1.3', 'APT28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT threat_actor_group, COUNT(*) as total_attacks FROM cyber_attacks WHERE attack_date >= DATEADD(year, -1, GETDATE()) GROUP BY threat_actor_group;"
    },
    {
        "instruction": "입력 텍스트: 2022년 첫 기부자들의 최소 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations2022 (DonationID int, DonorType varchar(50), DonationAmount decimal(10,2), DonationDate date, FirstTimeDonor char(1)); INSERT INTO Donations2022 (DonationID, DonorType, DonationAmount, DonationDate, FirstTimeDonor) VALUES (1, 'Individual', 25, '2022-02-03', 'Y'); INSERT INTO Donations2022 (DonationID, DonorType, DonationAmount, DonationDate, FirstTimeDonor) VALUES (2, 'Corporation', 150, '2022-04-20', 'N');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(DonationAmount) FROM Donations2022 WHERE DonorType = 'Individual' AND FirstTimeDonor = 'Y';"
    },
    {
        "instruction": "입력 텍스트: 2022년 3월에 20세에서 25세 사이의 사용자들이 수행한 모든 운동 활동의 총 지속 시간을 보여주세요.\n\nDDL statements:\nCREATE TABLE user_workouts_march (id INT, user_id INT, activity VARCHAR(50), duration INT, timestamp TIMESTAMP); INSERT INTO user_workouts_march (id, user_id, activity, duration, timestamp) VALUES (1, 1001, 'running', 30, '2022-03-01 10:00:00'); INSERT INTO user_workouts_march (id, user_id, activity, duration, timestamp) VALUES (2, 1002, 'swimming', 45, '2022-03-01 11:30:00'); INSERT INTO user_workouts_march (id, user_id, activity, duration, timestamp) VALUES (3, 1003, 'yoga', 60, '2022-03-02 09:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(duration) FROM user_workouts_march WHERE user_id IN (SELECT user_id FROM (SELECT user_id, EXTRACT(YEAR FROM timestamp) as birth_year FROM user_workouts_march) subquery WHERE subquery.birth_year BETWEEN EXTRACT(YEAR FROM timestamp) - 25 AND EXTRACT(YEAR FROM timestamp) - 20 AND EXTRACT(MONTH FROM timestamp) = 3);"
    },
    {
        "instruction": "입력 텍스트: 각 바이오센서 유형에 연관된 유전자는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE biosensor (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), company_id INT); CREATE TABLE gene (id INT PRIMARY KEY, name VARCHAR(255), function VARCHAR(255), company_id INT, biosensor_id INT); INSERT INTO biosensor (id, name, type, company_id) VALUES (1, 'BioSensor1', 'pH', 2), (2, 'BioSensor2', 'Temperature', 1), (3, 'BioSensor3', 'pH', 1); INSERT INTO gene (id, name, function, company_id, biosensor_id) VALUES (1, 'GeneA', 'Growth', 1, 2), (2, 'GeneB', 'Metabolism', 1, 2), (3, 'GeneC', 'Development', 1, 1), (4, 'GeneD', 'Growth', 1, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT b.type, COUNT(g.id) FROM biosensor b JOIN gene g ON b.id = g.biosensor_id GROUP BY b.type;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 '모두를 위한 교육' 프로그램에 기부한 국제 기부자는 누구인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, Country TEXT); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (1, 'John Doe', 'USA'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (2, 'Jane Smith', 'Canada'); CREATE TABLE Contributions (ContributionID INT, DonorID INT, Program TEXT, Amount DECIMAL, ContributionDate DATE); INSERT INTO Contributions (ContributionID, DonorID, Program, Amount, ContributionDate) VALUES (1, 1, 'Education for All', 5000, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Donors.DonorName, Donors.Country FROM Donors INNER JOIN Contributions ON Donors.DonorID = Contributions.DonorID WHERE Contributions.Program = 'Education for All' AND Contributions.ContributionDate BETWEEN '2021-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 같은 날 기부한 후원자는 누구인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, supporter INT, donation_date DATE); INSERT INTO donations (id, supporter, donation_date) VALUES (1, 1, '2022-01-01'), (2, 2, '2022-01-01'), (3, 3, '2022-01-02'), (4, 4, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.supporter AS supporter1, b.supporter AS supporter2, a.donation_date FROM donations AS a INNER JOIN donations AS b ON a.donation_date = b.donation_date WHERE a.supporter <> b.supporter;"
    },
    {
        "instruction": "입력 텍스트: \"Digital Art\" 카테고리에 속하면서 방문객이 1000명을 초과하는 전시회의 평균 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Exhibitions (ExhibitionID INT, ExhibitionName VARCHAR(255), Category VARCHAR(255), TicketPrice DECIMAL(5,2), Visitors INT); INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, Category, TicketPrice, Visitors) VALUES (1, 'Digital Art Exhibition', 'Digital Art', 19.99, 1500), (2, 'Interactive Art Exhibition', 'Digital Art', 24.99, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(TicketPrice) FROM Exhibitions WHERE Category = 'Digital Art' AND Visitors > 1000;"
    },
    {
        "instruction": "입력 텍스트: 각 위치의 주간 평균 온도는 얼마인가요?\n\nDDL statements:\ncreate table WeatherData (Location varchar(255), Temperature int, Timestamp datetime); insert into WeatherData values ('Location1', 20, '2022-01-01 00:00:00'), ('Location1', 22, '2022-01-02 00:00:00'), ('Location2', 18, '2022-01-01 00:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: select Location, AVG(Temperature) as AvgTemperature, DATE_PART('week', Timestamp) as Week from WeatherData group by Location, Week;"
    },
    {
        "instruction": "입력 텍스트: 대서양에 서식하는 해양 생물 종과 그들의 보전 상태를 나열하세요.\n\nDDL statements:\nCREATE TABLE atlantic_marine_life (id INT, species VARCHAR, population INT, conservation_status VARCHAR); INSERT INTO atlantic_marine_life (id, species, population, conservation_status) VALUES (1, 'Dolphin', 50000, 'Least Concern'), (2, 'Blue Whale', 12000, 'Endangered');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, conservation_status FROM atlantic_marine_life;"
    },
    {
        "instruction": "입력 텍스트: 2021년 9월 각 필드별로 총 강우량(밀리미터)을 계산하세요.\n\nDDL statements:\nCREATE TABLE field_rainfall (field_id VARCHAR(10), rainfall INT, reading_date DATE); INSERT INTO field_rainfall (field_id, rainfall, reading_date) VALUES ('A', 50, '2021-09-01'), ('B', 60, '2021-09-02'), ('A', 40, '2021-09-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT field_id, SUM(rainfall) FROM field_rainfall WHERE reading_date BETWEEN '2021-09-01' AND '2021-09-30' GROUP BY field_id;"
    },
    {
        "instruction": "입력 텍스트: 새로운 다양성과 포용성 교육 프로그램을 추가하세요.\n\nDDL statements:\nCREATE TABLE Training (TrainingID INT, TrainingName VARCHAR(50), Department VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Training (TrainingID, TrainingName, Department) VALUES (1, 'Diversity and Inclusion', NULL);"
    },
    {
        "instruction": "입력 텍스트: 각 학교에서 '오픈 교육학' 과정을 이수한 학생의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE schools (school_id INT, school_name VARCHAR(255)); CREATE TABLE students (student_id INT, school_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255), completion_date DATE); CREATE TABLE student_courses (student_id INT, course_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.school_name, (COUNT(sc.student_id) * 100.0 / (SELECT COUNT(*) FROM students st JOIN student_courses sc ON st.student_id = sc.student_id WHERE sc.course_id IN (SELECT course_id FROM courses WHERE course_name LIKE '%open pedagogy%'))) AS percentage FROM schools s JOIN students st ON s.school_id = st.school_id JOIN student_courses sc ON st.student_id = sc.student_id GROUP BY s.school_id;"
    },
    {
        "instruction": "입력 텍스트: mining_operation_data' 테이블에 'Grasberg' 광산을 위한 새로운 기록을 추가하고, 채굴된 자원으로 'Gold'를, 생산 능력은 100000톤으로 입력하세요.\n\nDDL statements:\nCREATE TABLE mining_operation_data (mine_name VARCHAR(50), mined_material VARCHAR(20), production_capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO mining_operation_data (mine_name, mined_material, production_capacity) VALUES ('Grasberg', 'Gold', 100000);"
    },
    {
        "instruction": "입력 텍스트: Vincent van Gogh'의 작품들을 위한 뷰를 생성하세요\n\nDDL statements:\nCREATE TABLE artworks (id INT PRIMARY KEY, title VARCHAR(255), artist VARCHAR(255), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW gogh_artworks AS SELECT * FROM artworks WHERE artist = 'Vincent van Gogh';"
    },
    {
        "instruction": "입력 텍스트: Ontario' 지역의 모든 탄소 상쇄 프로그램과 각각의 비용을 나열하세요.\n\nDDL statements:\nCREATE TABLE carbon_offset_programs (id INT, name TEXT, location TEXT, cost FLOAT); INSERT INTO carbon_offset_programs (id, name, location, cost) VALUES (1, 'Program A', 'Ontario', 15.25), (2, 'Program B', 'Quebec', 20.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, cost FROM carbon_offset_programs WHERE location = 'Ontario';"
    },
    {
        "instruction": "입력 텍스트: 섬유 산업에서 CO2 배출량이 가장 적은 하위 3개국의 총 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE co2_emissions (country VARCHAR(50), industry_type VARCHAR(50), co2_emissions FLOAT); INSERT INTO co2_emissions (country, industry_type, co2_emissions) VALUES ('Sweden', 'Textile', 1200.00), ('Norway', 'Textile', 1000.00), ('Denmark', 'Textile', 800.00), ('Finland', 'Textile', 600.00), ('Ireland', 'Textile', 400.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(co2_emissions) FROM co2_emissions WHERE country IN ('Sweden', 'Norway', 'Denmark') ORDER BY co2_emissions ASC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 센터 A에서 치료를 받은 환자들의 평균 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE community_centers (id INT, name VARCHAR(255)); INSERT INTO community_centers (id, name) VALUES (1, 'Community Center A'), (2, 'Community Center B'); CREATE TABLE treatments (id INT, community_center_id INT, patient_id INT, type VARCHAR(255)); INSERT INTO treatments (id, community_center_id, patient_id, type) VALUES (1, 1, 1, 'therapy'), (2, 1, 2, 'group session'), (3, 2, 3, 'therapy'); CREATE TABLE patients (id INT, age INT); INSERT INTO patients (id, age) VALUES (1, 35), (2, 45), (3, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(p.age) FROM patients p JOIN treatments t ON p.id = t.patient_id WHERE t.type = 'therapy' AND t.community_center_id = 1;"
    },
    {
        "instruction": "입력 텍스트: users' 테이블의 'influencer' 카테고리에 속한 사용자들이 지난 30일 동안 'posts' 테이블의 'tech' 카테고리에 게시한 게시물들의 평균 좋아요 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (user_id INT, user_category VARCHAR(20)); CREATE TABLE posts (post_id INT, user_id INT, post_category VARCHAR(20), post_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(post_likes) FROM (SELECT post_likes FROM posts WHERE user_id IN (SELECT user_id FROM users WHERE user_category = 'influencer') AND post_date >= CURDATE() - INTERVAL 30 DAY AND post_category = 'tech') AS subquery;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 '기부자 X'로부터 기부금을 받은 수령인들을 나열하세요.\n\nDDL statements:\nCREATE TABLE donations (donation_id INT, donor_id INT, recipient_id INT, donation_amount DECIMAL, donation_date DATE); INSERT INTO donations (donation_id, donor_id, recipient_id, donation_amount, donation_date) VALUES (1, 1, 1, 100.00, '2021-01-01'), (2, 1, 2, 200.00, '2021-02-01'), (3, 2, 1, 300.00, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT recipient_id FROM donations WHERE donor_id = 1 AND donation_date BETWEEN '2021-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: media' 스키마에 있는 여성 뉴스 기자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE media.reporters (reporter_id INT, name VARCHAR(100), gender VARCHAR(10), age INT); INSERT INTO media.reporters (reporter_id, name, gender, age) VALUES (1, 'Anne Smith', 'Female', 35), (2, 'Bruce Lee', 'Male', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM media.reporters WHERE gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리별로 가장 높은 시간당 임금을 기록한 노동 통계 목록입니다.\n\nDDL statements:\nCREATE TABLE labor_statistics (id INT, category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, title, hourly_wage, ROW_NUMBER() OVER (PARTITION BY category ORDER BY hourly_wage DESC) as wage_rank FROM labor_statistics;"
    },
    {
        "instruction": "입력 텍스트: theater' 카테고리의 이벤트 중 최대 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (id INT, name VARCHAR(255), date DATE, category VARCHAR(255), price DECIMAL(5,2)); INSERT INTO events (id, name, date, category, price) VALUES (1, 'Concert', '2022-06-01', 'music', 50.00), (2, 'Play', '2022-06-02', 'theater', 80.00), (3, 'Festival', '2022-06-03', 'music', 75.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM events WHERE category = 'theater';"
    },
    {
        "instruction": "입력 텍스트: 500달러 이상을 소비하고, 미국 출신이며, 최근 30일 이내에 게임을 한 플레이어 기록을 'VIP' 상태로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE players (id INT PRIMARY KEY, name TEXT, status TEXT, total_spent DECIMAL(10,2), country TEXT, last_login DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE players SET status = 'VIP' WHERE total_spent > 500 AND country = 'US' AND last_login > NOW() - INTERVAL 30 DAY;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별 자원봉사자 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE volunteers (id INT, program_id INT, name VARCHAR(50)); INSERT INTO volunteers (id, program_id, name) VALUES (1, 1, 'Alice'); INSERT INTO volunteers (id, program_id, name) VALUES (2, 1, 'Bob'); INSERT INTO volunteers (id, program_id, name) VALUES (3, 2, 'Charlie');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, COUNT(*) as num_volunteers FROM volunteers GROUP BY program_id;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월의 기부 목록\n\nDDL statements:\nCREATE TABLE Donations( id INT PRIMARY KEY AUTO_INCREMENT, donor_name VARCHAR(255), donation_amount DECIMAL(10, 2), donation_date DATE) INSERT INTO Donations (donor_name, donation_amount, donation_date) VALUES ('Aisha Patel', 500.00, '2022-01-01') INSERT INTO Donations (donor_name, donation_amount, donation_date) VALUES ('Carlos Rivera', 300.50, '2022-02-15') INSERT INTO Donations (donor_name, donation_amount, donation_date) VALUES ('Jasmine Lee', 250.00, '2022-03-30') INSERT INTO Donations (donor_name, donation_amount, donation_date) VALUES ('Kai Nguyen', 700.75, '2022-04-10')\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Donations WHERE donation_date BETWEEN '2022-01-01' AND '2022-01-31'"
    },
    {
        "instruction": "입력 텍스트: 2021년에 모바일 게임으로부터 발생한 유럽 지역의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE GameRevenue (GameID INT PRIMARY KEY, GameType VARCHAR(20), Platform VARCHAR(10), Revenue INT, Year INT); INSERT INTO GameRevenue (GameID, GameType, Platform, Revenue, Year) VALUES (1, 'Puzzle', 'Mobile', 100000, 2021); INSERT INTO GameRevenue (GameID, GameType, Platform, Revenue, Year) VALUES (2, 'RPG', 'Console', 200000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Revenue) FROM GameRevenue WHERE GameType = 'Puzzle' AND Platform = 'Mobile' AND Year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 아이티에서 재난 대응 활동에 참여한 자원봉사자와 인도에서 지역사회 개발 활동에 참여한 자원봉사자는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE volunteers (id INT, name TEXT, activity TEXT, location TEXT); INSERT INTO volunteers (id, name, activity, location) VALUES (1, 'John Doe', 'disaster response', 'Haiti'); INSERT INTO volunteers (id, name, activity, location) VALUES (2, 'Jane Smith', 'community development', 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM volunteers WHERE (activity = 'disaster response' AND location = 'Haiti') OR (activity = 'community development' AND location = 'India');"
    },
    {
        "instruction": "입력 텍스트: 어느 광산 현장의 노동 생산성이 가장 낮은가요?\n\nDDL statements:\nCREATE TABLE labor_productivity (site_id INT, productivity FLOAT); INSERT INTO labor_productivity (site_id, productivity) VALUES (1, 12.5), (2, 15.0), (3, 13.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_id, productivity FROM labor_productivity ORDER BY productivity ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 장르별 TV 프로그램 수?\n\nDDL statements:\nCREATE TABLE TV_Shows_Genre (id INT, title VARCHAR(100), genre VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT genre, COUNT(*) FROM TV_Shows_Genre GROUP BY genre;"
    },
    {
        "instruction": "입력 텍스트: 3번 이상의 임무를 완수한 우주비행사들의 임무 평균 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Astronaut_Missions (id INT, astronaut_id INT, mission_id INT, role VARCHAR, assignment_date DATE); CREATE TABLE Astronauts (id INT, name VARCHAR, age INT, gender VARCHAR, mission_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(day, MISSION.assignment_date, LEAD(MISSION.assignment_date) OVER (PARTITION BY ASTRONAUT.id ORDER BY MISSION.assignment_date))) as average_duration FROM Astronauts ASTRONAUT JOIN Astronaut_Missions MISSION ON ASTRONAUT.id = MISSION.astronaut_id WHERE ASTRONAUT.mission_count > 3;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 예산이 100만 달러를 초과하는 탄소 상쇄 프로그램을 확인하세요.\n\nDDL statements:\nCREATE TABLE Carbon_Offset_Programs (program_id INT, location VARCHAR(50), budget FLOAT); INSERT INTO Carbon_Offset_Programs (program_id, location, budget) VALUES (1, 'California', 1500000.0), (2, 'Texas', 800000.0), (3, 'New York', 1200000.0), (4, 'Florida', 900000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, location, budget FROM Carbon_Offset_Programs WHERE budget > 1000000.0 AND location = 'United States';"
    },
    {
        "instruction": "입력 텍스트: soccer_teams' 테이블에는 축구 팀이 몇 개 있습니까?\n\nDDL statements:\nCREATE TABLE soccer_teams (team_id INT, team_name VARCHAR(100), sport VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM soccer_teams WHERE sport = 'football';"
    },
    {
        "instruction": "입력 텍스트: 2024년도 첫 번째 분기에 '니트' 카테고리의 총 판매량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE suppliers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), industry VARCHAR(255)); INSERT INTO suppliers (id, name, country, industry) VALUES (1, 'Supplier A', 'Bangladesh', 'Textile'); CREATE TABLE garments (id INT PRIMARY KEY, supplier_id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2)); CREATE TABLE sales (id INT PRIMARY KEY, garment_id INT, date DATE, quantity INT); CREATE VIEW sales_by_quarter AS SELECT YEAR(date) as sales_year, QUARTER(date) as sales_quarter, SUM(quantity) as total_sales FROM sales GROUP BY sales_year, sales_quarter;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT total_sales FROM sales_by_quarter WHERE sales_year = 2024 AND sales_quarter = 1 AND category = 'Knit';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 기후 감시 스테이션의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_monitoring_stations (id INT, station_name VARCHAR(255), country VARCHAR(255)); INSERT INTO climate_monitoring_stations (id, station_name, country) VALUES (1, 'Station A', 'canada'), (2, 'Station B', 'greenland'), (3, 'Station C', 'canada'), (4, 'Station D', 'norway');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM climate_monitoring_stations GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: \"audience_demographics\" 테이블에서 \"country\"가 \"Republic of India\"인 모든 레코드의 \"country\" 필드를 \"India\"로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE audience_demographics (id INT PRIMARY KEY, age INT, country VARCHAR(255), gender VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE audience_demographics SET country = 'India' WHERE country = 'Republic of India';"
    },
    {
        "instruction": "입력 텍스트: PQR 마이닝 회사의 각 부서별 직원 수와 그들의 역할을 보여주세요.\n\nDDL statements:\nCREATE TABLE MiningDepartment (id INT, name VARCHAR(255)); INSERT INTO MiningDepartment (id, name) VALUES (1, 'Mining Operations'), (2, 'Maintenance'), (3, 'Safety'); CREATE TABLE Employee (id INT, name VARCHAR(255), department_id INT, role VARCHAR(255)); INSERT INTO Employee (id, name, department_id, role) VALUES (1, 'John Smith', 1, 'Mining Engineer'), (2, 'Jane Doe', 2, 'Mechanic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name AS department, e.role, COUNT(e.id) AS employee_count FROM Employee e, MiningDepartment d WHERE e.department_id = d.id AND d.name = 'Mining Operations' GROUP BY e.role;"
    },
    {
        "instruction": "입력 텍스트: 원주민 식량 시스템에 의한 작물 유형별 총 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE crops (id INT, farmer_id INT, crop_name VARCHAR(255), yield INT, sale_price FLOAT, system_type VARCHAR(255)); INSERT INTO crops (id, farmer_id, crop_name, yield, sale_price, system_type) VALUES (1, 1, 'Corn', 80, 2.50, 'Indigenous'); INSERT INTO crops (id, farmer_id, crop_name, yield, sale_price, system_type) VALUES (2, 1, 'Soybeans', 120, 3.25, 'Indigenous'); INSERT INTO crops (id, farmer_id, crop_name, yield, sale_price, system_type) VALUES (3, 2, 'Corn', 90, 2.75, 'Agroecology'); INSERT INTO crops (id, farmer_id, crop_name, yield, sale_price, system_type) VALUES (4, 2, 'Wheat', 100, 3.00, 'Urban Agriculture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crop_name, SUM(yield) as total_production FROM crops WHERE system_type = 'Indigenous' GROUP BY crop_name;"
    },
    {
        "instruction": "입력 텍스트: 선박 이름의 길이가 15자를 초과하는 선박은 몇 척입니까?\n\nDDL statements:\nCREATE TABLE vessels_2 (vessel_id INT, vessel_name VARCHAR(50)); INSERT INTO vessels_2 (vessel_id, vessel_name) VALUES (1, 'Sea Titan'), (2, 'Harbor Master'), (3, 'Marine'), (4, 'Ocean Express');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT vessel_name FROM vessels_2 WHERE LENGTH(vessel_name) > 15) as temp;"
    },
    {
        "instruction": "입력 텍스트: 보스턴 셀틱스'의 모든 선수들을 삭제하세요\n\nDDL statements:\nCREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'Boston Celtics'), (2, 'Golden State Warriors');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM players WHERE team_id IN (SELECT id FROM teams WHERE name = 'Boston Celtics');"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 재정적 안녕 지수가 향상된 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE client (id INT, name VARCHAR(50), wellbeing_score INT, last_update DATE); INSERT INTO client (id, name, wellbeing_score, last_update) VALUES (1, 'Aisha', 70, '2021-01-01'), (2, 'Bilal', 80, '2021-02-15'), (3, 'Fatima', 75, '2020-03-01'), (4, 'Hamza', 60, '2020-04-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, wellbeing_score FROM client WHERE last_update > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND wellbeing_score > (SELECT wellbeing_score FROM client WHERE name = client.name AND last_update < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ORDER BY last_update DESC LIMIT 1);"
    },
    {
        "instruction": "입력 텍스트: 태평양 해저의 평균 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ocean_floor (ocean TEXT, depth INT); INSERT INTO ocean_floor (ocean, depth) VALUES ('Pacific', 10000), ('Atlantic', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) FROM ocean_floor WHERE ocean = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 고위험 및 심각한 취약점을 가진 시스템의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE VulnerabilityAssessments(id INT, system_id VARCHAR(50), vulnerabilities INT, assessment_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 'total_high_critical' as type, COUNT(*) as count FROM VulnerabilityAssessments WHERE vulnerabilities >= 7 AND assessment_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) UNION ALL SELECT 'total_critical' as type, COUNT(*) as count FROM VulnerabilityAssessments WHERE vulnerabilities = 10 AND assessment_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 스페인어로 진행된 문화 역량 훈련의 비율을 찾으세요.\n\nDDL statements:\nCREATE TABLE CulturalCompetencyTrainings (Region VARCHAR(20), Language VARCHAR(20), Count INT); INSERT INTO CulturalCompetencyTrainings (Region, Language, Count) VALUES ('Northeast', 'English', 100), ('Northeast', 'Spanish', 50), ('Northeast', 'French', 25), ('Southeast', 'English', 150), ('Southeast', 'Spanish', 75), ('Southeast', 'French', 50), ('Midwest', 'English', 200), ('Midwest', 'Spanish', 100), ('Midwest', 'French', 75), ('West', 'English', 250), ('West', 'Spanish', 125), ('West', 'French', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, (SUM(CASE WHEN Language = 'Spanish' THEN Count ELSE 0 END) / SUM(Count)) * 100 AS Percentage FROM CulturalCompetencyTrainings GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 지난 90일 동안 승진받은 직원의 비율을 계산하고, 결과를 소수점 첫째 자리까지 표시하세요.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, PromotionDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Employees) , 1) AS PromotionPercentage FROM Employees WHERE PromotionDate >= DATEADD(day, -90, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 평균 교통 시스템 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE transportation_per_country (id INT, country VARCHAR(50), count INT); INSERT INTO transportation_per_country (id, country, count) VALUES (1, 'USA', 4), (2, 'China', 6), (3, 'Germany', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(count) FROM transportation_per_country;"
    },
    {
        "instruction": "입력 텍스트: 국가별 인도적 지원 활동의 수를 표시합니다\n\nDDL statements:\nCREATE TABLE humanitarian_assistance (id INT PRIMARY KEY, operation VARCHAR(255), location VARCHAR(255), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) FROM humanitarian_assistance GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 독일 사용자가 작성한 게시물에서 가장 많이 사용된 단어는 무엇인가요?\n\nDDL statements:\nCREATE TABLE posts (id INT, user_id INT, content TEXT); INSERT INTO posts (id, user_id, content) VALUES (1, 1, 'Hello World'), (2, 1, 'I love data'), (3, 2, 'Guten Tag'), (4, 2, 'Ich liebe Deutschland'); CREATE TABLE users (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO users (id, name, country) VALUES (1, 'John Doe', 'USA'), (2, 'Hans Schmidt', 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(content, ' ', n.n), ' ', -1) word, COUNT(*) count FROM posts JOIN users ON posts.user_id = users.id CROSS JOIN (SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) n WHERE users.country = 'Germany' GROUP BY word ORDER BY count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 교육 분야에서 성공적인 오픈 데이터 이니셔티브의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE open_data_initiatives (id INT, sector VARCHAR(20), status VARCHAR(10)); INSERT INTO open_data_initiatives (id, sector, status) VALUES (1, 'justice', 'open'), (2, 'transportation', 'open'), (3, 'education', 'closed'), (4, 'education', 'open');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(CASE WHEN status = 'open' THEN 1 END) / COUNT(*) FROM open_data_initiatives WHERE sector = 'education';"
    },
    {
        "instruction": "입력 텍스트: 각 날짜별 유지보수 일정에 포함된 차량의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE maintenance_schedule (schedule_id INT, schedule_date DATE, vehicle_id INT); CREATE TABLE vehicles (vehicle_id INT, vehicle_type VARCHAR(255)); INSERT INTO maintenance_schedule VALUES (1, '2023-01-01', 1); INSERT INTO maintenance_schedule VALUES (2, '2023-01-01', 2); INSERT INTO maintenance_schedule VALUES (3, '2023-01-02', 3); INSERT INTO vehicles VALUES (1, 'Bus'); INSERT INTO vehicles VALUES (2, 'Train'); INSERT INTO vehicles VALUES (3, 'Ferry');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT schedule_date, COUNT(DISTINCT vehicle_id) as total_vehicles FROM maintenance_schedule ms JOIN vehicles v ON ms.vehicle_id = v.vehicle_id GROUP BY schedule_date;"
    },
    {
        "instruction": "입력 텍스트: 전 세계 지열 및 풍력 프로젝트의 총 용량(단위: MW)을 찾아주세요.\n\nDDL statements:\nCREATE TABLE project (id INT, name TEXT, country TEXT, type TEXT, capacity INT); INSERT INTO project (id, name, country, type, capacity) VALUES (27, 'Iceland Geothermal', 'Iceland', 'Geothermal', 600), (28, 'USA Wind', 'USA', 'Wind', 12345), (29, 'Italy Geothermal', 'Italy', 'Geothermal', 500), (30, 'India Wind', 'India', 'Wind', 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM project WHERE (type = 'Geothermal' OR type = 'Wind');"
    },
    {
        "instruction": "입력 텍스트: game_results 테이블에서 각 도시에서 진행된 게임 수를 찾아주세요.\n\nDDL statements:\nCREATE TABLE game_results (game_id INT, home_team VARCHAR(20), away_team VARCHAR(20), home_score INT, away_score INT, city VARCHAR(20), stadium VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) as num_games FROM game_results GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 부동산' 펀드 유형에 대한 총 투자금액이 가장 많은 상위 3명의 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE investments (id INT, customer_id INT, fund_type VARCHAR(50), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (1, 1, 'Money Market', 10000.00); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (2, 2, 'Real Estate', 15000.00); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (3, 3, 'Money Market', 20000.00); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (4, 4, 'Real Estate', 30000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM investments WHERE fund_type = 'Real Estate' GROUP BY customer_id ORDER BY SUM(investment_amount) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 분야별 순환 경제 이니셔티브를 나열하세요.\n\nDDL statements:\nCREATE TABLE circular_economy(sector VARCHAR(20), initiative VARCHAR(50)); INSERT INTO circular_economy VALUES ('Commercial', 'Waste-to-Energy'), ('Residential', 'Recycling Program'), ('Industrial', 'Material Recovery'), ('Agricultural', 'Composting');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, initiative FROM circular_economy;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 지역의 총 강수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE precipitation_data (id INT, region VARCHAR(255), precipitation INT, timestamp TIMESTAMP); INSERT INTO precipitation_data (id, region, precipitation, timestamp) VALUES (1, 'North America', 10, '2022-01-01 10:00:00'), (2, 'South America', 20, '2022-01-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(precipitation) FROM precipitation_data WHERE timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH) GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2018년 유럽에서의 최소 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mines (id INT, name TEXT, location TEXT, production_volume INT, product TEXT, year INT); INSERT INTO mines (id, name, location, production_volume, product, year) VALUES (1, 'Emerald Enclave Mine', 'Europe', 1000, 'Emerald', 2018); INSERT INTO mines (id, name, location, production_volume, product, year) VALUES (2, 'Sapphire Slope Mine', 'Europe', 1500, 'Sapphire', 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(production_volume) FROM mines WHERE location = 'Europe' AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드별 전기차 모델의 총 개수를 보여주세요.\n\nDDL statements:\nCREATE TABLE electric_vehicles (id INT PRIMARY KEY, brand VARCHAR(255), model VARCHAR(255), production_year INT, range INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand, COUNT(DISTINCT model) as total_models FROM electric_vehicles GROUP BY brand;"
    },
    {
        "instruction": "입력 텍스트: 생산량이 1200을 초과하는 우물을 가지고 있지 않은 드릴러와 그들이 시추한 우물의 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE wells (id INT, driller VARCHAR(255), well VARCHAR(255), production_rate FLOAT); INSERT INTO wells (id, driller, well, production_rate) VALUES (1, 'DrillerC', 'WellA', 1000), (2, 'DrillerD', 'WellB', 1500), (3, 'DrillerC', 'WellC', 1200), (4, 'DrillerG', 'WellD', 1050), (5, 'DrillerH', 'WellE', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT driller, COUNT(*) as num_wells FROM wells WHERE driller NOT IN (SELECT driller FROM wells WHERE production_rate > 1200) GROUP BY driller;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에 위치한 공장들 중 윤리적 제조 관행이 있는 공장은 무엇인가요?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT, ethical_manufacturing BOOLEAN); INSERT INTO factories (factory_id, name, location, ethical_manufacturing) VALUES (1, 'Factory A', 'City A', true), (2, 'Factory B', 'City A', false), (3, 'Factory C', 'City B', true), (4, 'Factory D', 'City B', false), (5, 'Factory E', 'City C', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.location, f.name, f.ethical_manufacturing FROM factories f WHERE (f.location, f.ethical_manufacturing) IN (SELECT f1.location, MAX(f1.ethical_manufacturing) FROM factories f1 GROUP BY f1.location);"
    },
    {
        "instruction": "입력 텍스트: 2017년부터 2019년 사이에 미국에서 매진된 콘서트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE ConcertInfo (id INT, year INT, city VARCHAR(50), country VARCHAR(50), sold_out BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ConcertInfo WHERE year BETWEEN 2017 AND 2019 AND country = 'United States' AND sold_out = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 퀘벡에 위치한 공장에서 분기별로 생산된 화학 물질의 총량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production_quebec (plant_location VARCHAR(50), production_date DATE, quantity INT); INSERT INTO production_quebec (plant_location, production_date, quantity) VALUES ('Quebec chemical plant', '2020-01-01', 200); INSERT INTO production_quebec (plant_location, production_date, quantity) VALUES ('Quebec chemical plant', '2020-04-01', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date_format(production_date, '%Y-%q') as quarter, sum(quantity) as total_quantity FROM production_quebec WHERE plant_location = 'Quebec chemical plant' GROUP BY quarter;"
    },
    {
        "instruction": "입력 텍스트: 2021년 9월 1일 이후 '여행' 카테고리에서 댓글 수로 가장 활발한 사용자 상위 5명을 찾으세요.\n\nDDL statements:\nCREATE TABLE users (id INT, username TEXT); CREATE TABLE posts (user_id INT, category TEXT, timestamp TIMESTAMP, comment_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.username, SUM(p.comment_count) as total_comments FROM users u JOIN posts p ON u.id = p.user_id WHERE p.category = 'travel' AND p.timestamp >= '2021-09-01' GROUP BY u.username ORDER BY total_comments DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 1880년에서 1900년 사이에 태어난 인도 출신 작가들이 만든 작품들의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artists (artist_id INT, artist_name VARCHAR(50), birth_date DATE, country VARCHAR(50)); INSERT INTO Artists (artist_id, artist_name, birth_date, country) VALUES (1, 'Francis Newton Souza', '1924-04-12', 'India'); CREATE TABLE Artworks (artwork_id INT, title VARCHAR(50), year_made INT, artist_id INT, price FLOAT); INSERT INTO Artworks (artwork_id, title, year_made, artist_id, price) VALUES (1, 'Birth', 1948, 1, 2000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Artists ON Artworks.artist_id = Artists.artist_id WHERE Artists.country = 'India' AND Artists.birth_date BETWEEN '1880-01-01' AND '1900-12-31';"
    },
    {
        "instruction": "입력 텍스트: 각 도시에 있는 개인들이 평생 학습 활동에 쓴 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE individuals (individual_id INT, individual_name TEXT, city TEXT); INSERT INTO individuals VALUES (1, 'Alice', 'San Francisco'), (2, 'Bob', 'New York'), (3, 'Charlie', 'Los Angeles'), (4, 'David', 'Chicago'), (5, 'Eve', 'San Francisco'); CREATE TABLE lifelong_learning (ll_id INT, individual_id INT, ll_activity TEXT, ll_hours INT); INSERT INTO lifelong_learning VALUES (1, 1, 'Online Course', 10), (2, 1, 'Book Club', 5), (3, 2, 'Workshop', 8), (4, 3, 'Conference', 15), (5, 4, 'Online Course', 12), (6, 5, 'Book Club', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.city, SUM(ll.ll_hours) as total_hours_lifelong_learning FROM individuals i JOIN lifelong_learning ll ON i.individual_id = ll.individual_id GROUP BY i.city;"
    },
    {
        "instruction": "입력 텍스트: 가장 깊은 상위 3개의 해저 트렌치와 그 깊이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE underwater_trenches (trench_id INT, trench_name VARCHAR(50), depth INT); INSERT INTO underwater_trenches (trench_id, trench_name, depth) VALUES (1, 'Mariana Trench', 36000), (2, 'Tonga Trench', 35000), (3, 'Kermadec Trench', 32000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trench_name, depth FROM (SELECT trench_name, depth, RANK() OVER (ORDER BY depth DESC) as trench_rank FROM underwater_trenches) t WHERE trench_rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 오스틴 시에 포괄적 주택 정책이 적용된 부동산은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE property (id INT, inclusive_housing_policy BOOLEAN); CREATE VIEW austin_properties AS SELECT * FROM property WHERE city = 'Austin';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM austin_properties WHERE inclusive_housing_policy = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 동부 지역의 각 우물별 일일 생산량을 보여주세요.\n\nDDL statements:\nCREATE TABLE daily_production (well_id INT, date DATE, type VARCHAR(10), quantity INT, region VARCHAR(50)); INSERT INTO daily_production (well_id, date, type, quantity, region) VALUES (1, '2022-01-01', 'Oil', 100, 'Eastern'), (1, '2022-01-02', 'Oil', 105, 'Eastern'), (2, '2022-01-01', 'Gas', 200, 'Eastern'), (2, '2022-01-02', 'Gas', 205, 'Eastern');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT well_id, date, type, quantity FROM daily_production WHERE region = 'Eastern';"
    },
    {
        "instruction": "입력 텍스트: 원주민으로 식별하는 교육자들이 완료한 전문 개발 과정의 평균 수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE educators(id INT, indigenous BOOLEAN, num_courses INT); INSERT INTO educators VALUES (1, true, 2), (2, false, 5), (3, false, 3), (4, true, 1), (5, false, 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_courses) FROM educators WHERE indigenous = true;"
    },
    {
        "instruction": "입력 텍스트: 독일에 있는 회원들이 지난 분기에 소모한 칼로리의 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Members (MemberID INT, MemberName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Workouts (WorkoutID INT, WorkoutName VARCHAR(50), WorkoutType VARCHAR(50), Duration INT, WorkoutDate DATE, MemberID INT, CaloriesBurned INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CaloriesBurned) FROM Members m INNER JOIN Workouts w ON m.MemberID = w.MemberID WHERE m.Country = 'Germany' AND w.WorkoutDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 북대서양에서 2020년과 2021년에 기록된 고래 목격 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE whale_sightings (id INT, species TEXT, year INT, region TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM whale_sightings WHERE species = 'whale' AND region = 'North Atlantic' AND year IN (2020, 2021);"
    },
    {
        "instruction": "입력 텍스트: 2021'년과 '2022'년에 참여한 자원봉사자의 총 인원 수는 얼마였습니까?\n\nDDL statements:\nCREATE TABLE volunteer_events (id INT, year INT, num_volunteers INT); INSERT INTO volunteer_events (id, year, num_volunteers) VALUES (1, 2021, 150), (2, 2022, 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_volunteers) FROM (SELECT num_volunteers FROM volunteer_events WHERE year IN (2021, 2022)) subquery;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 유기농 요리의 매출 추이는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE dishes (dish_id INT, dish VARCHAR(50), created_at TIMESTAMP, is_organic BOOLEAN);CREATE TABLE orders (order_id INT, dish_id INT, price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_TRUNC('month', d.created_at) as month, SUM(o.price) as revenue FROM dishes d JOIN orders o ON d.dish_id = o.dish_id WHERE d.is_organic = TRUE AND d.created_at >= NOW() - INTERVAL '6 months' GROUP BY month ORDER BY month;"
    },
    {
        "instruction": "입력 텍스트: 태평양에 서식하는 모든 해양 생물의 서식지 평균 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE species (id INT, name VARCHAR(255), habitat_depth FLOAT, ocean_basin VARCHAR(255)); INSERT INTO species (id, name, habitat_depth, ocean_basin) VALUES (1, 'Atlantic Salmon', 50.0, 'Atlantic'), (2, 'Blue Whale', 200.0, 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(habitat_depth) FROM species WHERE ocean_basin = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 인구가 50만 명을 초과하는 지구의 총 매립지 용량을 찾으세요.\n\nDDL statements:\nCREATE TABLE LandfillCapacity (id INT, district VARCHAR(20), capacity INT); INSERT INTO LandfillCapacity (id, district, capacity) VALUES (1, 'DistrictA', 250000), (2, 'DistrictB', 500000), (3, 'DistrictC', 300000); CREATE TABLE Population (id INT, district VARCHAR(20), population INT); INSERT INTO Population (id, district, population) VALUES (1, 'DistrictA', 700000), (2, 'DistrictB', 600000), (3, 'DistrictC', 400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(LandfillCapacity.capacity) FROM LandfillCapacity INNER JOIN Population ON LandfillCapacity.district = Population.district WHERE Population.population > 500000;"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드의 재고에 대한 공정 무역 제품의 비율을 찾으세요.\n\nDDL statements:\nCREATE TABLE fair_trade_brands (brand_id INT, brand_name VARCHAR(255), fair_trade_items INT); INSERT INTO fair_trade_brands (brand_id, brand_name, fair_trade_items) VALUES (1, 'Mata Traders', 250), (2, 'No Nasties', 320), (3, 'Fair Trade Winds', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand_name, fair_trade_items, PERCENT_RANK() OVER (ORDER BY fair_trade_items) as fair_trade_percent FROM fair_trade_brands;"
    },
    {
        "instruction": "입력 텍스트: CityC에서 공원 업체의 평균 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Vendor(City VARCHAR(20), Department VARCHAR(20), Vendor_Count INT); INSERT INTO Vendor VALUES('CityA', 'Parks', 3), ('CityA', 'Education', 5), ('CityB', 'Parks', 2), ('CityB', 'Education', 4), ('CityC', 'Parks', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City, AVG(Vendor_Count) FROM Vendor WHERE Department = 'Parks' AND City = 'CityC' GROUP BY City;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 캘리포니아에서 공공사업 프로젝트의 평균 비용은 프로젝트 유형별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE public_works_projects (project_id INT, project_name VARCHAR(255), state VARCHAR(255), project_type VARCHAR(255), cost FLOAT); INSERT INTO public_works_projects (project_id, project_name, state, project_type, cost) VALUES (1, 'Project A', 'New York', 'Road', 2000000), (2, 'Project B', 'California', 'Bridge', 5000000), (3, 'Project C', 'New York', 'Tunnel', 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, AVG(cost) as avg_cost FROM public_works_projects WHERE state IN ('New York', 'California') GROUP BY project_type;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 참석자 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Attendees (ID INT, AttendeeName TEXT, Country TEXT); INSERT INTO Attendees (ID, AttendeeName, Country) VALUES (1, 'Jane Doe', 'United States'), (2, 'John Smith', 'Canada'), (3, 'Alice Johnson', 'Mexico'); CREATE TABLE Events (ID INT, EventName TEXT, Location TEXT); INSERT INTO Events (ID, EventName, Location) VALUES (1, 'The Nutcracker', 'New York'), (2, 'Hamlet', 'London'), (3, 'Swan Lake', 'Mexico City'); CREATE TABLE EventAttendance (ID INT, EventID INT, AttendeeID INT); INSERT INTO EventAttendance (ID, EventID, AttendeeID) VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, COUNT(DISTINCT AttendeeID) as NumberOfAttendees FROM EventAttendance JOIN Attendees ON EventAttendance.AttendeeID = Attendees.ID GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 야생 서식지의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE regions (region_id INT, region_name VARCHAR(100)); INSERT INTO regions (region_id, region_name) VALUES (1, 'Northern'), (2, 'Southern'), (3, 'Eastern'), (4, 'Western'); CREATE TABLE wildlife_habitats (habitat_id INT, region_id INT, habitat_name VARCHAR(100)); INSERT INTO wildlife_habitats (habitat_id, region_id, habitat_name) VALUES (1, 1, 'Tundra'), (2, 1, 'Boreal Forest'), (3, 2, 'Desert'), (4, 2, 'Tropical Rainforest'), (5, 3, 'Temperate Rainforest'), (6, 3, 'Grasslands'), (7, 4, 'Temperate Deciduous Forest'), (8, 4, 'Mountain Ranges');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.region_name, COUNT(wh.habitat_id) as total_habitats FROM regions r JOIN wildlife_habitats wh ON r.region_id = wh.region_id GROUP BY r.region_name;"
    },
    {
        "instruction": "입력 텍스트: conditions' 테이블을 삭제하세요\n\nDDL statements:\nDROP TABLE conditions;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DROP TABLE conditions;"
    },
    {
        "instruction": "입력 텍스트: 각 제품 카테고리별로 모든 창고에 저장된 아이템의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE warehouse (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO warehouse (id, name, location) VALUES (1, 'Warehouse A', 'City A'), (2, 'Warehouse B', 'City B'); CREATE TABLE inventory (id INT, warehouse_id INT, product VARCHAR(50), quantity INT); INSERT INTO inventory (id, warehouse_id, product, quantity) VALUES (1, 1, 'Product X', 300), (2, 1, 'Product Y', 400), (3, 2, 'Product X', 500), (4, 2, 'Product Z', 200); CREATE TABLE product (id INT, name VARCHAR(50), category VARCHAR(50)); INSERT INTO product (id, name, category) VALUES (1, 'Product X', 'Category A'), (2, 'Product Y', 'Category B'), (3, 'Product Z', 'Category C');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.category, SUM(i.quantity) as total_quantity FROM inventory i JOIN product p ON i.product = p.name GROUP BY p.category;"
    },
    {
        "instruction": "입력 텍스트: 2022년 상반기 유럽연합의 평균 탄소 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE carbon_prices (id INT, region VARCHAR(50), price FLOAT, date DATE); INSERT INTO carbon_prices (id, region, price, date) VALUES (1, 'European Union', 30.1, '2022-01-01'), (2, 'European Union', 32.5, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(price) as avg_price FROM carbon_prices WHERE region = 'European Union' AND date BETWEEN '2022-01-01' AND '2022-06-30' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 건강 형평성 지표 점수가 가장 낮은 상위 3개의 정신 건강 제공자와 그에 해당하는 점수를 나열하세요.\n\nDDL statements:\nCREATE TABLE MentalHealthProviders (ProviderID INT, HealthEquityMetricScore INT); INSERT INTO MentalHealthProviders (ProviderID, HealthEquityMetricScore) VALUES (1, 80), (2, 85), (3, 70), (4, 90), (5, 95), (6, 88), (7, 89);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProviderID, HealthEquityMetricScore FROM (SELECT ProviderID, HealthEquityMetricScore, ROW_NUMBER() OVER (ORDER BY HealthEquityMetricScore ASC) as Rank FROM MentalHealthProviders) as RankedData WHERE Rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 애니메이션 장르의 TV 프로그램 중 최소 콘텐츠 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE TV_Shows (show_id INT, show_name VARCHAR(255), content_rating DECIMAL(3,2), genre VARCHAR(255)); INSERT INTO TV_Shows (show_id, show_name, content_rating, genre) VALUES (1, 'Show A', 4.5, 'Action'), (2, 'Show B', 4.7, 'Comedy'), (3, 'Show C', 5.0, 'Anime'), (4, 'Show D', 4.2, 'Drama');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(content_rating) FROM TV_Shows WHERE genre = 'Anime';"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 재생 가능한 에너지원으로부터의 총 에너지 생산 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_production (state TEXT, source TEXT, production_mwh INT); INSERT INTO energy_production (state, source, production_mwh) VALUES ('Texas', 'Wind', 70000000), ('Texas', 'Solar', 30000000), ('Texas', 'Coal', 50000000), ('Texas', 'Natural Gas', 80000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(CASE WHEN source IN ('Wind', 'Solar') THEN production_mwh ELSE 0 END) / SUM(production_mwh)) * 100 AS renewable_percentage FROM energy_production WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 사용된 유기 비료와 무기 비료의 총 수량과 각각의 단위 비용을 찾아주세요.\n\nDDL statements:\nCREATE TABLE fertilizer (id INT, name VARCHAR(255), organic BOOLEAN, unit_price DECIMAL(10, 2)); CREATE TABLE inventory (id INT, fertilizer_id INT, quantity INT, timestamp TIMESTAMP); INSERT INTO fertilizer VALUES (1, 'Organic Compost', TRUE, 500), (2, 'Ammonium Sulfate', FALSE, 350); INSERT INTO inventory VALUES (1, 1, 1500, '2022-02-01 10:00:00'), (2, 2, 2000, '2022-02-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.organic, SUM(i.quantity) as total_quantity, f.unit_price, SUM(i.quantity * f.unit_price) as total_cost FROM fertilizer f INNER JOIN inventory i ON f.id = i.fertilizer_id WHERE i.timestamp BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY f.organic;"
    },
    {
        "instruction": "입력 텍스트: 40세 이상 사용자들의 고유 운동 이름과 그에 해당하는 총 소모 칼로리를 나열하세요.\n\nDDL statements:\nCREATE TABLE Users (id INT, user_name TEXT, age INT); CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Users (id, user_name, age) VALUES (1, 'John Doe', 32); INSERT INTO Users (id, user_name, age) VALUES (2, 'Jane Smith', 45); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT workout_name, SUM(calories) FROM Workouts JOIN Users ON Workouts.user_id = Users.id WHERE Users.age >= 40 GROUP BY workout_name;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 각 버스 노선별로 수집된 총 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE bus_fare_collection (collection_id INT, route_id INT, fare DECIMAL(5,2), collection_date DATE); INSERT INTO bus_fare_collection (collection_id, route_id, fare, collection_date) VALUES (1, 1, 1.50, '2022-02-01'), (2, 2, 2.50, '2022-02-03'), (3, 3, 0.75, '2022-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT route_id, SUM(fare) FROM bus_fare_collection WHERE collection_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY route_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 인도의 각 제약 회사별 총 매출액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SalesRevenue (Company VARCHAR(50), Country VARCHAR(50), Revenue INT, Year INT); INSERT INTO SalesRevenue (Company, Country, Revenue, Year) VALUES ('Sun Pharma', 'India', 2000000, 2020), ('Dr. Reddy', 'India', 2500000, 2020), ('Cipla', 'India', 3000000, 2020), ('Lupin', 'India', 2200000, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Company, SUM(Revenue) FROM SalesRevenue WHERE Country = 'India' AND Year = 2020 GROUP BY Company;"
    },
    {
        "instruction": "입력 텍스트: 브라질의 수력 발전소 설치 용량 중 최소값(단위: MW)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE hydro_power (country VARCHAR(20), capacity FLOAT); INSERT INTO hydro_power (country, capacity) VALUES ('Brazil', 10000.0), ('Brazil', 12000.0), ('Brazil', 15000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(capacity) FROM hydro_power WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 인도네시아에 있는 고객들의 재정 능력 점수를 현재 점수가 8점 미만인 경우 2점 증가시키세요.\n\nDDL statements:\nCREATE TABLE financial_capability_id (client_id INT, financial_capability_score INT, country VARCHAR(50)); INSERT INTO financial_capability_id (client_id, financial_capability_score, country) VALUES (1, 7, 'Indonesia'), (2, 3, 'Indonesia'), (3, 6, 'Indonesia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH updated_scores AS (UPDATE financial_capability_id SET financial_capability_score = financial_capability_score + 2 WHERE country = 'Indonesia' AND financial_capability_score < 8) SELECT * FROM updated_scores;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 거래를 하지 않은 모든 고객을 찾으세요.\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_amount DECIMAL, transaction_date DATE); INSERT INTO transactions (transaction_id, customer_id, transaction_amount, transaction_date) VALUES (1, 1, 50.00, '2022-01-01'), (2, 2, 1500.00, '2022-02-15'); CREATE TABLE customers (customer_id INT, name TEXT); INSERT INTO customers (customer_id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Bob Johnson');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM customers c WHERE c.customer_id NOT IN (SELECT t.customer_id FROM transactions t WHERE t.transaction_date >= DATEADD(month, -1, GETDATE()));"
    },
    {
        "instruction": "입력 텍스트: 수강 신청을 하지 않은 학생들의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, student_name TEXT); INSERT INTO students (student_id, student_name) VALUES (123, 'John Doe'), (456, 'Jane Smith'); CREATE TABLE enrollments (student_id INT, course_name TEXT); INSERT INTO enrollments (student_id, course_name) VALUES (123, 'Intro to Psychology'), (123, 'English Composition');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT student_name FROM students WHERE student_id NOT IN (SELECT student_id FROM enrollments);"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 차선이 3개 이상인 도로의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Roads(id INT, name TEXT, location TEXT, lanes INT); INSERT INTO Roads(id, name, location, lanes) VALUES (1, 'Interstate 5', 'California', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Roads WHERE location = 'California' AND lanes > 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 각 교수별 학술 출판물 수를 표시합니다\n\nDDL statements:\nCREATE TABLE Publication (id INT, year INT, faculty_id INT, journal VARCHAR(255)); INSERT INTO Publication (id, year, faculty_id, journal) VALUES (1, 2018, 1, 'Journal of Computer Science'), (2, 2019, 2, 'Physical Review'), (3, 2018, 3, 'English Literature Review'), (4, 2017, 1, 'Journal of Mathematics'); CREATE TABLE Faculty (id INT, name VARCHAR(255)); INSERT INTO Faculty (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Jamie Johnson');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name as faculty_member, COUNT(p.id) as num_publications FROM Faculty f JOIN Publication p ON f.id = p.faculty_id WHERE YEAR(p.year) BETWEEN YEAR(CURDATE()) - 3 AND YEAR(CURDATE()) GROUP BY f.name;"
    },
    {
        "instruction": "입력 텍스트: 펌프식 수력 저장소의 평균 일일 에너지 저장 용량(MWh 기준)은 국가별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE pumped_hydro_storage (name VARCHAR(50), location VARCHAR(50), capacity FLOAT, country VARCHAR(50)); INSERT INTO pumped_hydro_storage (name, location, capacity, country) VALUES ('Plant X', 'Japan', 3000, 'Japan'), ('Plant Y', 'Germany', 3500, 'Germany'), ('Plant Z', 'Italy', 4000, 'Italy'), ('Plant W', 'Spain', 2500, 'Spain');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(capacity) as avg_capacity FROM pumped_hydro_storage GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: sustainability_initiatives 테이블에서 현재 이름이 'Environment'인 모든 레코드의 이름 컬럼을 'Sustainability'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE sustainability_initiatives (sustainability_initiative_id INT, name VARCHAR(50), description TEXT, start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE sustainability_initiatives SET name = 'Sustainability' WHERE name = 'Environment';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 Johnson & Johnson 백신을 접종받은 환자들의 최대 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vaccine_administered (patient_id INT, vaccine_name VARCHAR(255), state VARCHAR(255)); CREATE TABLE patients (patient_id INT, age INT); INSERT INTO vaccine_administered (patient_id, vaccine_name, state) VALUES (1, 'Johnson & Johnson', 'New York'); INSERT INTO patients (patient_id, age) VALUES (1, 55);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(y.age) FROM patients y INNER JOIN vaccine_administered a ON y.patient_id = a.patient_id WHERE a.vaccine_name = 'Johnson & Johnson' AND a.state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 가장 예산이 높은 상위 2개 프로그램의 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Programs (ProgramID INT, ProgramName VARCHAR(50), Budget DECIMAL(10,2)); INSERT INTO Programs (ProgramID, ProgramName, Budget) VALUES (1, 'Education', 15000.00), (2, 'Healthcare', 20000.00), (3, 'Environment', 10000.00), (4, 'Research', 25000.00), (5, 'Arts', 12000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget) FROM (SELECT Budget FROM Programs ORDER BY Budget DESC LIMIT 2) subquery;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 대륙의 제조업체에서 생산된 우주선 부품의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Spacecraft_Components (id INT, component_name VARCHAR, component_type VARCHAR, manufacturer VARCHAR, production_date DATE, last_inspection_date DATE); CREATE TABLE Spacecraft_Manufacturers (id INT, manufacturer_name VARCHAR, location VARCHAR, established_date DATE, employees INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as component_count FROM Spacecraft_Components COMPONENT JOIN Spacecraft_Manufacturers MANUFACTURER ON COMPONENT.manufacturer = MANUFACTURER.manufacturer_name WHERE MANUFACTURER.location LIKE '%Africa%';"
    },
    {
        "instruction": "입력 텍스트: 광산 운영' 부서에서 일하는 모든 직원과 그들의 각각의 급여를 나열하시오.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Age INT, Salary FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Employees.Name, Employees.Salary FROM Employees WHERE Employees.Department = 'Mining Operations';"
    },
    {
        "instruction": "입력 텍스트: 자금 지원을 받지 않는 프로그램을 확인하세요\n\nDDL statements:\nCREATE TABLE program_funding_2 (program_id INT, amount DECIMAL(10,2)); INSERT INTO program_funding_2 (program_id, amount) VALUES (1, 5000.00), (2, 7000.00), (4, 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name FROM programs p LEFT JOIN program_funding_2 f ON p.id = f.program_id WHERE f.program_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 인구가 1,000,000명을 초과하는 모든 도시의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE City (id INT, name VARCHAR(50), state VARCHAR(50), population INT); INSERT INTO City (id, name, state, population) VALUES (1, 'Los Angeles', 'CA', 4000000); INSERT INTO City (id, name, state, population) VALUES (2, 'New York', 'NY', 8500000); INSERT INTO City (id, name, state, population) VALUES (3, 'Chicago', 'IL', 2700000); INSERT INTO City (id, name, state, population) VALUES (4, 'Houston', 'TX', 2300000); INSERT INTO City (id, name, state, population) VALUES (5, 'Phoenix', 'AZ', 1700000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City.name FROM City WHERE City.population > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 성숙한 숲 테이블에서 종별로 그룹화된 나무의 최소 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE mature_forest (tree_id INT, species VARCHAR(50), age INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, MIN(age) FROM mature_forest GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 인도 각 도시의 커뮤니티 보건 근로자들의 최소 문화 역량 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE CommunityHealthWorkers (WorkerID INT, City VARCHAR(255), Score INT); INSERT INTO CommunityHealthWorkers (WorkerID, City, Score) VALUES (1, 'Mumbai', 80), (2, 'Delhi', 85), (3, 'Bangalore', 90), (4, 'Hyderabad', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City, MIN(Score) as MinScore FROM CommunityHealthWorkers GROUP BY City;"
    },
    {
        "instruction": "입력 텍스트: 보건 의료 분야에서 데이터셋이 100개 이상인 오픈 데이터 이니셔티브의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE open_data_initiatives (sector VARCHAR(20), num_datasets INT); INSERT INTO open_data_initiatives (sector, num_datasets) VALUES ('Healthcare', 150), ('Education', 120), ('Environment', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM open_data_initiatives WHERE sector = 'Healthcare' AND num_datasets > 100;"
    },
    {
        "instruction": "입력 텍스트: \"disinformation\"이라는 단어가 제목에 포함된 게시물에 달린 모든 댓글을 삭제하세요.\n\nDDL statements:\nCREATE TABLE posts (id INT PRIMARY KEY, title TEXT, content TEXT); CREATE TABLE comments (id INT PRIMARY KEY, post_id INT, content TEXT, score INT); INSERT INTO posts (id, title, content) VALUES (1, 'Post 1', 'Content 1'), (2, 'Disinformation Post', 'Content 2'); INSERT INTO comments (id, post_id, content, score) VALUES (1, 1, 'Comment 1', 5), (2, 1, 'Comment 2', 3), (3, 2, 'Comment 3', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM comments WHERE post_id IN (SELECT id FROM posts WHERE title LIKE '%disinformation%');"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 특정 국가와 관련된 모든 정보 작전을 삭제합니다.\n\nDDL statements:\n CREATE TABLE CountryIntelligenceOps (OpID INT, OpName VARCHAR(50), OpCountry VARCHAR(50), OpDate DATE); INSERT INTO CountryIntelligenceOps (OpID, OpName, OpCountry, OpDate) VALUES (1, 'Operation Red', 'USA', '2021-01-01'), (2, 'Operation Blue', 'China', '2021-02-15'), (3, 'Operation Green', 'Russia', '2021-03-30'), (4, 'Operation Yellow', 'India', '2021-04-15'), (5, 'Operation Purple', 'Brazil', '2021-05-31'), (6, 'Operation Orange', 'Canada', '2021-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성:  DELETE FROM CountryIntelligenceOps WHERE OpDate >= DATEADD(year, -1, GETDATE()) AND OpCountry = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 자연스러운 헤어케어 제품의 매출이 가장 낮은 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE HaircareSales (product_id INT, product_name VARCHAR(20), country VARCHAR(20), total_sales DECIMAL(5,2)); INSERT INTO HaircareSales (product_id, product_name, country, total_sales) VALUES (1, 'shampoo', 'US', 55.99), (2, 'conditioner', 'CA', 44.55), (3, 'styling', 'MX', 30.11), (4, 'haircare', 'US', 20.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MIN(total_sales) as lowest_q3_sales FROM HaircareSales WHERE product_name LIKE '%haircare%' AND sale_date BETWEEN '2022-07-01' AND '2022-09-30' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: Gender 테이블에 'Non-binary'라는 새로운 성별을 추가하세요.\n\nDDL statements:\nCREATE TABLE Gender (GenderID INT PRIMARY KEY, GenderName VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Gender (GenderID, GenderName) VALUES (4, 'Non-binary');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 약물 치료를 받은 불안 환자의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, age INT, gender TEXT, treatment TEXT, state TEXT, condition TEXT); INSERT INTO patients (patient_id, age, gender, treatment, state, condition) VALUES (1, 30, 'Female', 'CBT', 'Texas', 'Anxiety'); INSERT INTO patients (patient_id, age, gender, treatment, state, condition) VALUES (2, 45, 'Male', 'DBT', 'California', 'Depression'); INSERT INTO patients (patient_id, age, gender, treatment, state, condition) VALUES (3, 25, 'Non-binary', 'Therapy', 'Washington', 'Anxiety'); INSERT INTO patients (patient_id, age, gender, treatment, state, condition) VALUES (4, 55, 'Male', 'Medication', 'New York', 'Anxiety');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM patients WHERE condition = 'Anxiety' AND treatment = 'Medication' AND state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후 각 국가별로 발사된 위성의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE satellites_by_country (id INT, country VARCHAR(30), launch_year INT, num_satellites INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM satellites_by_country WHERE launch_year >= 2010 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2020년 '아시아' 지역에서 완료된 군사 혁신 프로젝트의 최소 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE military_innovation (country VARCHAR(50), region VARCHAR(50), year INT, projects INT); INSERT INTO military_innovation (country, region, year, projects) VALUES ('India', 'Asia', 2020, 70), ('Japan', 'Asia', 2020, 90), ('China', 'Asia', 2020, 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MIN(projects) as min_projects FROM military_innovation WHERE region = 'Asia' AND year = 2020 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 농촌 지역과 도시 지역에 각각 몇 명의 지역 보건 근로자가 고용되어 있나요?\n\nDDL statements:\nCREATE TABLE community_health_workers (id INT, name VARCHAR(100), location VARCHAR(50)); INSERT INTO community_health_workers (id, name, location) VALUES (1, 'Dana', 'Rural'), (2, 'Evan', 'Urban'), (3, 'Fran', 'Rural');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) FROM community_health_workers GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 테이블 'waste_generation'을 변경하고 'source'라는 열을 추가하세요.\n\nDDL statements:\nCREATE TABLE waste_generation ( id INT PRIMARY KEY, region VARCHAR(50), year INT, metric DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: ALTER TABLE waste_generation ADD source VARCHAR(50);"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역의 각 모바일 요금제별 데이터 유지율은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE mobile_plans (id INT, name VARCHAR(255), type VARCHAR(255), price DECIMAL(10,2), region VARCHAR(255)); CREATE TABLE subscribers (id INT, name VARCHAR(255), plan_id INT, retention_rate DECIMAL(10,2)); CREATE TABLE regions (id INT, name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mobile_plans.name AS mobile_plan, AVG(subscribers.retention_rate) FROM subscribers JOIN mobile_plans ON subscribers.plan_id = mobile_plans.id JOIN regions ON mobile_plans.region = regions.name WHERE regions.name = 'Asia' GROUP BY mobile_plans.name;"
    },
    {
        "instruction": "입력 텍스트: 모든 바다의 최대 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ocean_depths (ocean TEXT, max_depth FLOAT); INSERT INTO ocean_depths (ocean, max_depth) VALUES ('Pacific', 36000.0); INSERT INTO ocean_depths (ocean, max_depth) VALUES ('Atlantic', 32000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ocean, MAX(max_depth) FROM ocean_depths;"
    },
    {
        "instruction": "입력 텍스트: 남미에서 가장 최근에 수행된 군사 작전의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE MilitaryOperations(id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), year INT);INSERT INTO MilitaryOperations(id, name, location, year) VALUES (1, 'Operation Jaguar', 'South America', 2017), (2, 'Operation Condor', 'South America', 2019), (3, 'Operation Hurricane', 'North America', 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM MilitaryOperations WHERE location = 'South America' ORDER BY year DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 지역별로 수확된 목재의 총 부피는 얼마였습니까?\n\nDDL statements:\nCREATE TABLE forests (id INT, region VARCHAR(255), timber_volume FLOAT, year INT); INSERT INTO forests (id, region, timber_volume, year) VALUES (1, 'North', 1200, 2020), (2, 'South', 1800, 2020), (3, 'East', 1500, 2020), (4, 'West', 1000, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(timber_volume) as total_timber_volume FROM forests WHERE year = 2020 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 보호되는 나무 종의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE regions (id INT, name VARCHAR(255)); INSERT INTO regions (id, name) VALUES (1, 'North America'), (2, 'South America'); CREATE TABLE tree_species (id INT, region_id INT, protected INT); INSERT INTO tree_species (id, region_id, protected) VALUES (1, 1, 1), (2, 1, 0), (3, 2, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, COUNT(ts.id) num_protected_species FROM regions r JOIN tree_species ts ON r.id = ts.region_id WHERE ts.protected = 1 GROUP BY r.name;"
    },
    {
        "instruction": "입력 텍스트: 각 부서에서 자원 사용 비용을 고려할 때 가장 비용이 많이 드는 작업 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Departments (DepartmentID INT, DepartmentName VARCHAR(50));CREATE TABLE Operations (OperationID INT, DepartmentID INT, OperationType VARCHAR(50), ResourcesUsed DECIMAL(10,2), Cost DECIMAL(10,2));CREATE VIEW DepartmentOperations AS SELECT DepartmentID, OperationType, ResourcesUsed, Cost, ROW_NUMBER() OVER (PARTITION BY DepartmentID ORDER BY Cost DESC) AS CostRank FROM Operations;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT D.DepartmentName, DO.OperationType, DO.ResourcesUsed, DO.Cost FROM Departments D JOIN DepartmentOperations DO ON D.DepartmentID = DO.DepartmentID WHERE DO.CostRank = 1;"
    },
    {
        "instruction": "입력 텍스트: GreenEnergy' 스키마에서 재생 가능 에너지 프로젝트의 최소 설치 용량과 그 위치는 어떻게 되나요?\n\nDDL statements:\nCREATE SCHEMA GreenEnergy; CREATE TABLE RenewableProjects (project_id INT, name VARCHAR(50), location VARCHAR(50), installed_capacity FLOAT); INSERT INTO RenewableProjects (project_id, name, location, installed_capacity) VALUES (1, 'Solar Farm A', 'City A', 5000.0), (2, 'Wind Farm B', 'City B', 7500.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, MIN(installed_capacity) FROM GreenEnergy.RenewableProjects;"
    },
    {
        "instruction": "입력 텍스트: Engineering' 부서에서만 독점적으로 사용되는 모든 기계 유형을 나열합니다.\n\nDDL statements:\nCREATE TABLE machinery (machinery_id INT, plant_id INT, department VARCHAR(50), machinery_type VARCHAR(50)); INSERT INTO machinery (machinery_id, plant_id, department, machinery_type) VALUES (1, 1, 'Manufacturing', 'CNC Milling'), (2, 1, 'Manufacturing', 'Lathe'), (3, 2, 'Engineering', '3D Printer'), (4, 2, 'Engineering', 'Automated Guided Vehicle'), (5, 3, 'Manufacturing', 'CNC Milling'), (6, 3, 'Manufacturing', 'Lathe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT machinery_type FROM machinery m1 WHERE NOT EXISTS (SELECT 1 FROM machinery m2 WHERE m1.machinery_type = m2.machinery_type AND m2.department != 'Engineering');"
    },
    {
        "instruction": "입력 텍스트: 자기 관리를 목표로 한 캠페인의 가장 이른 시작 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE campaigns (campaign_id INT, start_date DATE, end_date DATE, focus VARCHAR(20)); INSERT INTO campaigns (campaign_id, start_date, end_date, focus) VALUES (1, '2022-04-01', '2022-06-30', 'mindfulness-based interventions'), (2, '2022-07-01', '2022-08-31', 'stress management'), (3, '2022-09-01', '2022-10-31', 'self-care');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(start_date) FROM campaigns WHERE focus = 'self-care';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 거래 금액 기준으로 상위 5명의 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, transaction_date DATE, transaction_value FLOAT); INSERT INTO customers VALUES (1, '2021-01-01', 100.0), (1, '2021-02-01', 200.0), (2, '2021-03-01', 150.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customer_id, RANK() OVER (ORDER BY SUM(transaction_value) DESC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS customer_rank FROM customers WHERE transaction_date >= DATEADD(week, -1, CURRENT_DATE) GROUP BY customer_id HAVING COUNT(*) >= 7;"
    },
    {
        "instruction": "입력 텍스트: 정부 규제 준수' 테이블에서 벌금이 $5000을 초과하는 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE regulatory_compliance (id INT, dispensary VARCHAR(255), fine FLOAT, violation DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM regulatory_compliance WHERE fine > 5000;"
    },
    {
        "instruction": "입력 텍스트: 플래티넘 인증을 받은 모든 건물을 보여주는 뷰를 생성하세요.\n\nDDL statements:\nCREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size_sqft INT, certification_level VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW platinum_buildings AS SELECT * FROM green_buildings WHERE certification_level = 'Platinum';"
    },
    {
        "instruction": "입력 텍스트: 북해에 있는 우물들의 총 생산량을 찾으세요.\n\nDDL statements:\nCREATE TABLE wells (id INT, region VARCHAR(20), production_rate INT); INSERT INTO wells (id, region, production_rate) VALUES (1, 'North Sea', 500), (2, 'Gulf of Mexico', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production_rate) FROM wells WHERE region = 'North Sea';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 동물 실험을 하지 않는 인증을 받지 않은 화장품 제품 중 소비자 선호도 점수가 가장 높은 제품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE canada_cosmetics_preferences (id INT, consumer_id INT, product_id INT, preference_score INT, is_cruelty_free BOOLEAN); INSERT INTO canada_cosmetics_preferences (id, consumer_id, product_id, preference_score, is_cruelty_free) VALUES (1, 1, 1, 8, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name, cp.preference_score FROM canada_cosmetics_preferences cp INNER JOIN products p ON cp.product_id = p.id WHERE cp.is_cruelty_free = false ORDER BY cp.preference_score DESC;"
    },
    {
        "instruction": "입력 텍스트: 시카고에 있는 녹색 인증을 받은 건물들의 총 면적은 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_buildings (city VARCHAR(20), sqft INT, certification VARCHAR(20)); INSERT INTO green_buildings (city, sqft, certification) VALUES ('Chicago', 50000, 'LEED'); INSERT INTO green_buildings (city, sqft, certification) VALUES ('Chicago', 70000, 'GreenGlobes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sqft) FROM green_buildings WHERE city = 'Chicago' AND certification IN ('LEED', 'GreenGlobes');"
    },
    {
        "instruction": "입력 텍스트: 창업자가 베테랑인 사이버보안 분야 스타트업의 평균 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, founders TEXT, employees INT); INSERT INTO startups (id, name, industry, founding_date, founders, employees) VALUES (1, 'SecureVets', 'Cybersecurity', '2019-01-01', 'Veterans', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(employees) FROM startups WHERE founders = 'Veterans' AND industry = 'Cybersecurity';"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 설치된 에너지 저장 프로젝트의 기술별 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE storage_projects (id INT, project VARCHAR(50), technology VARCHAR(50), year INT); INSERT INTO storage_projects (id, project, technology, year) VALUES (1, 'Battery Park', 'Lithium-ion', 2021), (2, 'Tesla Gigafactory', 'Lithium-ion', 2020), (3, 'La Grange', 'Pumped hydro', 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT technology, COUNT(*) FROM storage_projects WHERE year >= 2016 GROUP BY technology;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 가장 많은 쓰레기를 배출한 상위 3개국을 확인하세요?\n\nDDL statements:\nCREATE TABLE WasteGeneration (Country VARCHAR(50), Waste INT, WasteDate DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, SUM(Waste) OVER (PARTITION BY Country ORDER BY WasteDate ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS TotalWaste, RANK() OVER (ORDER BY SUM(Waste) DESC) AS Rank FROM WasteGeneration WHERE WasteDate >= DATEADD(month, -1, CURRENT_TIMESTAMP) GROUP BY Country, WasteDate HAVING Rank <= 3"
    },
    {
        "instruction": "입력 텍스트: Uniswap' 앱을 'DEX' 앱 카테고리로 'decentralized_applications' 테이블에 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE decentralized_applications (app_id INT PRIMARY KEY, app_name VARCHAR(100), app_category VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO decentralized_applications (app_name, app_category) VALUES ('Uniswap', 'DEX');"
    },
    {
        "instruction": "입력 텍스트: 미국 출신 선수들의 경기당 평균 득점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, name TEXT, country TEXT, points_per_game DECIMAL(5,2)); INSERT INTO players (id, name, country, points_per_game) VALUES (1, 'John Doe', 'USA', 15.6), (2, 'Jane Smith', 'USA', 18.2), (3, 'Maria Garcia', 'BRA', 12.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(points_per_game) FROM players WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: research_grants' 뷰에서 100,000 이상의 해양 연구 보조금을 모두 선택하세요.\n\nDDL statements:\nCREATE VIEW research_grants AS SELECT g.id, g.grant_name, g.amount, g.start_date, g.end_date, m.species_name FROM grants g JOIN marine_species m ON g.species_id = m.id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM research_grants WHERE amount > 100000;"
    },
    {
        "instruction": "입력 텍스트: 각 도시별로 1인당 평균 쓰레기 발생량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE city_waste_generation (city_id INT, city_name VARCHAR(50), population INT, waste_generated FLOAT); INSERT INTO city_waste_generation (city_id, city_name, population, waste_generated) VALUES (1, 'CityA', 50000, 25000), (2, 'CityB', 30000, 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city_name, AVG(waste_generated/population) OVER (PARTITION BY city_name) as avg_waste_per_capita FROM city_waste_generation;"
    },
    {
        "instruction": "입력 텍스트: 해양학 테이블에 있는 해양 생물 종의 총 수와 그들의 보전 상태를 찾아보세요.\n\nDDL statements:\nCREATE TABLE marine_species_status (id INT, species_name VARCHAR(255), conservation_status VARCHAR(255)); INSERT INTO marine_species_status (id, species_name, conservation_status) VALUES (1, 'Great White Shark', 'Vulnerable'); CREATE TABLE oceanography (id INT, species_name VARCHAR(255), location VARCHAR(255)); INSERT INTO oceanography (id, species_name, location) VALUES (1, 'Great White Shark', 'Pacific Ocean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT conservation_status, COUNT(*) FROM marine_species_status WHERE species_name IN (SELECT species_name FROM oceanography) GROUP BY conservation_status;"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2019년 인도를 방문한 관광객의 평균 수는 얼마였습니까?\n\nDDL statements:\nCREATE TABLE tourists (id INT, country VARCHAR(50), visitors INT, year INT); INSERT INTO tourists (id, country, visitors, year) VALUES (1, 'India', 5000, 2018), (2, 'India', 5500, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(visitors) FROM tourists WHERE country = 'India' AND year IN (2018, 2019);"
    },
    {
        "instruction": "입력 텍스트: 바르셀로나의 평균 호텔 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (id INT, city VARCHAR(20), rating FLOAT); INSERT INTO hotels (id, city, rating) VALUES (1, 'Barcelona', 4.2), (2, 'Barcelona', 4.5), (3, 'Madrid', 4.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM hotels WHERE city = 'Barcelona';"
    },
    {
        "instruction": "입력 텍스트: 2021년도 환경 영향 통계를 environmental_impact_stats 테이블에 추가하세요: CO2 배출량 = 1500, 물 소비량 = 30000, 폐기물 발생량 = 2500\n\nDDL statements:\nCREATE TABLE environmental_impact_stats ( id INT PRIMARY KEY, year INT, CO2_emission INT, water_consumption INT, waste_generation INT );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO environmental_impact_stats (id, year, CO2_emission, water_consumption, waste_generation) VALUES (6, 2021, 1500, 30000, 2500);"
    },
    {
        "instruction": "입력 텍스트: 2021년 상위 5개 네오디뮴 생산국의 총 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE producers (id INT, name VARCHAR(255), neodymium_prod FLOAT); INSERT INTO producers (id, name, neodymium_prod) VALUES (1, 'China', 12345.6), (2, 'USA', 2345.6), (3, 'Australia', 1234.6), (4, 'Myanmar', 789.6), (5, 'India', 345.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(neodymium_prod) FROM (SELECT * FROM producers WHERE name IN ('China', 'USA', 'Australia', 'Myanmar', 'India') AND production_year = 2021 ORDER BY neodymium_prod DESC) WHERE rownum <= 5;"
    },
    {
        "instruction": "입력 텍스트: 브라질의 관광으로 인한 지역 경제 영향은 총 얼마입니까?\n\nDDL statements:\nCREATE TABLE local_impact (location TEXT, impact INT); INSERT INTO local_impact (location, impact) VALUES ('Brazil', 12000), ('India', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(impact) FROM local_impact WHERE location = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 각 공급업체가 공급하는 고유한 제품의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE products (id INT, name VARCHAR(255), price DECIMAL(10,2), supplier_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_id, COUNT(DISTINCT id) FROM products GROUP BY supplier_id;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 사이즈 16 이상인 고객의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE customers (id INT, country VARCHAR(20), size INT); INSERT INTO customers (id, country, size) VALUES (1, 'USA', 14), (2, 'USA', 12), (3, 'Canada', 16), (4, 'USA', 20), (5, 'Mexico', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customers WHERE country = 'USA')) FROM customers WHERE size >= 16 AND country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 1900년부터 1950년 사이에 프랑스에서 전시된 작품은 몇 점입니까?\n\nDDL statements:\nCREATE TABLE Artworks (artwork_id INT, title VARCHAR(50), year_made INT, artist_id INT, price FLOAT); INSERT INTO Artworks (artwork_id, title, year_made, artist_id, price) VALUES (1, 'Still Life with Flowers', 1612, 1, 1000.0); ; CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), start_date DATE, end_date DATE, artwork_id INT); INSERT INTO Exhibitions (exhibition_id, exhibition_name, start_date, end_date, artwork_id) VALUES (1, 'Flower Exhibition', '2000-01-01', '2000-12-31', 1); ;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Exhibitions WHERE Exhibitions.start_date BETWEEN '1900-01-01' AND '1950-12-31' AND Exhibitions.country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 직접 메시지를 활성화한 사용자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE privacy_settings (id INT, user_id INT, enable_dm INT, enable_location_tracking INT, enable_third_party_ads INT); INSERT INTO privacy_settings (id, user_id, enable_dm, enable_location_tracking, enable_third_party_ads) VALUES (1, 1, 1, 0, 1), (2, 2, 0, 1, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(enable_dm) as total_users_with_dm FROM privacy_settings;"
    },
    {
        "instruction": "입력 텍스트: 유럽 박물관의 총 예술품 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE museums (id INT, name VARCHAR(50), region VARCHAR(50), art_pieces INT); INSERT INTO museums (id, name, region, art_pieces) VALUES (1, 'Louvre Museum', 'Europe', 5000), (2, 'British Museum', 'Europe', 7000), (3, 'Tokyo National Museum', 'Asia', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(art_pieces) FROM museums WHERE region = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 시카고에서 이루어진 멀티모달 여행의 총 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE multimodal_trips (trip_id INT, trip_type VARCHAR(50), city VARCHAR(50)); INSERT INTO multimodal_trips (trip_id, trip_type, city) VALUES (1, 'bike-transit', 'Chicago'), (2, 'car-transit', 'Chicago'), (3, 'bike-walk', 'Chicago');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM multimodal_trips WHERE city = 'Chicago';"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 각 도시에서 발생한 범죄의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE cities (id INT, name TEXT);CREATE TABLE crimes (id INT, city_id INT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, COUNT(cr.id) FROM cities c JOIN crimes cr ON c.id = cr.city_id WHERE cr.date >= DATEADD(month, -3, GETDATE()) GROUP BY c.id;"
    },
    {
        "instruction": "입력 텍스트: 특정 도시 내 각 지역에서 보고된 범죄 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE cities (cid INT, name VARCHAR(255)); CREATE TABLE neighborhoods (nid INT, city_id INT, name VARCHAR(255)); CREATE TABLE crimes (id INT, neighborhood_id INT, reported INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT n.name, COUNT(c.id) FROM cities c JOIN neighborhoods n ON c.cid = n.city_id JOIN crimes ON n.nid = c.neighborhood_id WHERE c.name = 'CityName' GROUP BY n.name;"
    },
    {
        "instruction": "입력 텍스트: 2017년에 온라인 분쟁 해결 시스템을 도입한 법원의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE courts (court_id INT, year INT, online_dispute_resolution BOOLEAN); INSERT INTO courts (court_id, year, online_dispute_resolution) VALUES (1, 2015, FALSE), (2, 2016, FALSE), (3, 2017, TRUE), (4, 2018, TRUE), (5, 2019, FALSE), (6, 2020, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM courts WHERE year = 2017 AND online_dispute_resolution = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 어느 발굴 현장에서 가장 많은 유물이 발견되었나요?\n\nDDL statements:\nCREATE TABLE ArtifactCounts (CountID INT, ArtifactID INT, SiteID INT); INSERT INTO ArtifactCounts (CountID, ArtifactID, SiteID) VALUES (1, 1, 1); INSERT INTO ArtifactCounts (CountID, ArtifactID, SiteID) VALUES (2, 2, 2); INSERT INTO ArtifactCounts (CountID, ArtifactID, SiteID) VALUES (3, 3, 3); INSERT INTO ArtifactCounts (CountID, ArtifactID, SiteID) VALUES (4, 4, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.SiteName, COUNT(*) AS ArtifactCount FROM ExcavationSites e JOIN ArtifactCounts c ON e.SiteID = c.SiteID GROUP BY e.SiteName ORDER BY ArtifactCount DESC;"
    },
    {
        "instruction": "입력 텍스트: hr' 스키마에서 가장 많은 직원을 보유한 부서는 어디인가요?\n\nDDL statements:\nCREATE SCHEMA hr; CREATE TABLE departments (id INT, name VARCHAR); INSERT INTO departments VALUES (1, 'Marketing'); CREATE TABLE employees (id INT, name VARCHAR, department_id INT); INSERT INTO employees VALUES (1, 'John Doe', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT departments.name, COUNT(*) AS num_employees FROM hr.departments JOIN hr.employees ON departments.id = employees.department_id GROUP BY departments.name ORDER BY num_employees DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: smart_contracts' 테이블에 'contract_address'가 0x1234567890abcdef이고 'contract_name'이 'TokenSwap'인 새 스마트 계약 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE smart_contracts (contract_address VARCHAR(42), contract_name VARCHAR(50), language VARCHAR(10), verified BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO smart_contracts (contract_address, contract_name, language, verified) VALUES ('0x1234567890abcdef', 'TokenSwap', 'Solidity', FALSE);"
    },
    {
        "instruction": "입력 텍스트: 모든 프로그램에 있는 학생들의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE students(id INT, program VARCHAR(255)); INSERT INTO students VALUES (1, 'mental health'), (2, 'mental health'), (3, 'physical health'), (4, 'physical health'), (5, 'traditional learning'), (6, 'open pedagogy'), (7, 'lifelong learning');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT program) FROM students;"
    },
    {
        "instruction": "입력 텍스트: 2020년 남중국해에서의 총 가스 생산량을 찾으세요.\n\nDDL statements:\nCREATE TABLE gas_production (well_id INT, year INT, production REAL); INSERT INTO gas_production (well_id, year, production) VALUES (5, 2019, 700000), (5, 2020, 750000), (6, 2019, 600000), (6, 2020, 650000), (7, 2019, 800000), (7, 2020, 850000), (8, 2019, 900000), (8, 2020, 950000); CREATE TABLE wells (id INT PRIMARY KEY, name TEXT, location TEXT); INSERT INTO wells (id, name, location) VALUES (5, 'Well E', 'South China Sea'), (6, 'Well F', 'South China Sea'), (7, 'Well G', 'North Sea'), (8, 'Well H', 'South China Sea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(gp.production) as total_production FROM gas_production gp JOIN wells w ON gp.well_id = w.id WHERE w.location = 'South China Sea' AND gp.year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2020년 기준 독일과 프랑스의 풍력 발전소 설치 용량 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE wind_farms (id INT, country VARCHAR(255), year INT, capacity INT); INSERT INTO wind_farms (id, country, year, capacity) VALUES (1, 'Germany', 2020, 60000), (2, 'France', 2020, 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM wind_farms WHERE country IN ('Germany', 'France') AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 지구에서 '의료' 카테고리의 응급 호출 총 수와 평균 응답 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE emergency_categories (id INT, name TEXT);CREATE TABLE districts (id INT, name TEXT);CREATE TABLE emergencies (id INT, category_id INT, district_id INT, response_time INT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, AVG(e.response_time), COUNT(e.id) FROM districts d JOIN emergencies e ON d.id = e.district_id JOIN emergency_categories ec ON e.category_id = ec.id WHERE ec.name = 'medical' AND e.date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY d.id;"
    },
    {
        "instruction": "입력 텍스트: 라티녹스 아티스트가 만든 작품 중 가장 이른 연도는 언제인가요?\n\nDDL statements:\nCREATE TABLE Artworks (id INT, artist VARCHAR(20), title VARCHAR(50), year INT, type VARCHAR(20)); INSERT INTO Artworks (id, artist, title, year, type) VALUES (1, 'Latinx Artist 1', 'Artwork 1', 2000, 'Painting'); INSERT INTO Artworks (id, artist, title, year, type) VALUES (2, 'Latinx Artist 2', 'Artwork 2', 2005, 'Sculpture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(year) AS earliest_year FROM Artworks WHERE artist LIKE 'Latinx Artist%';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕'에서 호텔 목록이 가장 많은 상위 3개의 온라인 여행사(OTA)를 나열하세요.\n\nDDL statements:\nCREATE TABLE OTAs (ota_id INT, name TEXT, city TEXT, num_hotels INT); INSERT INTO OTAs (ota_id, name, city, num_hotels) VALUES (1, 'Booking.com', 'New York', 500), (2, 'Expedia', 'New York', 450), (3, 'Agoda', 'New York', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, num_hotels FROM OTAs WHERE city = 'New York' ORDER BY num_hotels DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 어떤 공장들이 인력 개발 프로그램이 없는지, 그 공장들의 이름과 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT); CREATE TABLE workforce_development (factory_id INT, program TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT factories.name, factories.location FROM factories LEFT JOIN workforce_development ON factories.factory_id = workforce_development.factory_id WHERE workforce_development.factory_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: \"trainers\" 테이블에서 트레이너의 직함을 업데이트하세요\n\nDDL statements:\nCREATE TABLE trainers (id INT PRIMARY KEY, name VARCHAR(50), title VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE trainers SET title = 'Senior Trainer' WHERE name = 'Tolu Adebayo';"
    },
    {
        "instruction": "입력 텍스트: DEF-789' 약물에 대한 'Trial-B' 임상시험에 몇 명의 환자가 참여했습니까?\n\nDDL statements:\nCREATE TABLE clinical_trials (trial_name TEXT, drug_name TEXT, patient_count INT); INSERT INTO clinical_trials (trial_name, drug_name, patient_count) VALUES ('Trial-A', 'ABC-456', 200), ('Trial-B', 'DEF-789', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT patient_count FROM clinical_trials WHERE trial_name = 'Trial-B' AND drug_name = 'DEF-789';"
    },
    {
        "instruction": "입력 텍스트: 새로운 지역 'West'에 대한 강우량 측정값을 포함한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE rainfall_data (id INT, region VARCHAR(255), rainfall INT, measurement_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO rainfall_data (id, region, rainfall, measurement_date) VALUES (5, 'West', 35, '2021-07-01'); INSERT INTO rainfall_data (id, region, rainfall, measurement_date) VALUES (6, 'West', 32, '2021-07-02');"
    },
    {
        "instruction": "입력 텍스트: education' 테이블에 새로운 커뮤니티 교육 프로그램 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE education (id INT PRIMARY KEY, title VARCHAR(50), description TEXT, attendees INT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO education (id, title, description, attendees, date) VALUES (1, 'Wildlife Conservation 101', 'Introduction to wildlife conservation and its importance.', 30, '2023-01-01');"
    },
    {
        "instruction": "입력 텍스트: 2025년 기술별 최대 에너지 저장 용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE energy_storage (year INT, technology VARCHAR(255), capacity FLOAT); INSERT INTO energy_storage (year, technology, capacity) VALUES (2025, 'Lithium-ion', 12345.6), (2025, 'Flow', 23456.7), (2025, 'Sodium-ion', 34567.8), (2030, 'Lithium-ion', 15678.9), (2030, 'Flow', 28901.0), (2030, 'Sodium-ion', 39011.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT technology, MAX(capacity) AS max_capacity FROM energy_storage WHERE year = 2025 GROUP BY technology;"
    },
    {
        "instruction": "입력 텍스트: 오픈 데이터 이니셔티브를 시행하지 않았고, 근거 기반 정책을 3개 미만으로 만든 부서의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE departments (id INT, name VARCHAR(50), budget INT, open_data BOOLEAN); INSERT INTO departments (id, name, budget, open_data) VALUES (1, 'Education', 15000000, false), (2, 'Transportation', 20000000, true); CREATE TABLE policies (id INT, department_id INT, title VARCHAR(50), evidence_based BOOLEAN); INSERT INTO policies (id, department_id, title, evidence_based) VALUES (1, 1, 'Safe Routes to School', true), (2, 2, 'Mass Transit Expansion', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) as total_budget FROM departments d WHERE open_data = false AND (SELECT COUNT(*) FROM policies p WHERE d.id = p.department_id AND evidence_based = true) < 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 해에 어떤 논문도 출판하지 않은 모든 교수진의 이름과 소속 학과는 무엇인가요?\n\nDDL statements:\nCREATE TABLE faculty (faculty_id INT, name TEXT, department TEXT); INSERT INTO faculty (faculty_id, name, department) VALUES (1, 'John Doe', 'Mathematics'), (2, 'Jane Smith', 'Physics'); CREATE TABLE publications (publication_id INT, faculty_id INT, year INT, title TEXT); INSERT INTO publications (publication_id, faculty_id, year, title) VALUES (1, 1, 2020, 'Theory of Everything'), (2, 2, 2019, 'Quantum Mechanics');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, f.department FROM faculty f LEFT JOIN publications p ON f.faculty_id = p.faculty_id WHERE p.year IS NULL;"
    },
    {
        "instruction": "입력 텍스트: gas_processing_plants' 테이블에서 'plant_capacity'가 500 미만인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE gas_processing_plants (plant_id INT PRIMARY KEY, plant_name VARCHAR(50), country VARCHAR(50), plant_capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM gas_processing_plants WHERE plant_capacity < 500;"
    },
    {
        "instruction": "입력 텍스트: 각 광산 사이트의 채굴 방법별로 분류된 근로자 수는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE mining_sites (site_id INT, site_name TEXT, location TEXT); INSERT INTO mining_sites (site_id, site_name, location) VALUES (1, 'Site A', 'Country X'), (2, 'Site B', 'Country Y'); CREATE TABLE extraction_methods (method_id INT, site_id INT, method_name TEXT); INSERT INTO extraction_methods (method_id, site_id, method_name) VALUES (1, 1, 'Underground'), (2, 1, 'Open-pit'), (3, 2, 'Underground'), (4, 2, 'Placer'); CREATE TABLE workers (worker_id INT, site_id INT, method_id INT, num_workers INT); INSERT INTO workers (worker_id, site_id, method_id, num_workers) VALUES (1, 1, 1, 300), (2, 1, 2, 200), (3, 2, 3, 500), (4, 2, 4, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mining_sites.site_name, extraction_methods.method_name, SUM(workers.num_workers) AS total_workers FROM mining_sites INNER JOIN extraction_methods ON mining_sites.site_id = extraction_methods.site_id INNER JOIN workers ON mining_sites.site_id = workers.site_id AND extraction_methods.method_id = workers.method_id GROUP BY mining_sites.site_name, extraction_methods.method_name;"
    },
    {
        "instruction": "입력 텍스트: 2021년 'WaterUsage' 테이블에서 주별 일인당 평균 일일 수도 사용량을 계산하세요.\n\nDDL statements:\nCREATE TABLE WaterUsage (id INT, date DATE, person_id INT, daily_consumption FLOAT); CREATE TABLE Population (id INT, date DATE, state TEXT, population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(daily_consumption/population) FROM WaterUsage INNER JOIN Population ON WaterUsage.date = Population.date GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: vessel_performance 테이블에서 상위 3개의 연료 효율 값을 가진 선박들을 가져오세요.\n\nDDL statements:\nCREATE TABLE vessel_performance (id INT, vessel_name VARCHAR(50), fuel_efficiency DECIMAL(3,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel_name FROM vessel_performance WHERE fuel_efficiency IN (SELECT DISTINCT fuel_efficiency FROM vessel_performance ORDER BY fuel_efficiency DESC LIMIT 3);"
    },
    {
        "instruction": "입력 텍스트: 북극 지역에 있는 국가들의 평균 연간 기온 변화는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE temperature_data (country VARCHAR(50), year INT, temperature FLOAT); INSERT INTO temperature_data VALUES ('Canada', 2010, 1.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(temperature - LAG(temperature) OVER (PARTITION BY country ORDER BY year)) AS avg_annual_temp_change FROM temperature_data WHERE country IN (SELECT DISTINCT country FROM temperature_data WHERE country LIKE 'Arctic%') GROUP BY country"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 참여 부서에서 각 구별로 한 달에 개최한 공공 이벤트의 최대 참석 인원은 얼마인가요?\n\nDDL statements:\nCREATE TABLE CommunityEvents (EventID INT, EventDate DATE, Borough VARCHAR(255), Attendance INT); INSERT INTO CommunityEvents (EventID, EventDate, Borough, Attendance) VALUES (1, '2022-01-01', 'Manhattan', 2000), (2, '2022-02-01', 'Brooklyn', 3000), (3, '2022-03-01', 'Bronx', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Attendance), Borough FROM CommunityEvents GROUP BY Borough;"
    },
    {
        "instruction": "입력 텍스트: SpaceX의 위성 발사 성공률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE launches (id INT, mission VARCHAR(50), company VARCHAR(50), launch_date DATE, result VARCHAR(10)); INSERT INTO launches VALUES (1, 'Transporter-1', 'SpaceX', '2021-01-24', 'success');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company, COUNT(*) as total, SUM(CASE WHEN result = 'success' THEN 1 ELSE 0 END) as success, (SUM(CASE WHEN result = 'success' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as success_rate FROM launches WHERE company = 'SpaceX' GROUP BY company;"
    },
    {
        "instruction": "입력 텍스트: 미국에 있는 사용자들의 평균 미디어 리터러시 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, name TEXT, country TEXT, media_literacy_score INT); INSERT INTO users (id, name, country, media_literacy_score) VALUES (1, 'John Doe', 'USA', 7); INSERT INTO users (id, name, country, media_literacy_score) VALUES (2, 'Jane Smith', 'Canada', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(media_literacy_score) FROM users WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 인도양'에서 연도별 어종의 평균 생물량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_biomass (year INT, region VARCHAR(255), species VARCHAR(255), biomass FLOAT); INSERT INTO fish_biomass (year, region, species, biomass) VALUES (2020, 'Indian Ocean', 'Tuna', 2000), (2020, 'Indian Ocean', 'Mackerel', 1500), (2021, 'Indian Ocean', 'Tuna', 2200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, AVG(biomass) AS avg_biomass FROM fish_biomass WHERE region = 'Indian Ocean' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 독일 출신 기부자들이 지난 한 달 동안 기부한 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50), AmountDonated numeric(18,2)); INSERT INTO Donors (DonorID, DonorName, Country, AmountDonated) VALUES (1, 'John Doe', 'Germany', 500.00), (2, 'Jane Smith', 'Canada', 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(AmountDonated) FROM Donors WHERE Country = 'Germany' AND DonationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 여성 교수진별 연구비 지원 건수를 가장 많은 것부터 가장 적은 것 순으로 보여주세요.\n\nDDL statements:\nCREATE TABLE faculty (faculty_id INT, name VARCHAR(50), gender VARCHAR(10), department VARCHAR(50), position VARCHAR(50)); INSERT INTO faculty VALUES (1, 'John Doe', 'Male', 'Mathematics', 'Professor'), (2, 'Jane Smith', 'Female', 'Physics', 'Assistant Professor'), (3, 'Alice Johnson', 'Female', 'Mathematics', 'Associate Professor'); CREATE TABLE grants (grant_id INT, faculty_id INT, title VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO grants VALUES (1, 2, 'Grant A', 50000), (2, 2, 'Grant B', 75000), (3, 3, 'Grant C', 60000), (4, 2, 'Grant D', 40000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, f.department, COUNT(g.grant_id) as grant_count FROM faculty f INNER JOIN grants g ON f.faculty_id = g.faculty_id WHERE f.gender = 'Female' GROUP BY f.name, f.department ORDER BY grant_count DESC;"
    },
    {
        "instruction": "입력 텍스트: education_programs' 테이블에서 '2021'년과 '2022'년에 진행된 커뮤니티 교육 프로그램은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE education_programs (id INT, program_name VARCHAR(50), year INT, attendees INT); INSERT INTO education_programs (id, program_name, year, attendees) VALUES (1, 'Wildlife Conservation', 2021, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM education_programs WHERE year IN (2021, 2022);"
    },
    {
        "instruction": "입력 텍스트: 2022년 첫 번째 분기와 세 번째 분기 사이에 제품 B의 판매량 변화율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE sales_by_quarter (sale_id INT, product_id INT, quarter INT, year INT, units_sold INT); INSERT INTO sales_by_quarter (sale_id, product_id, quarter, year, units_sold) VALUES (1, 1, 1, 2022, 500), (2, 2, 1, 2022, 700), (3, 3, 1, 2022, 600), (4, 1, 2, 2022, 550), (5, 2, 2, 2022, 650), (6, 3, 2, 2022, 620), (7, 1, 3, 2022, 800), (8, 2, 3, 2022, 700), (9, 3, 3, 2022, 750), (10, 1, 4, 2022, 900), (11, 2, 4, 2022, 750), (12, 3, 4, 2022, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (LAG(SUM(units_sold)) OVER (PARTITION BY product_id ORDER BY year, quarter) - SUM(units_sold)) * 100.0 / LAG(SUM(units_sold)) OVER (PARTITION BY product_id ORDER BY year, quarter) AS pct_change FROM sales_by_quarter WHERE product_id = 2 AND year = 2022 AND quarter IN (1, 3);"
    },
    {
        "instruction": "입력 텍스트: 각 부서에서 지난 6개월 동안 학생들에 의해 완료된 오픈 교육 프로젝트의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE op_projects (project_id INT, department_id INT, completed BOOLEAN, completion_date DATE); INSERT INTO op_projects (project_id, department_id, completed, completion_date) VALUES (1, 501, true, '2022-01-01'), (2, 501, false, '2021-01-01'), (3, 502, true, '2022-03-01'), (4, 502, false, '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department_id, COUNT(project_id) as num_projects_completed FROM op_projects WHERE completion_date >= DATEADD(month, -6, CURRENT_TIMESTAMP) AND completed = true GROUP BY department_id;"
    },
    {
        "instruction": "입력 텍스트: safety_records' 테이블에서 가장 최근의 사고 날짜는 언제입니까?\n\nDDL statements:\nCREATE TABLE safety_records (id INT, incident_date DATE, incident_type VARCHAR(50), description VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(incident_date) FROM safety_records;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 가장 적은 수의 병상을 가진 병원은 무엇인가요?\n\nDDL statements:\nCREATE TABLE hospitals (state varchar(2), hospital_name varchar(25), num_beds int); INSERT INTO hospitals (state, hospital_name, num_beds) VALUES ('NY', 'NY Presbyterian', 2001), ('CA', 'UCLA Medical', 1012), ('TX', 'MD Anderson', 1543), ('FL', 'Mayo Clinic FL', 1209);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, hospital_name, MIN(num_beds) as min_beds FROM hospitals GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: regulatory_frameworks' 테이블에서 'Crypto Trading Regulation'인 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE regulatory_frameworks (framework_id INT PRIMARY KEY, country VARCHAR(100), framework VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM regulatory_frameworks WHERE framework = 'Crypto Trading Regulation';"
    },
    {
        "instruction": "입력 텍스트: 새로운 팀 'Toronto Maple Leafs'에 대한 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE players (player_id INT, name VARCHAR(100), position VARCHAR(50), team_id INT); CREATE TABLE teams (team_id INT, name VARCHAR(100), city VARCHAR(100)); INSERT INTO players (player_id, name, position, team_id) VALUES (1, 'John Doe', 'Forward', 1), (2, 'Jane Smith', 'Goalie', 2), (3, 'Emily Lee', 'Defense', 1), (4, 'Michael Chen', 'Forward', 1), (5, 'Grace Kim', 'Goalie', 2), (6, 'Sofia Garcia', 'Forward', 3), (7, 'Hiroshi Tanaka', 'Defense', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO teams (team_id, name, city) VALUES (4, 'Toronto Maple Leafs', 'Toronto');"
    },
    {
        "instruction": "입력 텍스트: 어느 지역의 총 수익이 가장 높습니까?\n\nDDL statements:\nCREATE TABLE sales (game_id INT, region VARCHAR(50), revenue FLOAT); INSERT INTO sales (game_id, region, revenue) VALUES (1, 'NA', 2000000), (1, 'EU', 1500000), (2, 'NA', 3500000), (2, 'EU', 3000000), (3, 'NA', 5000000), (3, 'EU', 3000000); CREATE TABLE games (id INT, name VARCHAR(100), genre VARCHAR(50), revenue FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(sales.revenue) as total_revenue FROM sales JOIN games ON sales.game_id = games.id GROUP BY region ORDER BY total_revenue DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 록 장르의 노래들의 평균 재생 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE songs (id INT, title VARCHAR(255), duration INT, genre VARCHAR(255)); INSERT INTO songs (id, title, duration, genre) VALUES (1, 'Song 1', 180, 'Rock');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(duration) FROM songs WHERE genre = 'Rock';"
    },
    {
        "instruction": "입력 텍스트: 2021년 중동 지역에서 발생한 위협 정보 경보의 수를 계산합니다.\n\nDDL statements:\nCREATE TABLE threat_intelligence (alert_id INT, region VARCHAR(50), date DATE, threat_level VARCHAR(50)); INSERT INTO threat_intelligence (alert_id, region, date, threat_level) VALUES (2, 'Middle East', '2021-02-15', 'Medium');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM threat_intelligence WHERE region = 'Middle East' AND YEAR(date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 기술 분야에 중점을 둔 노조의 총 회원 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE union_members (member_id INT, name VARCHAR(50), union_id INT); CREATE TABLE unions (union_id INT, union_name VARCHAR(50), focus VARCHAR(50)); INSERT INTO union_members (member_id, name, union_id) VALUES (1, 'John Doe', 1), (2, 'Jane Smith', 1), (3, 'Mike Johnson', 2); INSERT INTO unions (union_id, union_name, focus) VALUES (1, 'Healthcare Workers Union', 'healthcare'), (2, 'Tech Workers Union', 'technology');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT um.union_id) FROM union_members um INNER JOIN unions u ON um.union_id = u.union_id WHERE u.focus = 'technology';"
    },
    {
        "instruction": "입력 텍스트: 멸종 위기에 처한 종의 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE species (species_id INT PRIMARY KEY, species_name TEXT, conservation_status TEXT); INSERT INTO species (species_id, species_name, conservation_status) VALUES (1, 'Polar Bear', 'Vulnerable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM species WHERE conservation_status IN ('Endangered', 'Vulnerable', 'Critically Endangered');"
    },
    {
        "instruction": "입력 텍스트: 기부금' 테이블에서 700달러 이상 기부한 기부자는 누구인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50)); CREATE TABLE Donations (DonationID int, DonorID int, Amount decimal(10,2)); INSERT INTO Donors (DonorID, DonorName) VALUES (1001, 'John Smith'), (1002, 'Jane Doe'), (1003, 'Mike Johnson'), (1004, 'Emily Davis'), (1005, 'David Kim'); INSERT INTO Donations (DonationID, DonorID, Amount) VALUES (1, 1001, 500.00), (2, 1002, 750.00), (3, 1003, 800.00), (4, 1004, 600.00), (5, 1005, 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, Amount FROM Donations d JOIN Donors don ON d.DonorID = don.DonorID WHERE Amount > 700;"
    },
    {
        "instruction": "입력 텍스트: 가장 깊은 상위 3개의 해양 트렌치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Atlantic_plate (trench_name TEXT, location TEXT, avg_depth FLOAT); INSERT INTO Atlantic_plate (trench_name, location, avg_depth) VALUES ('Puerto Rico Trench', 'Puerto Rico', 27400.0), ('South Sandwich Trench', 'South Sandwich Islands', 24400.0), ('Cayman Trough', 'Cayman Islands', 7686.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trench_name, avg_depth FROM (SELECT trench_name, avg_depth, ROW_NUMBER() OVER (ORDER BY avg_depth DESC) as rn FROM Atlantic_plate) tmp WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: Safety Advocates' 노조의 총 회원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Unions (UnionID INT, UnionName VARCHAR(20));   INSERT INTO Unions (UnionID, UnionName) VALUES (1, 'Construction Workers Union'), (2, 'Safety Advocates'), (3, 'Teachers Union');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as TotalMembers   FROM UnionMembership   JOIN Unions ON UnionMembership.UnionID = Unions.UnionID   WHERE Unions.UnionName = 'Safety Advocates';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 전문 개발 과정을 완료한 교사는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE teacher_professional_development (teacher_id INT, year INT, completed BOOLEAN); INSERT INTO teacher_professional_development (teacher_id, year, completed) VALUES (101, 2022, TRUE), (102, 2021, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM teacher_professional_development WHERE year = 2022 AND completed = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 노래 재생 횟수가 가장 많은 상위 3명의 음악 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE music (id INT, title VARCHAR(255), artist VARCHAR(255), play_count INT); INSERT INTO music (id, title, artist, play_count) VALUES (1, 'SongA', 'ArtistD', 3000000); INSERT INTO music (id, title, artist, play_count) VALUES (2, 'SongB', 'ArtistE', 2000000); INSERT INTO music (id, title, artist, play_count) VALUES (3, 'SongC', 'ArtistF', 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist, SUM(play_count) as total_plays FROM music GROUP BY artist ORDER BY total_plays DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 라틴 아메리카에서의 평균 농생태학적 실천 채택률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE agroecology_practices (country VARCHAR(50), adoption_rate FLOAT); INSERT INTO agroecology_practices (country, adoption_rate) VALUES ('Brazil', 45.2), ('Argentina', 38.0), ('Colombia', 51.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(adoption_rate) FROM agroecology_practices WHERE country IN ('Brazil', 'Argentina', 'Colombia');"
    },
    {
        "instruction": "입력 텍스트: 마스코트 이름이 'B'로 시작하는 팀의 총 승리 횟수를 구하세요.\n\nDDL statements:\nCREATE TABLE teams_mascots (id INT, name VARCHAR(100), mascot VARCHAR(50), wins INT); INSERT INTO teams_mascots (id, name, mascot, wins) VALUES (1, 'Braves', 'Brave', 85), (2, 'Brewers', 'Brewer', 70), (3, 'Blue Jays', 'Blue Jay', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(wins) FROM teams_mascots WHERE mascot LIKE 'B%';"
    },
    {
        "instruction": "입력 텍스트: 과학' 부서에 수여된 평균 보조금 금액을 계산하세요.\n\nDDL statements:\nCREATE TABLE grants (id INT, department VARCHAR(20), amount FLOAT); INSERT INTO grants (id, department, amount) VALUES (1, 'Arts and Humanities', 50000.0), (2, 'Sciences', 75000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM grants WHERE department = 'Sciences';"
    },
    {
        "instruction": "입력 텍스트: 텍사스와 뉴욕에 있는 폐수 처리장은 총 몇 개입니까?\n\nDDL statements:\nCREATE TABLE wastewater_treatment_plants (id INT, state VARCHAR(20)); INSERT INTO wastewater_treatment_plants (id, state) VALUES (1, 'Texas'), (2, 'Texas'), (3, 'Texas'), (4, 'New York'), (5, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM wastewater_treatment_plants WHERE state IN ('Texas', 'New York');"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드가 사용한 지속 가능한 재료의 비율은 모든 브랜드가 사용한 지속 가능한 재료의 총량을 기준으로 얼마인가요?\n\nDDL statements:\nCREATE TABLE Brands (BrandID INT, BrandName VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'H&M'), (2, 'Zara'), (3, 'Levi''s'); CREATE TABLE Materials (MaterialID INT, MaterialName VARCHAR(50), BrandID INT, QuantityUsed INT, TotalQuantity INT); INSERT INTO Materials (MaterialID, MaterialName, BrandID, QuantityUsed, TotalQuantity) VALUES (1, 'Organic Cotton', 1, 5000, 10000), (2, 'Recycled Polyester', 1, 3000, 10000), (3, 'Organic Cotton', 2, 7000, 15000), (4, 'Tencel', 2, 4000, 15000), (5, 'Recycled Cotton', 3, 6000, 12000), (6, 'Hemp', 3, 2000, 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT BrandName, (SUM(QuantityUsed) * 100.0 / (SELECT SUM(QuantityUsed) FROM Materials WHERE MaterialName IN ('Organic Cotton', 'Recycled Polyester', 'Recycled Cotton', 'Hemp'))) AS Percentage FROM Materials GROUP BY BrandName;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 판매된 동물 실험을 하지 않은 제품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), is_cruelty_free BOOLEAN); INSERT INTO products VALUES (1, 'Lipstick 101', true), (2, 'Eye Shadow 202', false); CREATE TABLE sales (sale_id INT, product_id INT, sale_date DATE, region VARCHAR(50)); INSERT INTO sales VALUES (1, 1, '2022-01-05', 'US'), (2, 2, '2022-02-10', 'Canada'), (3, 1, '2022-03-20', 'US');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.product_name FROM products INNER JOIN sales ON products.product_id = sales.product_id WHERE products.is_cruelty_free = true AND sales.region = 'US';"
    },
    {
        "instruction": "입력 텍스트: 캐나다와 멕시코에서 로밍 서비스를 이용한 모바일 가입자의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mobile_subscribers_roaming (subscriber_id INT, roaming_country VARCHAR(255)); INSERT INTO mobile_subscribers_roaming (subscriber_id, roaming_country) VALUES (1, 'Canada'), (2, 'Mexico'), (3, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT roaming_country, COUNT(DISTINCT subscriber_id) FROM mobile_subscribers_roaming WHERE roaming_country IN ('Canada', 'Mexico') GROUP BY roaming_country;"
    },
    {
        "instruction": "입력 텍스트: 녹색 건축 인증을 받고 지속 가능성 평가가 70 이상인 부동산의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE properties (id INT, green_building_certified BOOLEAN, sustainability_rating FLOAT); INSERT INTO properties (id, green_building_certified, sustainability_rating) VALUES (1, true, 80.5), (2, false, 60.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM properties WHERE green_building_certified = true AND sustainability_rating > 70;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 위협 인텔리전스 소스로부터의 일일 위협 수와 평균 맬웨어 위협 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE threat_intel(id INT, date DATE, source VARCHAR(50), category VARCHAR(50), description VARCHAR(255)); INSERT INTO threat_intel(id, date, source, category, description) VALUES (1, '2021-01-01', 'African Threat Intelligence', 'malware', 'A new malware variant has been discovered'), (2, '2021-01-02', 'African Threat Intelligence', 'phishing', 'A phishing campaign is targeting African banks');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date, COUNT(*) as total_threats, AVG(category = 'malware'::int) as avg_malware FROM threat_intel WHERE source = 'African Threat Intelligence' GROUP BY date ORDER BY date;"
    },
    {
        "instruction": "입력 텍스트: events' 테이블에서 각 팀별 총 팬 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (event_id INT, team_id INT, num_fans INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_id, SUM(num_fans) FROM events GROUP BY team_id;"
    },
    {
        "instruction": "입력 텍스트: 총 자금 조달액이 가장 높은 상위 3개 산업을 확인하세요.\n\nDDL statements:\nCREATE TABLE industry_funding (company_name VARCHAR(100), industry VARCHAR(50), funding_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, SUM(funding_amount) as total_funding FROM industry_funding GROUP BY industry ORDER BY total_funding DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 미술관에 기증된 작품 수로 본 상위 3명의 예술가는 누구인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, artist VARCHAR(100), museum VARCHAR(50), artworks INT); INSERT INTO donations (id, artist, museum, artworks) VALUES (1, 'Mohamed', 'Metropolitan Museum', 15), (2, 'Sophia', 'Louvre Museum', 20), (3, 'Juan', 'Metropolitan Museum', 10), (4, 'Nina', 'British Museum', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist, SUM(artworks) AS total_donations FROM donations GROUP BY artist ORDER BY total_donations DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 건물 테이블에서 평방미터당 평균 부동산 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sustainable_buildings (id INT, property_price FLOAT, size INT); INSERT INTO sustainable_buildings (id, property_price, size) VALUES (1, 500000, 100), (2, 600000, 120), (3, 700000, 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(property_price/size) FROM sustainable_buildings;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 65세 이상 성인을 대상으로 한 독감 예방접종의 총 횟수를 주별로 그룹화하여 찾으세요.\n\nDDL statements:\nCREATE TABLE vaccinations (vaccine_type VARCHAR(50), age INTEGER, state VARCHAR(50), year INTEGER, quantity INTEGER); INSERT INTO vaccinations (vaccine_type, age, state, year, quantity) VALUES ('Flu', 67, 'California', 2021, 12000), ('Flu', 66, 'California', 2021, 15000), ('Flu', 68, 'Texas', 2021, 10000), ('Flu', 70, 'Texas', 2021, 18000), ('Flu', 69, 'New York', 2021, 14000), ('Flu', 71, 'New York', 2021, 16000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(quantity) as total_vaccinations FROM vaccinations WHERE vaccine_type = 'Flu' AND age > 65 AND year = 2021 GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 출신 선수들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Region VARCHAR(30)); INSERT INTO Players (PlayerID, Age, Region) VALUES (1, 25, 'Africa'), (2, 30, 'Europe'), (3, 35, 'Asia'), (4, 22, 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Players WHERE Region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: smart_contracts' 테이블에서 'DeFi' 애플리케이션과 관련된 스마트 계약의 평균 연령과 거래 수수료 총합을 구하세요.\n\nDDL statements:\nCREATE TABLE smart_contracts (contract_id INT, app_name VARCHAR(100), app_category VARCHAR(50), age INT, transaction_fee DECIMAL(10,2)); INSERT INTO smart_contracts (contract_id, app_name, app_category, age, transaction_fee) VALUES (1, 'Compound', 'DeFi', 3, 15.50), (2, 'Uniswap', 'DeFi', 2, 20.00), (3, 'OpenZeppelin', 'Security', 5, 5.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) as avg_age, SUM(transaction_fee) as total_fees FROM smart_contracts WHERE app_category = 'DeFi';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 기후 변화 완화 프로젝트를 위해 가장 많은 기후 자금을 받은 상위 3개국을 나열하되, 그 해에 총 기후 자금으로 500만 달러 미만을 받은 국가는 제외하세요.\n\nDDL statements:\nCREATE TABLE climate_finance (year INT, recipient VARCHAR(20), category VARCHAR(10), amount FLOAT); INSERT INTO climate_finance (year, recipient, category, amount) VALUES (2019, 'India', 'mitigation', 12000000), (2019, 'Brazil', 'mitigation', 18000000), (2019, 'Indonesia', 'mitigation', 7000000), (2019, 'South Africa', 'mitigation', 6000000), (2019, 'Mexico', 'mitigation', 4000000), (2019, 'Argentina', 'mitigation', 4500000), (2019, 'Colombia', 'mitigation', 4800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT recipient, SUM(amount) AS total_climate_finance FROM climate_finance WHERE year = 2019 AND category = 'mitigation' GROUP BY recipient HAVING total_climate_finance > 5000000 ORDER BY total_climate_finance DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 도시별 전시회당 평균 방문객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Exhibitions (id INT, city VARCHAR(255), visitors INT); INSERT INTO Exhibitions (id, city, visitors) VALUES (1, 'New York', 2500), (2, 'Los Angeles', 1800), (3, 'Chicago', 2200), (4, 'San Francisco', 1500), (5, 'Miami', 1200); INSERT INTO Exhibitions (id, city, visitors) VALUES (6, 'New York', 1500), (7, 'Los Angeles', 1000), (8, 'Chicago', 1800), (9, 'San Francisco', 1000), (10, 'Miami', 1600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(visitors) FROM Exhibitions GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 도시별 문화 행사의 평균 참석자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE cultural_events (id INT, city VARCHAR(50), event VARCHAR(50), attendance INT); INSERT INTO cultural_events (id, city, event, attendance) VALUES (1, 'New York', 'Art Exhibit', 2500), (2, 'Los Angeles', 'Theater Performance', 1800), (3, 'Chicago', 'Music Concert', 2200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(attendance) as avg_attendance FROM cultural_events GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 대륙별 접근성, 교육, 고용에 초점을 맞춘 정책 옹호 노력의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE policy_advocacy (id INT, year INT, focus VARCHAR(255), continent VARCHAR(255)); INSERT INTO policy_advocacy (id, year, focus, continent) VALUES (1, 2017, 'Accessibility', 'North America'), (2, 2018, 'Education', 'Europe'), (3, 2019, 'Employment', 'Asia'), (4, 2020, 'Accessibility', 'Africa'), (5, 2021, 'Education', 'North America'), (6, 2022, 'Employment', 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT focus, continent, COUNT(id) as total_efforts FROM policy_advocacy WHERE year BETWEEN 2017 AND 2022 AND focus IN ('Accessibility', 'Education', 'Employment') GROUP BY focus, continent;"
    },
    {
        "instruction": "입력 텍스트: 고객 ID가 11121인 고객의 재정 안정성 점수를 찾으세요.\n\nDDL statements:\nCREATE TABLE financial_wellbeing (customer_id INT, score DECIMAL(3,2)); INSERT INTO financial_wellbeing (customer_id, score) VALUES (12345, 75.2), (98765, 82.6), (11121, 88.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT score FROM financial_wellbeing WHERE customer_id = 11121;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 풍력과 태양광 에너지원으로 발생한 총 에너지와 해당 지역의 탄소 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE wind_energy (year INT, region VARCHAR(20), energy_generated INT);CREATE TABLE solar_energy (year INT, region VARCHAR(20), energy_generated INT);CREATE TABLE carbon_pricing (region VARCHAR(20), price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(w.energy_generated) + SUM(s.energy_generated) AS total_energy, c.price FROM wind_energy w JOIN solar_energy s ON w.year = s.year JOIN carbon_pricing c ON w.region = c.region WHERE w.year = 2021 GROUP BY w.region;"
    },
    {
        "instruction": "입력 텍스트: 가장 먼저 발사된 위성의 이름과 제조사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, name VARCHAR(255), manufacturer VARCHAR(255), launch_date DATE); INSERT INTO satellites (id, name, manufacturer, launch_date) VALUES (1, 'FalconSat', 'SpaceX', '2020-01-01'), (2, 'Cubesat', 'Blue Origin', '2019-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, manufacturer FROM satellites ORDER BY launch_date ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 북극해에서의 최소 해양 산성도 수준은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ocean_acidity (id INT, location TEXT, acidity FLOAT, ocean TEXT); INSERT INTO ocean_acidity (id, location, acidity, ocean) VALUES (1, 'Arctic Ocean Point', 7.5, 'Arctic'), (2, 'Greenland Sea', 7.7, 'Arctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(acidity) FROM ocean_acidity WHERE ocean = 'Arctic';"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년 사이에 각 동네에서 팔린 부동산은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE property_sales (sale_id INT, property_id INT, sale_year INT); CREATE TABLE properties (property_id INT, neighborhood_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT neighborhood_id, COUNT(DISTINCT property_id) as properties_sold FROM property_sales JOIN properties ON property_sales.property_id = properties.property_id WHERE sale_year BETWEEN 2018 AND 2020 GROUP BY neighborhood_id;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 구에서 발생한 이벤트 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Events (id INT, borough VARCHAR(10), event_date DATE); INSERT INTO Events (id, borough, event_date) VALUES (1, 'Manhattan', '2021-05-15'), (2, 'Brooklyn', '2021-07-03'), (3, 'Queens', '2021-11-27');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT borough, COUNT(*) as event_count FROM Events WHERE event_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY borough;"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2020년 사이에 토론토 시에서 시행된 재활용 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE RecyclingPrograms (ID INT PRIMARY KEY, Program VARCHAR(50), City VARCHAR(50), StartYear INT, EndYear INT); INSERT INTO RecyclingPrograms (ID, Program, City, StartYear, EndYear) VALUES (1, 'Glass Recycling', 'Toronto', 2015, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Program FROM RecyclingPrograms WHERE City = 'Toronto' AND StartYear BETWEEN 2015 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 2020 NBA 시즌에서 다른 나라 출신 선수들이 기록한 경기당 평균 득점은 얼마였나요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, player_name VARCHAR(50), country VARCHAR(50), points_per_game DECIMAL(5,2)); INSERT INTO players (player_id, player_name, country, points_per_game) VALUES (1, 'John Doe', 'USA', 20.5), (2, 'Jane Smith', 'Canada', 18.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(points_per_game) as avg_points FROM players GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 평균보다 높은 오염 수준을 가진 모든 광산 지역을 나열하시오.\n\nDDL statements:\nCREATE TABLE mining_sites (id INT, site_name VARCHAR(50), location VARCHAR(50), pollution_level INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_name, pollution_level FROM mining_sites WHERE pollution_level > (SELECT AVG(pollution_level) FROM mining_sites);"
    },
    {
        "instruction": "입력 텍스트: 2019년도 'Australia'의 생산 기록을 삭제하세요, 만약 존재한다면.\n\nDDL statements:\nCREATE TABLE production (country VARCHAR(255), year INT, amount INT); INSERT INTO production (country, year, amount) VALUES ('China', 2019, 120000), ('China', 2020, 140000), ('USA', 2020, 38000), ('Australia', 2019, 15000), ('Australia', 2020, 20000), ('India', 2020, 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM production WHERE country = 'Australia' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 사회적 영향 점수가 80점을 초과하는 모든 기관들과 그들의 점수를 표시하세요.\n\nDDL statements:\nCREATE TABLE Organizations (id INT, name TEXT, social_impact_score INT); INSERT INTO Organizations (id, name, social_impact_score) VALUES (1, 'Habitat for Humanity', 85), (2, 'UNICEF', 90), (3, 'Red Cross', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, social_impact_score FROM Organizations WHERE social_impact_score > 80;"
    },
    {
        "instruction": "입력 텍스트: player_stats' 테이블에 있는 미국 출신 선수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE player_stats (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO player_stats (id, name, country) VALUES (1, 'John Doe', 'USA'), (2, 'Jane Smith', 'Canada'), (3, 'Maria Garcia', 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM player_stats WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 스페인 바르셀로나에 있는 투어 가이드에 대한 새로운 기록을 tour_guides 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE tour_guides (id INT PRIMARY KEY, name VARCHAR(255), language VARCHAR(50), bio TEXT, city VARCHAR(255), country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO tour_guides (name, language, bio, city, country) VALUES ('Marta Garcia', 'Spanish, English', 'Marta is a licensed tour guide in Barcelona with a degree in Art History. She loves sharing her city with visitors and showing them the hidden gems.', 'Barcelona', 'Spain');"
    },
    {
        "instruction": "입력 텍스트: \"investment_rounds\" 테이블에서 id가 7인 레코드의 라운드 유형을 'Series D'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE investment_rounds (id INT, company_name VARCHAR(100), round_type VARCHAR(50), raised_amount FLOAT, round_date DATE); INSERT INTO investment_rounds (id, company_name, round_type, raised_amount, round_date) VALUES (6, 'Hotel Ltd.', 'Series B', 7000000, '2018-02-15'), (7, 'India Inc.', 'Series A', 5000000, '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE investment_rounds SET round_type = 'Series D' WHERE id = 7;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에서 ArtifactID가 1인 유물을 삭제하세요.\n\nDDL statements:\nCREATE TABLE ExcavationSites (SiteID INT, SiteName TEXT, Country TEXT); INSERT INTO ExcavationSites (SiteID, SiteName, Country) VALUES (1, 'MayanRuins', 'Guatemala'); CREATE TABLE Artifacts (ArtifactID INT, SiteID INT, ArtifactName TEXT, ArtifactType TEXT, Quantity INT); INSERT INTO Artifacts (ArtifactID, SiteID, ArtifactName, ArtifactType, Quantity) VALUES (1, 1, 'Jade Mask', 'Mask', 1), (2, 1, 'Obsidian Knife', 'Knife', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Artifacts WHERE ArtifactID = 1;"
    },
    {
        "instruction": "입력 텍스트: 프로젝트별로 측정된 총 이산화탄소 배출 감소량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE co2_emission_reduction (id INT, project VARCHAR(255), reduction INT, reduction_unit VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project, SUM(reduction) as total_co2_reduction FROM co2_emission_reduction WHERE reduction_unit = 'metric tons' GROUP BY project HAVING total_co2_reduction > 1000;"
    },
    {
        "instruction": "입력 텍스트: renewables' 스키마에서 단일 재생 에너지 프로젝트의 최대 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists renewables; CREATE TABLE if not exists renewables.renewable_projects (project_id int, name varchar(255), location varchar(255), installed_capacity float); INSERT INTO renewables.renewable_projects (project_id, name, location, installed_capacity) VALUES (1, 'Renewable Project 1', 'Country A', 100.0), (2, 'Renewable Project 2', 'Country B', 150.0), (3, 'Renewable Project 3', 'Country C', 200.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(installed_capacity) FROM renewables.renewable_projects;"
    },
    {
        "instruction": "입력 텍스트: NASA에서 발사한 화성 로버와 오비터의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE mars_rovers (id INT, name VARCHAR(50), type VARCHAR(50), agency VARCHAR(50), launch_date DATE); INSERT INTO mars_rovers (id, name, type, agency, launch_date) VALUES (1, 'Spirit', 'Rover', 'NASA', '2003-06-10'); INSERT INTO mars_rovers (id, name, type, agency, launch_date) VALUES (2, 'Mars Reconnaissance Orbiter', 'Orbiter', 'NASA', '2005-08-12');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mars_rovers WHERE agency = 'NASA' AND (type = 'Rover' OR type = 'Orbiter');"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2019년 나이지리아에서 경제 다양화 프로젝트의 총 비용은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE economic_diversification (id INT, country VARCHAR(255), project VARCHAR(255), cost FLOAT, year INT); INSERT INTO economic_diversification (id, country, project, cost, year) VALUES (1, 'Nigeria', 'Manufacturing Plant', 8000000, 2018), (2, 'Nigeria', 'Renewable Energy', 10000000, 2019), (3, 'Ghana', 'Tourism Development', 5000000, 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM economic_diversification WHERE country = 'Nigeria' AND (year = 2018 OR year = 2019);"
    },
    {
        "instruction": "입력 텍스트: New York'에서 진행된 프로그램들의 총 자금 지원액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Programs (program_name VARCHAR(255), location VARCHAR(255), funding_received INT); INSERT INTO Programs (program_name, location, funding_received) VALUES ('Art Education', 'New York', 20000), ('Music Education', 'California', 15000), ('Theater Education', 'New York', 25000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT funding_received FROM Programs WHERE location = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 어느 우물이 같은 나라의 이전 우물보다 더 높은 생산율을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE Wells (WellID INT, WellName VARCHAR(50), ProductionRate FLOAT, Country VARCHAR(50)); INSERT INTO Wells (WellID, WellName, ProductionRate, Country) VALUES (1, 'Well A', 500, 'USA'), (2, 'Well B', 600, 'Canada'), (3, 'Well C', 700, 'Mexico'), (4, 'Well D', 800, 'USA'), (5, 'Well E', 900, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w1.WellName, w1.ProductionRate FROM Wells w1 WHERE w1.ProductionRate > (SELECT w2.ProductionRate FROM Wells w2 WHERE w2.Country = w1.Country AND w2.WellID < w1.WellID ORDER BY w2.WellID DESC LIMIT 1);"
    },
    {
        "instruction": "입력 텍스트: BudgetAllocation' 테이블에서 'Education' 부서의 예산 할당을 업데이트하세요\n\nDDL statements:\nCREATE TABLE BudgetAllocation (department VARCHAR(20), budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE BudgetAllocation SET budget = 700000 WHERE department = 'Education';"
    },
    {
        "instruction": "입력 텍스트: 각 광산 작업별 월별 폐기물 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mining_operations (operation_id INT, operation_name TEXT, country TEXT); INSERT INTO mining_operations (operation_id, operation_name, country) VALUES (1, 'Escondida Mine', 'Chile'), (2, 'Bingham Canyon Mine', 'USA'), (3, 'Grasberg Mine', 'Indonesia'); CREATE TABLE waste_production (operation_id INT, production_date DATE, amount_waste FLOAT); INSERT INTO waste_production (operation_id, production_date, amount_waste) VALUES (1, '2022-01-01', 2000), (1, '2022-01-02', 2200), (2, '2022-01-01', 2500), (2, '2022-01-02', 2700), (3, '2022-01-01', 3000), (3, '2022-01-02', 3300), (1, '2022-02-01', 2300), (1, '2022-02-02', 2500), (2, '2022-02-01', 2800), (2, '2022-02-02', 3000), (3, '2022-02-01', 3300), (3, '2022-02-02', 3600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM production_date) AS month, operation_id, SUM(amount_waste) AS total_waste FROM waste_production JOIN mining_operations ON waste_production.operation_id = mining_operations.operation_id GROUP BY month, operation_id;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 현지에서 조달한 식사의 총 칼로리 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Meals (MealID INT, MealName VARCHAR(50), Region VARCHAR(50), IsLocal BOOLEAN, Calories INT); INSERT INTO Meals (MealID, MealName, Region, IsLocal, Calories) VALUES (1, 'Spaghetti Bolognese', 'Europe', true, 650), (2, 'Chicken Tikka Masala', 'Asia', false, 850);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, SUM(Calories) as TotalCalories FROM Meals WHERE IsLocal = TRUE GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 오호츠크해에서 생산량이 10000을 초과하는 플랫폼의 수.\n\nDDL statements:\nCREATE TABLE platform_production (id INT, location VARCHAR(50), production INT); INSERT INTO platform_production (id, location, production) VALUES (1, 'Sea of Okhotsk', 15000), (2, 'Sea of Okhotsk', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM platform_production WHERE location = 'Sea of Okhotsk' AND production > 10000;"
    },
    {
        "instruction": "입력 텍스트: SpaceForAll 조직에서 제조한 우주선의 평균 질량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SpacecraftManufacturing (manufacturer VARCHAR(255), spacecraft_name VARCHAR(255), mass FLOAT); INSERT INTO SpacecraftManufacturing (manufacturer, spacecraft_name, mass) VALUES ('SpaceForAll', 'Apollo', 28000), ('SpaceForAll', 'Gemini', 3200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(mass) FROM SpacecraftManufacturing WHERE manufacturer = 'SpaceForAll';"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 국가에서 보고된 독감 사례 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE flu_cases (id INT, country TEXT, year INT, num_cases INT); INSERT INTO flu_cases (id, country, year, num_cases) VALUES (1, 'USA', 2018, 12345), (2, 'USA', 2019, 15678), (3, 'USA', 2020, 20000), (4, 'Canada', 2018, 8765), (5, 'Canada', 2019, 10111), (6, 'Canada', 2020, 12345), (7, 'Mexico', 2018, 5432), (8, 'Mexico', 2019, 6789), (9, 'Mexico', 2020, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, year, COUNT(*) as num_cases FROM flu_cases WHERE year = 2020 GROUP BY country, year;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 예산이 50,000달러를 초과하는 농업 혁신 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE agricultural_innovation_projects (id INT, name TEXT, budget FLOAT, country TEXT); INSERT INTO agricultural_innovation_projects (id, name, budget, country) VALUES (1, 'Project S', 55000.0, 'India'); INSERT INTO agricultural_innovation_projects (id, name, budget, country) VALUES (2, 'Project T', 40000.0, 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM agricultural_innovation_projects WHERE budget > 50000 AND country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 주어진 도시에서 정류장과 노선의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE stops (id INT, name VARCHAR(255), lat DECIMAL(9,6), lon DECIMAL(9,6), city VARCHAR(255)); INSERT INTO stops (id, name, lat, lon, city) VALUES (1, 'Central Station', 40.7128, -74.0060, 'NYC'), (2, 'Times Square', 40.7590, -73.9844, 'NYC'), (3, 'Eiffel Tower', 48.8582, 2.2945, 'Paris'), (4, 'Big Ben', 51.5008, -0.1246, 'London'), (5, 'Sydney Opera House', -33.8568, 151.2153, 'Sydney'); CREATE TABLE routes (id INT, name VARCHAR(255), type VARCHAR(255), length INT, city VARCHAR(255), wheelchair_accessible BOOLEAN); INSERT INTO routes (id, name, type, length, city, wheelchair_accessible) VALUES (1, '10', 'Bus', 25000, 'NYC', true), (2, '20', 'Train', 50000, 'NYC', true), (3, '30', 'Tram', 30000, 'Paris', false), (4, '40', 'Subway', 40000, 'London', true), (5, '50', 'Ferry', 15000, 'Sydney', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(DISTINCT s.id) as Total_Stops, COUNT(DISTINCT r.id) as Total_Routes FROM stops s JOIN routes r ON s.city = r.city GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: admin'이라는 단어가 사용자 이름에 포함된 사용자들의 인증 실패 시도 횟수는 총 몇 번입니까?\n\nDDL statements:\nCREATE TABLE AuthenticationLogs (id INT PRIMARY KEY, username VARCHAR(255), login_time TIMESTAMP, logout_time TIMESTAMP, authentication_status VARCHAR(50)); INSERT INTO AuthenticationLogs (id, username, login_time, logout_time, authentication_status) VALUES (1, 'jane.doe', '2021-03-15 11:00:00', '2021-03-15 12:00:00', 'Success'), (2, 'admin.user', '2021-03-15 13:00:00', '2021-03-15 13:30:00', 'Failed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM AuthenticationLogs WHERE username LIKE '%admin%' AND authentication_status = 'Failed';"
    },
    {
        "instruction": "입력 텍스트: 도시별 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (id INT, city VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO Donations (id, city, amount) VALUES (1, 'New York', 50.00), (2, 'Los Angeles', 100.00), (3, 'New York', 20.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(amount) as avg_donation FROM Donations GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 전체적으로 몇 가지의 고유한 기차 유형이 있나요?\n\nDDL statements:\nCREATE TABLE trains (train_id INT, train_type TEXT); INSERT INTO trains (train_id, train_type) VALUES (1, 'Commuter'), (2, 'High-Speed'), (3, 'Light Rail'), (4, 'Commuter'), (5, 'Monorail');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT train_type) FROM trains;"
    },
    {
        "instruction": "입력 텍스트: 남아메리카'에서 기록된 보안 사고의 총 건수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, incident_name VARCHAR(255), region VARCHAR(255), incident_date DATETIME); INSERT INTO security_incidents (id, incident_name, region, incident_date) VALUES (1, 'Phishing', 'South America', '2022-01-05'), (2, 'Data Breach', 'Europe', '2022-01-06');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM security_incidents WHERE region = 'South America';"
    },
    {
        "instruction": "입력 텍스트: B형 별의 최소 절대 등급은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Stars (id INT, name VARCHAR(255), constellation VARCHAR(255), right_ascension VARCHAR(255), declination VARCHAR(255), spectral_type VARCHAR(255), absolute_magnitude DECIMAL(5,2)); INSERT INTO Stars (id, name, constellation, right_ascension, declination, spectral_type, absolute_magnitude) VALUES (1, 'Rigel', 'Orion', '5h 14m 32.3s', '-08° 12′ 06″', 'B8Ia', -7.0); INSERT INTO Stars (id, name, constellation, right_ascension, declination, spectral_type, absolute_magnitude) VALUES (2, 'Spica', 'Virgo', '13h 25m 11.7s', '-11° 09′ 12″', 'B1V', -4.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT spectral_type, MIN(absolute_magnitude) as min_absolute_magnitude FROM Stars WHERE spectral_type = 'B1V' GROUP BY spectral_type;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 지난 1년간 주별로 추출된 광물의 총량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mineral_extraction_us (extraction_date DATE, extraction_amount INT, extraction_state VARCHAR(255)); INSERT INTO mineral_extraction_us (extraction_date, extraction_amount, extraction_state) VALUES ('2021-08-01', 5000, 'California'), ('2021-07-01', 7000, 'Texas'), ('2020-08-01', 8000, 'Alaska'), ('2020-07-01', 3000, 'Wyoming');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT extraction_state, SUM(extraction_amount) as total_extraction FROM mineral_extraction_us WHERE extraction_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY extraction_state;"
    },
    {
        "instruction": "입력 텍스트: 2018년에 시작된 각 프로그램에 등록한 자원봉사자의 비율을 전체 자원봉사자 수에서 차지하는 비율로 나타내고, 그 비율이 높은 순으로 내림차순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE Programs (ProgramID INT, ProgramName VARCHAR(50), StartDate DATE); CREATE TABLE Volunteers (VolunteerID INT, ProgramID INT, SignUpDate DATE); INSERT INTO Programs (ProgramID, ProgramName, StartDate) VALUES (1, 'ProgramA', '2018-01-01'), (2, 'ProgramB', '2018-01-01'); INSERT INTO Volunteers (VolunteerID, ProgramID, SignUpDate) VALUES (1, 1, '2018-01-01'), (2, 1, '2018-01-02'), (3, 2, '2018-01-01'), (4, NULL, '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.ProgramID, p.ProgramName, COUNT(v.VolunteerID) * 100.0 / (SELECT COUNT(*) FROM Volunteers) AS Percentage FROM Programs p LEFT JOIN Volunteers v ON p.ProgramID = v.ProgramID WHERE p.StartDate >= '2018-01-01' GROUP BY p.ProgramID, p.ProgramName ORDER BY Percentage DESC;"
    },
    {
        "instruction": "입력 텍스트: climate_finance' 테이블에서 'funding_source'가 'Private sector'이고 'country'가 'United States'인 경우 'amount' 열을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE climate_finance (id INT, funding_source VARCHAR(255), country VARCHAR(255), amount FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE climate_finance SET amount = amount * 1.1 WHERE funding_source = 'Private sector' AND country = 'United States';"
    },
    {
        "instruction": "입력 텍스트: 특정 프로그램에 등록되어 있지만 편의 시설을 이용하지 않는 모든 학생들을 나열합니다.\n\nDDL statements:\nCREATE TABLE Student_Program_Mapping (student_id INT, program_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name as student_name FROM Students s LEFT JOIN Student_Program_Mapping spm ON s.id = spm.student_id LEFT JOIN Support_Programs sp ON spm.program_id = sp.id WHERE sp.name = 'Special Ed' AND sp.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: Country X'에서 '2022년 1월'에 보낸 배송은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Shipments (country varchar(20), shipment_date date); INSERT INTO Shipments (country, shipment_date) VALUES ('Country X', '2022-01-05'), ('Country Y', '2022-02-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Shipments WHERE country = 'Country X' AND EXTRACT(MONTH FROM shipment_date) = 1 AND EXTRACT(YEAR FROM shipment_date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: Country X에 있는 마이크로파이낸스 고객들에게 지급된 총 대출 금액을 계산하세요.\n\nDDL statements:\nCREATE TABLE microfinance_clients (id INT PRIMARY KEY, client_name VARCHAR(100), country VARCHAR(50), loan_amount DECIMAL(10, 2)); INSERT INTO microfinance_clients (id, client_name, country, loan_amount) VALUES (1, 'Client A', 'Country X', 500.00), (2, 'Client B', 'Country Y', 700.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(loan_amount) FROM microfinance_clients WHERE country = 'Country X';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 출시된 유기농 스킨케어 제품의 평균 평점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Products (product_id INT, product_name VARCHAR(50), launch_year INT, organic BOOLEAN, rating FLOAT); INSERT INTO Products (product_id, product_name, launch_year, organic, rating) VALUES (1, 'Cleanser', 2021, TRUE, 4.5), (2, 'Toner', 2021, TRUE, 4.3), (3, 'Moisturizer', 2020, FALSE, 4.7), (4, 'Serum', 2021, TRUE, 4.8), (5, 'Eye Cream', 2020, FALSE, 4.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM Products WHERE organic = TRUE AND launch_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 정치' 카테고리에서 가장 많은 기사와 가장 적은 기사를 보유한 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE articles (article_id INT, title VARCHAR(50), category VARCHAR(20), country VARCHAR(20)); INSERT INTO articles (article_id, title, category, country) VALUES (1, 'Politics in 2022', 'politics', 'USA'), (2, 'British Politics', 'politics', 'UK'), (3, 'Indian Economy', 'economy', 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as count FROM articles WHERE category = 'politics' GROUP BY country ORDER BY count DESC, country ASC LIMIT 1; SELECT country, COUNT(*) as count FROM articles WHERE category = 'politics' GROUP BY country ORDER BY count ASC, country ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 공장의 factory_id가 4인 '재생 에너지' 부서에 대한 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, department VARCHAR(20)); INSERT INTO factories VALUES (1, 'textile'), (2, 'metal'), (3, 'textile'), (4, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO factories (factory_id, department) VALUES (4, 'renewable energy');"
    },
    {
        "instruction": "입력 텍스트: 미시간주에서 한 해 동안 형사 사법 개혁 이니셔티브에 할당된 최대 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE criminal_justice_reform_initiatives (initiative_id INT, year INT, budget INT, state VARCHAR(20)); INSERT INTO criminal_justice_reform_initiatives (initiative_id, year, budget, state) VALUES (1, 2022, 5000000, 'Michigan'), (2, 2021, 6000000, 'Michigan'), (3, 2020, 7000000, 'Michigan'), (4, 2019, 8000000, 'Michigan'), (5, 2018, 9000000, 'Michigan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(budget) FROM criminal_justice_reform_initiatives WHERE year >= 2018 AND state = 'Michigan';"
    },
    {
        "instruction": "입력 텍스트: SuburbD'의 물 사용량 값을 180.0으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Suburbs (Suburb VARCHAR(20), WaterConsumption FLOAT); INSERT INTO Suburbs (Suburb, WaterConsumption) VALUES ('SuburbA', 250.5), ('SuburbB', 120.3), ('SuburbD', 220.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Suburbs SET WaterConsumption = 180.0 WHERE Suburb = 'SuburbD';"
    },
    {
        "instruction": "입력 텍스트: 미국 내 소수 인종에 의해 설립된 회사들이 완료한 시리즈 A 라운드는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE companies(id INT, name VARCHAR(50), founding_year INT, founder_race VARCHAR(20)); CREATE TABLE investment_rounds(company_id INT, round_type VARCHAR(10), round_amount FLOAT); INSERT INTO companies VALUES (1, 'StartupD', 2015, 'African American'); INSERT INTO companies VALUES (2, 'StartupE', 2016, 'Hispanic'); INSERT INTO companies VALUES (3, 'StartupF', 2017, 'Caucasian'); INSERT INTO investment_rounds VALUES (1, 'Series A', 3000000); INSERT INTO investment_rounds VALUES (2, 'Seed', 500000); INSERT INTO investment_rounds VALUES (3, 'Seed', 700000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies INNER JOIN investment_rounds ON companies.id = investment_rounds.company_id WHERE founder_race IN ('African American', 'Hispanic') AND round_type = 'Series A';"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후에 스페인과 이탈리아에서 시작된 순환 경제 이니셔티브는 무엇인가요?\n\nDDL statements:\nCREATE TABLE initiatives (name TEXT, country TEXT, launch_year INTEGER); INSERT INTO initiatives (name, country, launch_year) VALUES ('Initiative A', 'Spain', 2011), ('Initiative B', 'Spain', 2015), ('Initiative C', 'Italy', 2012), ('Initiative D', 'France', 2009);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM initiatives WHERE country IN ('Spain', 'Italy') AND launch_year > 2010;"
    },
    {
        "instruction": "입력 텍스트: 우주에서 가장 오랜 기간 머문 우주선은 무엇인가요?\n\nDDL statements:\nCREATE TABLE spacecraft (id INT, name VARCHAR(255), total_days_in_space INT); INSERT INTO spacecraft (id, name, total_days_in_space) VALUES (1, 'Voyager 1', 43902), (2, 'Voyager 2', 41484), (3, 'Cassini', 13303);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, total_days_in_space FROM spacecraft ORDER BY total_days_in_space DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: music_streaming' 테이블에서 라틴 아티스트의 총 스트리밍 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE music_streaming (stream_id INT, user_id INT, song_id INT, streams INT, date DATE, artist_id INT, artist_nationality VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(streams) FROM music_streaming WHERE artist_nationality LIKE '%Latin%';"
    },
    {
        "instruction": "입력 텍스트: 2017년 이후 각 연도별로 군사 혁신 프로젝트의 총 개수와 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE military_innovation (id INT, project_name VARCHAR(50), year INT, budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, COUNT(*), SUM(budget) FROM military_innovation WHERE year >= 2017 GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에는 하수 처리장이 몇 개 있나요?\n\nDDL statements:\nCREATE TABLE WastewaterPlant (ID INT, State VARCHAR(20)); INSERT INTO WastewaterPlant (ID, State) VALUES (1, 'New York'), (2, 'Texas'), (3, 'Florida'), (4, 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM WastewaterPlant WHERE State = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 2019년 '농촌' 부문의 기관들의 평균 재활용률(백분율)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE recycling_rates (id INT, organization_id INT, year INT, recycling_rate FLOAT); INSERT INTO recycling_rates (id, organization_id, year, recycling_rate) VALUES (1, 5, 2019, 35.6); INSERT INTO recycling_rates (id, organization_id, year, recycling_rate) VALUES (2, 6, 2019, 42.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(recycling_rate) FROM recycling_rates WHERE year = 2019 AND organization_id IN (SELECT id FROM organizations WHERE sector = 'rural');"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 국가별 총 폐기물 발생량(kg)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_generation (country VARCHAR(255), year INT, amount FLOAT); INSERT INTO waste_generation (country, year, amount) VALUES ('USA', 2021, 5000.5), ('Mexico', 2021, 3000.3), ('Canada', 2021, 4000.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT wg.country, SUM(wg.amount) as total_waste FROM waste_generation wg WHERE wg.year = 2021 GROUP BY wg.country;"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 발생한 해양 포유류의 좌초 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE strandings (id INTEGER, date DATE, species TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM strandings WHERE date >= (SELECT date FROM (SELECT date FROM strandings ORDER BY date DESC LIMIT 1) subquery) - INTERVAL '3 months';"
    },
    {
        "instruction": "입력 텍스트: 각 주별로 베테랑의 최소 고용률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Veterans (State VARCHAR(255), Employment_Rate FLOAT); INSERT INTO Veterans (State, Employment_Rate) VALUES ('California', 65.2), ('Texas', 70.5), ('New York', 68.7), ('Florida', 72.1), ('Illinois', 66.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, MIN(Employment_Rate) FROM Veterans GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 도시의 도서관 수를 6개로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE cities (id INT, name TEXT, state TEXT, num_libraries INT); INSERT INTO cities (id, name, state, num_libraries) VALUES (1, 'CityD', 'NY', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE cities SET num_libraries = 6 WHERE name = 'CityD' AND state = 'NY';"
    },
    {
        "instruction": "입력 텍스트: \"geological_survey\" 테이블에 다음 데이터를 가진 새로운 레코드를 추가하세요: 'Emerald Exploration', 'Emerald', '2022-03-25'\n\nDDL statements:\nCREATE TABLE geological_survey (survey_id INT PRIMARY KEY, mine_name VARCHAR(20), mineral_type VARCHAR(20), survey_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO geological_survey (mine_name, mineral_type, survey_date) VALUES ('Emerald Exploration', 'Emerald', '2022-03-25');"
    },
    {
        "instruction": "입력 텍스트: 지속 가능성 분야의 회사들이 최소 3번의 펀딩 라운드를 진행한 경우, 그 회사들이 받은 총 펀딩 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (company_id INT, company_name TEXT, industry TEXT, founding_year INT); INSERT INTO companies (company_id, company_name, industry, founding_year) VALUES (1, 'GreenTech', 'Sustainability', 2016); CREATE TABLE funding_records (funding_id INT, company_id INT, amount INT, round_number INT); INSERT INTO funding_records (funding_id, company_id, amount, round_number) VALUES (1, 1, 300000, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fr.amount) FROM companies c JOIN funding_records fr ON c.company_id = fr.company_id WHERE c.industry = 'Sustainability' GROUP BY c.company_id HAVING COUNT(fr.round_number) >= 3;"
    },
    {
        "instruction": "입력 텍스트: peacekeeping_operations' 테이블에서 가장 먼저 시작된 작전은 무엇인가요?\n\nDDL statements:\nCREATE TABLE peacekeeping_operations (id INT, operation_name VARCHAR(50), start_date DATE, end_date DATE, country VARCHAR(50)); INSERT INTO peacekeeping_operations (id, operation_name, start_date, end_date, country) VALUES (1, 'Operation United shield', '1992-03-26', '1995-06-04', 'Somalia'); INSERT INTO peacekeeping_operations (id, operation_name, start_date, end_date, country) VALUES (2, 'Operation Joint Endeavour', '1995-12-14', '2004-12-31', 'Bosnia and Herzegovina');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT operation_name FROM peacekeeping_operations ORDER BY start_date ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 점심과 저녁 메뉴에서 채식 요리의 차이를 찾으세요?\n\nDDL statements:\nCREATE TABLE dishes (id INT, name VARCHAR(255), type VARCHAR(255), menu_id INT); INSERT INTO dishes (id, name, type, menu_id) VALUES (1, 'Burger', 'Non-vegetarian', 2), (2, 'Sandwich', 'Non-vegetarian', 2), (3, 'Pasta', 'Vegetarian', 2), (4, 'Steak', 'Non-vegetarian', 2), (5, 'Salad', 'Vegetarian', 3), (6, 'Pizza', 'Non-vegetarian', 3), (7, 'Tofu Stir Fry', 'Vegetarian', 3), (8, 'Grilled Chicken', 'Non-vegetarian', 3); CREATE TABLE menus (id INT, name VARCHAR(255)); INSERT INTO menus (id, name) VALUES (1, 'Breakfast'), (2, 'Lunch'), (3, 'Dinner');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name FROM dishes d JOIN menus m ON d.menu_id = m.id WHERE d.type = 'Vegetarian' AND m.name = 'Lunch' INTERSECT SELECT d.name FROM dishes d JOIN menus m ON d.menu_id = m.id WHERE d.type = 'Vegetarian' AND m.name = 'Dinner' EXCEPT SELECT d.name FROM dishes d JOIN menus m ON d.menu_id = m.id WHERE d.type = 'Vegetarian' AND m.name = 'Breakfast';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티의 공유 전동 킥보드의 평균 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE shared_scooters (scooter_id INT, trip_duration INT, start_speed INT, end_speed INT); INSERT INTO shared_scooters (scooter_id, trip_duration, start_speed, end_speed) VALUES (1, 600, 5, 15), (2, 750, 10, 20), (3, 450, 8, 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(end_speed - start_speed) as avg_speed FROM shared_scooters WHERE start_speed > 0 AND end_speed > 0;"
    },
    {
        "instruction": "입력 텍스트: Waymo와 Tesla가 출원한 자율 주행 특허의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Patents (Id INT, Company VARCHAR(255), Patent VARCHAR(255), Date DATE); INSERT INTO Patents (Id, Company, Patent, Date) VALUES (1, 'Waymo', 'Autonomous Vehicle Navigation', '2018-01-01'), (2, 'Tesla', 'Self-Driving AI System', '2019-01-01'), (3, 'Waymo', 'Automated Braking System', '2017-01-01'), (4, 'Tesla', 'Smart Summon Technology', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Patents WHERE Company IN ('Waymo', 'Tesla') AND Patent LIKE '%Autonomous%'"
    },
    {
        "instruction": "입력 텍스트: 유럽 국가들에서 윤리적 AI 프로젝트에 할당된 최소 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE EthicalAIBudget (Country VARCHAR(50), Budget DECIMAL(10,2)); INSERT INTO EthicalAIBudget (Country, Budget) VALUES ('Germany', 800000.00), ('France', 900000.00), ('United Kingdom', 1000000.00); CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(50)); INSERT INTO Countries (Country, Continent) VALUES ('Germany', 'Europe'), ('France', 'Europe'), ('United Kingdom', 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(EthicalAIBudget.Budget) AS MinBudget FROM EthicalAIBudget INNER JOIN Countries ON EthicalAIBudget.Country = Countries.Country WHERE Countries.Continent = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: STU Inc가 아프리카 지역에서 매년 수행하는 군사 프로젝트의 평균 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Defense_Project_Timelines (contractor VARCHAR(255), region VARCHAR(255), project VARCHAR(255), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(end_date, start_date))/365 FROM Defense_Project_Timelines WHERE contractor = 'STU Inc' AND region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 각 플랫폼별 최대 플레이어 수와 해당 게임은 무엇인가요?\n\nDDL statements:\nCREATE TABLE GamePlatforms (GameID int, Platform varchar(20), MaxPlayers int); INSERT INTO GamePlatforms (GameID, Platform, MaxPlayers) VALUES (3, 'PC', 250); INSERT INTO GamePlatforms (GameID, Platform, MaxPlayers) VALUES (4, 'Console', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Platform, MAX(MaxPlayers) as MaxPlayers, GameName FROM GamePlatforms gp JOIN Games g ON gp.GameID = g.GameID GROUP BY Platform;"
    },
    {
        "instruction": "입력 텍스트: 육류 메뉴 중 탄소 발자국이 높은 메뉴의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menus (menu_id INT, menu_name VARCHAR(50), menu_type VARCHAR(20), price DECIMAL(5,2), carbon_footprint DECIMAL(5,2)); INSERT INTO menus (menu_id, menu_name, menu_type, price, carbon_footprint) VALUES (1, 'Quinoa Salad', 'Vegetarian', 9.99, 0.3), (2, 'Margherita Pizza', 'Non-vegetarian', 12.99, 4.5), (3, 'Tofu Stir Fry', 'Vegetarian', 10.99, 0.5), (4, 'Steak', 'Non-vegetarian', 25.99, 12.5), (5, 'Grilled Chicken Sandwich', 'Non-vegetarian', 14.99, 2.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM menus WHERE menu_type = 'Non-vegetarian' AND carbon_footprint > 5;"
    },
    {
        "instruction": "입력 텍스트: 농구 경기에서 구매한 팬을 위한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE fan_purchases (purchase_id INT, fan_id INT, team VARCHAR(50), event_date DATE, amount DECIMAL(5, 2)); INSERT INTO fan_purchases (purchase_id, fan_id, team, event_date, amount) VALUES (1, 1, 'Basketball', '2022-03-01', 100.00), (2, 2, 'Basketball', '2022-03-15', 150.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fan_purchases (purchase_id, fan_id, team, event_date, amount) VALUES (3, 3, 'Basketball', '2022-04-01', 75.00);"
    },
    {
        "instruction": "입력 텍스트: 2022년에 농촌 보건 클리닉 A에서 치료된 상위 5가지 질병은 무엇인가요?\n\nDDL statements:\nCREATE TABLE clinics (clinic_id INT, clinic_name VARCHAR(50)); CREATE TABLE treatments (treatment_id INT, patient_id INT, treatment_date DATE, medical_condition VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT medical_condition, COUNT(*) as num_treatments FROM treatments INNER JOIN clinics ON treatments.clinic_id = clinics.clinic_id WHERE clinics.clinic_name = 'rural health clinic A' AND YEAR(treatment_date) = 2022 GROUP BY medical_condition ORDER BY num_treatments DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 유기농 면으로 만든 의류의 국가별 평균 생산 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE producers (id INT, name VARCHAR(50), country VARCHAR(50), production_cost DECIMAL(5,2)); INSERT INTO producers (id, name, country, production_cost) VALUES (1, 'GreenTees', 'India', 15.50), (2, 'EcoWear', 'Bangladesh', 12.30), (3, 'SustainaClothes', 'China', 18.00); CREATE TABLE materials (id INT, name VARCHAR(50), type VARCHAR(50), country VARCHAR(50)); INSERT INTO materials (id, name, type, country) VALUES (1, 'Organic Cotton', 'Cotton', 'India'), (2, 'Bamboo Fabric', 'Bamboo', 'China'), (3, 'Recycled Polyester', 'Polyester', 'Bangladesh');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.country, AVG(p.production_cost) as avg_cost FROM producers p JOIN materials m ON p.country = m.country WHERE m.type = 'Organic Cotton' GROUP BY m.country;"
    },
    {
        "instruction": "입력 텍스트: imagery_archive' 테이블에서 'central_field'와 'eastern_field'에 해당하는 모든 위성 이미지 파일명을 나열하세요.\n\nDDL statements:\nCREATE TABLE imagery_archive (id INT, field_name VARCHAR(20), filename VARCHAR(30)); INSERT INTO imagery_archive (id, field_name, filename) VALUES (7, 'central_field', 'img201.jpg'), (8, 'north_field', 'img202.jpg'), (9, 'eastern_field', 'img203.jpg'), (10, 'western_field', 'img204.jpg'), (11, 'central_field', 'img205.jpg'), (12, 'southern_field', 'img206.jpg');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT filename FROM imagery_archive WHERE field_name IN ('central_field', 'eastern_field');"
    },
    {
        "instruction": "입력 텍스트: \"마인크래프트\" 게임을 주당 20시간 이상 플레이한 플레이어들 중 최소 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, name VARCHAR(50), game_id INT, age INT, hours_played_per_week INT); INSERT INTO players (id, name, game_id, age, hours_played_per_week) VALUES (1, 'Player1', 1, 25, 25), (2, 'Player2', 1, 30, 30), (3, 'Player3', 1, 22, 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(age) FROM players WHERE game_id = 1 AND hours_played_per_week > 20;"
    },
    {
        "instruction": "입력 텍스트: 참석자가 50,000명이 넘는 축제의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE festivals (festival_id INT, attendees INT); INSERT INTO festivals (festival_id, attendees) VALUES (1, 45000), (2, 60000), (3, 35000), (4, 70000), (5, 52000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) AS num_festivals FROM festivals WHERE attendees > 50000;"
    },
    {
        "instruction": "입력 텍스트: 2022년 6월 인도 산업 부문의 하루 최대 물 사용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE daily_industrial_water_usage (region VARCHAR(20), water_consumption FLOAT, usage_date DATE); INSERT INTO daily_industrial_water_usage (region, water_consumption, usage_date) VALUES ('India', 5000000, '2022-06-01'), ('India', 6000000, '2022-06-02'), ('India', 4000000, '2022-06-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT water_consumption FROM daily_industrial_water_usage WHERE region = 'India' AND usage_date = (SELECT MAX(usage_date) FROM daily_industrial_water_usage WHERE EXTRACT(MONTH FROM usage_date) = 6 AND EXTRACT(YEAR FROM usage_date) = 2022);"
    },
    {
        "instruction": "입력 텍스트: 미국이 동계 올림픽에서 종목별로 획득한 금메달은 총 몇 개인가요?\n\nDDL statements:\nCREATE TABLE winter_olympics (id INT, nation VARCHAR(100), sport VARCHAR(50), medal VARCHAR(10), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sport, COUNT(*) as gold_medals FROM winter_olympics WHERE nation = 'United States' AND medal = 'gold' GROUP BY sport;"
    },
    {
        "instruction": "입력 텍스트: tech_for_social_good 테이블에서 남은 예산이 가장 많은 상위 세 프로젝트의 project_name과 budget_remaining을 남은 예산 기준 내림차순으로 확인하세요.\n\nDDL statements:\nCREATE TABLE tech_for_social_good (project_name VARCHAR(255), budget_remaining FLOAT, start_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, budget_remaining FROM tech_for_social_good ORDER BY budget_remaining DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능성에 중점을 둔 레스토랑의 비건 요리 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (id INT, name TEXT, focus TEXT); INSERT INTO Restaurants (id, name, focus) VALUES (1, 'Bean Scene', 'Sustainability'), (2, 'Cafe Delirium', 'Coffee'), (3, 'Eco Brew', 'Sustainability'); CREATE TABLE Menu (id INT, name TEXT, type TEXT, vegan BOOLEAN, rating FLOAT, restaurant_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) as average_rating FROM Menu WHERE Menu.vegan = 1 AND Menu.restaurant_id IN (SELECT id FROM Restaurants WHERE Restaurants.focus = 'Sustainability');"
    },
    {
        "instruction": "입력 텍스트: 클라이언트 테이블에 'Jim Brown'라는 이름과 '456 Old Street'라는 주소를 가진 새로운 고객을 추가하세요.\n\nDDL statements:\nCREATE TABLE Clients (ClientID INT, FirstName VARCHAR(20), LastName VARCHAR(20), Address VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH cte AS (VALUES (1, 'Jim', 'Brown', '456 Old Street')) INSERT INTO Clients SELECT * FROM cte;"
    },
    {
        "instruction": "입력 텍스트: KHL' 리그에서 'Defense' 포지션을 맡고 있는 남성 하키 선수들의 평균 체중은 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (player_id INT, name VARCHAR(50), position VARCHAR(50), height FLOAT, weight INT, team_id INT, league VARCHAR(50)); INSERT INTO players (player_id, name, position, height, weight, team_id, league) VALUES (4, 'David', 'Defense', 1.93, 95, 401, 'KHL');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(weight) FROM players WHERE position = 'Defense' AND league = 'KHL' AND gender = 'Male';"
    },
    {
        "instruction": "입력 텍스트: 카스피해에 있는 모든 플랫폼의 평균 수심을 찾아주세요.\n\nDDL statements:\nCREATE TABLE platforms (platform_id INT, platform_name TEXT, region TEXT, water_depth FLOAT); INSERT INTO platforms (platform_id, platform_name, region, water_depth) VALUES (1, 'Platform D', 'Caspian Sea', 100), (2, 'Platform E', 'Caspian Sea', 200), (3, 'Platform F', 'Caspian Sea', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT platform_name, AVG(water_depth) AS avg_water_depth FROM platforms WHERE region = 'Caspian Sea' GROUP BY platform_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 뉴욕 주의 모든 건설 노동 통계를 나열합니다.\n\nDDL statements:\nCREATE TABLE ConstructionLaborStatistics (id INT, worker TEXT, state TEXT, year INT, wage FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM ConstructionLaborStatistics WHERE state = 'New York' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 지속 가능한 공급업체의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE suppliers (id INT PRIMARY KEY, company VARCHAR(255), country VARCHAR(255), ethical_practices BOOLEAN, sustainable BOOLEAN); INSERT INTO suppliers (id, company, country, ethical_practices, sustainable) VALUES (1, 'Supplier A', 'Bangladesh', true, true); INSERT INTO suppliers (id, company, country, ethical_practices, sustainable) VALUES (2, 'Supplier B', 'Cambodia', false, false); INSERT INTO suppliers (id, company, country, ethical_practices, sustainable) VALUES (3, 'Supplier C', 'Kenya', true, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM suppliers WHERE sustainable = true AND country LIKE 'Africa%';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 학술지에 출판된 논문은 몇 편인가요?\n\nDDL statements:\nCREATE TABLE Publications (PublicationID INT, Title VARCHAR(50), Journal VARCHAR(50), PublishDate DATE); INSERT INTO Publications VALUES (1, 'Paper 1', 'Journal A', '2022-01-01'); INSERT INTO Publications VALUES (2, 'Paper 2', 'Journal A', '2021-12-01'); INSERT INTO Publications VALUES (3, 'Paper 3', 'Journal B', '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Journal, COUNT(*) FROM Publications WHERE PublishDate >= DATEADD(year, -1, GETDATE()) GROUP BY Journal;"
    },
    {
        "instruction": "입력 텍스트: 독일에서 가장 방문객이 많은 상위 2개의 문화 유산 명소를 찾으세요.\n\nDDL statements:\nCREATE TABLE cultural_heritage_sites (site_id INT, name TEXT, country TEXT, visitors INT); INSERT INTO cultural_heritage_sites (site_id, name, country, visitors) VALUES (1, 'Neuschwanstein Castle', 'Germany', 1500000), (2, 'Brandenburg Gate', 'Germany', 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, visitors FROM cultural_heritage_sites WHERE country = 'Germany' ORDER BY visitors DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 도시 지역에 있는 부동산의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE sustainable_urban (area_id INT, property_id INT); INSERT INTO sustainable_urban (area_id, property_id) VALUES (1, 101), (1, 102), (1, 103), (2, 201), (2, 202), (3, 301);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT property_id) FROM sustainable_urban;"
    },
    {
        "instruction": "입력 텍스트: 유전 연구 프로젝트는 총 몇 개입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT, project_name VARCHAR(50), sensors VARCHAR(50)); INSERT INTO projects (id, project_name, sensors) VALUES (1, 'Genome Mapping', 'Sensor A'); INSERT INTO projects (id, project_name, sensors) VALUES (2, 'Protein Folding', NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM projects;"
    },
    {
        "instruction": "입력 텍스트: veteran_employment' 테이블에 'country'라는 새로운 열을 추가하고, veteran_id 1, 3, 5번의 기록을 각각 'USA', 'Canada', 'Mexico'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE veteran_employment (veteran_id INT, sector VARCHAR(255), employment_date DATE); INSERT INTO veteran_employment (veteran_id, sector, employment_date) VALUES (1, 'IT', '2020-01-01'), (2, 'Healthcare', '2019-06-15'), (3, 'Finance', '2018-09-30'), (4, 'Manufacturing', '2021-04-01'), (5, 'Education', '2020-12-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: ALTER TABLE veteran_employment ADD country VARCHAR(255); UPDATE veteran_employment SET country = 'USA' WHERE veteran_id = 1; UPDATE veteran_employment SET country = 'Canada' WHERE veteran_id = 3; UPDATE veteran_employment SET country = 'Mexico' WHERE veteran_id = 5;"
    },
    {
        "instruction": "입력 텍스트: 인구가 500만 명을 초과하는 도시에서 교통 및 인프라 예산의 평균 할당액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE City (Id INT, Name VARCHAR(50), Population INT, TransportationBudget DECIMAL(10,2), InfrastructureBudget DECIMAL(10,2)); INSERT INTO City (Id, Name, Population, TransportationBudget, InfrastructureBudget) VALUES (1, 'Mumbai', 20000000, 8000000, 7000000), (2, 'Istanbul', 15000000, 6000000, 5000000), (3, 'Rio de Janeiro', 7000000, 4000000, 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CityId, AVG(TransportationBudget) + AVG(InfrastructureBudget) AS AvgBudget FROM City WHERE Population > 5000000;"
    },
    {
        "instruction": "입력 텍스트: 2021년 1분기에 아프리카 공장에서 생산된 공정 무역 제품으로부터 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, name VARCHAR(255), location VARCHAR(255), fair_trade_certified BOOLEAN);CREATE TABLE products (product_id INT, name VARCHAR(255), price DECIMAL(5,2));CREATE TABLE sales (sale_id INT, product_id INT, quantity INT, sale_date DATE);INSERT INTO factories (factory_id, name, location, fair_trade_certified) VALUES (1, 'Eco Friendly Factories', 'USA', true), (2, 'African Textiles', 'Africa', true), (3, 'Asian Producers', 'Asia', false);INSERT INTO products (product_id, name, price) VALUES (1, 'Fair Trade T-Shirt', 20.00), (2, 'Regular T-Shirt', 15.00);INSERT INTO sales (sale_id, product_id, quantity, sale_date) VALUES (1, 1, 50, '2021-01-01'), (2, 2, 30, '2021-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(products.price * sales.quantity) as total_revenue FROM factories JOIN products ON true JOIN sales ON true WHERE factories.fair_trade_certified = true AND factories.location = 'Africa' AND QUARTER(sales.sale_date) = 1 AND YEAR(sales.sale_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 클라이언트 아이디가 1인 고객이 투자한 'Global Fund'에 대한 금액을 50000.00으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name TEXT, region TEXT); INSERT INTO clients (client_id, name, region) VALUES (1, 'John Doe', 'US'), (2, 'Jane Smith', 'APAC'), (3, 'Mike Johnson', 'EU'), (4, 'Sophia Chen', 'APAC'); CREATE TABLE investments (client_id INT, fund_id INT, amount DECIMAL(10, 2)); INSERT INTO investments (client_id, fund_id, amount) VALUES (1, 1, 15000.00), (1, 2, 20000.00), (2, 1, 30000.00), (5, 1, 40000.00); CREATE TABLE funds (fund_id INT, fund_name TEXT, category TEXT); INSERT INTO funds (fund_id, fund_name, category) VALUES (1, 'Global Fund', 'Fixed Income'), (2, 'Regional Fund', 'Equity');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE investments SET amount = 50000.00 WHERE client_id = 1 AND fund_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 라틴 아메리카와 카리브해 지역의 수산 농장에서 가장 낮은 수온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE aquatic_farms (id INT, name TEXT, country TEXT, water_temp FLOAT); INSERT INTO aquatic_farms (id, name, country, water_temp) VALUES (1, 'Farm A', 'Mexico', 25.3), (2, 'Farm B', 'Colombia', 26.8), (3, 'Farm C', 'Brazil', 24.1), (4, 'Farm D', 'Cuba', 28.9), (5, 'Farm E', 'Jamaica', 29.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(water_temp) FROM aquatic_farms WHERE country LIKE 'Latin%' OR country LIKE 'Caribbean%';"
    },
    {
        "instruction": "입력 텍스트: 각 우주 임무 카테고리(우주선 제조, 우주비행사 훈련, 천체물리학 연구)별 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE expenses (id INT, mission_category VARCHAR(50), amount INT); INSERT INTO expenses VALUES (1, 'Spacecraft Manufacturing', 5000000); INSERT INTO expenses VALUES (2, 'Astronaut Training', 1000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_category, SUM(amount) as total_expenses FROM expenses GROUP BY mission_category;"
    },
    {
        "instruction": "입력 텍스트: 각 도시의 병원 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE hospitals (id INT, name TEXT, city TEXT); INSERT INTO hospitals (id, name, city) VALUES (1, 'Hospital A', 'New York'); INSERT INTO hospitals (id, name, city) VALUES (2, 'Hospital B', 'Los Angeles'); INSERT INTO hospitals (id, name, city) VALUES (3, 'Hospital C', 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) FROM hospitals GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 각 지구별 전문 개발 최대 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE development_hours (teacher_id INT, district_id INT, hours_developed INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_id, MAX(hours_developed) as max_hours FROM development_hours GROUP BY district_id;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 캘리포니아 주의 보건부문에 대한 평균 예산 배정액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE state_budget (state VARCHAR(20), sector VARCHAR(20), allocation INT); INSERT INTO state_budget (state, sector, allocation) VALUES ('New York', 'Education', 12000), ('New York', 'Healthcare', 15000), ('California', 'Education', 10000), ('California', 'Healthcare', 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(allocation) FROM state_budget WHERE state IN ('New York', 'California') AND sector = 'Healthcare';"
    },
    {
        "instruction": "입력 텍스트: 각 노조별로 직장 안전 사고의 평균 심각도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE workplace_safety (safety_id INT, union_name VARCHAR(50), incident_date DATE, incident_type VARCHAR(50), severity VARCHAR(50));CREATE VIEW union_safety_incidents AS SELECT union_name, severity FROM workplace_safety;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT union_name, AVG(RANK() OVER (PARTITION BY union_name ORDER BY CASE severity WHEN 'High' THEN 1 WHEN 'Medium' THEN 2 WHEN 'Low' THEN 3 END)) as avg_severity FROM union_safety_incidents GROUP BY union_name;"
    },
    {
        "instruction": "입력 텍스트: 각 주별로 LGBTQ+로 식별하는 커뮤니티 보건 근로자의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE CommunityHealthWorkers (WorkerID INT, Age INT, Gender VARCHAR(25), State VARCHAR(25), Sexuality VARCHAR(25)); INSERT INTO CommunityHealthWorkers (WorkerID, Age, Gender, State, Sexuality) VALUES (1, 45, 'Male', 'California', 'Heterosexual'), (2, 35, 'Female', 'New York', 'Lesbian'), (3, 50, 'Non-binary', 'Texas', 'Bisexual'), (4, 30, 'Transgender', 'Florida', 'Queer');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, Sexuality, COUNT(*) as WorkerCount FROM CommunityHealthWorkers WHERE Sexuality LIKE '%LGBTQ%' GROUP BY State, Sexuality;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에서 잔인성 없는 제품의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT PRIMARY KEY, cruelty_free BOOLEAN); INSERT INTO products (product_id, cruelty_free) VALUES (1, true), (2, true), (3, false), (4, true), (5, false), (6, false), (7, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE cruelty_free = true)) * 100.0 / COUNT(*) FROM products;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 윤리적 패션 브랜드들이 사용한 지속 가능한 재료의 총 수량을 표시합니다.\n\nDDL statements:\nCREATE TABLE Dates (date_id INT, date DATE); INSERT INTO Dates (date_id, date) VALUES (1, '2022-01-01'), (2, '2022-04-01'), (3, '2022-07-01'), (4, '2022-10-01'); CREATE TABLE SustainableBrands (brand_id INT, material_id INT, quantity INT, date_id INT); INSERT INTO SustainableBrands (brand_id, material_id, quantity, date_id) VALUES (1, 1, 500, 4), (1, 2, 300, 4), (2, 3, 700, 4), (3, 1, 400, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM SustainableBrands INNER JOIN Dates ON SustainableBrands.date_id = Dates.date_id WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND EXISTS (SELECT * FROM Brands WHERE Brands.brand_id = SustainableBrands.brand_id AND location = 'Europe');"
    },
    {
        "instruction": "입력 텍스트: Jane Smith'가 소유한 농지에는 몇 개의 센서가 있나요?\n\nDDL statements:\nCREATE TABLE Fields (id INT PRIMARY KEY, name VARCHAR(255), acres FLOAT, location VARCHAR(255)); INSERT INTO Fields (id, name, acres, location) VALUES (1, 'FieldA', 5.6, 'US-MN'), (2, 'FieldB', 3.2, 'US-CA'); CREATE TABLE Farmers (id INT PRIMARY KEY, name VARCHAR(255), Field_id INT, FOREIGN KEY (Field_id) REFERENCES Fields(id)); INSERT INTO Farmers (id, name, Field_id) VALUES (1, 'Jane Smith', 1), (2, 'Jim Brown', 2); CREATE TABLE IoT_Sensors (id INT PRIMARY KEY, Field_id INT, temperature FLOAT, humidity FLOAT); INSERT INTO IoT_Sensors (id, Field_id, temperature, humidity) VALUES (1, 1, 20.5, 60.3), (2, 2, 25.3, 70.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(IoT_Sensors.id) FROM IoT_Sensors INNER JOIN Fields ON IoT_Sensors.Field_id = Fields.id INNER JOIN Farmers ON Fields.id = Farmers.Field_id WHERE Farmers.name = 'Jane Smith';"
    },
    {
        "instruction": "입력 텍스트: 2025년 이후로 일정이 연장되는 'Global Defense Inc'의 모든 방위 사업 프로젝트를 나열하세요.\n\nDDL statements:\nCREATE TABLE DefenseProjects (contractor VARCHAR(255), project_name VARCHAR(255), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM DefenseProjects WHERE contractor = 'Global Defense Inc' AND end_date > '2025-12-31';"
    },
    {
        "instruction": "입력 텍스트: 평균 속도가 가장 빠른 우주선의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SpacecraftSpeed (Id INT, Spacecraft VARCHAR(50), AverageSpeed FLOAT); INSERT INTO SpacecraftSpeed (Id, Spacecraft, AverageSpeed) VALUES (1, 'Voyager 1', 17000), (2, 'Voyager 2', 16000), (3, 'New Horizons', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Spacecraft FROM (SELECT Spacecraft, ROW_NUMBER() OVER (ORDER BY AverageSpeed DESC) AS Rank FROM SpacecraftSpeed) AS Subquery WHERE Rank = 1"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 가장 취약한 상위 10개 시스템의 평균 위험 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE systems (system_id INT, risk_score INT, last_updated DATETIME); INSERT INTO systems (system_id, risk_score, last_updated) VALUES (1, 8, '2022-01-01'), (2, 5, '2022-01-05'), (3, 10, '2022-01-03'), (4, 6, '2022-01-04'), (5, 15, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(risk_score) FROM (SELECT risk_score, ROW_NUMBER() OVER (ORDER BY risk_score DESC) rn FROM systems WHERE last_updated >= DATEADD(day, -30, GETDATE())) t WHERE rn <= 10;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 대륙의 모든 교통 인프라 프로젝트에 대한 총 투자액과 평균 위험 점수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE infrastructure_projects (project_id INT, project_name TEXT, sector TEXT, region TEXT, risk_score INT, total_investment FLOAT); INSERT INTO infrastructure_projects (project_id, project_name, sector, region, risk_score, total_investment) VALUES (1, 'Project A', 'Transportation', 'Africa', 12, 1000000), (2, 'Project B', 'Transportation', 'Asia Pacific', 10, 1200000), (3, 'Project C', 'Transportation', 'Africa', 15, 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(total_investment) as total_investment, AVG(risk_score) as avg_risk_score FROM infrastructure_projects WHERE sector = 'Transportation' AND region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 참가자 수가 가장 많은 상위 5개의 직업 개발 프로그램을 확인하고, 프로그램 이름, 총 참가자 수, 참가자당 평균 교육 시간을 표시하세요.\n\nDDL statements:\nCREATE TABLE workforce_development_programs (id INT PRIMARY KEY, program_name VARCHAR(255), total_participants INT, avg_training_hours_per_participant DECIMAL(5,2)); INSERT INTO workforce_development_programs (id, program_name, total_participants, avg_training_hours_per_participant) VALUES (1, 'Program A', 100, 20), (2, 'Program B', 80, 25), (3, 'Program C', 120, 18), (4, 'Program D', 90, 30), (5, 'Program E', 110, 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name, total_participants, avg_training_hours_per_participant FROM (SELECT program_name, total_participants, avg_training_hours_per_participant, ROW_NUMBER() OVER (ORDER BY total_participants DESC) as rank FROM workforce_development_programs) as subquery WHERE rank <= 5;"
    },
    {
        "instruction": "입력 텍스트: 각 주별 포괄적 주택 정책의 평균 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE inclusive_housing (id INT, state VARCHAR, policy_count INT); INSERT INTO inclusive_housing (id, state, policy_count) VALUES (1, 'NY', 10), (2, 'CA', 8), (3, 'TX', 6), (4, 'FL', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(policy_count) FROM (SELECT policy_count, state FROM inclusive_housing GROUP BY state) as state_policies;"
    },
    {
        "instruction": "입력 텍스트: Florida'에는 스마트 시티 프로젝트가 몇 개 있나요?\n\nDDL statements:\nCREATE TABLE smart_city_projects (id INT, state VARCHAR(20), project_count INT); INSERT INTO smart_city_projects (id, state, project_count) VALUES (1, 'Florida', 4), (2, 'Texas', 3), (3, 'California', 5), (4, 'New York', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_count FROM smart_city_projects WHERE state = 'Florida';"
    },
    {
        "instruction": "입력 텍스트: clinic_h'에서 '정신역동 치료'와 '인지 행동 치료'를 받은 환자의 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE treatment_type (patient_id INT, treatment_name VARCHAR(50), treatment_center VARCHAR(50)); INSERT INTO treatment_type (patient_id, treatment_name, treatment_center) VALUES (7, 'Psychodynamic Therapy', 'clinic_h'), (8, 'Cognitive Behavioral Therapy', 'clinic_h');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM treatment_type WHERE (treatment_name = 'Psychodynamic Therapy' OR treatment_name = 'Cognitive Behavioral Therapy') AND treatment_center = 'clinic_h';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 가장 많이 읽힌 상위 3개의 기사를 찾으세요.\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(50), topic VARCHAR(50), word_count INT, views INT, publish_date DATE); INSERT INTO articles (id, title, topic, word_count, views, publish_date) VALUES (1, 'Article 1', 'topic1', 1500, 500, '2022-01-01'), (2, 'Article 2', 'topic2', 1000, 1000, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title, views FROM articles WHERE publish_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY title ORDER BY views DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: vessel_performance' 테이블에 있는 선박들의 평균 속도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessel_performance (id INT, vessel_name VARCHAR(50), average_speed DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(average_speed) FROM vessel_performance;"
    },
    {
        "instruction": "입력 텍스트: 각 지역의 전통 예술과 음악 이벤트의 총 개수를 보여주세요.\n\nDDL statements:\nCREATE TABLE regions (id INT, name VARCHAR); INSERT INTO regions (id, name) VALUES (1, 'Region A'), (2, 'Region B'); CREATE TABLE traditional_arts (id INT, region_id INT, art_type VARCHAR); INSERT INTO traditional_arts (id, region_id) VALUES (1, 1), (2, 2); CREATE TABLE music_events (id INT, region_id INT, event_type VARCHAR); INSERT INTO music_events (id, region_id) VALUES (1, 1), (2, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT regions.name, COUNT(traditional_arts.id) AS total_arts, COUNT(music_events.id) AS total_events FROM regions INNER JOIN traditional_arts ON regions.id = traditional_arts.region_id INNER JOIN music_events ON regions.id = music_events.region_id GROUP BY regions.id;"
    },
    {
        "instruction": "입력 텍스트: 구겐하임 미술관의 아트 컬렉션에서 작가당 평균 시각 예술 작품 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE art_collection (museum VARCHAR(255), artist VARCHAR(255), art_type VARCHAR(255), year INT, value DECIMAL(10,2)); INSERT INTO art_collection (museum, artist, art_type, year, value) VALUES ('Guggenheim', 'Pablo Picasso', 'Painting', 1925, 100000.00), ('Guggenheim', 'Pablo Picasso', 'Sculpture', 1935, 200000.00), ('Guggenheim', 'Jackson Pollock', 'Painting', 1945, 150000.00), ('Guggenheim', 'Jackson Pollock', 'Painting', 1950, 125000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(artwork_count) FROM (SELECT COUNT(art_type) AS artwork_count FROM art_collection WHERE museum = 'Guggenheim' GROUP BY artist) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 캘리포니아에서 발급된 모든 재배 라이선스를 시간 순서대로 나열하세요.\n\nDDL statements:\nCREATE TABLE Licenses (License_ID INT, License_Type TEXT, License_Number TEXT, Issue_Date DATE); INSERT INTO Licenses (License_ID, License_Type, License_Number, Issue_Date) VALUES (1, 'Cultivation', 'CA-001-CUL', '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT License_Number, Issue_Date FROM Licenses WHERE License_Type = 'Cultivation' AND YEAR(Issue_Date) = 2021 ORDER BY Issue_Date;"
    },
    {
        "instruction": "입력 텍스트: 지난 3년 이내에 완료된 예산이 50만 달러에서 100만 달러 사이인 농촌 인프라 프로젝트의 프로젝트 이름, 국가, 예산을 보여주세요.\n\nDDL statements:\nCREATE TABLE rural_infrastructure (project_name VARCHAR(50), country VARCHAR(50), project_start_date DATE, project_end_date DATE, budget DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, country, budget FROM rural_infrastructure WHERE project_end_date >= DATEADD(year, -3, GETDATE()) AND budget BETWEEN 500000 AND 1000000;"
    },
    {
        "instruction": "입력 텍스트: 각 도시에서 주택 가용성 지수가 가장 높은 부동산 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE city_properties (city VARCHAR(255), property_id INT, housing_affordability_index INT); INSERT INTO city_properties (city, property_id, housing_affordability_index) VALUES ('CityA', 1, 85), ('CityA', 2, 80), ('CityA', 3, 90), ('CityB', 1, 70), ('CityB', 2, 75), ('CityB', 3, 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, property_id, housing_affordability_index FROM (SELECT city, property_id, housing_affordability_index, ROW_NUMBER() OVER (PARTITION BY city ORDER BY housing_affordability_index DESC) as rn FROM city_properties) t WHERE rn = 1;"
    },
    {
        "instruction": "입력 텍스트: 각 분야에는 몇 개의 회사가 있습니까?\n\nDDL statements:\nCREATE TABLE companies_extended (company_id INT, sector VARCHAR(20)); INSERT INTO companies_extended (company_id, sector) VALUES (1, 'technology'), (2, 'finance'), (3, 'technology'), (4, 'healthcare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, COUNT(*) FROM companies_extended GROUP BY sector;"
    },
    {
        "instruction": "입력 텍스트: 회사에는 몇 명의 직원이 있습니까?\n\nDDL statements:\nCREATE TABLE Employees (id INT, name VARCHAR(50)); INSERT INTO Employees (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Employees;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 시행된 재생 에너지 프로젝트의 총 예산은 얼마이며, 예산이 4000000 미만인 프로젝트는 제외하고 계산하시오?\n\nDDL statements:\nCREATE TABLE Renewable_Energy_Projects (id INT, project_name VARCHAR(50), budget FLOAT, country VARCHAR(50)); INSERT INTO Renewable_Energy_Projects (id, project_name, budget, country) VALUES (1, 'Solar Farm', 5000000, 'USA'), (2, 'Wind Farm', 7000000, 'Canada'), (3, 'Hydroelectric Plant', 6000000, 'Mexico'), (4, 'Geothermal Plant', 4000000, 'USA'), (5, 'Tidal Energy', 3000000, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(budget) FROM Renewable_Energy_Projects WHERE budget > 4000000 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: defense_personnel 테이블과 intelligence_agents 테이블에 있는 군인과 정보 요원의 총 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_personnel (id INT, name VARCHAR(50), position VARCHAR(50), military_branch VARCHAR(50)); CREATE TABLE intelligence_agents (id INT, name VARCHAR(50), position VARCHAR(50), agency VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM defense_personnel UNION SELECT COUNT(*) FROM intelligence_agents;"
    },
    {
        "instruction": "입력 텍스트: 어떤 요리들이 평균 평점보다 높은 가격을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE dishes (id INT, name TEXT, type TEXT, cost FLOAT); INSERT INTO dishes (id, name, type, cost) VALUES (1, 'Quinoa Salad', 'vegetarian', 7.50), (2, 'Chickpea Curry', 'vegetarian', 9.25), (3, 'Beef Stew', 'non-vegetarian', 12.00); CREATE TABLE orders (id INT, dish_id INT, customer_id INT, rating INT); INSERT INTO orders (id, dish_id, customer_id, rating) VALUES (1, 1, 101, 8), (2, 2, 102, 9), (3, 3, 103, 7), (4, 1, 104, 10), (5, 2, 105, 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, d.cost, o.rating FROM dishes d INNER JOIN orders o ON d.id = o.dish_id WHERE d.cost > o.rating;"
    },
    {
        "instruction": "입력 텍스트: ID 1인 선박에 대한 새로운 검사 기록을 2023년 3월 15일 10시 30분에 추가하세요.\n\nDDL statements:\nCREATE TABLE Vessel (vessel_id INT, name VARCHAR(255), type VARCHAR(255), max_speed DECIMAL(5,2)); CREATE TABLE Inspection (inspection_id INT, vessel_id INT, inspection_time TIMESTAMP); INSERT INTO Vessel (vessel_id, name, type, max_speed) VALUES (1, 'Test Vessel 1', 'Cargo', 15.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Inspection (inspection_id, vessel_id, inspection_time) VALUES (4, 1, '2023-03-15 10:30:00');"
    },
    {
        "instruction": "입력 텍스트: 건강 형평성 지표에서 정신 건강 평등이 없는 지역을 확인하세요.\n\nDDL statements:\nCREATE TABLE health_equity_metrics (id INT, region VARCHAR(50), mental_health_parity BOOLEAN, cultural_competency BOOLEAN); INSERT INTO health_equity_metrics (id, region, mental_health_parity, cultural_competency) VALUES (1, 'North', true, true), (2, 'South', false, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region FROM health_equity_metrics WHERE mental_health_parity IS NULL OR mental_health_parity = false;"
    },
    {
        "instruction": "입력 텍스트: 북극해와 대서양에서 목격된 고래는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE whale_sightings (sighting_date DATE, ocean TEXT); INSERT INTO whale_sightings (sighting_date, ocean) VALUES ('2021-01-01', 'Arctic Ocean'), ('2021-02-01', 'Antarctic Ocean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM whale_sightings WHERE ocean IN ('Arctic Ocean', 'Atlantic Ocean');"
    },
    {
        "instruction": "입력 텍스트: \"지속 가능한 관광 관행\" 테이블을 업데이트하여 \"호주\"의 물 보존과 관련된 새로운 관행을 반영하세요.\n\nDDL statements:\nCREATE TABLE sustainable_tourism_practices (id INT PRIMARY KEY, country TEXT, practice TEXT, implemented_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE sustainable_tourism_practices SET practice = 'New water conservation program for tourism industry.' WHERE country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 사회적 책임 투자에 투자하지 않은 모든 고객의 기록을 삭제합니다.\n\nDDL statements:\nCREATE TABLE clients (id INT, name VARCHAR(255)); INSERT INTO clients (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); CREATE TABLE investments (id INT, client_id INT, fund_type VARCHAR(255), amount DECIMAL(10, 2)); INSERT INTO investments (id, client_id, fund_type, amount) VALUES (1, 1, 'Socially Responsible', 5000), (2, 1, 'Standard', 3000), (3, 3, 'Standard', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM clients WHERE id NOT IN (SELECT client_id FROM investments WHERE fund_type = 'Socially Responsible');"
    },
    {
        "instruction": "입력 텍스트: 인도에서 태양광 발전 용량이 가장 높은 상위 3개 도시를 용량 기준 내림차순으로 순위를 매겨 확인하세요.\n\nDDL statements:\nCREATE TABLE India_Solar_Power (city VARCHAR(255), capacity INT); INSERT INTO India_Solar_Power (city, capacity) VALUES ('Bengaluru', 5000), ('Delhi', 7000), ('Mumbai', 6000), ('Hyderabad', 4000), ('Chennai', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, capacity FROM (SELECT city, capacity, RANK() OVER (ORDER BY capacity DESC) AS rank FROM India_Solar_Power) AS ranked_cities WHERE rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 전 세계에서 판매된 추상 표현주의 그림의 평균 매출액은?\n\nDDL statements:\nCREATE TABLE ArtSales (id INT, painting_name VARCHAR(50), price FLOAT, sale_date DATE, painting_style VARCHAR(20), sale_location VARCHAR(30)); INSERT INTO ArtSales (id, painting_name, price, sale_date, painting_style, sale_location) VALUES (1, 'Painting1', 11000, '2015-06-01', 'Abstract Expressionism', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM ArtSales WHERE painting_style = 'Abstract Expressionism' AND sale_date >= '2015-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2015년 이전에 농업 분야에서 원주민에 의해 설립된 스타트업은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE venture (id INT, name VARCHAR(255), sector VARCHAR(255), founding_date DATE, founder_indigenous BOOLEAN); INSERT INTO venture (id, name, sector, founding_date, founder_indigenous) VALUES (1, 'Echo Inc', 'Technology', '2010-01-01', FALSE); INSERT INTO venture (id, name, sector, founding_date, founder_indigenous) VALUES (2, 'Foxtrot LLC', 'Healthcare', '2012-05-15', FALSE); INSERT INTO venture (id, name, sector, founding_date, founder_indigenous) VALUES (3, 'Golf Alpha Bravo', 'Technology', '2015-09-09', FALSE); INSERT INTO venture (id, name, sector, founding_date, founder_indigenous) VALUES (4, 'Hotel India', 'Retail', '2018-01-01', FALSE); INSERT INTO venture (id, name, sector, founding_date, founder_indigenous) VALUES (5, 'Kilo Lima', 'Agriculture', '2020-06-19', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM venture WHERE sector = 'Agriculture' AND founding_date < '2015-01-01' AND founder_indigenous = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 평균 급여보다 많은 급여를 받는 모든 직원의 이름과 급여를 가져오세요.\n\nDDL statements:\nCREATE TABLE employees (id INT, name VARCHAR(50), salary DECIMAL(10, 2)); INSERT INTO employees (id, name, salary) VALUES (1, 'John Doe', 60000.00), (2, 'Jane Smith', 45000.00), (3, 'Alice Johnson', 52000.00), (4, 'Bob Brown', 58000.00), (5, 'Charlie Green', 48000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 모든 고유 창고 위치를 나열하세요.\n\nDDL statements:\nCREATE TABLE Warehouse (id INT, location VARCHAR(255), country VARCHAR(255)); INSERT INTO Warehouse (id, location, country) VALUES (1, 'Seattle', 'USA'), (2, 'Chicago', 'USA'), (3, 'Beijing', 'China');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT country, location FROM Warehouse;"
    },
    {
        "instruction": "입력 텍스트: 아시아 사용자들이 참여한 가상 투어의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (user_id INT, country TEXT); CREATE TABLE virtual_tours (tour_id INT, title TEXT, users_engaged INT); INSERT INTO users (user_id, country) VALUES (1, 'China'), (2, 'Japan'), (3, 'India'); INSERT INTO virtual_tours (tour_id, title, users_engaged) VALUES (1, 'Tour of Paris', 50), (2, 'Tour of Tokyo', 75), (3, 'Tour of Delhi', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(users_engaged) FROM users INNER JOIN virtual_tours ON users.country = virtual_tours.title WHERE users.country = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: \"서쪽\" 지역에서 한 달에 개최된 참석자가 30명 이상인 커뮤니티 치안 행사의 평균 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE community_policing_events (id INT, event_date DATE, location VARCHAR(20), attendees INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(count) FROM (SELECT COUNT(*) as count FROM community_policing_events WHERE location = 'west' AND attendees > 30 GROUP BY EXTRACT(MONTH FROM event_date)) as subquery;"
    },
    {
        "instruction": "입력 텍스트: \"작물\"과 \"비용\" 테이블에 있는 각 작물 품종의 평균 수확량과 생산 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE crops (id INT, crop_name VARCHAR(50), yield INT, revenue INT); CREATE TABLE expenses (id INT, crop_id INT, cost INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crops.crop_name, AVG(crops.yield) AS avg_yield, AVG(expenses.cost) AS avg_cost FROM crops INNER JOIN expenses ON crops.id = expenses.crop_id GROUP BY crops.crop_name;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 매년 개최되는 국방 외교 이벤트의 평균 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Diplomacy_Events (Nation VARCHAR(50), Continent VARCHAR(50), Year INT, Events INT); INSERT INTO Diplomacy_Events (Nation, Continent, Year, Events) VALUES ('South Africa', 'Africa', 2018, 15), ('Egypt', 'Africa', 2019, 20), ('Nigeria', 'Africa', 2017, 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Events) FROM Diplomacy_Events WHERE Continent = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 파리에 있는 Virtual Tourism Center의 방 개수를 25개로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE tourism_centers (id INT, name TEXT, city TEXT, type TEXT, num_rooms INT); INSERT INTO tourism_centers (id, name, city, type, num_rooms) VALUES (1, 'Virtual Tourism Center', 'Paris', 'virtual', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE tourism_centers SET num_rooms = 25 WHERE name = 'Virtual Tourism Center' AND city = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 재생 가능 에너지 프로젝트의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT, name TEXT, type TEXT, capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM projects WHERE type IN ('Solar', 'Wind', 'Hydro');"
    },
    {
        "instruction": "입력 텍스트: young_engineers 뷰를 삭제하세요\n\nDDL statements:\nCREATE VIEW young_engineers AS SELECT * FROM engineers WHERE engineers.id < 5;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DROP VIEW young_engineers;"
    },
    {
        "instruction": "입력 텍스트: 런던 기차 여행의 최소 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists london_train_trips (id INT, trip_id INT, fare DECIMAL(5,2), route_id INT, vehicle_id INT, timestamp TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(fare) FROM london_train_trips WHERE fare IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 2023년 토론토 시에서 '금속 재활용'이라는 새로운 재활용 프로그램을 추가하세요.\n\nDDL statements:\nCREATE TABLE RecyclingPrograms (ID INT PRIMARY KEY, Program VARCHAR(50), City VARCHAR(50), StartYear INT, EndYear INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO RecyclingPrograms (ID, Program, City, StartYear, EndYear) VALUES (3, 'Metal Recycling', 'Toronto', 2023, 2025);"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 유형별 미디어 윤리 위반 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE ethics_violations (id INT, type VARCHAR(50), violation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) FROM ethics_violations WHERE violation_date >= CURDATE() - INTERVAL 6 MONTH GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 스페인에서 가장 인기 있는 지속 가능한 관광 활동은 무엇인가요?\n\nDDL statements:\nCREATE TABLE tourism_activities (id INT, country TEXT, activity TEXT, sustainable BOOLEAN, popularity INT); INSERT INTO tourism_activities (id, country, activity, sustainable, popularity) VALUES (1, 'Spain', 'Hiking', true, 5000), (2, 'Spain', 'Beach Visits', false, 8000), (3, 'Spain', 'Birdwatching', true, 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT activity FROM tourism_activities WHERE country = 'Spain' AND sustainable = true ORDER BY popularity DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 각 아티스트와 해당 장르별로 스트리밍된 총 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(50)); CREATE TABLE Genres (GenreID INT, Genre VARCHAR(50)); CREATE TABLE Streams (StreamID INT, ArtistID INT, GenreID INT, Streams INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT A.ArtistName, G.Genre, SUM(S.Streams) as TotalStreams FROM Streams S JOIN Artists A ON S.ArtistID = A.ArtistID JOIN Genres G ON S.GenreID = G.GenreID GROUP BY A.ArtistName, G.Genre;"
    },
    {
        "instruction": "입력 텍스트: restaurant_revenue' 테이블에 '2023-02-01' 날짜로 수익이 $5000인 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE restaurant_revenue (date DATE, revenue INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO restaurant_revenue (date, revenue) VALUES ('2023-02-01', 5000);"
    },
    {
        "instruction": "입력 텍스트: 가장 흔한 산호초의 종류와 그 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE coral_reefs (id INTEGER, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, location, COUNT(*) AS count FROM coral_reefs GROUP BY type, location ORDER BY count DESC;"
    },
    {
        "instruction": "입력 텍스트: 창업자가 유색 인종인 회사들이 모금한 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founding_year INT, founder_race TEXT); INSERT INTO company (id, name, founding_year, founder_race) VALUES (1, 'Acme Inc', 2010, 'Asian'); INSERT INTO company (id, name, founding_year, founder_race) VALUES (2, 'Beta Corp', 2015, 'white');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding_raised) FROM investment_rounds INNER JOIN company ON investment_rounds.company_id = company.id WHERE company.founder_race IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 인도양에 있는 해양보호구역의 최소 수심은 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name TEXT, region TEXT, min_depth FLOAT);   INSERT INTO marine_protected_areas (name, region, min_depth) VALUES ('MPA1', 'Pacific', 123.45);   INSERT INTO marine_protected_areas (name, region, min_depth) VALUES ('MPA2', 'Atlantic', 234.56);   INSERT INTO marine_protected_areas (name, region, min_depth) VALUES ('MPA3', 'Indian', 345.67);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(min_depth) FROM marine_protected_areas WHERE region = 'Indian';"
    },
    {
        "instruction": "입력 텍스트: 위성 임무의 최대 발사 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE satellite_missions_large (id INT, name VARCHAR(255), launch_cost FLOAT); INSERT INTO satellite_missions_large (id, name, launch_cost) VALUES (1, 'Mission 1', 500000000), (2, 'Mission 2', 600000000), (3, 'Mission 3', 700000000), (4, 'Mission 4', 800000000), (5, 'Mission 5', 900000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(launch_cost) FROM satellite_missions_large;"
    },
    {
        "instruction": "입력 텍스트: 아메리카 대륙에 있는 국가별 군사 기지의 총 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE MilitaryBases (id INT PRIMARY KEY, country VARCHAR(50), num_bases INT); INSERT INTO MilitaryBases (id, country, num_bases) VALUES (1, 'USA', 12), (2, 'Brazil', 4), (3, 'Canada', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(num_bases) as total_bases FROM MilitaryBases WHERE country IN ('USA', 'Brazil', 'Canada') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 메뉴 항목의 가격을 업데이트하세요\n\nDDL statements:\nCREATE TABLE menu_items (item_id INT, item_name VARCHAR(255), price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE menu_items SET price = 15.99 WHERE item_id = 678;"
    },
    {
        "instruction": "입력 텍스트: emerging_markets' 스키마의 디지털 자산 중 일일 거래량이 가장 큰 값은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA emerging_markets; CREATE TABLE emerging_markets.digital_assets (asset_name VARCHAR(10), daily_transaction_volume BIGINT); INSERT INTO emerging_markets.digital_assets (asset_name, daily_transaction_volume) VALUES ('AssetX', 8000000), ('AssetY', 7000000), ('AssetZ', 6000000), ('AssetW', 5000000), ('AssetV', 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(daily_transaction_volume) FROM emerging_markets.digital_assets;"
    },
    {
        "instruction": "입력 텍스트: endangered_species' 테이블과 관련된 동물은 어떤 것들이 있나요?\n\nDDL statements:\nCREATE TABLE endangered_species (species_id INT, animal_name VARCHAR(50), population INT); INSERT INTO endangered_species (species_id, animal_name, population) VALUES (1, 'Giant Panda', 1800), (2, 'Black Rhino', 5000), (3, 'Mountain Gorilla', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal_name FROM endangered_species;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 50시간 이상 봉사한 모든 자원봉사자의 이름을 나열하시오.\n\nDDL statements:\nCREATE TABLE volunteers (id INT, name TEXT, volunteer_date DATE, hours_served INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM volunteers WHERE hours_served > 50 AND volunteer_date > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기에 사회적 책임 대출에서의 최대 대출 금액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), lending_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(loan_amount) FROM socially_responsible_lending WHERE lending_date BETWEEN '2021-07-01' AND '2021-09-30';"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 시행된 재생 에너지 프로젝트의 평균 에너지 효율 등급은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE projects (project_id INT, name TEXT, rating FLOAT, implementation_date DATE); INSERT INTO projects (project_id, name, rating, implementation_date) VALUES (1, 'Solar Farm', 1.8, '2020-01-01'), (2, 'Wind Turbine', 2.2, '2019-01-01'), (3, 'Geothermal Plant', 2.0, '2021-01-01'), (4, 'Hydro Plant', 1.9, '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM projects WHERE implementation_date >= DATEADD(year, -2, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 장르별 PC와 모바일 게임의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GameRevenue (GameID INT, GameName VARCHAR(20), Platform VARCHAR(10), Revenue DECIMAL(10, 2)); INSERT INTO GameRevenue (GameID, GameName, Platform, Revenue) VALUES (1, 'GameA', 'PC', 5000), (2, 'GameB', 'Mobile', 3000), (3, 'GameC', 'PC', 7000), (4, 'GameD', 'Mobile', 6000); CREATE VIEW GameRevenueByGenre AS SELECT GameID, GameName, Genre, Revenue FROM GameRevenue INNER JOIN GameGenres ON GameRevenue.GameID = GameGenres.GameID; CREATE TABLE GameGenres (GameID INT, Genre VARCHAR(20)); INSERT INTO GameGenres (GameID, Genre) VALUES (1, 'Action'), (2, 'Puzzle'), (3, 'Action'), (4, 'Puzzle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, SUM(Revenue) FROM GameRevenueByGenre WHERE Platform IN ('PC', 'Mobile') GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 유럽과 남미에서 발행된 기후 변화에 관한 기사들 중 가장 많은 좋아요를 받은 기사의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(50), likes INT, topic VARCHAR(50), region VARCHAR(50)); INSERT INTO articles (id, title, likes, topic, region) VALUES (1, 'Article1', 50, 'Climate Change', 'Europe'), (2, 'Article2', 75, 'Politics', 'South America'), (3, 'Article3', 100, 'Climate Change', 'Europe'), (4, 'Article4', 80, 'Climate Change', 'South America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(likes) as max_likes FROM articles WHERE topic = 'Climate Change' AND region IN ('Europe', 'South America') AND publication_date >= NOW() - INTERVAL 90 DAY GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 비용의 50% 이상을 절약한 수자원 보존 계획은 무엇인가요?\n\nDDL statements:\nCREATE TABLE water_conservation_brazil(id INT, location VARCHAR(50), initiative VARCHAR(50), cost FLOAT, savings FLOAT); INSERT INTO water_conservation_brazil(id, location, initiative, cost, savings) VALUES (1, 'Rio de Janeiro', 'Greywater Recycling', 2000, 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, initiative, savings FROM water_conservation_brazil WHERE savings > (cost * 0.5);"
    },
    {
        "instruction": "입력 텍스트: 각 대중교통 유형별로 고유 정류장은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE stops (id INT, name VARCHAR(50), type VARCHAR(10)); INSERT INTO stops (id, name, type) VALUES (1, 'Union Square', 'Subway'), (2, 'Market St', 'Bus'), (3, 'Ferry Building', 'Ferry'), (4, 'Pier 39', 'Ferry'); CREATE TABLE ferry_routes (id INT, name VARCHAR(50), type VARCHAR(10)); INSERT INTO ferry_routes (id, name, type) VALUES (3, 'Alcatraz Tour', 'Ferry'), (4, 'Golden Gate Bay Cruise', 'Ferry');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(DISTINCT name) FROM stops GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 지속 가능한 관광 상을 가장 많이 받은 목적지는 어디인가요?\n\nDDL statements:\nCREATE TABLE awards (destination VARCHAR(50), year INT, award_type VARCHAR(50)); INSERT INTO awards (destination, year, award_type) VALUES ('Paris', 2020, 'Sustainable Tourism'), ('Barcelona', 2020, 'Sustainable Tourism'), ('Paris', 2020, 'Accessible Tourism');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT destination, COUNT(*) AS awards_count FROM awards WHERE year = 2020 AND award_type = 'Sustainable Tourism' GROUP BY destination ORDER BY awards_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 2016년이나 2017년에 아르헨티나에서 시작된 경제 다양화 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Economic_Diversification_Argentina (id INT, country VARCHAR(50), year INT, initiative VARCHAR(50)); INSERT INTO Economic_Diversification_Argentina (id, country, year, initiative) VALUES (1, 'Argentina', 2016, 'Initiated'), (2, 'Argentina', 2017, 'Planned'), (3, 'Argentina', 2018, 'Initiated');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Economic_Diversification_Argentina WHERE country = 'Argentina' AND (year = 2016 OR year = 2017);"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 치료를 받은 환자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, age INT, gender TEXT, state TEXT); INSERT INTO patients (patient_id, age, gender, state) VALUES (1, 45, 'Female', 'New York'); INSERT INTO patients (patient_id, age, gender, state) VALUES (2, 35, 'Male', 'Texas'); CREATE TABLE therapy (therapy_id INT, patient_id INT, therapist_id INT, therapy_date DATE); INSERT INTO therapy (therapy_id, patient_id, therapist_id, therapy_date) VALUES (1, 1, 101, '2020-01-02'); INSERT INTO therapy (therapy_id, patient_id, therapist_id, therapy_date) VALUES (2, 2, 102, '2020-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM patients JOIN therapy ON patients.patient_id = therapy.patient_id WHERE state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 생성된 고유 분산 애플리케이션의 수를 계산하세요?\n\nDDL statements:\nCREATE TABLE decentralized_apps (app_id INT, app_name VARCHAR(50), country VARCHAR(50), creation_date DATE); INSERT INTO decentralized_apps (app_id, app_name, country, creation_date) VALUES (1, 'App1', 'USA', '2021-02-01'), (2, 'App2', 'Canada', '2020-12-20'), (3, 'App3', 'USA', '2019-07-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(DISTINCT app_id) FROM decentralized_apps GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2021년 케냐에서 농업 혁신에 대한 총 투자액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE AgriculturalInvestments (id INT, country VARCHAR(50), investment_name VARCHAR(100), investment_type VARCHAR(50), amount FLOAT, start_date DATE, end_date DATE); INSERT INTO AgriculturalInvestments (id, country, investment_name, investment_type, amount, start_date, end_date) VALUES (1, 'Kenya', 'Precision Farming', 'Agricultural Innovation', 100000.0, '2021-01-01', '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM AgriculturalInvestments WHERE country = 'Kenya' AND investment_type = 'Agricultural Innovation' AND YEAR(start_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 환경 영향 테이블에서 'site_id'가 012인 곳의 'co2_emissions'을 1500으로 설정하세요.\n\nDDL statements:\nCREATE TABLE environmental_impact (site_id VARCHAR(10) PRIMARY KEY, co2_emissions INT, water_usage DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE environmental_impact SET co2_emissions = 1500 WHERE site_id = '012';"
    },
    {
        "instruction": "입력 텍스트: 독일에 있는 AI 기반 고객 서비스를 도입한 호텔의 가상 투어 최소 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT, num_virtual_tours INT, ai_customer_service BOOLEAN); INSERT INTO hotels (hotel_id, hotel_name, country, num_virtual_tours, ai_customer_service) VALUES (1, 'Hotel G', 'Germany', 75, TRUE), (2, 'Hotel H', 'Germany', 100, FALSE), (3, 'Hotel I', 'Germany', 125, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(num_virtual_tours) FROM hotels WHERE country = 'Germany' AND ai_customer_service = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 이커머스 분야에서 이민자에 의해 설립된 스타트업의 최소 다양성 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, industry TEXT, founder_country TEXT, diversity_score INT); INSERT INTO company (id, name, industry, founder_country, diversity_score) VALUES (1, 'EcomGlobal', 'E-commerce', 'Brazil', 75), (2, 'ShopEasy', 'E-commerce', 'China', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(company.diversity_score) FROM company WHERE company.industry = 'E-commerce' AND company.founder_country IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 특정 국가의 팬들에 대한 새로운 기록을 삽입하세요.\n\nDDL statements:\nCREATE TABLE fans (fan_id INT, name VARCHAR(100), country VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fans (fan_id, name, country) VALUES (1, 'Ali Ahmed', 'Pakistan'); INSERT INTO fans (fan_id, name, country) VALUES (2, 'Sophia Lee', 'South Korea'); INSERT INTO fans (fan_id, name, country) VALUES (3, 'Carlos Gomez', 'Brazil');"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 2021년 1분기 대비 자산 총액이 10% 이상 증가한 고객은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name VARCHAR(50), total_assets DECIMAL(10,2));CREATE TABLE transactions (transaction_id INT, client_id INT, transaction_date DATE, total_amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT c.client_id) FROM clients c INNER JOIN (SELECT client_id, SUM(total_amount) as total_q1_2022 FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY client_id) t1 ON c.client_id = t1.client_id INNER JOIN (SELECT client_id, SUM(total_amount) as total_q1_2021 FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-03-31' GROUP BY client_id) t2 ON c.client_id = t2.client_id WHERE t1.total_q1_2022 > 1.1 * t2.total_q1_2021"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 프로젝트에 지출된 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Projects (id INT, project_name TEXT, budget_allocated FLOAT, start_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, SUM(budget_allocated) as total_budget_spent FROM Projects WHERE YEAR(start_date) = 2022 GROUP BY project_name;"
    },
    {
        "instruction": "입력 텍스트: APAC 지역에서 지난 분기에 OTA 예약을 통해 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE bookings (booking_id INT, booking_date DATE, region VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO bookings (booking_id, booking_date, region, revenue) VALUES (1, '2022-01-01', 'APAC', 100), (2, '2022-02-01', 'APAC', 200), (3, '2022-03-01', 'APAC', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM bookings WHERE region = 'APAC' AND booking_date >= DATEADD(quarter, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 코랄 삼각지대에서 보전 우선순위가 가장 높은 상위 3개의 해양 생물 종을 찾으세요.\n\nDDL statements:\nCREATE TABLE species (name VARCHAR(255), conservation_priority FLOAT, region VARCHAR(255)); INSERT INTO species (name, conservation_priority, region) VALUES ('Clownfish', 0.9, 'Coral Triangle'), ('Sea Turtle', 0.85, 'Coral Triangle'), ('Giant Clam', 0.8, 'Coral Triangle'), ('Dugong', 0.75, 'Coral Triangle'), ('Shark', 0.7, 'Coral Triangle'), ('Blue Whale', 0.65, 'North Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, conservation_priority FROM (SELECT name, conservation_priority, ROW_NUMBER() OVER (ORDER BY conservation_priority DESC) as rn FROM species WHERE region = 'Coral Triangle') t WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 환자의 성별에 따라 그룹화된 평균 세션 지속 시간과 세션 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE patients (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), condition VARCHAR(50)); INSERT INTO patients (id, name, age, gender, condition) VALUES (3, 'Maria Garcia', 42, 'Female', 'Bipolar Disorder'); INSERT INTO patients (id, name, age, gender, condition) VALUES (4, 'Ahmed Khan', 30, 'Male', 'PTSD'); INSERT INTO patients (id, name, age, gender, condition) VALUES (5, 'Li Wang', 50, 'Female', 'Depression'); CREATE TABLE appointments (patient_id INT, therapist_id INT, appointment_date DATE, appointment_time TIME, appointment_duration INT); INSERT INTO appointments (patient_id, therapist_id, appointment_date, appointment_time, appointment_duration) VALUES (3, 1, '2023-02-15', '14:00:00', 60); INSERT INTO appointments (patient_id, therapist_id, appointment_date, appointment_time, appointment_duration) VALUES (4, 2, '2023-03-01', '09:30:00', 90); INSERT INTO appointments (patient_id, therapist_id, appointment_date, appointment_time, appointment_duration) VALUES (5, 3, '2023-01-20', '11:00:00', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, AVG(appointment_duration) as avg_session_duration, COUNT(*) as num_sessions FROM appointments JOIN patients ON appointments.patient_id = patients.id GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: Georgia'와 'Alabama'에 있는 모든 프로젝트의 평균 건설 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Projects (name TEXT, state TEXT, cost INTEGER); INSERT INTO Projects (name, state, cost) VALUES ('Transportation Upgrade', 'Georgia', 1000000); INSERT INTO Projects (name, state, cost) VALUES ('Highway Construction', 'Alabama', 800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM Projects WHERE state IN ('Georgia', 'Alabama');"
    },
    {
        "instruction": "입력 텍스트: 2019년에 방영된 \"ShowZ\"라는 제목의 TV 프로그램의 시청자 수를 구하세요.\n\nDDL statements:\nCREATE TABLE viewership (show_id INT, title VARCHAR(100), release_year INT, viewer_count INT); INSERT INTO viewership (show_id, title, release_year, viewer_count) VALUES (1, 'ShowZ', 2019, 1200000); INSERT INTO viewership (show_id, title, release_year, viewer_count) VALUES (2, 'ShowW', 2020, 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT viewer_count FROM viewership WHERE title = 'ShowZ' AND release_year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 태평양 섬 원주민 또는 하와이 원주민으로 신분을 밝힌 직원들의 최소 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, EmployeeName VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10,2), Ethnicity VARCHAR(50)); INSERT INTO Employees (EmployeeID, EmployeeName, Department, Salary, Ethnicity) VALUES (1, 'John Doe', 'IT', 75000.00, 'Asian'), (2, 'Jane Smith', 'IT', 80000.00, 'White'), (3, 'Mike Johnson', 'IT', 78000.00, 'Hispanic'), (4, 'Alice Williams', 'HR', 65000.00, 'Black'), (5, 'Bob Brown', 'Finance', 90000.00, 'Native Hawaiian or Pacific Islander'), (6, 'Charlie Davis', 'Finance', 95000.00, 'Asian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Salary) FROM Employees WHERE Ethnicity = 'Native Hawaiian or Pacific Islander';"
    },
    {
        "instruction": "입력 텍스트: 전 세계에서 접근 가능한 기술 센터가 가장 많은 상위 5개 도시를 나열하세요.\n\nDDL statements:\nCREATE TABLE Cities (id INT, name TEXT, country TEXT, num_accessible_tech_centers INT); INSERT INTO Cities (id, name, country, num_accessible_tech_centers) VALUES (1, 'New York', 'USA', 12), (2, 'Los Angeles', 'USA', 15), (3, 'San Francisco', 'USA', 20), (4, 'London', 'UK', 18), (5, 'Tokyo', 'Japan', 10), (6, 'Sydney', 'Australia', 8), (7, 'Delhi', 'India', 12), (8, 'Beijing', 'China', 14), (9, 'Mexico City', 'Mexico', 9), (10, 'Toronto', 'Canada', 16);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, country, num_accessible_tech_centers FROM Cities ORDER BY num_accessible_tech_centers DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에 있는 풍력 에너지 프로젝트의 총 설치 용량(메가와트 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Projects (project_id INT, project_name VARCHAR(100), state VARCHAR(100), project_type VARCHAR(100), installed_capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(installed_capacity) FROM Projects WHERE state = 'Texas' AND project_type = 'Wind';"
    },
    {
        "instruction": "입력 텍스트: 재무 건전성 점수가 80점을 초과하는 고객의 비율을 계산하고, 고객 수의 총합을 제공하세요.\n\nDDL statements:\nCREATE TABLE financial_wellbeing(customer_id INT, score DECIMAL(3, 1)); INSERT INTO financial_wellbeing VALUES (1, 85), (2, 75), (3, 90), (4, 65);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) * 100.0 / SUM(COUNT(*)) OVER () AS pct, COUNT(*) AS total_customers FROM financial_wellbeing WHERE score > 80;"
    },
    {
        "instruction": "입력 텍스트: 각 개발자가 생성한 스마트 계약의 총 수를 내림차순으로 나타내세요.\n\nDDL statements:\nCREATE TABLE SmartContracts (ContractID int, Developer varchar(50)); INSERT INTO SmartContracts (ContractID, Developer) VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Developer, COUNT(*) as TotalContracts FROM SmartContracts GROUP BY Developer ORDER BY TotalContracts DESC;"
    },
    {
        "instruction": "입력 텍스트: 태평양'과 '대서양' 지역에 기록된 해양 생물 종의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE regions (region_id INT, region_name VARCHAR(20)); INSERT INTO regions (region_id, region_name) VALUES (1, 'Pacific'), (2, 'Atlantic'); CREATE TABLE marine_species (species_id INT, species_name VARCHAR(30), region_id INT); INSERT INTO marine_species (species_id, species_name, region_id) VALUES (1, 'Clownfish', 1), (2, 'Starfish', 2), (3, 'Jellyfish', 1), (4, 'Seahorse', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_species WHERE region_id IN (1, 2);"
    },
    {
        "instruction": "입력 텍스트: 최근 그린 에너지 대출 프로그램에 가입한 새로운 고객들의 기록을 삽입하세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name VARCHAR(50), program VARCHAR(50)); CREATE TABLE green_energy_lending_programs (program VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO clients (client_id, name, program) SELECT seq.client_id, 'Grace Gichuru', 'Green Energy Lending' FROM (SELECT 1001 + ROW_NUMBER() OVER() AS client_id FROM green_energy_lending_programs LIMIT 5) AS seq; INSERT INTO green_energy_lending_programs (program) VALUES ('Green Energy Lending');"
    },
    {
        "instruction": "입력 텍스트: SiteM'에 새로운 유물을 추가하세요.\n\nDDL statements:\nCREATE TABLE SiteM (id INT PRIMARY KEY, artifact_name VARCHAR(50), date_found DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO SiteM (id, artifact_name, date_found) VALUES (1, 'Gold Pendant', '2015-09-01');"
    },
    {
        "instruction": "입력 텍스트: 7월 한 달 동안 북극의 평균 기온과 습도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE ClimateData (id INT PRIMARY KEY, location VARCHAR(100), temperature DECIMAL(5,2), humidity DECIMAL(5,2), date DATE); INSERT INTO ClimateData (id, location, temperature, humidity, date) VALUES (1, 'Arctic', 10.50, 75.00, '2022-07-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(c.temperature), AVG(c.humidity) FROM ClimateData c WHERE c.location = 'Arctic' AND c.date BETWEEN '2022-07-01' AND '2022-07-31';"
    },
    {
        "instruction": "입력 텍스트: 2020년 유럽의 온대 낙엽수림에서 생산된 목재의 총 부피(입방미터)는 얼마입니까?\n\nDDL statements:\nCREATE TABLE timber_production (forest_type VARCHAR(30), year INT, volume FLOAT); INSERT INTO timber_production (forest_type, year, volume) VALUES ('Temperate Deciduous Forest', 2020, 12345.6), ('Temperate Deciduous Forest', 2019, 7890.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(volume) FROM timber_production WHERE forest_type = 'Temperate Deciduous Forest' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월에 '버스' 노선에서 수집된 총 요금은 얼마입니까?\n\nDDL statements:\nCREATE TABLE public.collected_fare (fare_id SERIAL PRIMARY KEY, fare DECIMAL(5,2), fare_date DATE, route_type_id INTEGER, FOREIGN KEY (route_type_id) REFERENCES public.route_type(route_type_id)); INSERT INTO public.collected_fare (fare, fare_date, route_type_id) VALUES (3.00, '2022-01-01', 1), (1.50, '2022-01-05', 1), (3.00, '2022-01-12', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fare) FROM public.collected_fare INNER JOIN public.route_type ON public.collected_fare.route_type_id = public.route_type.route_type_id WHERE route_type = 'bus' AND fare_date >= '2022-01-01' AND fare_date <= '2022-01-31'"
    },
    {
        "instruction": "입력 텍스트: 각 회사의 가장 최근 혁신은 무엇이며, 그들은 몇 명의 직원을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE Innovation_Trends (company_name VARCHAR(50), innovation_type VARCHAR(20), launch_year INT); INSERT INTO Innovation_Trends (company_name, innovation_type, launch_year) VALUES ('Waystar Royco', 'AI', 2018); INSERT INTO Innovation_Trends (company_name, innovation_type, launch_year) VALUES ('Pied Piper', 'Cloud', 2013); INSERT INTO Innovation_Trends (company_name, innovation_type, launch_year) VALUES ('Austin Biotech', 'Blockchain', 2017); CREATE TABLE Company_Info (company_name VARCHAR(50), employee_count INT); INSERT INTO Company_Info (company_name, employee_count) VALUES ('Waystar Royco', 5000); INSERT INTO Company_Info (company_name, employee_count) VALUES ('Pied Piper', 50); INSERT INTO Company_Info (company_name, employee_count) VALUES ('Austin Biotech', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.company_name, innovation_type, launch_year, employee_count FROM Innovation_Trends i JOIN Company_Info ci ON i.company_name = ci.company_name WHERE launch_year = (SELECT MAX(launch_year) FROM Innovation_Trends WHERE company_name = i.company_name);"
    },
    {
        "instruction": "입력 텍스트: building_permits' 테이블에서 'Florida' 주의 주거용 프로젝트에 발급된 건축 허가증은 총 몇 개입니까?\n\nDDL statements:\nCREATE TABLE building_permits (state TEXT, project_type TEXT, year INT, permits_issued INT); INSERT INTO building_permits (state, project_type, year, permits_issued) VALUES ('Florida', 'residential', 2018, 800), ('Florida', 'residential', 2019, 900), ('Florida', 'residential', 2020, 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(permits_issued) FROM building_permits WHERE state = 'Florida' AND project_type = 'residential';"
    },
    {
        "instruction": "입력 텍스트: 함대 내 선박의 평균 길이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE fleet (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), length FLOAT, year_built INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(length) FROM fleet;"
    },
    {
        "instruction": "입력 텍스트: RegionZ' 지역에서 열린 이벤트의 방문객 연령 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Visitors (visitor_id INT, name VARCHAR(255), birthdate DATE, city VARCHAR(255)); CREATE TABLE Visits (visit_id INT, visitor_id INT, event_id INT, visit_date DATE); CREATE TABLE Events (event_id INT, name VARCHAR(255), date DATE, region VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(YEAR(CURRENT_DATE) - YEAR(birthdate)) AS avg_age FROM Visitors V JOIN Visits IV ON V.visitor_id = IV.visitor_id JOIN Events E ON IV.event_id = E.event_id WHERE E.region = 'RegionZ';"
    },
    {
        "instruction": "입력 텍스트: 각 지구별 의료 긴급 상황에 대한 평균 응답 시간을 계산하세요\n\nDDL statements:\nCREATE TABLE emergency_responses (id SERIAL PRIMARY KEY, district_id INTEGER, incident_type VARCHAR(255), response_time INTEGER); INSERT INTO emergency_responses (district_id, incident_type, response_time) VALUES (1, 'Medical', 8), (1, 'Fire', 6), (2, 'Medical', 10), (2, 'Fire', 7), (3, 'Medical', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_id, AVG(response_time) as avg_response_time FROM emergency_responses WHERE incident_type = 'Medical' GROUP BY district_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 뉴욕 박물관을 방문한 각 국가의 방문객 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Visitors (VisitorID INT, Name VARCHAR(255), Country VARCHAR(255), VisitDate DATE); CREATE TABLE Museums (MuseumID INT, Name VARCHAR(255), City VARCHAR(255)); CREATE TABLE Visits (VisitID INT, VisitorID INT, MuseumID INT, VisitDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.Country, COUNT(v.VisitorID) as VisitorCount FROM Visitors v JOIN Visits vi ON v.VisitorID = vi.VisitorID JOIN Museums m ON vi.MuseumID = m.MuseumID WHERE m.City = 'New York' AND VisitDate >= DATEADD(month, -1, GETDATE()) GROUP BY v.Country;"
    },
    {
        "instruction": "입력 텍스트: 보스턴 시에 있는 공동 소유 부동산의 최대 크기(제곱피트)는 얼마인가요?\n\nDDL statements:\nCREATE TABLE property (id INT, size INT, city VARCHAR(20), co_owned BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(size) FROM property WHERE city = 'Boston' AND co_owned = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 여성이 창업한 각 산업 분야별 평균 자금 조달액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founder TEXT, industry TEXT, funding FLOAT); INSERT INTO company (id, name, founder, industry, funding) VALUES (1, 'Acme Inc', 'Female', 'Tech', 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, AVG(funding) FROM company WHERE founder = 'Female' GROUP BY industry;"
    },
    {
        "instruction": "입력 텍스트: ID 3인 'Iron Age' 시대 유적지에서 새로운 유물 'Artifact4'를 추가하세요.\n\nDDL statements:\nCREATE TABLE ExcavationSites (site_id INT, site_name TEXT, period TEXT); INSERT INTO ExcavationSites (site_id, site_name, period) VALUES (1, 'SiteA', 'Iron Age'), (2, 'SiteB', 'Bronze Age'); CREATE TABLE Artifacts (artifact_id INT, site_id INT, artifact_name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Artifacts (artifact_id, site_id, artifact_name, period) VALUES (4, 3, 'Artifact4', 'Iron Age');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 대도시 지역에서 유지보수가 필요한 접근 가능한 차량은 몇 대인가요?\n\nDDL statements:\nCREATE TABLE vehicles (vehicle_id INT, type VARCHAR(10), accessibility VARCHAR(10)); CREATE TABLE maintenance (vehicle_id INT, status VARCHAR(10)); CREATE TABLE regions (region_id INT, name VARCHAR(20), capital VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vehicles v JOIN maintenance m ON v.vehicle_id = m.vehicle_id JOIN regions r ON r.region_id = v.region_id WHERE type = 'accessible' AND status = 'required' AND r.name = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 가장 깊은 지점의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ocean_trenches (name VARCHAR(255), location VARCHAR(255), max_depth DECIMAL(5,2)); INSERT INTO ocean_trenches (name, location, max_depth) VALUES ('Milwaukee Deep', 'Atlantic Ocean', 8380.00), ('Puerto Rico Trench', 'Atlantic Ocean', 8605.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM ocean_trenches WHERE location = 'Atlantic Ocean' AND max_depth = (SELECT MAX(max_depth) FROM ocean_trenches WHERE location = 'Atlantic Ocean');"
    },
    {
        "instruction": "입력 텍스트: Language2' 언어 보존에서 가장 참여도가 낮은 커뮤니티 멤버는 누구인가요?\n\nDDL statements:\nCREATE TABLE community_members (id INT, name TEXT, engagement INT, language TEXT); INSERT INTO community_members (id, name, engagement, language) VALUES (1, 'Member A', 5000, 'Language1'), (2, 'Member B', 3000, 'Language2'), (3, 'Member C', 7000, 'Language3'), (4, 'Member D', 1500, 'Language2'), (5, 'Member E', 4000, 'Language3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM community_members WHERE language = 'Language2' AND engagement = (SELECT MIN(engagement) FROM community_members WHERE language = 'Language2')"
    },
    {
        "instruction": "입력 텍스트: 2020년 북해에서 생산량이 가장 많은 상위 3개의 유전을 나열하세요.\n\nDDL statements:\nCREATE TABLE production (field VARCHAR(50), year INT, oil_production FLOAT, gas_production FLOAT); INSERT INTO production (field, year, oil_production, gas_production) VALUES ('Ekofisk', 2020, 12345.6, 7890.1); INSERT INTO production (field, year, oil_production, gas_production) VALUES ('Statfjord', 2020, 23456.7, 8901.2); INSERT INTO production (field, year, oil_production, gas_production) VALUES ('Gullfaks', 2020, 34567.8, 9012.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT field, oil_production + gas_production as total_production FROM production WHERE year = 2020 AND field LIKE 'North Sea%' ORDER BY total_production DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 희귀 질환 치료 영역에서 다양한 단계별 평균 임상 시험 성공률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE clinical_trials (drug_name TEXT, phase TEXT, trial_success_rate REAL); INSERT INTO clinical_trials (drug_name, phase, trial_success_rate) VALUES ('Drug1', 'phase 1', 0.58), ('Drug2', 'phase 2', 0.67), ('Drug3', 'phase 3', 0.62), ('Drug4', 'phase 3', 0.69), ('Drug5', 'phase 2', 0.55), ('Drug6', 'phase 1', 0.71); CREATE TABLE therapeutic_areas (drug_name TEXT, therapeutic_area TEXT); INSERT INTO therapeutic_areas (drug_name, therapeutic_area) VALUES ('Drug1', 'rare diseases'), ('Drug2', 'dermatology'), ('Drug3', 'cardiovascular'), ('Drug4', 'cardiovascular'), ('Drug5', 'gastroenterology'), ('Drug6', 'rare diseases');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT phase, AVG(trial_success_rate) as avg_trial_success_rate FROM clinical_trials INNER JOIN therapeutic_areas ON clinical_trials.drug_name = therapeutic_areas.drug_name WHERE therapeutic_area = 'rare diseases' GROUP BY phase;"
    },
    {
        "instruction": "입력 텍스트: 임무 중 평균 온도(켈빈 단위)가 가장 높은 우주선 상위 3개를 확인하세요?\n\nDDL statements:\nCREATE TABLE spacecraft_temperatures (spacecraft_name TEXT, temperature FLOAT, mission_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT spacecraft_name, AVG(temperature) as avg_temp FROM spacecraft_temperatures GROUP BY spacecraft_name ORDER BY avg_temp DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 어떤 생물공정이 가장 많은 에너지를 소비하나요?\n\nDDL statements:\nCREATE TABLE bioprocesses (bioprocess_id INT, bioprocess_name VARCHAR(20), energy_consumption FLOAT); INSERT INTO bioprocesses (bioprocess_id, bioprocess_name, energy_consumption) VALUES (1, 'Fermentation', 1200), (2, 'Cell culturing', 1800), (3, 'Downstream processing', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT bioprocess_name, MAX(energy_consumption) FROM bioprocesses GROUP BY bioprocess_name"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 한국에 위치한 스튜디오에서 출시된 영화는 몇 편입니까?\n\nDDL statements:\nCREATE TABLE Studios (id INT, studio_name VARCHAR(100), location VARCHAR(50), established_year INT); CREATE TABLE Movies (id INT, title VARCHAR(100), studio_id INT, release_year INT); INSERT INTO Studios (id, studio_name, location, established_year) VALUES (1, 'Studio1', 'South Korea', 1995), (2, 'Studio2', 'Japan', 2000); INSERT INTO Movies (id, title, studio_id, release_year) VALUES (1, 'Movie1', 1, 2005), (2, 'Movie2', 1, 2010), (3, 'Movie3', 2, 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Movies WHERE studio_id IN (SELECT id FROM Studios WHERE location = 'South Korea' AND established_year < 2010);"
    },
    {
        "instruction": "입력 텍스트: 2020년 아시아 태평양 지역 국가들에게 기후 적응 프로젝트를 위해 제공된 기후 재정의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (year INT, region VARCHAR(50), funding_type VARCHAR(50), amount INT);INSERT INTO climate_finance (year, region, funding_type, amount) VALUES (2020, 'Asia-Pacific', 'climate adaptation', 15000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM climate_finance WHERE year = 2020 AND region = 'Asia-Pacific' AND funding_type = 'climate adaptation';"
    },
    {
        "instruction": "입력 텍스트: 제품 카테고리별 고객 구매 수량의 평균은 얼마인가요?\n\nDDL statements:\nCREATE TABLE purchases (customer_id INT, product_category VARCHAR(255), product VARCHAR(255), quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_category, AVG(quantity) as avg_quantity FROM purchases GROUP BY product_category;"
    },
    {
        "instruction": "입력 텍스트: LaborStatistics' 테이블에서 각 건설 업종별 평균 시간당 임금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE LaborStatistics (workerID INT, laborDate DATE, trade VARCHAR(50), hourlyRate DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trade, AVG(hourlyRate) AS AverageHourlyRate FROM LaborStatistics GROUP BY trade;"
    },
    {
        "instruction": "입력 텍스트: 2022년 중국에서 생산된 각 의류 제품의 총 CO2 배출량을 계산하세요.\n\nDDL statements:\nCREATE TABLE co2_emission (garment_type VARCHAR(20), country VARCHAR(20), year INT, co2_emission FLOAT); INSERT INTO co2_emission (garment_type, country, year, co2_emission) VALUES ('tops', 'China', 2022, 6.5), ('bottoms', 'China', 2022, 7.3), ('shoes', 'China', 2022, 8.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT garment_type, SUM(co2_emission) FROM co2_emission WHERE country = 'China' AND year = 2022 GROUP BY garment_type;"
    },
    {
        "instruction": "입력 텍스트: 아프리카와 아시아에서의 농생태학 프로젝트의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE agroecology (project_id INT, project_name TEXT, region TEXT); INSERT INTO agroecology (project_id, project_name, region) VALUES (1, 'Green Hope', 'Latin America'), (2, 'Nature''s Blessing', 'Africa'), (3, 'Unity Farm', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM agroecology WHERE region IN ('Africa', 'Asia');"
    },
    {
        "instruction": "입력 텍스트: 에어버스 항공기의 가장 초기 출시 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE aircraft (aircraft_id INT, name VARCHAR(100), manufacturer VARCHAR(100), first_flight DATE); INSERT INTO aircraft (aircraft_id, name, manufacturer, first_flight) VALUES (1, 'A300', 'Airbus', '1972-10-07'), (2, 'A310', 'Airbus', '1982-04-03'), (3, 'A320', 'Airbus', '1987-02-18');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(first_flight) FROM aircraft WHERE manufacturer = 'Airbus';"
    },
    {
        "instruction": "입력 텍스트: 롱 비치 항구에서 모든 화물의 총 대기 시간(시간 단위)을 보여주세요.\n\nDDL statements:\nCREATE TABLE Ports (PortID INT, PortName VARCHAR(255)); CREATE TABLE Cargos (CargoID INT, PortID INT, LoadingStart DATETIME, LoadingEnd DATETIME); INSERT INTO Ports (PortID, PortName) VALUES (1, 'Long Beach'), (2, 'Los Angeles'); INSERT INTO Cargos (CargoID, PortID, LoadingStart, LoadingEnd) VALUES (1, 1, '2021-01-01 08:00:00', '2021-01-01 10:00:00'), (2, 1, '2021-01-02 12:00:00', '2021-01-02 16:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(DATEDIFF(HOUR, LoadingStart, LoadingEnd)) AS TotalWaitingTime FROM Cargos WHERE PortID = (SELECT PortID FROM Ports WHERE PortName = 'Long Beach');"
    },
    {
        "instruction": "입력 텍스트: Metropolitan Museum of Art'와 'Tate Modern' 양쪽 모두에서 작품을 전시한 예술가들의 평균 수명은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Galleries (GalleryID INT PRIMARY KEY, Name VARCHAR(50), City VARCHAR(50), Country VARCHAR(50)); INSERT INTO Galleries (GalleryID, Name, City, Country) VALUES (16, 'Metropolitan Museum of Art', 'New York', 'USA'), (17, 'Tate Modern', 'London', 'UK');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DeathYear - BirthYear) FROM Artists WHERE ArtistID IN (SELECT ArtistID FROM Exhibitions WHERE GalleryID IN (16, 17) GROUP BY ArtistID HAVING COUNT(DISTINCT GalleryID) = 2);"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 관찰된 종의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE species_observations (country VARCHAR(255), species_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(species_count) FROM species_observations GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2021년 오세아니아 지역 남성의 비만율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Obesity (Gender VARCHAR(50), Continent VARCHAR(50), Year INT, Rate DECIMAL(5,2)); INSERT INTO Obesity (Gender, Continent, Year, Rate) VALUES ('Male', 'Oceania', 2021, 25.5), ('Female', 'Oceania', 2021, 24.3), ('Male', 'Americas', 2021, 30.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Rate FROM Obesity WHERE Gender = 'Male' AND Continent = 'Oceania' AND Year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 품질 관리' 영역에 있는 기계의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE machines (id INT, name VARCHAR(50), area VARCHAR(20), quantity INT); INSERT INTO machines (id, name, area, quantity) VALUES (1, 'CNC Mill', 'machining', 10), (2, 'Lathe', 'machining', 5), (3, 'Assembly Robot', 'assembly', 8), (4, 'Inspection Gauge', 'quality control', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM machines WHERE area = 'quality control';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 '서울'에서 시작하는 프로젝트의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT PRIMARY KEY, name VARCHAR(50), budget DECIMAL(10,2), start_date DATE, end_date DATE, location VARCHAR(50)); INSERT INTO projects (id, name, budget, start_date, end_date, location) VALUES (3, 'Renewable Energy', 100000.00, '2022-01-01', '2023-12-31', 'Seoul');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM projects WHERE start_date BETWEEN '2022-01-01' AND '2022-12-31' AND location = 'Seoul';"
    },
    {
        "instruction": "입력 텍스트: 브라질의 재생 에너지 프로젝트 이름과 유형을 가져오세요.\n\nDDL statements:\nCREATE TABLE brazil_projects (id INT, name VARCHAR(100), country VARCHAR(50), project_type VARCHAR(50)); INSERT INTO brazil_projects (id, name, country, project_type) VALUES (1, 'Project 1', 'Brazil', 'Wind Farm'), (2, 'Project 2', 'Brazil', 'Solar Plant'), (3, 'Project 3', 'Brazil', 'Hydro Plant');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, project_type FROM brazil_projects;"
    },
    {
        "instruction": "입력 텍스트: 어떤 해에든 이산화탄소 배출량이 150을 초과하는 프로젝트 목록을 나열합니다.\n\nDDL statements:\nCREATE TABLE Projects (id INT, name TEXT, location TEXT, capacity FLOAT, type TEXT, PRIMARY KEY (id)); INSERT INTO Projects (id, name, location, capacity, type) VALUES (1, 'Solar Farm A', 'California', 50.0, 'Solar'), (2, 'Wind Farm B', 'Texas', 100.0, 'Wind'); CREATE TABLE Emissions (id INT, project_id INT, year INT, co2_emissions INT, PRIMARY KEY (id), FOREIGN KEY (project_id) REFERENCES Projects(id)); INSERT INTO Emissions (id, project_id, year, co2_emissions) VALUES (1, 1, 2020, 100), (2, 1, 2021, 90), (3, 2, 2020, 200), (4, 2, 2021, 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Projects.name FROM Projects INNER JOIN Emissions ON Projects.id = Emissions.project_id WHERE Emissions.co2_emissions > 150 GROUP BY Projects.name;"
    },
    {
        "instruction": "입력 텍스트: 어느 발굴 현장에서 '청동 도구' 유물이 5개 이상 발견되었나요?\n\nDDL statements:\nCREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255), artifact VARCHAR(255), quantity INT); INSERT INTO excavation_sites (site_id, site_name, artifact, quantity) VALUES (1, 'site_a', 'Bronze Tools', 7), (2, 'site_b', 'Bronze Tools', 3), (3, 'site_c', 'Bronze Tools', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_name FROM excavation_sites WHERE artifact = 'Bronze Tools' GROUP BY site_name HAVING COUNT(*) > 5;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 출시된 유기농 화장품의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Sales (sale_id INT, product_id INT, sale_year INT, organic BOOLEAN, revenue DECIMAL(10,2)); INSERT INTO Sales (sale_id, product_id, sale_year, organic, revenue) VALUES (1, 1, 2021, TRUE, 250.00), (2, 2, 2019, FALSE, 150.00), (3, 3, 2021, TRUE, 300.00), (4, 4, 2018, TRUE, 200.00), (5, 5, 2021, TRUE, 400.00), (6, 6, 2019, FALSE, 100.00), (7, 7, 2020, TRUE, 250.00), (8, 8, 2021, FALSE, 350.00), (9, 9, 2018, TRUE, 150.00), (10, 10, 2019, FALSE, 50.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM Sales WHERE organic = TRUE AND sale_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 회사별로 남성 창업자와 여성 창업자의 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE companies (id INT, company_name VARCHAR(255), founder_gender VARCHAR(10)); INSERT INTO companies (id, company_name, founder_gender) VALUES (1, 'TechCo', 'Male'), (2, 'BioHealth', 'Female'), (3, 'GreenEnergy', 'Male'), (4, 'InnoVentures', 'Non-binary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company_name, founder_gender, COUNT(*) as num_founders FROM companies GROUP BY company_name, founder_gender;"
    },
    {
        "instruction": "입력 텍스트: \"sustainable_living\" 스키마에서 해시태그 #zerowaste를 포함한 트윗의 최대 리트윗 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE tweets (id INT, user_id INT, content TEXT, retweets INT, hashtags TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(retweets) FROM tweets WHERE hashtags LIKE '%#zerowaste%';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 조달된 섬유의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE textile_sourcing (id INT, material VARCHAR(20), country VARCHAR(20), quantity INT); INSERT INTO textile_sourcing (id, material, country, quantity) VALUES (1, 'cotton', 'Egypt', 1000), (2, 'silk', 'Morocco', 500), (3, 'wool', 'South Africa', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM textile_sourcing WHERE country IN ('Egypt', 'Morocco', 'South Africa');"
    },
    {
        "instruction": "입력 텍스트: 교통' 부문의 노조에서 직장 안전 사고를 경험한 노조원의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE union_stats (id INT, union_name VARCHAR(30), sector VARCHAR(20), num_members INT, num_safety_incidents INT); INSERT INTO union_stats (id, union_name, sector, num_members, num_safety_incidents) VALUES (1, 'Union A', 'transportation', 1000, 50), (2, 'Union B', 'education', 2000, 30), (3, 'Union C', 'transportation', 1500, 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, (COUNT(*) * 100.0 / (SELECT SUM(num_members) FROM union_stats WHERE sector = u.sector)) AS percentage FROM union_stats u WHERE num_safety_incidents > 0 GROUP BY sector;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 사회적 책임 대출의 평균 대출 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE socially_responsible_lending (id INT, country VARCHAR(20), loan_amount DECIMAL(10, 2)); INSERT INTO socially_responsible_lending (id, country, loan_amount) VALUES (1, 'Kenya', 500.00), (2, 'Nigeria', 750.00), (3, 'South Africa', 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(loan_amount) FROM socially_responsible_lending WHERE country = 'Africa'"
    },
    {
        "instruction": "입력 텍스트: 각 동네별로 건물 유형에 따른 평균 임대료는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Neighborhoods (neighborhood_id INT, name VARCHAR(50));CREATE TABLE Units (unit_id INT, neighborhood_id INT, building_type VARCHAR(50), rent INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT n.name, b.building_type, AVG(u.rent) as avg_rent FROM Units u JOIN Neighborhoods n ON u.neighborhood_id = n.neighborhood_id JOIN Buildings b ON u.building_id = b.building_id GROUP BY n.name, b.building_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 각 프로그램별로 처음 기부한 기부자는 몇 명이었나요?\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(255), is_first_time_donor BOOLEAN, program VARCHAR(255), donation DECIMAL(10, 2)); CREATE TABLE all_programs (id INT, name VARCHAR(255), focus_area VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, COUNT(DISTINCT id) FROM donors JOIN all_programs ON donors.program = all_programs.name WHERE is_first_time_donor = TRUE AND donation > 0 AND date >= DATEADD(quarter, -1, GETDATE()) GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: 상위 3명의 기부자가 기부한 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, AmountDonated DECIMAL); INSERT INTO Donors (DonorID, DonorName, AmountDonated) VALUES (1, 'John Doe', 500.00), (2, 'Jane Smith', 300.00), (3, 'Bob Johnson', 700.00), (4, 'Alice Williams', 400.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(AmountDonated) FROM (SELECT AmountDonated FROM Donors ORDER BY AmountDonated DESC LIMIT 3) AS TopDonors;"
    },
    {
        "instruction": "입력 텍스트: stock_data' 테이블에 있는 각 어종별 평균 재고 수준과 무게는 얼마인가요?\n\nDDL statements:\nCREATE TABLE stock_data (id INT, species VARCHAR(255), stock_level INT, weight DECIMAL(6,2)); INSERT INTO stock_data (id, species, stock_level, weight) VALUES (1, 'Tilapia', 300, 425.45), (2, 'Salmon', 220, 2634.67), (3, 'Tilapia', 280, 382.34), (4, 'Catfish', 200, 754.32), (5, 'Salmon', 250, 2800.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, AVG(stock_level) as avg_stock_level, AVG(weight) as avg_weight FROM stock_data GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 전자상거래 분야의 각 회사별 직원 수와 총 투자금액을 투자금액 기준 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, employees INT); INSERT INTO companies (id, name, industry, employees) VALUES (1, 'ShopEase', 'E-commerce', 50); CREATE TABLE funding (company_id INT, amount INT); INSERT INTO funding (company_id, amount) VALUES (1, 750000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT companies.name, companies.employees, SUM(funding.amount) FROM companies INNER JOIN funding ON companies.id = funding.company_id WHERE companies.industry = 'E-commerce' GROUP BY companies.name, companies.employees ORDER BY SUM(funding.amount) DESC;"
    },
    {
        "instruction": "입력 텍스트: international_visitors 테이블에 다음 데이터를 가진 새로운 기록을 추가하세요: 'Brazil', 'Rio de Janeiro', 5000, '2023-01-01'\n\nDDL statements:\nCREATE TABLE international_visitors (country VARCHAR(255), city VARCHAR(255), visitor_count INT, visit_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO international_visitors (country, city, visitor_count, visit_date) VALUES ('Brazil', 'Rio de Janeiro', 5000, '2023-01-01');"
    },
    {
        "instruction": "입력 텍스트: space_missions' 테이블에서 고유한 우주 임무 이름들을 알파벳 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE space_missions (id INT, mission_name VARCHAR(50)); INSERT INTO space_missions (id, mission_name) VALUES (1, 'Apollo 11'), (2, 'Apollo 13'), (3, 'Artemis I'), (4, 'Artemis II');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT mission_name FROM space_missions ORDER BY mission_name;"
    },
    {
        "instruction": "입력 텍스트: 정책 유형별 총 정책 수를 찾으세요\n\nDDL statements:\nCREATE TABLE Policy (id INT PRIMARY KEY, policy_type VARCHAR(20)); INSERT INTO Policy (id, policy_type) VALUES (1, 'Auto'), (2, 'Home'), (3, 'Life');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_type, COUNT(*) FROM Policy GROUP BY policy_type;"
    },
    {
        "instruction": "입력 텍스트: 베지 버거 카테고리로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menus (menu_id INT, menu_name TEXT, category TEXT, price DECIMAL(5,2)); INSERT INTO menus (menu_id, menu_name, category, price) VALUES (1, 'Classic Burger', 'Beef', 7.99), (2, 'Veggie Burger', 'Vegetarian', 6.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) FROM menus WHERE category = 'Vegetarian';"
    },
    {
        "instruction": "입력 텍스트: 중앙 아메리카 지역에서 예산이 25,000달러 미만인 농업 혁신 프로젝트를 삭제하세요.\n\nDDL statements:\nCREATE TABLE agri_innov (id INT, name VARCHAR(255), region VARCHAR(255), budget FLOAT); INSERT INTO agri_innov (id, name, region, budget) VALUES (1, 'Organic Farming', 'Central America', 30000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM agri_innov WHERE region = 'Central America' AND budget < 25000;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아에 있는 지속 가능한 목적지는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE continents (id INT PRIMARY KEY, name VARCHAR(255));CREATE TABLE countries (id INT PRIMARY KEY, name VARCHAR(255), continent_id INT, FOREIGN KEY (continent_id) REFERENCES continents(id));CREATE TABLE destinations (id INT PRIMARY KEY, name VARCHAR(255), country_id INT, sustainable BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(id) FROM destinations WHERE sustainable = true AND country_id IN (SELECT id FROM countries WHERE continent_id = (SELECT id FROM continents WHERE name = 'Oceania'));"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에서 30년 이상 운영되고 있는 정수 처리 시설은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE plants (plant_id INT, state VARCHAR(20), operational_date DATE); INSERT INTO plants (plant_id, state, operational_date) VALUES (1, 'California', '1991-01-01'), (2, 'California', '2001-01-01'), (3, 'California', '2011-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM plants WHERE state = 'California' AND operational_date < DATE_SUB(CURDATE(), INTERVAL 30 YEAR);"
    },
    {
        "instruction": "입력 텍스트: D005' 약물에 대해 '실패한' 임상 시험은 어떤 것이 있나요?\n\nDDL statements:\nCREATE TABLE clinical_trials (drug_id VARCHAR(10), trial_status VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM clinical_trials WHERE drug_id = 'D005' AND trial_status = 'FAILED';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 스페인어로 출판된 기사 중 가장 많은 조회수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE article_views (article_id INT, views INT, language VARCHAR(100), publish_year INT); INSERT INTO article_views (article_id, views, language, publish_year) VALUES (1, 1000, 'Spanish', 2020); INSERT INTO article_views (article_id, views, language, publish_year) VALUES (2, 1200, 'Spanish', 2020); INSERT INTO article_views (article_id, views, language, publish_year) VALUES (3, 800, 'Spanish', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(views) FROM article_views WHERE language = 'Spanish' AND publish_year = 2020;"
    },
    {
        "instruction": "입력 텍스트: VesselC의 최신 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE vessel_positions(id INT, vessel_id INT, timestamp TIMESTAMP, longitude FLOAT, latitude FLOAT); INSERT INTO vessel_positions VALUES (1, 3, '2022-04-01 12:30:00', 117.1611, 36.6566), (2, 3, '2022-04-01 18:15:00', 117.1611, 36.6566);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel_id, MAX(timestamp) FROM vessel_positions WHERE vessel_id = 3 GROUP BY vessel_id;"
    },
    {
        "instruction": "입력 텍스트: 플레이어 'JohnDoe'가 'Adventure' 카테고리의 VR 게임을 플레이한 시간은 총 몇 시간인가요?\n\nDDL statements:\nCREATE TABLE PlayerSessions (player VARCHAR(50), game VARCHAR(100), category VARCHAR(50), duration FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(duration) FROM PlayerSessions WHERE player = 'JohnDoe' AND category = 'Adventure';"
    },
    {
        "instruction": "입력 텍스트: 각 지구별 학생들의 평균 정신 건강 점수는 무엇이며, 지구 이름 순으로 정렬된 순서대로 나타내세요?\n\nDDL statements:\nCREATE TABLE districts (district_name VARCHAR(255), district_id INT); INSERT INTO districts (district_name, district_id) VALUES ('Downtown', 1), ('Uptown', 2), ('Midtown', 3); CREATE TABLE student_mental_health (student_id INT, district_id INT, mental_health_score INT); INSERT INTO student_mental_health (student_id, district_id, mental_health_score) VALUES (1, 1, 80), (2, 1, 90), (3, 2, 70), (4, 2, 60), (5, 3, 85), (6, 3, 95);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_id, AVG(mental_health_score) as avg_score FROM student_mental_health GROUP BY district_id ORDER BY (SELECT district_name FROM districts WHERE student_mental_health.district_id = districts.district_id);"
    },
    {
        "instruction": "입력 텍스트: APAC 지역에서 지난 분기에 가장 높은 수익을 기록한 온라인 여행사는 어디인가요?\n\nDDL statements:\nCREATE TABLE ota_revenue (id INT, ota_name TEXT, region TEXT, quarter TEXT, revenue FLOAT); INSERT INTO ota_revenue (id, ota_name, region, quarter, revenue) VALUES (1, 'OTA 1', 'APAC', 'Q1 2022', 1200000), (2, 'OTA 2', 'APAC', 'Q1 2022', 1500000), (3, 'OTA 3', 'APAC', 'Q1 2022', 900000), (4, 'OTA 1', 'APAC', 'Q2 2022', 1400000), (5, 'OTA 2', 'APAC', 'Q2 2022', 1600000), (6, 'OTA 3', 'APAC', 'Q2 2022', 1000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ota_name, MAX(revenue) FROM ota_revenue WHERE region = 'APAC' AND quarter IN ('Q1 2022', 'Q2 2022') GROUP BY ota_name;"
    },
    {
        "instruction": "입력 텍스트: 채식 요리의 재료 일일 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE dishes (dish_id INT, dish_name VARCHAR(255), is_vegan BOOLEAN, cost_per_day DECIMAL(5, 2)); INSERT INTO dishes (dish_id, dish_name, is_vegan, cost_per_day) VALUES (1, 'Vegan Tacos', true, 3.50), (2, 'Chickpea Curry', true, 2.75), (3, 'Cheese Quesadilla', false, 2.25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dish_name, cost_per_day FROM dishes WHERE is_vegan = true;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 지난 3년 동안 난민 지원을 제공한 기관 수와 제공된 지원금액의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE refugee_support (support_id INT, ngo_id INT, location VARCHAR(255), support_type VARCHAR(255), support_amount DECIMAL(10,2)); INSERT INTO refugee_support VALUES (1, 1, 'Country A', 'Food', 5000); INSERT INTO refugee_support VALUES (2, 1, 'Country A', 'Housing', 7000); INSERT INTO refugee_support VALUES (3, 2, 'Country B', 'Medical', 10000); INSERT INTO refugee_support VALUES (4, 2, 'Country B', 'Education', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location as country, ngo_id, COUNT(*) as number_of_organizations, SUM(support_amount) as total_support_amount FROM refugee_support WHERE location IN ('Country A', 'Country B') AND support_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) GROUP BY location, ngo_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 특정 광산 지역에서 월별로 발생한 소음 오염 수준(dB)의 변화는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE noise_pollution (pollution_id INT, mine_id INT, date DATE, noise_level INT); INSERT INTO noise_pollution (pollution_id, mine_id, date, noise_level) VALUES (1, 1, '2021-01-01', 80), (2, 1, '2021-02-01', 82), (3, 1, '2021-03-01', 84), (4, 1, '2021-04-01', 86), (5, 1, '2021-05-01', 88), (6, 1, '2021-06-01', 90), (7, 1, '2021-07-01', 92), (8, 1, '2021-08-01', 94), (9, 1, '2021-09-01', 96), (10, 1, '2021-10-01', 98), (11, 1, '2021-11-01', 100), (12, 1, '2021-12-01', 102);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM date) as month, (LEAD(noise_level) OVER (ORDER BY date) - noise_level) as noise_level_change FROM noise_pollution WHERE mine_id = 1 AND date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 직장 안전 사고가 1건 이상 발생한 노조의 이름을 보여주세요.\n\nDDL statements:\nCREATE TABLE incidents (id INT PRIMARY KEY, union_id INT, incident_date DATE); CREATE TABLE unions (id INT PRIMARY KEY, name VARCHAR(255)); INSERT INTO incidents (id, union_id, incident_date) VALUES (1, 1, '2021-09-15'), (2, 1, '2021-10-05'), (3, 2, '2021-08-01'), (4, 3, '2021-09-20'); INSERT INTO unions (id, name) VALUES (1, 'Union A'), (2, 'Union B'), (3, 'Union C');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM unions u WHERE u.id IN (SELECT union_id FROM incidents WHERE incident_date > DATEADD(MONTH, -1, GETDATE()) GROUP BY union_id HAVING COUNT(*) > 1);"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 국가에서 기록된 사이버 보안 사건의 최대 건수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE CybersecurityIncidents (Id INT, Country VARCHAR(50), Month VARCHAR(50), Incidents INT, Year INT); INSERT INTO CybersecurityIncidents (Id, Country, Month, Incidents, Year) VALUES (1, 'USA', 'January', 50, 2020); INSERT INTO CybersecurityIncidents (Id, Country, Month, Incidents, Year) VALUES (2, 'China', 'February', 75, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Incidents), Country FROM CybersecurityIncidents WHERE Year = 2020 GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에서 지난 3년간 보건의료에 할당된 총 예산이며, 할당 날짜 기준으로 오름차순으로 정렬된 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Healthcare (HealthcareID INT, State VARCHAR(255), Type VARCHAR(255), AllocationDate DATE, Budget DECIMAL(10,2)); INSERT INTO Healthcare (HealthcareID, State, Type, AllocationDate, Budget) VALUES (1, 'Texas', 'Hospital', '2020-01-01', 100000.00), (2, 'Texas', 'Clinic', '2018-01-01', 200000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget), AllocationDate FROM Healthcare WHERE State = 'Texas' AND AllocationDate >= DATEADD(year, -3, GETDATE()) GROUP BY AllocationDate ORDER BY AllocationDate ASC;"
    },
    {
        "instruction": "입력 텍스트: 각 변호사별로 청구된 총 시간 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE attorney_billing (attorney_id INT, hours_billed INT, PRIMARY KEY (attorney_id)); CREATE TABLE case_assignments (case_id INT, attorney_id INT, PRIMARY KEY (case_id, attorney_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT attorney_id, SUM(hours_billed) as total_hours_billed FROM attorney_billing JOIN case_assignments ON attorney_billing.attorney_id = case_assignments.attorney_id GROUP BY attorney_id;"
    },
    {
        "instruction": "입력 텍스트: 생산성이 가장 낮은 광산 사이트를 삭제하세요\n\nDDL statements:\nCREATE TABLE mining_sites (site_id INT, site_name VARCHAR(255), productivity FLOAT); INSERT INTO mining_sites (site_id, site_name, productivity) VALUES (1, 'Site A', 90), (2, 'Site B', 85), (3, 'Site C', 95);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM mining_sites WHERE productivity = (SELECT MIN(productivity) FROM mining_sites);"
    },
    {
        "instruction": "입력 텍스트: 어느 야구 팀의 타율이 가장 높은가요?\n\nDDL statements:\nCREATE TABLE Teams (team_name TEXT, batting_average REAL); INSERT INTO Teams (team_name, batting_average) VALUES ('Team A', 0.300), ('Team B', 0.280), ('Team C', 0.290);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name FROM Teams WHERE batting_average = (SELECT MAX(batting_average) FROM Teams);"
    },
    {
        "instruction": "입력 텍스트: 워싱턴주 시애틀 시에 있는 '플래티넘' 인증 등급을 받은 녹색 건물의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_buildings ( id INT PRIMARY KEY, building_name VARCHAR(255), city VARCHAR(255), state VARCHAR(255), certification_level VARCHAR(255) );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM green_buildings WHERE city = 'Seattle' AND state = 'Washington' AND certification_level = 'Platinum';"
    },
    {
        "instruction": "입력 텍스트: 각 주의 농촌 지역에 있는 의사는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE doctors (doctor_id INT, name VARCHAR(50), state VARCHAR(20), location VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM doctors WHERE location = 'Rural' GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2018년 일본에서 가장 높고 낮은 피드백 점수를 받은 정책 분야를 확인하세요.\n\nDDL statements:\nCREATE SCHEMA jp_schema;CREATE TABLE jp_schema.policy_areas (area_id INT, area_name VARCHAR(20), feedback_score INT);INSERT INTO jp_schema.policy_areas (area_id, area_name, feedback_score) VALUES (1, 'Healthcare', 80), (2, 'Education', 90), (3, 'Transportation', 70), (4, 'Housing', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT area_name, feedback_score FROM jp_schema.policy_areas WHERE feedback_score = (SELECT MAX(feedback_score) FROM jp_schema.policy_areas);SELECT area_name, feedback_score FROM jp_schema.policy_areas WHERE feedback_score = (SELECT MIN(feedback_score) FROM jp_schema.policy_areas);"
    },
    {
        "instruction": "입력 텍스트: 영국에서 약물 X의 시장 점유율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE market_share (drug VARCHAR(255), country VARCHAR(255), share FLOAT); INSERT INTO market_share (drug, country, share) VALUES ('Drug X', 'United Kingdom', 0.35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug, share FROM market_share WHERE country = 'United Kingdom' AND drug = 'Drug X';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 특정 제품에 대해 접수된 불만 사항은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE product_complaints (complaint_id INT, product_id INT, complaint_date DATE); CREATE TABLE product_catalog (product_id INT, product_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM product_complaints JOIN product_catalog ON product_complaints.product_id = product_catalog.product_id WHERE product_name = 'Example Product' AND complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 각 도시에서 전시된 작품 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Exhibitions (exhibition_id INT, city VARCHAR(50), artwork_name VARCHAR(50)); INSERT INTO Exhibitions (exhibition_id, city, artwork_name) VALUES (1, 'Paris', 'The Weeping Woman'); INSERT INTO Exhibitions (exhibition_id, city, artwork_name) VALUES (2, 'London', 'Water Lilies'); INSERT INTO Exhibitions (exhibition_id, city, artwork_name) VALUES (3, 'New York', 'The Dance'); INSERT INTO Exhibitions (exhibition_id, city, artwork_name) VALUES (4, 'London', 'The Weeping Woman'); INSERT INTO Exhibitions (exhibition_id, city, artwork_name) VALUES (5, 'Paris', 'Water Lilies');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(artwork_name) FROM Exhibitions GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: SecurityIncidents 테이블에서 각 카테고리별로 가장 최근의 사건 날짜를 보여주세요. '2022'년도로 필터링합니다.\n\nDDL statements:\nCREATE TABLE SecurityIncidents (id INT, incident_category VARCHAR(255), incident_date DATE); INSERT INTO SecurityIncidents (id, incident_category, incident_date) VALUES (1, 'Malware', '2022-01-15'), (2, 'Phishing', '2022-02-10'), (3, 'Network Intrusion', '2022-03-01'), (4, 'Unauthorized Access', '2022-03-15'), (5, 'Data Exfiltration', '2021-12-20'), (6, 'Insider Threat', '2022-01-05'), (7, 'Denial of Service', '2022-02-25'), (8, 'Social Engineering', '2021-11-18');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT incident_category, incident_date FROM (SELECT incident_category, incident_date, ROW_NUMBER() OVER (PARTITION BY incident_category ORDER BY incident_date DESC) AS rank FROM SecurityIncidents WHERE incident_date >= '2022-01-01' AND incident_date <= '2022-12-31') AS filtered_incidents WHERE rank = 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 국가별 우라늄 총 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE yearly_production (id INT, country VARCHAR(255), mineral VARCHAR(255), year INT, quantity INT); INSERT INTO yearly_production (id, country, mineral, year, quantity) VALUES (1, 'Canada', 'Uranium', 2018, 500), (2, 'Russia', 'Uranium', 2018, 700), (3, 'Kazakhstan', 'Uranium', 2018, 1200), (4, 'Canada', 'Uranium', 2019, 550), (5, 'Russia', 'Uranium', 2019, 750), (6, 'Kazakhstan', 'Uranium', 2019, 1250); INSERT INTO yearly_production (id, country, mineral, year, quantity) VALUES (7, 'Canada', 'Uranium', 2020, 600), (8, 'Russia', 'Uranium', 2020, 800), (9, 'Kazakhstan', 'Uranium', 2020, 1300), (10, 'Canada', 'Uranium', 2021, 650), (11, 'Russia', 'Uranium', 2021, 850), (12, 'Kazakhstan', 'Uranium', 2021, 1350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(quantity) as total_uranium_production FROM yearly_production WHERE mineral = 'Uranium' AND year BETWEEN 2017 AND 2021 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 모든 고객들의 총 자산과 거래에 사용하는 화폐를 나열하세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, currency VARCHAR(10)); INSERT INTO clients (client_id, currency) VALUES (1, 'USD'), (2, 'EUR'); CREATE TABLE assets (asset_id INT, client_id INT, value INT); INSERT INTO assets (asset_id, client_id, value) VALUES (1, 1, 5000), (2, 1, 7000), (3, 2, 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT clients.client_id, SUM(assets.value) AS total_assets, clients.currency FROM clients INNER JOIN assets ON clients.client_id = assets.client_id GROUP BY clients.client_id, clients.currency;"
    },
    {
        "instruction": "입력 텍스트: SpaceRadar 테이블에서 각 국가별로 발사한 위성의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE SpaceRadar (id INT, country VARCHAR(50), year INT, satellites INT); INSERT INTO SpaceRadar (id, country, year, satellites) VALUES (1, 'USA', 2000, 10), (2, 'China', 2005, 8), (3, 'Russia', 1995, 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(satellites) AS total_satellites FROM SpaceRadar GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기에 활성화된 순환 경제 이니셔티브는 몇 개였나요?\n\nDDL statements:\nCREATE TABLE circular_economy_initiatives (initiative TEXT, region TEXT, start_date DATE, end_date DATE); INSERT INTO circular_economy_initiatives (initiative, region, start_date, end_date) VALUES ('reuse_program', 'AUS', '2021-07-01', '2022-06-30'), ('recycling', 'EU', '2021-04-01', '2023-03-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM circular_economy_initiatives WHERE start_date <= '2021-07-01' AND end_date >= '2021-09-30' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 뉴저지에 있는 'Health' 보험 종류를 가진 보험 가입자의 최소 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE policyholders (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), policy_type VARCHAR(10), state VARCHAR(20)); INSERT INTO policyholders (id, name, age, gender, policy_type, state) VALUES (9, 'Alex Smith', 35, 'Male', 'Health', 'New Jersey');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(age) FROM policyholders WHERE state = 'New Jersey' AND policy_type = 'Health';"
    },
    {
        "instruction": "입력 텍스트: 각 제품 카테고리별 수익을 보여주세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(255), category VARCHAR(255)); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Apples', 'Fruit'), (2, 'Bananas', 'Fruit'), (3, 'Milk', 'Dairy'); CREATE TABLE sales (sale_id INT, product_id INT, revenue INT); INSERT INTO sales (sale_id, product_id, revenue) VALUES (1, 1, 100), (2, 2, 50), (3, 3, 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.category, SUM(sales.revenue) FROM sales INNER JOIN products ON sales.product_id = products.product_id GROUP BY products.category;"
    },
    {
        "instruction": "입력 텍스트: 독일에 위치한 광산 작업으로 채굴된 석탄의 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mining_operation (id INT, name VARCHAR(50), location VARCHAR(50), resource VARCHAR(50), quantity INT); INSERT INTO mining_operation (id, name, location, resource, quantity) VALUES (1, 'Operation A', 'Germany', 'Coal', 1000); INSERT INTO mining_operation (id, name, location, resource, quantity) VALUES (2, 'Operation B', 'USA', 'Silver', 2000); INSERT INTO mining_operation (id, name, location, resource, quantity) VALUES (3, 'Operation C', 'Canada', 'Gold', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM mining_operation WHERE location = 'Germany' AND resource = 'Coal';"
    },
    {
        "instruction": "입력 텍스트: 사회적 영향 점수가 70보다 크고 환경적 영향 점수가 70보다 작은 영향 투자에 대한 투자명과 투자 금액은 무엇인가요?\n\nDDL statements:\nCREATE TABLE impact_investments (id INT, investment_name VARCHAR(50), strategy VARCHAR(50), investment_amount FLOAT, sector VARCHAR(50), social_impact_score INT, environmental_impact_score INT); INSERT INTO impact_investments (id, investment_name, strategy, investment_amount, sector, social_impact_score, environmental_impact_score) VALUES (17, 'Community Development Financial Institution', 'Community Development', 14000000.00, 'Financials', 75, 65), (18, 'Sustainable Infrastructure Fund', 'Sustainable Infrastructure', 20000000.00, 'Financials', 80, 60), (19, 'Affordable Housing Developer', 'Affordable Housing', 16000000.00, 'Real Estate', 85, 55);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT investment_name, investment_amount FROM impact_investments WHERE social_impact_score > 70 AND environmental_impact_score < 70;"
    },
    {
        "instruction": "입력 텍스트: 5000달러 이상 비용이 드는 모든 치료법을 찾으세요.\n\nDDL statements:\nCREATE TABLE treatments (treatment VARCHAR(50), cost INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT treatment FROM treatments WHERE cost > 5000;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 주제별로 진행된 교육은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE trainings (id INT, date DATE, topic VARCHAR(255)); INSERT INTO trainings (id, date, topic) VALUES (1, '2022-01-01', 'Diversity'), (2, '2022-02-15', 'Leadership'), (3, '2022-03-30', 'Diversity');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT topic, COUNT(*) as count FROM trainings WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY topic;"
    },
    {
        "instruction": "입력 텍스트: 각 도시에서 발생한 긴급 사건의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE cities (city_id INT, name VARCHAR(255)); INSERT INTO cities (city_id, name) VALUES (1, 'Los Angeles'), (2, 'Chicago'), (3, 'Atlanta'); CREATE TABLE emergency_incidents (incident_id INT, city_id INT, type VARCHAR(255), date DATE); INSERT INTO emergency_incidents (incident_id, city_id, type, date) VALUES (1, 1, 'Fire', '2022-01-01'), (2, 2, 'Medical', '2022-01-02'), (3, 3, 'Fire', '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city_id, name, COUNT(*) as total_incidents FROM emergency_incidents ei JOIN cities c ON ei.city_id = c.city_id GROUP BY city_id, name;"
    },
    {
        "instruction": "입력 텍스트: 공정 무역 인증을 받은 공장이 가장 많은 상위 5개 국가를 찾으세요.\n\nDDL statements:\nCREATE TABLE FairTradeFactories(factory_id INT, country VARCHAR(255));CREATE VIEW FairTradeFactoryCountries AS SELECT country, COUNT(*) as count FROM FairTradeFactories GROUP BY country;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, count FROM FairTradeFactoryCountries ORDER BY count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: offender_demographics' 테이블에서 인종 정보가 기록되지 않은 범죄자의 인종 데이터를 업데이트하세요?\n\nDDL statements:\nCREATE TABLE criminal_database (offender_id INT, offense VARCHAR(255)); CREATE TABLE offender_demographics (offender_id INT, ethnicity VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE offender_demographics SET ethnicity = 'Not Specified' FROM criminal_database WHERE offender_demographics.offender_id IS NULL AND criminal_database.offender_id = offender_demographics.offender_id;"
    },
    {
        "instruction": "입력 텍스트: 동남부 지역의 프로젝트 중 최대 비용과 그 프로젝트의 ID는 무엇인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, region VARCHAR(20), cost FLOAT); INSERT INTO projects (id, region, cost) VALUES (1, 'Northeast', 2000000), (2, 'Southeast', 3000000), (3, 'Midwest', 2500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT id, cost FROM projects WHERE region = 'Southeast' AND cost = (SELECT MAX(cost) FROM projects WHERE region = 'Southeast');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 창고에서 텍사스로 배송된 패키지의 총 무게는 얼마인가요?\n\nDDL statements:\nCREATE TABLE warehouses (id INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO warehouses (id, city, state) VALUES (1, 'New York', 'NY'); CREATE TABLE packages (id INT, warehouse_id INT, weight INT, destination_state VARCHAR(50)); INSERT INTO packages (id, warehouse_id, weight, destination_state) VALUES (1, 1, 50, 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(weight) FROM packages JOIN warehouses ON packages.warehouse_id = warehouses.id WHERE warehouses.state = 'New York' AND packages.destination_state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 경영대학의 교수진 중에서 어떠한 보조금도 수여받지 않은 교수들을 찾으세요.\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50)); CREATE TABLE grants (id INT, faculty_id INT, amount INT); INSERT INTO faculty VALUES (1, 'Gabriel', 'Business'), (2, 'Heidi', 'Business'), (3, 'Ivan', 'Business'); INSERT INTO grants VALUES (1, 1, 5000), (2, 1, 7000), (3, 2, 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT faculty.id, faculty.name FROM faculty LEFT JOIN grants ON faculty.id = grants.faculty_id WHERE grants.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 500대 이상 제작된 모든 항공기의 총 비행 시간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE aircraft_and_flight_hours (model VARCHAR(255), manufacturer VARCHAR(255), units_manufactured INT, hours_flown INT); INSERT INTO aircraft_and_flight_hours (model, manufacturer, units_manufactured, hours_flown) VALUES ('737', 'Boeing', 10000, 250000), ('747', 'Boeing', 1500, 120000), ('777', 'Boeing', 1500, 150000), ('320', 'Airbus', 8000, 200000), ('A330', 'Airbus', 1500, 180000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(hours_flown) FROM aircraft_and_flight_hours WHERE units_manufactured > 500;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 가장 많은 봉사 시간을 기록한 상위 5개 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID int, Name varchar(100), Program varchar(50), Hours int, VolunteerDate date); INSERT INTO Volunteers (VolunteerID, Name, Program, Hours, VolunteerDate) VALUES (1, 'Hana Nguyen', 'Food Bank', 25); INSERT INTO Volunteers (VolunteerID, Name, Program, Hours, VolunteerDate) VALUES (2, 'Ibrahim Ali', 'Education Support', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Program, SUM(Hours) as TotalHours FROM Volunteers WHERE YEAR(VolunteerDate) = 2022 GROUP BY Program ORDER BY TotalHours DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 AI 윤리 정책을 업데이트한 조직은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE ai_ethics_policies (org_name VARCHAR(100), last_update DATE); INSERT INTO ai_ethics_policies (org_name, last_update) VALUES ('TechCo', '2021-03-01'), ('EthicalAI', '2022-07-15'), ('FairTech', '2021-12-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(org_name) FROM ai_ethics_policies WHERE last_update >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 우리 뉴스 기사에서 가장 많이 대표된 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(50), country VARCHAR(20)); INSERT INTO articles (id, title, country) VALUES (1, 'Article One', 'USA'), (2, 'Article Two', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS count FROM articles GROUP BY country ORDER BY count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 오레곤의 농촌 지역에서 월별 및 연령 그룹별로 나눈 병원 방문 횟수는 총 몇 회인가요?\n\nDDL statements:\nCREATE TABLE hospital_visits (id INT, visit_date DATE, patient_age INT, location VARCHAR(50)); INSERT INTO hospital_visits (id, visit_date, patient_age, location) VALUES (1, '2021-01-01', 35, 'Oregon');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_PART('month', hospital_visits.visit_date) AS month, CASE WHEN hospital_visits.patient_age < 18 THEN '0-17' WHEN hospital_visits.patient_age BETWEEN 18 AND 64 THEN '18-64' ELSE '65+' END AS age_group, COUNT(*) FROM hospital_visits WHERE hospital_visits.location LIKE '%rural%' GROUP BY DATE_PART('month', hospital_visits.visit_date), CASE WHEN hospital_visits.patient_age < 18 THEN '0-17' WHEN hospital_visits.patient_age BETWEEN 18 AND 64 THEN '18-64' ELSE '65+' END;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 지속 가능한 방식으로 제조된 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE country_sustainable_chains (country VARCHAR(255), product_id INT, quantity INT, sustainable_practices BOOLEAN, FOREIGN KEY (product_id) REFERENCES suppliers(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(quantity) FROM country_sustainable_chains WHERE sustainable_practices = TRUE GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 부서에서 진행된 교육 수를 내림차순으로 얼마나 되나요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID int, FirstName varchar(50), LastName varchar(50), Department varchar(50)); CREATE TABLE Trainings (TrainingID int, EmployeeID int, TrainingTitle varchar(100), TrainingDate date, Department varchar(50)); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department) VALUES (1, 'John', 'Doe', 'IT'); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department) VALUES (2, 'Jane', 'Smith', 'HR'); INSERT INTO Trainings (TrainingID, EmployeeID, TrainingTitle, TrainingDate, Department) VALUES (1, 1, 'SQL Fundamentals', '2020-01-01', 'IT'); INSERT INTO Trainings (TrainingID, EmployeeID, TrainingTitle, TrainingDate, Department) VALUES (2, 1, 'Intermediate SQL', '2020-02-01', 'IT'); INSERT INTO Trainings (TrainingID, EmployeeID, TrainingTitle, TrainingDate, Department) VALUES (3, 2, 'Diversity and Inclusion', '2020-01-01', 'HR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, COUNT(*) as TrainingCount FROM Trainings GROUP BY Department ORDER BY TrainingCount DESC;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 각 연령대별 총 운동 시간을 분 단위로 얼마인가요?\n\nDDL statements:\nCREATE TABLE membership (member_id INT, membership_type VARCHAR(20), age INT); INSERT INTO membership (member_id, membership_type, age) VALUES (1, 'Platinum', 30), (2, 'Gold', 45), (3, 'Platinum', 25); CREATE TABLE workout_data (member_id INT, duration INT, timestamp TIMESTAMP); INSERT INTO workout_data (member_id, duration, timestamp) VALUES (1, 180, '2022-02-01 10:00:00'), (1, 240, '2022-02-01 11:00:00'), (2, 300, '2022-02-01 10:00:00'), (2, 360, '2022-02-01 11:00:00'), (3, 90, '2022-02-01 10:00:00'), (3, 120, '2022-02-01 11:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FLOOR(age/10)*10 as age_group, SUM(duration)/60 as total_minutes FROM workout_data w JOIN membership m ON w.member_id = m.member_id WHERE timestamp BETWEEN '2022-02-01 00:00:00' AND '2022-02-28 23:59:59' GROUP BY age_group;"
    },
    {
        "instruction": "입력 텍스트: 각 고객의 계좌에 대한 평균 잔액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE accounts (client_id INT, account_number INT, balance DECIMAL(10,2)); INSERT INTO accounts (client_id, account_number, balance) VALUES (1, 12345, 20000.00); INSERT INTO accounts (client_id, account_number, balance) VALUES (1, 67890, 15000.00); INSERT INTO accounts (client_id, account_number, balance) VALUES (2, 11121, 30000.00); INSERT INTO accounts (client_id, account_number, balance) VALUES (3, 22232, 5000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT client_id, AVG(balance) as avg_balance FROM accounts GROUP BY client_id;"
    },
    {
        "instruction": "입력 텍스트: 야외 이벤트에 가장 많이 참석하는 연령대는 무엇인가요?\n\nDDL statements:\nCREATE TABLE attendee_demographics (attendee_id INT, age_group VARCHAR(20)); CREATE TABLE event_types (event_type_id INT, event_type VARCHAR(20)); CREATE TABLE event_attendance (attendee_id INT, event_id INT, event_type_id INT); INSERT INTO attendee_demographics (attendee_id, age_group) VALUES (1, '5-17'), (2, '18-34'), (3, '35-54'), (4, '55+'); INSERT INTO event_types (event_type_id, event_type) VALUES (1, 'Outdoor Event'), (2, 'Indoor Event'); INSERT INTO event_attendance (attendee_id, event_id, event_type_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2), (4, 4, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ad.age_group, COUNT(*) AS event_count FROM attendee_demographics ad INNER JOIN event_attendance ea ON ad.attendee_id = ea.attendee_id INNER JOIN event_types et ON ea.event_type_id = et.event_type_id WHERE et.event_type = 'Outdoor Event' GROUP BY ad.age_group ORDER BY event_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 승객별로 징수된 총 요금을 계산하세요\n\nDDL statements:\nCREATE TABLE passengers (passenger_id INT, passenger_name VARCHAR(20)); CREATE TABLE passenger_trips (trip_id INT, passenger_id INT, route_id INT, fare AMOUNT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT passengers.passenger_name, SUM(passenger_trips.fare) FROM passengers JOIN passenger_trips ON passengers.passenger_id = passenger_trips.passenger_id GROUP BY passengers.passenger_id, passengers.passenger_name;"
    },
    {
        "instruction": "입력 텍스트: 2022년 하반기 프로그램별 평균 자원봉사자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, program_id INT, volunteer_date DATE); INSERT INTO Volunteers (id, program_id, volunteer_date) VALUES (1, 601, '2022-07-10'); INSERT INTO Volunteers (id, program_id, volunteer_date) VALUES (2, 602, '2022-10-15'); INSERT INTO Volunteers (id, program_id, volunteer_date) VALUES (3, 601, '2022-09-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(number_of_volunteers) FROM (SELECT program_id, COUNT(DISTINCT user_id) as number_of_volunteers FROM Volunteers WHERE volunteer_date >= '2022-07-01' AND volunteer_date < '2023-01-01' GROUP BY program_id) as subquery;"
    },
    {
        "instruction": "입력 텍스트: 아시아의 토착 음식 전문가는 누구인가요?\n\nDDL statements:\nCREATE TABLE Experts (id INT, name VARCHAR(50), location VARCHAR(50), expertise VARCHAR(50)); INSERT INTO Experts (id, name, location, expertise) VALUES (1, 'Grace Lee', 'Asia', 'Indigenous Food Expert');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Experts WHERE location = 'Asia' AND expertise = 'Indigenous Food Expert';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 적용되는 규제 프레임워크의 총 개수는 얼마이며, 해당 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE RegulatoryFrameworksByCountry (FrameworkCountry VARCHAR(50), FrameworkCount INT); INSERT INTO RegulatoryFrameworksByCountry (FrameworkCountry, FrameworkCount) VALUES ('Brazil', 1), ('India', 2), ('China', 3); ALTER TABLE RegulatoryFrameworksByCountry ADD COLUMN FrameworkCountry VARCHAR(50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FrameworkCountry, FrameworkCount FROM RegulatoryFrameworksByCountry;"
    },
    {
        "instruction": "입력 텍스트: 남미에서 성공한 경제 다양화 노력은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE economic_diversification (id INT, effort TEXT, region TEXT, success INT); INSERT INTO economic_diversification (id, effort, region, success) VALUES (1, 'Effort A', 'Asia', 1), (2, 'Effort B', 'Africa', 0), (3, 'Effort C', 'South America', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM economic_diversification WHERE region = 'South America' AND success = 1;"
    },
    {
        "instruction": "입력 텍스트: 마케팅 부서에서 지난 1년 동안 승진한 직원은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE EmployeePromotions (PromotionID INT, EmployeeID INT, Position VARCHAR(50), Department VARCHAR(50), PromotionDate DATE); CREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), HireDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT EmployeeID) as TotalPromoted FROM EmployeePromotions INNER JOIN Employees ON EmployeePromotions.EmployeeID = Employees.EmployeeID WHERE Department = 'Marketing' AND PromotionDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);"
    },
    {
        "instruction": "입력 텍스트: animal_population_status' 테이블에 있는 동물들의 총 수를 보전 상태별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE animal_population_status (id INT, animal_name VARCHAR(50), population INT, conservation_status VARCHAR(50)); INSERT INTO animal_population_status (id, animal_name, population, conservation_status) VALUES (1, 'Tiger', 2500, 'Endangered'), (2, 'Elephant', 5000, 'Vulnerable'), (3, 'Lion', 3000, 'Vulnerable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT conservation_status, SUM(population) FROM animal_population_status GROUP BY conservation_status;"
    },
    {
        "instruction": "입력 텍스트: 2021년 이동 장애가 있는 학생들을 위한 숙박 시설의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE accommodations (id INT, student_id INT, accommodation_type VARCHAR(50), cost FLOAT, accommodation_date DATE); INSERT INTO accommodations (id, student_id, accommodation_type, cost, accommodation_date) VALUES (1, 2, 'Sign Language Interpreter', 50.00, '2021-01-01'), (2, 3, 'Assistive Listening Devices', 300.00, '2021-04-01'), (3, 9, 'Wheelchair', 100.00, '2021-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM accommodations WHERE YEAR(accommodation_date) = 2021 AND EXISTS (SELECT * FROM students WHERE students.id = accommodations.student_id AND students.disability_type = 'Mobility Impairment');"
    },
    {
        "instruction": "입력 텍스트: 최근 5년간 캐나다에서 생산된 네오디뮴의 평균 시장 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE neodymium_prices (year INT, country TEXT, price FLOAT); INSERT INTO neodymium_prices (year, country, price) VALUES (2017, 'Canada', 95.5), (2018, 'Canada', 98.2), (2019, 'Canada', 102.3), (2020, 'Canada', 115.0), (2021, 'Canada', 122.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM neodymium_prices WHERE country = 'Canada' AND year >= 2017 AND year <= 2021;"
    },
    {
        "instruction": "입력 텍스트: 2020 올림픽에서 각 나라가 획득한 금메달은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE olympics (athlete_id INT, country VARCHAR(255), medal VARCHAR(255)); INSERT INTO olympics (athlete_id, country, medal) VALUES (1, 'USA', 'Gold'), (2, 'USA', 'Silver'), (3, 'China', 'Gold'), (4, 'China', 'Bronze');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM olympics WHERE medal = 'Gold' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: platinum_buildings' 뷰의 모든 레코드를 보여주세요.\n\nDDL statements:\nCREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size_sqft INT, certification_level VARCHAR(20)); CREATE VIEW platinum_buildings AS SELECT * FROM green_buildings WHERE certification_level = 'Platinum';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM platinum_buildings;"
    },
    {
        "instruction": "입력 텍스트: 사우스 하이' 학교에서 평생교육 과정을 완료한 학생의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE students_lifelong_learning (student_id INT, school_id INT, completed_course INT); INSERT INTO students_lifelong_learning VALUES (1, 1, 1); INSERT INTO students_lifelong_learning VALUES (2, 1, 0); INSERT INTO students_lifelong_learning VALUES (3, 2, 1); INSERT INTO students_lifelong_learning VALUES (4, 2, 1); CREATE TABLE school_roster (student_id INT, school_id INT, school_name VARCHAR(255)); INSERT INTO school_roster VALUES (1, 1, 'South High'); INSERT INTO school_roster VALUES (2, 1, 'South High'); INSERT INTO school_roster VALUES (3, 2, 'North Middle'); INSERT INTO school_roster VALUES (4, 2, 'North Middle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.school_name, 100.0 * SUM(CASE WHEN sl.completed_course = 1 THEN 1 ELSE 0 END) / COUNT(sr.student_id) AS completion_percentage FROM school_roster sr INNER JOIN students_lifelong_learning sl ON sr.student_id = sl.student_id INNER JOIN schools s ON sr.school_id = s.school_id WHERE s.school_name = 'South High' GROUP BY s.school_name;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이전에 모든 플랫폼에서 발매된 노래의 총 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE platformG (song_year INT); CREATE TABLE platformH (song_year INT); CREATE TABLE platformI (song_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(song_year) FROM platformG WHERE song_year < 2015 UNION ALL SELECT SUM(song_year) FROM platformH WHERE song_year < 2015 UNION ALL SELECT SUM(song_year) FROM platformI WHERE song_year < 2015;"
    },
    {
        "instruction": "입력 텍스트: SpaceX가 발사한 위성 중 가장 이른 발사 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, name TEXT, country TEXT, launch_date DATE); INSERT INTO satellites (id, name, country, launch_date) VALUES (1, 'Starlink 1', 'USA', '2018-11-19'), (2, 'Starlink 2', 'USA', '2018-11-24');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(launch_date) FROM satellites WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 유형별로 나눈 디지털 격차 해소 프로그램의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE digital_divide_initiatives (initiative_id INT, region VARCHAR(20), type VARCHAR(20)); INSERT INTO digital_divide_initiatives (initiative_id, region, type) VALUES (1, 'Europe', 'education'), (2, 'Europe', 'infrastructure'), (3, 'Europe', 'policy'), (4, 'North America', 'policy'), (5, 'Asia', 'education');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) as frequency FROM digital_divide_initiatives WHERE region = 'Europe' GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 배수량이 4000톤에서 6000톤 사이인 선박의 평균 연료 소비량을 계산하세요.\n\nDDL statements:\nCREATE TABLE Vessels (Id INT, Name VARCHAR(50), Displacement FLOAT, FuelConsumption FLOAT); INSERT INTO Vessels (Id, Name, Displacement, FuelConsumption) VALUES (1, 'Vessel1', 5100, 800), (2, 'Vessel2', 4300, 650), (3, 'Vessel3', 6500, 1100), (4, 'Vessel4', 4800, 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(FuelConsumption) FROM Vessels WHERE Displacement BETWEEN 4000 AND 6000;"
    },
    {
        "instruction": "입력 텍스트: 아메리카에서 발급된 모든 지속 가능한 관광 인증을 나열합니다.\n\nDDL statements:\nCREATE TABLE certifications (certification_id INT, name TEXT, region TEXT, issue_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM certifications WHERE region = 'Americas';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 연도별 전기차 도입률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE electric_vehicle_stats (country VARCHAR(50), adoption_rate DECIMAL(3,1), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, AVG(adoption_rate) FROM electric_vehicle_stats WHERE country = 'United States' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에는 공공 도서관이 몇 개 있습니까?\n\nDDL statements:\nCREATE TABLE states (id INT, name VARCHAR(50)); INSERT INTO states (id, name) VALUES (1, 'New York'), (2, 'California'); CREATE TABLE libraries (id INT, name VARCHAR(50), state_id INT); INSERT INTO libraries (id, name, state_id) VALUES (1, 'Library A', 1), (2, 'Library B', 1), (3, 'Library C', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM libraries WHERE state_id = (SELECT id FROM states WHERE name = 'New York');"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 재생 에너지 프로젝트의 총 설치 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE renewable_energy_projects (country VARCHAR(50), project_name VARCHAR(100), capacity INT, technology VARCHAR(50)); INSERT INTO renewable_energy_projects (country, project_name, capacity, technology) VALUES ('United States', 'Solar Wind Farm', 300, 'Solar');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(capacity) as total_capacity FROM renewable_energy_projects GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 바로크 운동의 한 예술가에 대한 정보를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, Name VARCHAR(50), BirthDate DATE, DeathDate DATE, Movement VARCHAR(50)); INSERT INTO Artists (ArtistID, Name, BirthDate, DeathDate, Movement) VALUES (1, 'Peter Paul Rubens', '1577-06-28', '1640-05-30', 'Baroque');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Artists SET BirthDate = '1577-06-29' WHERE Name = 'Peter Paul Rubens';"
    },
    {
        "instruction": "입력 텍스트: 영국과 아일랜드에서 진행된 가상 투어로 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Virtual_Tour_Revenue (tour_id INT, tour_name VARCHAR(50), country VARCHAR(50), revenue FLOAT); INSERT INTO Virtual_Tour_Revenue (tour_id, tour_name, country, revenue) VALUES (1, 'London Virtual Tour', 'UK', 6000), (2, 'Dublin Virtual Tour', 'Ireland', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM Virtual_Tour_Revenue WHERE country IN ('UK', 'Ireland');"
    },
    {
        "instruction": "입력 텍스트: 2019년 브라질에서 오픈 데이터 이니셔티브에 참여한 사람은 누구인가요?\n\nDDL statements:\nCREATE TABLE OpenDataInitiatives (id INT, participant_name VARCHAR(50), country VARCHAR(50), participation_date DATE, organization_type VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT participant_name FROM OpenDataInitiatives WHERE country = 'Brazil' AND YEAR(participation_date) = 2019;"
    },
    {
        "instruction": "입력 텍스트: 각 광산의 직원 수를 직원 수 내림차순으로 순위를 매겨 보여주세요.\n\nDDL statements:\nCREATE TABLE mine_workforce (mine_id INT, mine_name TEXT, location TEXT, num_employees INT); INSERT INTO mine_workforce (mine_id, mine_name, location, num_employees) VALUES (1, 'Emerald Enterprise', 'Wyoming, USA', 500), (2, 'Ruby Republic', 'Montana, USA', 450), (3, 'Sapphire Syndicate', 'Idaho, USA', 400), (4, 'Garnet Group', 'Utah, USA', 350), (5, 'Topaz Trust', 'Nevada, USA', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mine_name, num_employees, ROW_NUMBER() OVER (ORDER BY num_employees DESC) as rank FROM mine_workforce;"
    },
    {
        "instruction": "입력 텍스트: 비바이너리로 신분을 밝힌 직원의 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), Department VARCHAR(20), Salary FLOAT); INSERT INTO Employees (EmployeeID, Gender, Department, Salary) VALUES (1, 'Male', 'Marketing', 70000), (2, 'Female', 'Marketing', 75000), (3, 'Male', 'IT', 80000), (4, 'Female', 'IT', 85000), (5, 'Non-binary', 'HR', 90000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Employees WHERE Gender = 'Non-binary';"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 교육 분야에 기부된 총 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donations (id INT, donation_date DATE, donor_id INT, sector VARCHAR(255), amount DECIMAL(10,2)); INSERT INTO donations (id, donation_date, donor_id, sector, amount) VALUES (1, '2021-01-01', 1, 'Environmental', 500), (2, '2021-02-01', 1, 'Health', 750), (3, '2021-03-01', 2, 'Environmental', 1000), (4, '2021-04-01', 2, 'Education', 1250), (5, '2021-05-01', 3, 'Health', 1500), (6, '2021-06-01', 3, 'Education', 1750), (7, '2022-01-01', 4, 'Education', 250), (8, '2022-02-01', 4, 'Health', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector, SUM(amount) as total_donated FROM donations WHERE sector = 'Education' AND donation_date >= DATE_SUB(NOW(), INTERVAL 12 MONTH) GROUP BY sector;"
    },
    {
        "instruction": "입력 텍스트: 심해 생물 종류가 가장 많은 국가를 확인하세요?\n\nDDL statements:\nCREATE TABLE countries (id INT, name TEXT); CREATE TABLE deep_sea_species (id INT, species TEXT, country_id INT); INSERT INTO countries (id, name) VALUES (1, 'Australia'), (2, 'Indonesia'), (3, 'Philippines'); INSERT INTO deep_sea_species (id, species, country_id) VALUES (1, 'Anglerfish', 1), (2, 'Goblin Shark', 2), (3, 'Yeti Crab', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT countries.name, COUNT(deep_sea_species.id) FROM countries INNER JOIN deep_sea_species ON countries.id = deep_sea_species.country_id GROUP BY countries.name ORDER BY COUNT(deep_sea_species.id) DESC;"
    },
    {
        "instruction": "입력 텍스트: 플랜트 B의 각 화학물질에 대한 화학적 구성과 안전 규칙은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Chemical_Composition (Plant_Name VARCHAR(255), Chemical_Name VARCHAR(255), Chemical_Composition VARCHAR(255)); CREATE TABLE Plant_Safety_Protocols (Plant_Name VARCHAR(255), Chemical_Type VARCHAR(255), Safety_Protocol VARCHAR(255)); INSERT INTO Chemical_Composition (Plant_Name, Chemical_Name, Chemical_Composition) VALUES ('Plant B', 'Chemical A', 'H2O, NaCl'), ('Plant B', 'Chemical B', 'CO2, H2'); INSERT INTO Plant_Safety_Protocols (Plant_Name, Chemical_Type, Safety_Protocol) VALUES ('Plant B', 'Aqueous', 'Use caution when handling, as may cause irritation.');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Chemical_Composition, Safety_Protocol FROM Chemical_Composition, Plant_Safety_Protocols WHERE Chemical_Composition.Plant_Name = Plant_Safety_Protocols.Plant_Name;"
    },
    {
        "instruction": "입력 텍스트: 기술 접근이 제한된 사람은 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE technology_access (id INT, person_name TEXT, has_access BOOLEAN, region TEXT); INSERT INTO technology_access (id, person_name, has_access, region) VALUES (1, 'John Doe', FALSE, 'Asia'), (2, 'Jane Smith', TRUE, 'North America'), (3, 'Alice Johnson', FALSE, 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as total_limited_access FROM technology_access WHERE has_access = FALSE;"
    },
    {
        "instruction": "입력 텍스트: 비건 제품의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE product_ingredient (product_id INT, is_vegan BOOLEAN, rating FLOAT); INSERT INTO product_ingredient (product_id, is_vegan, rating) VALUES (1, true, 4.5), (2, false, 4.3), (3, false, 4.2), (4, true, 4.7), (5, false, 4.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) as avg_rating FROM product_ingredient WHERE is_vegan = true;"
    },
    {
        "instruction": "입력 텍스트: employees' 테이블에서 'Latinx'로 식별되는 직원들의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE employees (id INT, name VARCHAR(255), gender VARCHAR(255), country VARCHAR(255), salary DECIMAL(10,2), ethnicity VARCHAR(255)); INSERT INTO employees (id, name, gender, country, salary, ethnicity) VALUES (1, 'John Doe', 'Male', 'USA', 50000, 'White'); INSERT INTO employees (id, name, gender, country, salary, ethnicity) VALUES (2, 'Jane Smith', 'Female', 'Canada', 60000, 'White'); INSERT INTO employees (id, name, gender, country, salary, ethnicity) VALUES (3, 'Alice Johnson', 'Female', 'USA', 55000, 'Black'); INSERT INTO employees (id, name, gender, country, salary, ethnicity) VALUES (4, 'Kai Rogers', 'Non-binary', 'UK', 65000, 'Asian'); INSERT INTO employees (id, name, gender, country, salary, ethnicity) VALUES (5, 'Carlos Garcia', 'Male', 'USA', 70000, 'Latinx');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM employees WHERE ethnicity = 'Latinx';"
    },
    {
        "instruction": "입력 텍스트: 직무 카테고리별로 소수 인종 또는 민족 그룹에 속하는 직원의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE EmployeeDemographics (EmployeeID INT, JobCategory VARCHAR(50), RaceEthnicity VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT JobCategory, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM EmployeeDemographics WHERE RaceEthnicity NOT IN ('White', 'Asian')) as Percentage_Underrepresented FROM EmployeeDemographics GROUP BY JobCategory;"
    },
    {
        "instruction": "입력 텍스트: 가장 높은 청구 금액을 가진 상위 3명의 보험 계약자를 가져오세요\n\nDDL statements:\nCREATE TABLE claims (id INT, policyholder_id INT, date DATE, amount FLOAT); INSERT INTO claims (id, policyholder_id, date, amount) VALUES (1, 1, '2021-01-01', 100), (2, 1, '2021-02-01', 200), (3, 2, '2021-03-01', 300), (4, 3, '2021-03-01', 500), (5, 3, '2021-04-01', 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policyholder_id, SUM(amount) as total_claims FROM claims GROUP BY policyholder_id ORDER BY total_claims DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 이글 포드 지역에 있는 ID 5번 우물의 가스 생산량을 보여주세요.\n\nDDL statements:\nCREATE TABLE if not exists wells (well_id int, region varchar(50), production_year int, gas_production int);INSERT INTO wells (well_id, region, production_year, gas_production) VALUES (5, 'Eagle Ford', 2019, 550000), (6, 'Eagle Ford', 2020, 600000), (7, 'Marcellus Shale', 2018, 850000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gas_production FROM wells WHERE well_id = 5 AND region = 'Eagle Ford';"
    },
    {
        "instruction": "입력 텍스트: Location1과 Location2에서 모두 제공되는 메뉴 항목은 무엇인가요?\n\nDDL statements:\nCREATE TABLE menu_items(menu_item VARCHAR(255), location VARCHAR(255)); INSERT INTO menu_items(menu_item, location) VALUES ('Burger', 'Location1'), ('Pizza', 'Location2'), ('Pasta', 'Location1'), ('Salad', 'Location2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT menu_item FROM menu_items WHERE location = 'Location1' INTERSECT SELECT menu_item FROM menu_items WHERE location = 'Location2';"
    },
    {
        "instruction": "입력 텍스트: 2017년 이후 \"남미\"에서 시작된 교육 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE educational_programs (id INT, program_id INT, location VARCHAR(255), launch_date DATE); INSERT INTO educational_programs (id, program_id, location, launch_date) VALUES (1, 7001, 'Colombia', '2019-05-01'); INSERT INTO educational_programs (id, program_id, location, launch_date) VALUES (2, 7002, 'Brazil', '2017-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM educational_programs WHERE location = 'South America' AND YEAR(launch_date) >= 2017;"
    },
    {
        "instruction": "입력 텍스트: e스포츠 이벤트와 RPG 게임을 모두 플레이한 플레이어의 ID와 총 플레이 시간을 나열하세요.\n\nDDL statements:\nCREATE TABLE GameSessions (PlayerID INT, GamePreference VARCHAR(20), HoursPlayed DECIMAL(5,2)); INSERT INTO GameSessions (PlayerID, GamePreference, HoursPlayed) VALUES (1, 'RPG', 20.5), (2, 'FPS', 15.3), (3, 'Strategy', 22.2); CREATE TABLE EsportsEvents (PlayerID INT, EventID INT); INSERT INTO EsportsEvents (PlayerID, EventID) VALUES (1, 101), (2, 102), (3, 103);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT GameSessions.PlayerID, SUM(GameSessions.HoursPlayed) FROM GameSessions INNER JOIN EsportsEvents ON GameSessions.PlayerID = EsportsEvents.PlayerID WHERE GameSessions.GamePreference = 'RPG' GROUP BY GameSessions.PlayerID;"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 치료를 시작한 환자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, start_therapy DATE); INSERT INTO patients (patient_id, start_therapy) VALUES (1, '2022-07-01'); INSERT INTO patients (patient_id, start_therapy) VALUES (2, '2022-10-15'); INSERT INTO patients (patient_id, start_therapy) VALUES (3, '2022-09-20'); INSERT INTO patients (patient_id, start_therapy) VALUES (4, '2022-07-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM patients WHERE QUARTER(start_therapy) = 3 AND YEAR(start_therapy) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 각 기관이 재난 대응을 위해 받은 기부금 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE disaster_response_donations (donor_id INT, organization_id INT, donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO disaster_response_donations (donor_id, organization_id, donation_amount, donation_date) VALUES (1, 101, 500.00, '2020-01-15'), (2, 101, 750.00, '2020-03-27'), (3, 102, 200.00, '2020-02-10'), (4, 103, 1000.00, '2020-05-11');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organization_id, SUM(donation_amount) as total_donations FROM disaster_response_donations WHERE EXTRACT(YEAR FROM donation_date) = 2020 GROUP BY organization_id;"
    },
    {
        "instruction": "입력 텍스트: 아시아 출신 아티스트별로 총 곡 수와 그들의 판매량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Songs (SongID INT, ArtistID INT, SongName VARCHAR(50), Sales INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT A.ArtistName, R.Region, COUNT(DISTINCT S.SongID) as SongCount, SUM(S.Sales) as TotalSales FROM Songs S JOIN Artists A ON S.ArtistID = A.ArtistID JOIN (SELECT ArtistID, Region FROM Artists WHERE Region = 'Asia') R ON A.ArtistID = R.ArtistID GROUP BY A.ArtistName, R.Region;"
    },
    {
        "instruction": "입력 텍스트: \"게이밍\" 카테고리에 있는 각 스마트 계약의 거래 총량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE smart_contracts (contract_id INT, contract_name VARCHAR(255), category VARCHAR(255), developer VARCHAR(255), launch_date TIMESTAMP, total_value_locked DECIMAL(10,2)); CREATE TABLE contract_transactions (transaction_id INT, contract_id INT, transaction_type VARCHAR(255), sender VARCHAR(255), receiver VARCHAR(255), amount DECIMAL(10,2), tx_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.contract_name, SUM(t.amount) as total_volume FROM smart_contracts c JOIN contract_transactions t ON c.contract_id = t.contract_id WHERE c.category = 'Gaming' AND t.transaction_type = 'Transfer' GROUP BY c.contract_name;"
    },
    {
        "instruction": "입력 텍스트: 임상 시험의 이름, 상태 및 참가자 수를 시험 시작 날짜 기준으로 내림차순으로 정렬하여 모두 나열합니다.\n\nDDL statements:\nCREATE TABLE clinical_trials (trial_id INT, trial_name VARCHAR(255), status VARCHAR(255), start_date DATE); INSERT INTO clinical_trials (trial_id, trial_name, status, start_date) VALUES (1, 'TrialA', 'Completed', '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trial_name, status, COUNT(participant_id) as num_participants, start_date FROM clinical_trials ct JOIN trial_participants tp ON ct.trial_id = tp.trial_id GROUP BY trial_name, status, start_date ORDER BY start_date DESC;"
    },
    {
        "instruction": "입력 텍스트: EMA 승인을 받지 않은 약품의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE drugs (drug_id INT, drug_name VARCHAR(50), ema_approval BOOLEAN); INSERT INTO drugs (drug_id, drug_name, ema_approval) VALUES (1, 'DrugA', true), (2, 'DrugB', false), (3, 'DrugC', true)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM drugs WHERE ema_approval = false"
    },
    {
        "instruction": "입력 텍스트: IntelligenceOperations' 테이블에서 '아프리카'에서 수행된 정보 작전은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE IntelligenceOperations (id INT PRIMARY KEY, operation_name VARCHAR(100), location VARCHAR(50), operation_type VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO IntelligenceOperations (id, operation_name, location, operation_type, start_date, end_date) VALUES (1, 'Operation Red Anvil', 'Africa', 'Surveillance', '2021-01-01', '2021-03-31'); INSERT INTO IntelligenceOperations (id, operation_name, location, operation_type, start_date, end_date) VALUES (2, 'Operation Night Hawk', 'Europe', 'Counterintelligence', '2021-04-01', '2021-06-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM IntelligenceOperations WHERE location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 말라리아를 앓고 있는 환자들 중 최소 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Patients (ID INT, Gender VARCHAR(10), Age INT, Disease VARCHAR(20), Country VARCHAR(30), Diagnosis_Date DATE); INSERT INTO Patients (ID, Gender, Age, Disease, Country, Diagnosis_Date) VALUES (1, 'Female', 25, 'Malaria', 'Brazil', '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Age) FROM Patients WHERE Disease = 'Malaria' AND Country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 첫 번째 외계 행성이 발견된 연도는 언제인가요?\n\nDDL statements:\nCREATE TABLE exoplanet_discoveries (id INT, exoplanet VARCHAR(50), discovery_year INT); INSERT INTO exoplanet_discoveries (id, exoplanet, discovery_year) VALUES (1, 'PSR B1257+12 b', 1992); INSERT INTO exoplanet_discoveries (id, exoplanet, discovery_year) VALUES (2, 'HD 209458 b', 1999); INSERT INTO exoplanet_discoveries (id, exoplanet, discovery_year) VALUES (3, '51 Pegasi b', 1995);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(discovery_year) FROM exoplanet_discoveries;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 판매된 유기농 스킨케어 제품의 평균 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE skincare_sales (product_name TEXT, price DECIMAL(5,2), sale_country TEXT); INSERT INTO skincare_sales (product_name, price, sale_country) VALUES ('Organic Day Cream', 35.50, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM skincare_sales WHERE sale_country = 'Canada' AND product_name LIKE '%organic%';"
    },
    {
        "instruction": "입력 텍스트: \"Georgia\"의 농촌 지역에 있는 병상 대비 의료 직원 비율이 1보다 큰 병원은 몇 곳입니까?\n\nDDL statements:\nCREATE TABLE medical_staff (staff_id INT, staff_name TEXT, hospital_id INT, position TEXT); INSERT INTO medical_staff (staff_id, staff_name, hospital_id, position) VALUES (1, 'Dr. John Doe', 1, 'Surgeon'); CREATE TABLE hospital (hospital_id INT, hospital_name TEXT, location TEXT, num_beds INT); INSERT INTO hospital (hospital_id, hospital_name, location, num_beds) VALUES (1, 'Rural Hospital A', 'Georgia', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hospital h JOIN medical_staff ms ON h.hospital_id = ms.hospital_id GROUP BY h.hospital_id HAVING COUNT(ms.staff_id)/h.num_beds > 1 AND h.location = 'Georgia';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 짚단 건축 방식을 사용하는 지속 가능한 건축 프로젝트의 총 면적은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Sustainable_Projects (project_id INT, project_type VARCHAR(50), location VARCHAR(50), square_footage INT, construction_method VARCHAR(50)); INSERT INTO Sustainable_Projects (project_id, project_type, location, square_footage, construction_method) VALUES (1, 'Commercial', 'California', 50000, 'Straw bale'); INSERT INTO Sustainable_Projects (project_id, project_type, location, square_footage, construction_method) VALUES (2, 'Residential', 'California', 3000, 'Straw bale');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(square_footage) FROM Sustainable_Projects WHERE location = 'California' AND construction_method = 'Straw bale';"
    },
    {
        "instruction": "입력 텍스트: \"articles\" 테이블에서 조회수가 가장 높은 상위 5개 기사의 제목과 조회수를 나열하세요.\n\nDDL statements:\nCREATE TABLE articles (article_id INT, title VARCHAR(100), category VARCHAR(50), publication_date DATE, views INT); INSERT INTO articles (article_id, title, category, publication_date, views) VALUES (1, 'News from the Capital', 'Politics', '2022-01-01', 1500), (2, 'Tech Innovations in 2022', 'Technology', '2022-01-02', 1200), (3, 'The Art of Persuasion', 'Psychology', '2022-01-03', 1800), (4, 'Education Reforms in Europe', 'Education', '2022-01-04', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title, views FROM articles ORDER BY views DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: Quebec'에서 진행 중인 스마트 시티 프로젝트들의 총 용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SmartCityProjects (id INT, project_name VARCHAR(100), project_type VARCHAR(50), city VARCHAR(50), state VARCHAR(50), capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM SmartCityProjects WHERE state = 'Quebec';"
    },
    {
        "instruction": "입력 텍스트: program_id를 기준으로 지원 프로그램을 삭제하세요.\n\nDDL statements:\nCREATE TABLE support_programs (program_id INT PRIMARY KEY, name VARCHAR(255), description TEXT, category VARCHAR(255), budget DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM support_programs WHERE program_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 호주의 가상 관광지 당 평균 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE virtual_tourism (venue_id INT, name TEXT, country TEXT, revenue DECIMAL(6,2)); INSERT INTO virtual_tourism (venue_id, name, country, revenue) VALUES (1, 'Virtually Sydney', 'Australia', 55000.00), (2, 'Melbourne 360', 'Australia', 60000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(revenue/1.0) FROM virtual_tourism WHERE country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 특정 이벤트의 ID를 통해 식별된 모든 티켓 판매 내역을 삭제합니다.\n\nDDL statements:\nCREATE TABLE salesperson (salesperson_id INT, name VARCHAR(50), position VARCHAR(50)); CREATE TABLE tickets (ticket_id INT, salesperson_id INT, event_id INT, price DECIMAL(5,2), quantity INT); CREATE TABLE events (event_id INT, name VARCHAR(50), date DATE); INSERT INTO salesperson VALUES (1, 'John Doe', 'Senior Salesperson'); INSERT INTO tickets VALUES (1, 1, 1, 50, 100); INSERT INTO events VALUES (1, 'Big Concert', '2023-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE t FROM tickets t WHERE t.event_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 식사에 사용된 계절 채소의 총 무게는 얼마입니까?\n\nDDL statements:\nCREATE TABLE SeasonalVegetables (vegetable VARCHAR(50), weight DECIMAL(5,2)); INSERT INTO SeasonalVegetables (vegetable, weight) VALUES ('Pumpkin', 5.00), ('Brussels Sprouts', 3.00), ('Sweet Potatoes', 8.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(weight) FROM SeasonalVegetables;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 가장 예산이 높았던 커뮤니티 개발 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE CommunityDevelopment (id INT, program VARCHAR(20), budget FLOAT, year INT); INSERT INTO CommunityDevelopment (id, program, budget, year) VALUES (1, 'Youth Empowerment', 120000, 2020), (2, 'Women Empowerment', 150000, 2019), (3, 'Elderly Care', 180000, 2018), (4, 'Rural Education', 200000, 2017), (5, 'Youth Empowerment', 250000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, MAX(budget) FROM CommunityDevelopment WHERE year = 2020 GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: Flood'와 'Earthquake' 재난에 대한 'disaster_response' 항목은 각각 몇 개입니까?\n\nDDL statements:\nCREATE TABLE disaster_response (id INT, disaster_type TEXT, response_type TEXT); INSERT INTO disaster_response (id, disaster_type, response_type) VALUES (1, 'Flood', 'Rescue'), (2, 'Earthquake', 'Medical'), (3, 'Flood', 'Evacuation'), (4, 'Earthquake', 'Relief');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT disaster_type, COUNT(*) FROM disaster_response WHERE disaster_type IN ('Flood', 'Earthquake') GROUP BY disaster_type;"
    },
    {
        "instruction": "입력 텍스트: 2022년 03월 15일에 캘리포니아에 있는 모든 계정의 거래 건수와 그 합계를 찾으세요.\n\nDDL statements:\nCREATE TABLE transactions (id INT, account_id INT, transaction_date DATE, transaction_amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(id) as total_transactions, SUM(transaction_amount) as total_amount FROM transactions WHERE transaction_date='2022-03-15' AND account_id IN (SELECT account_id FROM customers WHERE state='California');"
    },
    {
        "instruction": "입력 텍스트: mining_operations' 테이블에서 소수 커뮤니티 출신 직원들의 평균 경력은 각 직급별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE mining_operations (id INT, name VARCHAR(50), job_title VARCHAR(50), department VARCHAR(50), community VARCHAR(50), experience INT); INSERT INTO mining_operations (id, name, job_title, department, community, experience) VALUES (1, 'John Doe', 'Mining Engineer', 'Operations', 'Underrepresented', 7); INSERT INTO mining_operations (id, name, job_title, department, community, experience) VALUES (2, 'Jane Smith', 'Geologist', 'Exploration', 'Underrepresented', 5); INSERT INTO mining_operations (id, name, job_title, department, community, experience) VALUES (3, 'Maria Garcia', 'Mining Engineer', 'Operations', 'Not Underrepresented', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT job_title, AVG(experience) as avg_experience FROM mining_operations WHERE community = 'Underrepresented' GROUP BY job_title;"
    },
    {
        "instruction": "입력 텍스트: 어떤 광산 작업이 분기별로 가장 높은 총 이산화탄소 배출량을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE co2_emissions (mine_id INT, emission_date DATE, co2_amount INT); INSERT INTO co2_emissions (mine_id, emission_date, co2_amount) VALUES (1, '2021-01-01', 30000), (1, '2021-02-01', 32000), (1, '2021-03-01', 35000), (2, '2021-01-01', 28000), (2, '2021-02-01', 30000), (2, '2021-03-01', 33000), (3, '2021-01-01', 25000), (3, '2021-02-01', 27000), (3, '2021-03-01', 29000), (4, '2021-01-01', 22000), (4, '2021-02-01', 24000), (4, '2021-03-01', 26000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mine_id, DATE_TRUNC('quarter', emission_date) AS quarter, SUM(co2_amount) OVER (PARTITION BY mine_id ORDER BY DATE_TRUNC('quarter', emission_date)) AS total_emission FROM co2_emissions ORDER BY total_emission DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 센서 유형 및 날짜별로 최대 바이오센서 측정값은 무엇이며, 날짜별로 정렬된 순서대로 나타내세요?\n\nDDL statements:\nCREATE SCHEMA if not exists biosensors;CREATE TABLE if not exists biosensors.readings (id INT PRIMARY KEY, sensor_id INT, sensor_type VARCHAR(50), reading DECIMAL(10, 2), read_date DATE); INSERT INTO biosensors.readings (id, sensor_id, sensor_type, reading, read_date) VALUES (1, 1, 'Temp', 25.5, '2022-02-01'), (2, 2, 'Humidity', 45.3, '2022-02-01'), (3, 1, 'Temp', 26.2, '2022-02-02'), (4, 3, 'Pressure', 1200.5, '2022-02-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sensor_type, MAX(reading) AS max_reading, read_date FROM biosensors.readings WINDOW W AS (PARTITION BY sensor_type, read_date ORDER BY reading ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) GROUP BY sensor_type, W.read_date ORDER BY read_date;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 '남극'으로 발송된 배송 시간이 5일을 초과하는 배송 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE shipments (id INT, shipped_date DATE, destination VARCHAR(20), delivery_time INT); INSERT INTO shipments (id, shipped_date, destination, delivery_time) VALUES (1, '2022-02-15', 'Antarctica', 7), (2, '2022-03-10', 'Antarctica', 6), (3, '2022-03-03', 'Antarctica', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM shipments WHERE shipped_date >= DATEADD(month, -1, GETDATE()) AND destination = 'Antarctica' AND delivery_time > 5;"
    },
    {
        "instruction": "입력 텍스트: ABC' 회사 제품의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (id INT, company VARCHAR(255), price DECIMAL(5,2)); INSERT INTO products (id, company, price) VALUES (1, 'ABC', 50.99), (2, 'DEF', 35.49), (3, 'ABC', 44.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM products WHERE company = 'ABC';"
    },
    {
        "instruction": "입력 텍스트: 2020년 캐나다에서 채굴된 금의 총량을 찾아라\n\nDDL statements:\nCREATE TABLE mining_operations (id INT, mine_name TEXT, location TEXT, material TEXT, quantity INT, date DATE); INSERT INTO mining_operations (id, mine_name, location, material, quantity, date) VALUES (1, 'Golden Mine', 'Canada', 'gold', 1200, '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM mining_operations WHERE material = 'gold' AND location = 'Canada' AND date = '2020-01-01';"
    },
    {
        "instruction": "입력 텍스트: 기후 변화를 다루는 모든 AI 프로젝트와 그들의 자금 지원 금액을 나열하세요.\n\nDDL statements:\nCREATE TABLE ai_projects (project_id INT, project_name VARCHAR(20), project_domain VARCHAR(15), funding FLOAT); INSERT INTO ai_projects VALUES (1, 'AI for Climate', 'climate change', 100000), (2, 'AI for Health', 'healthcare', 200000), (3, 'AI for Disaster', 'disaster management', 150000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, funding FROM ai_projects WHERE project_domain = 'climate change';"
    },
    {
        "instruction": "입력 텍스트: 여성' 카테고리에 속하면서 지속 가능성 점수가 80 이상인 각 의류의 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE garments (id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), sustainability_score INT, quantity INT); INSERT INTO garments (id, name, category, sustainability_score, quantity) VALUES (1, 'T-Shirt', 'Women', 85, 50), (2, 'Jacket', 'Men', 60, 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT g.name, g.quantity FROM garments g WHERE g.category = 'Women' AND g.sustainability_score > 80;"
    },
    {
        "instruction": "입력 텍스트: \"employee\" 및 \"hiring\" 테이블에서 각 분기별로 고용된 직원 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE employee (id INT, hire_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(QUARTER FROM hire_date) AS quarter, COUNT(*) AS num_hires FROM employee GROUP BY quarter;"
    },
    {
        "instruction": "입력 텍스트: 레스토랑의 평균 매출이 가장 높은 도시를 나열하세요.\n\nDDL statements:\nCREATE TABLE restaurants (id INT, name VARCHAR(255), type VARCHAR(255), city VARCHAR(255), revenue FLOAT); INSERT INTO restaurants (id, name, type, city, revenue) VALUES (1, 'Restaurant A', 'Italian', 'New York', 5000.00), (2, 'Restaurant B', 'Asian', 'New York', 8000.00), (3, 'Restaurant C', 'Mexican', 'Los Angeles', 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(revenue) FROM restaurants GROUP BY city ORDER BY AVG(revenue) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 작물의 평균 수확량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE crops (crop_id INT PRIMARY KEY, name VARCHAR(255), yield INT); INSERT INTO crops (crop_id, name, yield) VALUES (1, 'Corn', 120), (2, 'Soybeans', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(yield) FROM crops;"
    },
    {
        "instruction": "입력 텍스트: 2021년 2월 14일 일본에서 R&B 음악 스트리밍 기록을 1.20의 수익과 함께 새로 추가하세요.\n\nDDL statements:\nCREATE TABLE streams (song_id INT, stream_date DATE, genre VARCHAR(20), country VARCHAR(20), revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO streams (song_id, stream_date, genre, country, revenue) VALUES (9, '2021-02-14', 'R&B', 'Japan', 1.20);"
    },
    {
        "instruction": "입력 텍스트: DrugF'의 시장 접근 상태를 'Approved'(승인됨)로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE market_access (drug_name TEXT, status TEXT); INSERT INTO market_access (drug_name, status) VALUES ('DrugF', 'Pending');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE market_access SET status = 'Approved' WHERE drug_name = 'DrugF';"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2018년까지 모잠비크의 농촌 인프라 프로젝트 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE RuralInfrastructure (id INT, country VARCHAR(50), project VARCHAR(50), budget FLOAT, year INT); INSERT INTO RuralInfrastructure (id, country, project, budget, year) VALUES (1, 'Mozambique', 'Road Construction', 700000, 2015), (2, 'Mozambique', 'Water Supply Systems', 600000, 2016), (3, 'Mozambique', 'Community Centers', 500000, 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM RuralInfrastructure WHERE country = 'Mozambique' AND year BETWEEN 2015 AND 2018;"
    },
    {
        "instruction": "입력 텍스트: 아시아 각국의 경제 다각화 투자 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE diversification_projects (id INT, country VARCHAR(50), type VARCHAR(50), investment FLOAT); INSERT INTO diversification_projects (id, country, type, investment) VALUES (1, 'India', 'Manufacturing', 300000.0), (2, 'China', 'Services', 400000.0), (3, 'Indonesia', 'Tourism', 250000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(investment) as total_investment FROM diversification_projects GROUP BY country ORDER BY total_investment DESC;"
    },
    {
        "instruction": "입력 텍스트: 사이트 'F'에서 생산량이 가장 높은 화학물질은 무엇인가요?\n\nDDL statements:\nCREATE TABLE chemical_production_3 (site VARCHAR(10), chemical VARCHAR(10), quantity INT); INSERT INTO chemical_production_3 VALUES ('F', 'A', 500), ('F', 'B', 600), ('F', 'C', 700), ('G', 'D', 800), ('G', 'E', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT chemical, MAX(quantity) FROM chemical_production_3 WHERE site = 'F' GROUP BY chemical;"
    },
    {
        "instruction": "입력 텍스트: 이탈리아 요리를 제외한 각 요리 유형별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE restaurants (id INT, name TEXT, cuisine TEXT, revenue INT); INSERT INTO restaurants (id, name, cuisine, revenue) VALUES (1, 'Restaurant A', 'Italian', 5000), (2, 'Restaurant B', 'Mexican', 6000), (3, 'Restaurant C', 'Italian', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, SUM(revenue) FROM restaurants WHERE cuisine != 'Italian' GROUP BY cuisine;"
    },
    {
        "instruction": "입력 텍스트: 샤리아 준수 대출과 사회적 책임 대출을 모두 받은 모든 고객을 나열하십시오.\n\nDDL statements:\nCREATE TABLE shariah_compliant_loans (loan_id INT, customer_id INT, amount DECIMAL(10, 2), issue_date DATE); INSERT INTO shariah_compliant_loans (loan_id, customer_id, amount, issue_date) VALUES (1, 101, 5000.00, '2021-01-01'), (2, 102, 7000.00, '2021-02-01'); CREATE TABLE socially_responsible_loans (loan_id INT, customer_id INT, amount DECIMAL(10, 2), issue_date DATE); INSERT INTO socially_responsible_loans (loan_id, customer_id, amount, issue_date) VALUES (1, 103, 4000.00, '2021-01-01'), (2, 104, 3500.00, '2021-02-01'), (3, 101, 6000.00, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT scl.customer_id FROM shariah_compliant_loans scl INNER JOIN socially_responsible_loans srl ON scl.customer_id = srl.customer_id;"
    },
    {
        "instruction": "입력 텍스트: crypto_transactions' 테이블에서 각 디지털 자산별로 주차별 평균 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE crypto_transactions (transaction_id INT, digital_asset VARCHAR(20), transaction_amount DECIMAL(10,2), transaction_time DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT digital_asset, AVG(transaction_amount) as avg_transaction_amount, DATE_TRUNC('week', transaction_time) as week FROM crypto_transactions GROUP BY digital_asset, week ORDER BY week;"
    },
    {
        "instruction": "입력 텍스트: 최근 6개월 동안 사이버보안에 할당된 위협 인텔리전스 예산의 비율을 결정합니다\n\nDDL statements:\nCREATE TABLE threat_intelligence_budget (category TEXT, allocation_date DATE, budget_amount NUMERIC); INSERT INTO threat_intelligence_budget (category, allocation_date, budget_amount) VALUES ('Cybersecurity', '2022-01-01', 50000), ('Physical Security', '2022-01-01', 30000), ('Personnel Security', '2022-01-01', 20000), ('Cybersecurity', '2022-02-01', 55000), ('Physical Security', '2022-02-01', 35000), ('Personnel Security', '2022-02-01', 25000), ('Cybersecurity', '2022-03-01', 60000), ('Physical Security', '2022-03-01', 30000), ('Personnel Security', '2022-03-01', 20000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(CASE WHEN category = 'Cybersecurity' THEN budget_amount ELSE 0 END) * 100.0 / SUM(budget_amount)) as cybersecurity_percentage FROM threat_intelligence_budget WHERE allocation_date >= (SELECT CURRENT_DATE - INTERVAL '6 months');"
    },
    {
        "instruction": "입력 텍스트: 2021-01-01부터 2021-02-28 사이에 아시아-태평양 지역별 최대 탄소 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE carbon_prices_3 (id INT, region VARCHAR(50), price DECIMAL(10,2), date DATE); INSERT INTO carbon_prices_3 (id, region, price, date) VALUES (3, 'Japan', 18.50, '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(price) as max_price FROM carbon_prices_3 WHERE date BETWEEN '2021-01-01' AND '2021-02-28' AND region LIKE 'Asia-Pacific%' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 일본과 한국에 있는 가장 인기 있는 지속 가능한 호텔 상위 3곳을 찾아주세요.\n\nDDL statements:\nCREATE TABLE hotels (id INT, country VARCHAR(50), sustainable BOOLEAN, popularity INT); INSERT INTO hotels (id, country, sustainable, popularity) VALUES (1, 'Japan', TRUE, 50), (2, 'Japan', FALSE, 40), (3, 'South Korea', TRUE, 30), (4, 'South Korea', TRUE, 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM hotels WHERE country IN ('Japan', 'South Korea') AND sustainable = TRUE ORDER BY popularity DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 태평양에 있는 해양보호구역의 평균 수심은 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name TEXT, location TEXT, min_depth INTEGER, max_depth INTEGER); INSERT INTO marine_protected_areas (name, location, min_depth, max_depth) VALUES ('Area A', 'Pacific', 50, 150), ('Area B', 'Pacific', 100, 200), ('Area C', 'Pacific', 120, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG( (max_depth + min_depth)/2 ) FROM marine_protected_areas WHERE location = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 2020년 이전에 로스앤젤레스 카운티에서 사회 형평성 신청자에게 발급된 재배 라이선스는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE licenses (id INT, type TEXT, applicant TEXT, county TEXT, issue_date DATE); INSERT INTO licenses (id, type, applicant, county, issue_date) VALUES (1, 'cultivation', 'social equity', 'Los Angeles', '2019-01-01'), (2, 'manufacturing', 'general', 'Los Angeles', '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM licenses WHERE type = 'cultivation' AND applicant = 'social equity' AND county = 'Los Angeles' AND issue_date < '2020-01-01';"
    },
    {
        "instruction": "입력 텍스트: CA에서 비건 메뉴 아이템의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ca_menu_items (menu_item_id INT, restaurant_id INT, cuisine VARCHAR(255), revenue INT); INSERT INTO ca_menu_items (menu_item_id, restaurant_id, cuisine, revenue) VALUES (1, 1, 'Vegan', 5000), (2, 2, 'Italian', 6000), (3, 3, 'Vegan', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, SUM(revenue) FROM ca_menu_items WHERE cuisine = 'Vegan' AND restaurant_id IN (SELECT restaurant_id FROM ca_restaurants WHERE state = 'CA') GROUP BY cuisine;"
    },
    {
        "instruction": "입력 텍스트: 별간 임무를 수행한 우주선의 평균 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Spaceships (Id INT, Name VARCHAR(50), MaxSpeed FLOAT, Missions INT); INSERT INTO Spaceships (Id, Name, MaxSpeed, Missions) VALUES (1, 'Voyager 1', 17, 1), (2, 'Voyager 2', 17, 1), (3, 'New Horizons', 58, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(MaxSpeed) FROM Spaceships WHERE Missions > 0;"
    },
    {
        "instruction": "입력 텍스트: 특정 커뮤니티를 위한 의료 접근성 지표가 있는 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE healthcare_access_v2 (id INT, community_type VARCHAR(20), access_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM healthcare_access_v2 WHERE community_type = 'Tribal';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 가장 많이 스캔된 시스템이 있는 상위 3개국과 해당 국가의 시스템들의 총 CVE 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE systems (system_id INT, system_name VARCHAR(255), country VARCHAR(255), cve_score INT);CREATE TABLE scan_dates (scan_date DATE, system_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.country, COUNT(sd.scan_date) as scan_count, SUM(s.cve_score) as total_cve_score FROM systems s INNER JOIN scan_dates sd ON s.system_id = sd.system_id WHERE sd.scan_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY s.country ORDER BY scan_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 최근 3년 동안 임금 인상률이 4%를 초과한 캘리포니아 소재 노조의 모든 구성원의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE UnionMembers (id INT PRIMARY KEY, name VARCHAR(50), state VARCHAR(2), union_id INT, FOREIGN KEY (union_id) REFERENCES UnionNegotiations(union_id)); CREATE TABLE UnionNegotiations (id INT PRIMARY KEY, union_id INT, negotiation_date DATE); CREATE TABLE CollectiveBargaining (id INT PRIMARY KEY, union_id INT, contract_start DATE, contract_end DATE, wage_increase DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name FROM UnionMembers m JOIN UnionNegotiations n ON m.union_id = n.union_id JOIN CollectiveBargaining c ON m.union_id = c.union_id WHERE m.state = 'CA' AND c.wage_increase > 4.0 AND n.negotiation_date >= DATE(NOW()) - INTERVAL 3 YEAR;"
    },
    {
        "instruction": "입력 텍스트: 접근성 등급이 있는 새로운 학교 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE schools (id INT, name VARCHAR(255), accessibility_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO schools (id, name, accessibility_rating) VALUES (101, 'School A', 5), (102, 'School B', 4), (103, 'School C', 3);"
    },
    {
        "instruction": "입력 텍스트: 모든 기관들과 그들이 받은 기부 횟수를 나열하세요.\n\nDDL statements:\nCREATE TABLE organizations (org_id INT, org_name TEXT);CREATE TABLE donations (donation_id INT, donor_id INT, org_id INT, donation_amount DECIMAL(10,2)); INSERT INTO organizations VALUES (1, 'Habitat for Humanity'); INSERT INTO organizations VALUES (2, 'Red Cross'); INSERT INTO donations VALUES (1, 1, 1, 50.00); INSERT INTO donations VALUES (2, 1, 2, 75.00); INSERT INTO donations VALUES (3, 2, 1, 100.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organizations.org_name, COUNT(donations.donation_id) AS total_donations FROM organizations LEFT JOIN donations ON organizations.org_id = donations.org_id GROUP BY organizations.org_name;"
    },
    {
        "instruction": "입력 텍스트: 메뉴 항목의 총 개수를 계산하세요\n\nDDL statements:\nCREATE TABLE Menu (id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Menu;"
    },
    {
        "instruction": "입력 텍스트: 영국에 있는 바닥 면적이 1000m2를 초과하는 건물들의 평균 에너지 효율(kWh/m2/년)은 얼마이며, 그 중 에너지 효율 등급 A를 받은 건물은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE buildings (name TEXT, country TEXT, floor_area_m2 REAL, energy_efficiency_kwh_m2_year REAL, energy_efficiency_rating TEXT); INSERT INTO buildings (name, country, floor_area_m2, energy_efficiency_kwh_m2_year, energy_efficiency_rating) VALUES ('Building A', 'UK', 1200, 80, 'A'), ('Building B', 'UK', 1500, 90, 'B');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_efficiency_kwh_m2_year) AS avg_efficiency, COUNT(*) FILTER (WHERE energy_efficiency_rating = 'A') AS num_buildings_rating_A FROM buildings WHERE country = 'UK' AND floor_area_m2 > 1000;"
    },
    {
        "instruction": "입력 텍스트: 비건 요리의 총 재고 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE dishes (id INT, name TEXT, type TEXT, cost DECIMAL); INSERT INTO dishes (id, name, type, cost) VALUES (1, 'Quinoa Salad', 'Vegan', 7.50), (2, 'Chickpea Curry', 'Vegan', 8.99), (3, 'Beef Burger', 'Non-Vegan', 10.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM dishes WHERE type = 'Vegan';"
    },
    {
        "instruction": "입력 텍스트: 네트워크 인프라와 관련된 고객 불만이 가장 많은 상위 5개 지역을 확인하세요.\n\nDDL statements:\nCREATE TABLE complaints_breakdown (complaint_id INT, region VARCHAR(10), complaint VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) AS complaints_count FROM complaints_breakdown GROUP BY region ORDER BY complaints_count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: \"GovernmentBudget\" 테이블에서 각 부서별로 200,000달러 이상의 예산이 할당된 헬스케어 프로그램의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GovernmentBudget (id INT, department VARCHAR(50), program VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO GovernmentBudget (id, department, program, budget) VALUES (1, 'Education', 'Elementary School', 50000), (2, 'Education', 'High School', 120000), (3, 'Education', 'College', 200000), (4, 'Healthcare', 'Hospital', 500000), (5, 'Healthcare', 'Clinic', 300000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, AVG(budget) as avg_budget FROM GovernmentBudget WHERE budget > 200000 AND program LIKE '%Healthcare%' GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 2021-01-01 이후에 짐 C에 가입한 남성 회원과 여성 회원의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE GymC_Members(MemberGender VARCHAR(6), JoinDate DATE); INSERT INTO GymC_Members VALUES ('Male','2021-02-01'),('Female','2021-03-15'),('Male','2020-12-28'),('Female','2021-05-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MemberGender, COUNT(*) FROM GymC_Members WHERE JoinDate > '2021-01-01' GROUP BY MemberGender;"
    },
    {
        "instruction": "입력 텍스트: 최소 50명의 학생이 있는 강좌를 수강한 학생들의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE course_attendance (student_id INT, course_id INT, num_students INT); INSERT INTO course_attendance (student_id, course_id, num_students) VALUES (1, 1, 50), (2, 2, 30), (3, 3, 60), (4, 1, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT student_id FROM course_attendance WHERE num_students >= 50;"
    },
    {
        "instruction": "입력 텍스트: 비영리 부문에서 일하는 데이터 과학자의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE non_profit_employees (employee_id INT, role VARCHAR(20), salary DECIMAL(10,2)); INSERT INTO non_profit_employees (employee_id, role, salary) VALUES (1, 'data_scientist', 75000.00), (2, 'developer', 65000.00), (3, 'data_scientist', 78000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM non_profit_employees WHERE role = 'data_scientist';"
    },
    {
        "instruction": "입력 텍스트: 해양학 데이터베이스에 있는 모든 해양 포유류 종을 개체 수에 따라 순서대로 나열하세요.\n\nDDL statements:\nCREATE TABLE marine_species (name TEXT, category TEXT, population INT); INSERT INTO marine_species (name, category, population) VALUES ('Blue Whale', 'Mammal', 10000), ('Dolphin', 'Mammal', 25000), ('Clownfish', 'Fish', 150000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM marine_species WHERE category = 'Mammal' ORDER BY population;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 베이 에어리어에서 설립된 회사는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, founding_date DATE, founding_location TEXT); INSERT INTO companies (id, name, founding_date, founding_location) VALUES (1, 'GreenTech', '2009-05-15', 'Bay Area'); INSERT INTO companies (id, name, founding_date, founding_location) VALUES (2, 'InnoVentures', '2012-03-04', 'Seattle');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies WHERE founding_location = 'Bay Area' AND founding_date < '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에서 사회적 책임 대출을 제공하는 모든 은행의 총 자산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE bank_info (bank_name TEXT, assets NUMERIC, region TEXT, socially_responsible BOOLEAN); INSERT INTO bank_info (bank_name, assets, region, socially_responsible) VALUES ('Bank of China', 2934567, 'Asia-Pacific', TRUE); INSERT INTO bank_info (bank_name, assets, region, socially_responsible) VALUES ('Mizuho Financial Group', 1892345, 'Asia-Pacific', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(assets) FROM bank_info WHERE region = 'Asia-Pacific' AND socially_responsible = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 가장 많은 판매 수량을 기록한 군사 장비를 확인하세요.\n\nDDL statements:\nCREATE TABLE Sales (Sale_ID INT, Equipment_ID INT, Quantity INT, Sale_Date DATE); INSERT INTO Sales (Sale_ID, Equipment_ID, Quantity, Sale_Date) VALUES (1, 1, 25, '2020-01-01'), (2, 2, 50, '2019-12-15'), (3, 3, 30, '2020-03-20'); CREATE TABLE Equipment (Equipment_ID INT, Equipment_Name VARCHAR(50), Supplier_ID INT, Unit_Price DECIMAL(10,2)); INSERT INTO Equipment (Equipment_ID, Equipment_Name, Supplier_ID, Unit_Price) VALUES (1, 'K9 Thunder', 1, 8500000), (2, 'Marder IFV', 2, 4500000), (3, 'CV90 Infantry Fighting Vehicle', 3, 5000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT E.Equipment_Name, SUM(S.Quantity) AS 'Total Quantity Sold' FROM Sales S JOIN Equipment E ON S.Equipment_ID = E.Equipment_ID WHERE YEAR(S.Sale_Date) = 2020 GROUP BY E.Equipment_Name ORDER BY SUM(S.Quantity) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: VR 게임을 하는 플레이어들의 평균 나이가 플랫폼 별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE players (id INT, age INT, platform VARCHAR(10)); INSERT INTO players (id, age, platform) VALUES (1, 25, 'PSVR'), (2, 30, 'VIVE'), (3, 35, 'RIFT'); CREATE TABLE vr_games (player_id INT, game VARCHAR(20)); INSERT INTO vr_games (player_id, game) VALUES (1, 'Skyrim VR'), (1, 'Rec Room'), (2, 'Lone Echo'), (3, 'Robo Recall');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT platform, AVG(age) FROM players p JOIN vr_games vg ON p.id = vg.player_id GROUP BY platform;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 대륙에서 열린 지속 가능한 관광 이벤트의 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE events (id INT, name VARCHAR(50), is_sustainable BOOLEAN, continent VARCHAR(50)); INSERT INTO events (id, name, is_sustainable, continent) VALUES (1, 'Sustainable Event 1', TRUE, 'Europe'), (2, 'Non-Sustainable Event 1', FALSE, 'Asia'), (3, 'Sustainable Event 2', TRUE, 'North America'), (4, 'Sustainable Event 3', TRUE, 'South America'), (5, 'Sustainable Event 4', TRUE, 'Africa'); CREATE TABLE visitors (id INT, event_id INT, year INT); INSERT INTO visitors (id, event_id, year) VALUES (1, 1, 2020), (2, 1, 2020), (3, 2, 2019), (4, 3, 2020), (5, 4, 2020), (6, 4, 2020), (7, 5, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, COUNT(*) FROM events WHERE is_sustainable = TRUE AND year = 2020 GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 수익을 계산하세요\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, dish_id INT, sale_price DECIMAL(5,2), country VARCHAR(255)); INSERT INTO sales (sale_id, dish_id, sale_price, country) VALUES (1, 1, 9.99, 'USA'), (2, 3, 7.99, 'Mexico'), (3, 2, 12.99, 'USA'); CREATE TABLE dishes (dish_id INT, dish_name VARCHAR(255), cuisine VARCHAR(255)); INSERT INTO dishes (dish_id, dish_name, cuisine) VALUES (1, 'Quinoa Salad', 'Mediterranean'), (2, 'Chicken Caesar Wrap', 'Mediterranean'), (3, 'Tacos', 'Mexican');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country, SUM(s.sale_price) as revenue FROM sales s INNER JOIN dishes d ON s.dish_id = d.dish_id INNER JOIN (SELECT cuisine, country FROM dishes d INNER JOIN sales s ON d.dish_id = s.dish_id GROUP BY cuisine, country) c ON d.cuisine = c.cuisine GROUP BY c.country;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 치료를 받은 환자들은 누구인가요?\n\nDDL statements:\nCREATE TABLE patients (id INT, name TEXT, age INT, treatment TEXT, treatment_year INT); INSERT INTO patients (id, name, age, treatment, treatment_year) VALUES (1, 'John Doe', 35, 'CBT', 2022), (2, 'Jane Smith', 40, 'DBT', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM patients WHERE treatment LIKE '%CBT%' OR treatment LIKE '%DBT%' AND treatment_year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다의 공공 병원 수를 찾아주세요.\n\nDDL statements:\nCREATE SCHEMA na_schema;CREATE TABLE na_schema.hospitals (country VARCHAR(20), hospital_type VARCHAR(20), num_hospitals INT);INSERT INTO na_schema.hospitals (country, hospital_type, num_hospitals) VALUES ('United States', 'Public Hospitals', 5000), ('Canada', 'Public Hospitals', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, num_hospitals FROM na_schema.hospitals WHERE (country = 'United States' OR country = 'Canada') AND hospital_type = 'Public Hospitals';"
    },
    {
        "instruction": "입력 텍스트: 남미' 지역의 재생 에너지 프로젝트별 평균 탄소 상쇄량(톤 단위)은 얼마이며, 평균 상쇄량 기준으로 내림차순으로 정렬된 순서대로 나타내세요.\n\nDDL statements:\nCREATE TABLE carbon_offset_south_america (id INT, project VARCHAR(50), region VARCHAR(50), offset FLOAT); INSERT INTO carbon_offset_south_america (id, project, region, offset) VALUES (1, 'Solar Farm A', 'south_america', 1000.00), (2, 'Wind Farm B', 'south_america', 2000.00), (3, 'Hydro Plant C', 'south_america', 1500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(offset) as avg_offset FROM carbon_offset_south_america WHERE region = 'south_america' GROUP BY region ORDER BY avg_offset DESC;"
    },
    {
        "instruction": "입력 텍스트: 연구 논문을 발표하지 않은 대학원생의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE graduate_students (id INT, name VARCHAR(50), department VARCHAR(50), num_publications INT); INSERT INTO graduate_students (id, name, department, num_publications) VALUES (1, 'Hannah', 'Biology', 3), (2, 'Ike', 'Biology', 0), (3, 'Jasmine', 'Biology', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM graduate_students WHERE num_publications = 0;"
    },
    {
        "instruction": "입력 텍스트: 유물 테이블에서 어떤 현장과도 연관되지 않은 유물을 삭제하세요.\n\nDDL statements:\nCREATE TABLE excavation_sites (id INT, name VARCHAR(255)); CREATE TABLE artifacts (id INT, excavation_site_id INT, year INT, type VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM artifacts WHERE excavation_site_id NOT IN (SELECT id FROM excavation_sites);"
    },
    {
        "instruction": "입력 텍스트: species_data' 테이블에 species_id가 5이고, species_name이 'reindeer', biomass가 180.0인 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE species_data (species_id INT, species_name VARCHAR(255), biomass FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO species_data (species_id, species_name, biomass) VALUES (5, 'reindeer', 180.0);"
    },
    {
        "instruction": "입력 텍스트: 영국 출신 사용자가 작성한 게시물 중 가장 이른 시간은 언제인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, country VARCHAR(255)); INSERT INTO users (id, country) VALUES (1, 'United States'), (2, 'Canada'), (3, 'United Kingdom'); CREATE TABLE posts (id INT, user_id INT, timestamp TIMESTAMP); INSERT INTO posts (id, user_id, timestamp) VALUES (1, 1, '2022-01-01 12:00:00'), (2, 2, '2022-01-02 13:00:00'), (3, 3, '2022-01-03 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(posts.timestamp) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'United Kingdom';"
    },
    {
        "instruction": "입력 텍스트: 각 청구 유형별 총 청구 금액을 보여주세요.\n\nDDL statements:\nCREATE TABLE claim (claim_id INT, claim_type VARCHAR(20), claim_amount FLOAT); INSERT INTO claim (claim_id, claim_type, claim_amount) VALUES (1, 'Fire', 5000.00), (2, 'Theft', 2000.00), (3, 'Accident', 3500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT claim_type, SUM(claim_amount) FROM claim GROUP BY claim_type;"
    },
    {
        "instruction": "입력 텍스트: 각 공급업체별로 연도별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE purchases (purchase_date DATE, supplier VARCHAR(255), revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier, DATE_TRUNC('year', purchase_date) AS purchase_year, SUM(revenue) AS total_revenue FROM purchases GROUP BY supplier, purchase_year;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 설치된 재생 에너지 프로젝트의 총 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE RenewableEnergyProjects (country VARCHAR(20), capacity FLOAT); INSERT INTO RenewableEnergyProjects (country, capacity) VALUES ('CountryA', 150.0), ('CountryB', 200.0), ('CountryC', 250.0), ('CountryD', 300.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(capacity) FROM RenewableEnergyProjects GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 과목 영역별로 전문 개발 세션에 참석한 교사의 수는 인종별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE teacher_development_race (teacher_id INT, race VARCHAR(255), subject_area VARCHAR(255), sessions_attended INT); INSERT INTO teacher_development_race (teacher_id, race, subject_area, sessions_attended) VALUES (1, 'White', 'Math', 3), (2, 'Black', 'English', 2), (3, 'Asian', 'Science', 5), (4, 'Hispanic', 'Math', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT race, subject_area, SUM(sessions_attended) as total_sessions_attended FROM teacher_development_race GROUP BY race, subject_area;"
    },
    {
        "instruction": "입력 텍스트: 플래티넘과 골드 콘서트의 평균 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Concerts (concert_id INT, tier VARCHAR(50), sales INT, price DECIMAL(10, 2)); INSERT INTO Concerts (concert_id, tier, sales, price) VALUES (1, 'Platinum', 5000, 150), (2, 'Gold', 7000, 100), (3, 'Silver', 6000, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT tier, AVG(price) as avg_price FROM Concerts WHERE tier IN ('Platinum', 'Gold') GROUP BY tier;"
    },
    {
        "instruction": "입력 텍스트: 영국 출신 개발자가 만든 디지털 자산의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE developers (developer_id INT PRIMARY KEY, name VARCHAR(100), country VARCHAR(50)); INSERT INTO developers (developer_id, name, country) VALUES (1, 'Alice', 'USA'), (2, 'Bob', 'Canada'), (3, 'Charlie', 'United Kingdom'); CREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, name VARCHAR(100), transaction_count INT, developer_id INT, FOREIGN KEY (developer_id) REFERENCES developers(developer_id)); INSERT INTO smart_contracts (contract_id, name, transaction_count, developer_id) VALUES (1, 'Contract1', 1500, 1), (2, 'Contract2', 800, 2), (3, 'Contract3', 1200, 3); CREATE TABLE digital_assets (asset_id INT PRIMARY KEY, name VARCHAR(100), contract_id INT, FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)); INSERT INTO digital_assets (asset_id, name, contract_id) VALUES (1, 'Asset1', 1), (2, 'Asset2', 2), (3, 'Asset3', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM digital_assets INNER JOIN developers ON digital_assets.developer_id = developers.developer_id WHERE developers.country = 'United Kingdom';"
    },
    {
        "instruction": "입력 텍스트: 주별 의료 제공자 문화 역량 교육 이수율은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE provider_training (provider_id INT, provider_name VARCHAR(50), state_id INT, training_completion DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state_id, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM provider_training WHERE state_id = pt.state_id)) as completion_rate FROM provider_training pt WHERE training_completion IS NOT NULL GROUP BY state_id;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 광산 운영 당 평균 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE mining_operations(id INT, name VARCHAR, country VARCHAR, num_employees INT); INSERT INTO mining_operations(id, name, country, num_employees) VALUES (1, 'Alpha Mining', 'Canada', 50), (2, 'Bravo Mining', 'USA', 75), (3, 'Charlie Mining', 'Mexico', 100); CREATE TABLE employees(id INT, mining_operation_id INT, role VARCHAR); INSERT INTO employees(id, mining_operation_id, role) VALUES (1, 1, 'Engineer'), (2, 1, 'Operator'), (3, 2, 'Manager'), (4, 2, 'Engineer'), (5, 3, 'Operator'), (6, 3, 'Manager');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_employees) FROM mining_operations WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: animal_budget' 테이블에서 동물 종에 할당된 예산 중 최대 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE animal_budget (species VARCHAR(20), budget INT); INSERT INTO animal_budget (species, budget) VALUES ('Tiger', 150000), ('Elephant', 300000), ('Lion', 200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(budget) FROM animal_budget;"
    },
    {
        "instruction": "입력 텍스트: AI 안전에 기여도가 가장 낮은 연구원은 누구인가요?\n\nDDL statements:\nCREATE TABLE safety_research (researcher_name TEXT, contributions INTEGER); INSERT INTO safety_research (researcher_name, contributions) VALUES ('Researcher E', 5), ('Researcher F', 7), ('Researcher G', 3), ('Researcher H', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT researcher_name FROM safety_research ORDER BY contributions ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: public_ev_sales' 테이블에서 전기차량의 평균 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE public.ev_sales(id serial PRIMARY KEY, make varchar(255), model varchar(255), year int, ev_type varchar(255), speed numeric);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(speed) FROM public.ev_sales WHERE ev_type = 'Electric';"
    },
    {
        "instruction": "입력 텍스트: 모든 종과 그 종이 존재하는 숲의 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE Forests (id INT PRIMARY KEY, name VARCHAR(255), hectares DECIMAL(5,2), country VARCHAR(255)); INSERT INTO Forests (id, name, hectares, country) VALUES (1, 'Greenwood', 520.00, 'Canada'); CREATE TABLE Species (id INT PRIMARY KEY, name VARCHAR(255), common_name VARCHAR(255)); INSERT INTO Species (id, name, common_name) VALUES (1, 'Quercus robur', 'English Oak'); CREATE TABLE Species_Forests (species_id INT, forest_id INT, PRIMARY KEY (species_id, forest_id), FOREIGN KEY (species_id) REFERENCES Species(id), FOREIGN KEY (forest_id) REFERENCES Forests(id)); INSERT INTO Species_Forests (species_id, forest_id) VALUES (1,1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Species.name as species_name, COUNT(Species_Forests.forest_id) as num_forests FROM Species LEFT JOIN Species_Forests ON Species.id = Species_Forests.species_id GROUP BY Species.name;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 18세에서 30세 사이 사용자의 최소 모바일 데이터 사용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE user_data (user_id INT, age INT, state VARCHAR(2), data_usage FLOAT); INSERT INTO user_data (user_id, age, state, data_usage) VALUES (1, 25, 'MH', 3.5), (2, 22, 'TN', 4.2), (3, 35, 'UP', 3.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MIN(data_usage) as min_data_usage FROM user_data WHERE age BETWEEN 18 AND 30 GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 건설'과 '교육' 노조의 총 회원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE construction_union (id INT, name VARCHAR, dob DATE); INSERT INTO construction_union (id, name, dob) VALUES (1, 'Alice', '1985-05-01'); CREATE TABLE education_union (id INT, name VARCHAR, dob DATE); INSERT INTO education_union (id, name, dob) VALUES (1, 'Bob', '1990-08-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ( (SELECT * FROM construction_union) UNION (SELECT * FROM education_union) ) AS all_unions;"
    },
    {
        "instruction": "입력 텍스트: 남미에 있는 지속 가능한 관광 인증을 받은 목적지의 평균 방문객 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE destinations (name VARCHAR(255), country VARCHAR(255), continent VARCHAR(255), sustainable_certification BOOLEAN, visitors INT); INSERT INTO destinations (name, country, continent, sustainable_certification, visitors) VALUES ('City J', 'Country J', 'South America', TRUE, 900000), ('City K', 'Country K', 'South America', FALSE, 700000), ('City L', 'Country L', 'South America', TRUE, 1000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(visitors) FROM destinations WHERE continent = 'South America' AND sustainable_certification = TRUE;"
    },
    {
        "instruction": "입력 텍스트: VR 게임을 즐기는 플레이어들의 평균 나이와 선호하는 장르는 무엇인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, age INT, genre VARCHAR(20)); INSERT INTO players (id, age, genre) VALUES (1, 25, 'Action'); INSERT INTO players (id, age, genre) VALUES (2, 30, 'Adventure'); INSERT INTO players (id, age, genre) VALUES (3, 35, 'VR'); CREATE TABLE vr_games (id INT, player_id INT, title VARCHAR(20)); INSERT INTO vr_games (id, player_id, title) VALUES (1, 3, 'Space Explorer');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(players.age), players.genre FROM players INNER JOIN vr_games ON players.id = vr_games.player_id WHERE players.genre = 'VR' GROUP BY players.genre;"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역에서 지역 경제에 가장 큰 영향을 미치는 호텔을 확인하세요.\n\nDDL statements:\nCREATE TABLE impact_asia (impact_id INT, hotel_name VARCHAR(255), region VARCHAR(255), impact INT); INSERT INTO impact_asia (impact_id, hotel_name, region, impact) VALUES (1, 'The Asia-Pacific Resort', 'Asia-Pacific', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_name, impact FROM impact_asia WHERE region = 'Asia-Pacific' ORDER BY impact DESC;"
    },
    {
        "instruction": "입력 텍스트: 2018년 인도에서 NGO에 의해 지원받은 난민의 총 수는 얼마였습니까?\n\nDDL statements:\nCREATE TABLE refugees (refugee_id INT, ngo_name VARCHAR(255), country VARCHAR(255), support_start_date DATE, support_end_date DATE); INSERT INTO refugees (refugee_id, ngo_name, country, support_start_date, support_end_date) VALUES (1, 'NGO11', 'India', '2018-01-01', '2018-12-31'), (2, 'NGO12', 'India', '2018-01-01', '2018-06-30'), (3, 'NGO13', 'India', '2018-07-01', '2018-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM refugees WHERE country = 'India' AND YEAR(support_start_date) = 2018 AND YEAR(support_end_date) = 2018;"
    },
    {
        "instruction": "입력 텍스트: 새로운 e스포츠 이벤트 'DreamHack Dallas'를 상금 $250,000과 함께 추가하세요.\n\nDDL statements:\nCREATE TABLE EsportsEvents (EventID int, EventName varchar(50), PrizePool int); INSERT INTO EsportsEvents (EventID, EventName, PrizePool) VALUES (1, 'IEM Katowice', 500000), (2, 'ESL One Cologne', 325000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO EsportsEvents (EventID, EventName, PrizePool) VALUES (3, 'DreamHack Dallas', 250000);"
    },
    {
        "instruction": "입력 텍스트: 북극에서 이루어진 모든 심해 탐사를 나열하세요.\n\nDDL statements:\nCREATE TABLE deep_sea_expeditions (name TEXT, location TEXT, year INT); INSERT INTO deep_sea_expeditions (name, location, year) VALUES ('Arctic Ocean 2020', 'Arctic', '2020'), ('Atlantic Ocean 2019', 'Atlantic', '2019');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM deep_sea_expeditions WHERE location = 'Arctic';"
    },
    {
        "instruction": "입력 텍스트: 가족 법' 분야의 사건들에 대한 총 청구 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE cases (case_id INT, category VARCHAR(20), billing_amount DECIMAL(5,2)); INSERT INTO cases (case_id, category, billing_amount) VALUES (1, 'Criminal Law', 1500.00), (2, 'Family Law', 2000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(billing_amount) FROM cases WHERE category = 'Family Law';"
    },
    {
        "instruction": "입력 텍스트: 남미 도시 농업에서 재배되는 고유한 작물 유형과 각 유형별로 몇 개가 있는지 찾으세요.\n\nDDL statements:\nCREATE TABLE UrbanAgriCrop (id INT, crop VARCHAR(50), region VARCHAR(50)); INSERT INTO UrbanAgriCrop (id, crop, region) VALUES (1, 'Quinoa', 'South America'); INSERT INTO UrbanAgriCrop (id, crop, region) VALUES (2, 'Potatoes', 'South America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crop, COUNT(*) FROM UrbanAgriCrop WHERE region = 'South America' GROUP BY crop;"
    },
    {
        "instruction": "입력 텍스트: 새 위성 이미지 삽입\n\nDDL statements:\nCREATE TABLE satellite_images (id INT PRIMARY KEY, farm_id INT, image_url VARCHAR(100), capture_date TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO satellite_images (id, farm_id, image_url, capture_date) VALUES (1, 123, 'https://example.com/image1.jpg', '2022-02-01 14:30:00');"
    },
    {
        "instruction": "입력 텍스트: 지역별로 비건이면서 동물 실험을 하지 않은 뷰티 제품의 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE products (product_type VARCHAR(20), vegan BOOLEAN, cruelty_free BOOLEAN, region VARCHAR(10)); INSERT INTO products (product_type, vegan, cruelty_free, region) VALUES ('lipstick', TRUE, TRUE, 'North'), ('mascara', FALSE, FALSE, 'North'), ('eyeshadow', TRUE, TRUE, 'West'), ('blush', FALSE, FALSE, 'South'), ('foundation', TRUE, TRUE, 'East');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM products WHERE vegan = TRUE AND cruelty_free = TRUE GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 어느 법정 구역에 5개 이상의 ADR 프로그램이 설립되었나요?\n\nDDL statements:\nCREATE TABLE ADRPrograms (ID INT, District VARCHAR(20), YearEstablished INT); INSERT INTO ADRPrograms (ID, District, YearEstablished) VALUES (1, 'East River', 2010), (2, 'North Valley', 2012), (3, 'South Peak', 2015), (4, 'East River', 2018), (5, 'North Valley', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT District, COUNT(*) FROM ADRPrograms GROUP BY District HAVING COUNT(*) > 5;"
    },
    {
        "instruction": "입력 텍스트: rural_economy_2' 테이블에서 예산이 50000 미만인 프로젝트를 제외한 모든 경제 다양화 프로젝트를 나열하세요.\n\nDDL statements:\nCREATE TABLE rural_economy_2 (id INT, project_name VARCHAR(50), budget DECIMAL(10, 2)); INSERT INTO rural_economy_2 (id, project_name, budget) VALUES (1, 'Eco-Tourism', 85000.00), (2, 'Handicraft Production', 65000.00), (3, 'Local Craftsmanship', 40000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM rural_economy_2 WHERE budget >= 50000;"
    },
    {
        "instruction": "입력 텍스트: 2020년 아프리카에서 기후 완화 프로젝트에 할당된 총 자금은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_mitigation_projects (id INT, project_name VARCHAR(100), location VARCHAR(100), funding FLOAT, year INT); INSERT INTO climate_mitigation_projects (id, project_name, location, funding, year) VALUES (1, 'Solar Farm', 'Africa', 15000000, 2020), (2, 'Wind Turbines', 'Asia', 20000000, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding) FROM climate_mitigation_projects WHERE location = 'Africa' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 평균보다 높은 예산을 가진 모든 공상 과학 영화의 제목과 예산을 나열하세요.\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(50), genre VARCHAR(20), budget FLOAT, release_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title, budget FROM movies WHERE genre = 'Sci-Fi' AND budget > (SELECT AVG(budget) FROM movies WHERE genre = 'Sci-Fi');"
    },
    {
        "instruction": "입력 텍스트: 퀘벡 주에 위치한 모든 치과 클리닉의 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE dental_clinics (id INT, province VARCHAR(255), name VARCHAR(255)); INSERT INTO dental_clinics (id, province, name) VALUES (1, 'Ontario', 'Dental Clinic A'); INSERT INTO dental_clinics (id, province, name) VALUES (2, 'Quebec', 'Dental Clinic B'); INSERT INTO dental_clinics (id, state, name) VALUES (3, 'British Columbia', 'Pharmacy C');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM dental_clinics WHERE province = 'Quebec';"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기에 캘리포니아 주에서 \"Sunset Sherbet\" 품종으로 30000의 매출을 기록한 새로운 판매 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE sales (id INT, state VARCHAR(50), quarter VARCHAR(10), strain VARCHAR(50), revenue INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO sales (state, quarter, strain, revenue) VALUES ('California', 'Q1', 'Sunset Sherbet', 30000);"
    },
    {
        "instruction": "입력 텍스트: 유럽 시장에서 유기농 화장품의 판매량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cosmetic_sales (product_id INT, sale_volume INT, market VARCHAR(10)); INSERT INTO cosmetic_sales (product_id, sale_volume, market) VALUES (1, 200, 'US'), (2, 300, 'CA'), (3, 400, 'EU'); CREATE TABLE product_info (product_id INT, is_organic BOOLEAN); INSERT INTO product_info (product_id, is_organic) VALUES (1, true), (2, false), (3, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cs.sale_volume) FROM cosmetic_sales cs JOIN product_info pi ON cs.product_id = pi.product_id WHERE pi.is_organic = true AND cs.market = 'EU';"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 단일 서비스에 할당된 최대 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE service_budget (state VARCHAR(50), service VARCHAR(50), budget INT); INSERT INTO service_budget (state, service, budget) VALUES ('Texas', 'Highway Maintenance', 5000000), ('Texas', 'Education', 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(budget) FROM service_budget WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 모든 프로젝트의 총 비용과 위치를 보여주세요.\n\nDDL statements:\nCREATE TABLE projects (id INT, name TEXT, cost FLOAT, location TEXT); INSERT INTO projects (id, name, cost, location) VALUES (1, 'Project A', 500000.00, 'California'), (2, 'Project B', 750000.00, 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, SUM(cost) FROM projects GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 유럽에 있는 호텔과 제휴된 친환경 지역 사업체는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE local_businesses (business_id INT, business_name VARCHAR(50), is_eco_friendly BOOLEAN, country VARCHAR(30)); CREATE TABLE hotel_business_partnerships (partnership_id INT, hotel_id INT, business_id INT); INSERT INTO local_businesses (business_id, business_name, is_eco_friendly, country) VALUES (1, 'Green Groceries', TRUE, 'France'), (2, 'Eco-friendly Tours', TRUE, 'Germany'), (3, 'Cultural Art Gallery', FALSE, 'Spain'), (4, 'Sustainable Fashion', TRUE, 'Italy'); INSERT INTO hotel_business_partnerships (partnership_id, hotel_id, business_id) VALUES (1, 1, 1), (2, 1, 2), (3, 2, 3), (4, 3, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT local_businesses.business_id) FROM local_businesses JOIN hotel_business_partnerships ON local_businesses.business_id = hotel_business_partnerships.business_id WHERE local_businesses.is_eco_friendly = TRUE AND local_businesses.country = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: MultimodalHubs' 테이블에서 'hub_id'가 400인 레코드의 'address'를 '123 Main St, Denver'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE MultimodalHubs (hub_id INT, address VARCHAR(30), PRIMARY KEY (hub_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE MultimodalHubs SET address = '123 Main St, Denver' WHERE hub_id = 400;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 서울에서 자율주행 택시가 이동한 총 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE autonomous_taxis (id INT, city VARCHAR(20), trip_date DATE, distance INT); INSERT INTO autonomous_taxis VALUES (1, 'seoul', '2022-01-01', 25); INSERT INTO autonomous_taxis VALUES (2, 'seoul', '2022-01-05', 30); INSERT INTO autonomous_taxis VALUES (3, 'tokyo', '2022-01-10', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(distance) FROM autonomous_taxis WHERE city = 'seoul' AND YEAR(trip_date) = 2022 AND MONTH(trip_date) = 1;"
    },
    {
        "instruction": "입력 텍스트: OneWeb 별자리에 있는 위성은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Satellites (satellite_id INT, name VARCHAR(255), country VARCHAR(255), altitude FLOAT, constellation VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Satellites WHERE constellation = 'OneWeb';"
    },
    {
        "instruction": "입력 텍스트: 여성 회원이 없는 노조가 있는지 확인하고, 노조 ID만 표시합니다.\n\nDDL statements:\nCREATE TABLE UnionMembers (MemberID INT, UnionID INT, Gender VARCHAR(10)); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (1, 1001, 'Female'); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (2, 1001, 'Male'); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (3, 1003, 'Male'); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (4, 1004, 'Non-binary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT UnionID FROM UnionMembers GROUP BY UnionID HAVING SUM(CASE WHEN Gender = 'Female' THEN 1 ELSE 0 END) = 0;"
    },
    {
        "instruction": "입력 텍스트: 재고에 있는 유기농 재료의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Inventory (ingredient_id INT, ingredient_name VARCHAR(255), is_organic BOOLEAN, quantity INT); INSERT INTO Inventory (ingredient_id, ingredient_name, is_organic, quantity) VALUES (1, 'Tomatoes', true, 500), (2, 'Lettuce', false, 300), (3, 'Tofu', true, 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM Inventory WHERE is_organic = true;"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코에서 Waymo와 Cruise의 테스트 기록을 입력하세요.\n\nDDL statements:\nCREATE TABLE autonomous_testing (id INT PRIMARY KEY, location VARCHAR(100), company VARCHAR(100), date DATE, miles_driven INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO autonomous_testing (id, location, company, date, miles_driven) VALUES (1, 'San Francisco', 'Waymo', '2022-05-10', 500), (2, 'San Francisco', 'Cruise', '2022-05-11', 600);"
    },
    {
        "instruction": "입력 텍스트: 콘서트 티켓 판매 총 수량으로 상위 2개 국가를 보여주세요. 판매된 티켓의 총 수량과 콘서트 당 평균 판매된 티켓 수를 포함합니다.\n\nDDL statements:\nCREATE TABLE concert_sales (sale_id INT, sale_country VARCHAR(50), tickets_sold INT, concert_id INT); INSERT INTO concert_sales (sale_id, sale_country, tickets_sold, concert_id) VALUES (1, 'United States', 500, 1), (2, 'Canada', 800, 2), (3, 'Mexico', 1500, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.sale_country, SUM(s.tickets_sold) AS total_tickets_sold, AVG(s.tickets_sold / c.concert_count) AS avg_tickets_sold_per_concert FROM concert_sales s INNER JOIN (SELECT concert_id, COUNT(*) AS concert_count FROM concert_sales GROUP BY concert_id) c ON s.concert_id = c.concert_id GROUP BY s.sale_country ORDER BY total_tickets_sold DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 멕시코 출신으로 논문 2편을 발표한 'Francisco'라는 새로운 AI 연구원 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE ai_researchers (id INT, name VARCHAR(100), gender VARCHAR(10), country VARCHAR(50), published_papers INT); INSERT INTO ai_researchers (id, name, gender, country, published_papers) VALUES (1, 'Alice', 'Female', 'USA', 3), (2, 'Bob', 'Male', 'Canada', 0), (3, 'Charlotte', 'Female', 'UK', 2), (4, 'David', 'Male', 'USA', 1), (5, 'Eva', 'Female', 'Germany', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO ai_researchers (id, name, gender, country, published_papers) VALUES (6, 'Francisco', 'Male', 'Mexico', 2);"
    },
    {
        "instruction": "입력 텍스트: 2020 시즌에 가장 많은 골을 넣은 축구 선수들과 그들의 팀 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(255)); INSERT INTO teams VALUES (1, 'Arsenal'); INSERT INTO teams VALUES (2, 'Chelsea'); CREATE TABLE goals (player_name VARCHAR(255), team_id INT, goals_scored INT); INSERT INTO goals VALUES ('John Doe', 1, 30); INSERT INTO goals VALUES ('Jane Smith', 2, 35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT g.player_name, t.team_name, g.goals_scored FROM goals g INNER JOIN teams t ON g.team_id = t.team_id ORDER BY g.goals_scored DESC;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 뉴욕 시에서 주거용 프로젝트에 발급된 건축 허가증은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE building_permits (id INT, permit_number INT, project_type TEXT, issue_date DATE); INSERT INTO building_permits (id, permit_number, project_type, issue_date) VALUES (1, 12345, 'Residential', '2022-02-15'), (2, 67890, 'Commercial', '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM building_permits WHERE project_type = 'Residential' AND issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: rural' 스키마에서 2019년 또는 2020년 9월 달에 있는 버스 여행의 총 횟수는 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA rural; CREATE TABLE rural.bus_trips (id INT, trip_date DATE); INSERT INTO rural.bus_trips (id, trip_date) VALUES (1, '2019-09-01'), (2, '2020-09-02'), (3, '2020-09-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(1) FROM rural.bus_trips WHERE trip_date BETWEEN '2019-09-01' AND '2020-09-30';"
    },
    {
        "instruction": "입력 텍스트: 인도와 미국에서 발사된 임무들을 나열하세요.\n\nDDL statements:\nCREATE TABLE Satellite_Missions (id INT PRIMARY KEY, mission_name VARCHAR(100), launch_date DATE, country VARCHAR(100)); INSERT INTO Satellite_Missions (id, mission_name, launch_date, country) VALUES (1, 'Starlink 1', '2018-05-24', 'USA'); INSERT INTO Satellite_Missions (id, mission_name, launch_date, country) VALUES (2, 'GSAT-30', '2020-01-17', 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name FROM Satellite_Missions WHERE country IN ('India', 'USA');"
    },
    {
        "instruction": "입력 텍스트: e스포츠 이벤트에 참가한 플레이어들의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, name VARCHAR(50), age INT, game_preference VARCHAR(20)); CREATE TABLE esports_events (id INT, event_name VARCHAR(50), date DATE, player_id INT); INSERT INTO players (id, name, age, game_preference) VALUES (1, 'John Doe', 25, 'VR'); INSERT INTO esports_events (id, event_name, date, player_id) VALUES (1, 'GameX', '2023-06-01', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT players.name FROM players INNER JOIN esports_events ON players.id = esports_events.player_id;"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년까지 시카고 도시에서 진행된 지속 가능한 건축 프로젝트의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE sustainable_projects (project_id INT, city VARCHAR(20), year INT, project_type VARCHAR(20)); INSERT INTO sustainable_projects (project_id, city, year, project_type) VALUES (1, 'Chicago', 2020, 'Sustainable'), (2, 'Chicago', 2019, 'Sustainable'), (3, 'New York', 2020, 'Sustainable'), (4, 'Los Angeles', 2020, 'Sustainable'), (5, 'Chicago', 2018, 'Sustainable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(project_type = 'Sustainable') FROM sustainable_projects WHERE city = 'Chicago' AND year BETWEEN 2018 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 후불제 모바일 고객의 최대 월간 데이터 사용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mobile_subscribers (subscriber_id INT, data_usage FLOAT, state VARCHAR(20), subscription_type VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, data_usage, state, subscription_type) VALUES (1, 3.5, 'New York', 'postpaid'), (2, 4.2, 'New York', 'postpaid'), (3, 3.8, 'California', 'prepaid');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(data_usage) FROM mobile_subscribers WHERE state = 'New York' AND subscription_type = 'postpaid';"
    },
    {
        "instruction": "입력 텍스트: 오리건주에 있는 댐들 중 최대 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Dams (id INT, name TEXT, location TEXT, state TEXT, built DATE); INSERT INTO Dams (id, name, location, state, built) VALUES (1, 'Dam A', 'Location A', 'Oregon', '1950-01-01'), (2, 'Dam B', 'Location B', 'Washington', '2000-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(DATEDIFF(CURDATE(), built) / 365.25) FROM Dams WHERE state = 'Oregon';"
    },
    {
        "instruction": "입력 텍스트: MLB의 모든 야구 선수들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, name VARCHAR(50), age INT, sport VARCHAR(20)); INSERT INTO players (id, name, age, sport) VALUES (1, 'John Doe', 30, 'Baseball'); INSERT INTO players (id, name, age, sport) VALUES (2, 'Jane Smith', 25, 'Baseball');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM players WHERE sport = 'Baseball';"
    },
    {
        "instruction": "입력 텍스트: media_library'에서 각 출처별로 총 몇 개의 기사와 비디오가 있습니까?\n\nDDL statements:\nCREATE TABLE media_library (id INT, type VARCHAR(10), title VARCHAR(50), length FLOAT, source VARCHAR(50)); INSERT INTO media_library (id, type, title, length, source) VALUES (1, 'article', 'Sample Article 1', 5.5, 'BBC'); INSERT INTO media_library (id, type, title, length, source) VALUES (2, 'video', 'Sample Video 1', 12.3, 'CNN'); INSERT INTO media_library (id, type, title, length, source) VALUES (3, 'article', 'Sample Article 2', 7.2, 'BBC');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT source, COUNT(*) FROM media_library WHERE type IN ('article', 'video') GROUP BY source;"
    },
    {
        "instruction": "입력 텍스트: 잠수함 협곡 중 기록된 최대 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE submarine_canyons (name VARCHAR(255), depth FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(depth) FROM submarine_canyons;"
    },
    {
        "instruction": "입력 텍스트: 점수가 2 이하인 모든 댓글을 삭제하세요.\n\nDDL statements:\nCREATE TABLE posts (id INT PRIMARY KEY, title TEXT, content TEXT); CREATE TABLE comments (id INT PRIMARY KEY, post_id INT, content TEXT, score INT); INSERT INTO posts (id, title, content) VALUES (1, 'Post 1', 'Content 1'), (2, 'Post 2', 'Content 2'); INSERT INTO comments (id, post_id, content, score) VALUES (1, 1, 'Comment 1', 5), (2, 1, 'Comment 2', 3), (3, 2, 'Comment 3', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM comments WHERE score <= 2;"
    },
    {
        "instruction": "입력 텍스트: StudentAccommodations 테이블에서 학생당 평균 숙박 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE StudentAccommodations (studentID INT, accommodationType VARCHAR(50), cost FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM StudentAccommodations;"
    },
    {
        "instruction": "입력 텍스트: 재고 내 '재활용 플라스틱' 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE product (product_id INT, name VARCHAR(255), quantity INT, material VARCHAR(255)); INSERT INTO product (product_id, name, quantity, material) VALUES (1, 'Recycled Plastic Bottle', 50, 'recycled plastic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM product WHERE material = 'recycled plastic';"
    },
    {
        "instruction": "입력 텍스트: 각 광산의 총 직원 수와 채굴된 자원의 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Mine (MineID int, MineName varchar(50), Location varchar(50), EmployeeCount int, CoalQuantity int, IronQuantity int, GoldQuantity int); INSERT INTO Mine VALUES (1, 'ABC Mine', 'Colorado', 100, 5000, 8000, 12000), (2, 'DEF Mine', 'Wyoming', 120, 7000, 9000, 15000), (3, 'GHI Mine', 'West Virginia', 80, 6000, 10000, 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MineName, EmployeeCount, SUM(CoalQuantity + IronQuantity + GoldQuantity) as TotalResources FROM Mine GROUP BY MineName;"
    },
    {
        "instruction": "입력 텍스트: 시드 펀딩을 받지 않은 회사들을 나열하세요.\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT); CREATE TABLE fundings (id INT, company_id INT, round TEXT); INSERT INTO companies (id, name) VALUES (1, 'Techshark'), (2, 'Ecoline'), (3, 'GlobalFusion'), (4, 'QuantumLabs'), (5, 'Oceanic'); INSERT INTO fundings (id, company_id, round) VALUES (1, 1, 'Series A'), (2, 1, 'Series B'), (3, 2, 'Seed'), (4, 3, 'Series A'), (5, 3, 'Series B'), (6, 4, 'Series A'), (7, 5, 'Series A');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT companies.name FROM companies LEFT JOIN fundings ON companies.id = fundings.company_id WHERE fundings.round != 'Seed' OR fundings.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 재료 유형별 총 폐기물 발생량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_generation (location VARCHAR(50), material_type VARCHAR(50), quantity INT); INSERT INTO waste_generation (location, material_type, quantity) VALUES ('Tokyo', 'Plastic', 1200), ('Tokyo', 'Paper', 1800), ('Tokyo', 'Metal', 1400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material_type, SUM(quantity) FROM waste_generation WHERE location = 'Tokyo' GROUP BY material_type;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후 온대림에서 이산화탄소 흡수량이 가장 높은 상위 세 종의 나무를 확인하세요.\n\nDDL statements:\nCREATE TABLE co2_sequestration (id INT, tree_species VARCHAR(50), co2_sequestration FLOAT, year INT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT tree_species, co2_sequestration FROM co2_sequestration WHERE region = 'Temperate' AND year >= 2010 GROUP BY tree_species ORDER BY SUM(co2_sequestration) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 특정 날짜(예: 2021-02-20)에 운동 활동에 참여한 모든 회원을 나열하세요.\n\nDDL statements:\nCREATE TABLE member_workout_date (member_id INT, activity VARCHAR(50), workout_date DATE); INSERT INTO member_workout_date (member_id, activity, workout_date) VALUES (1, 'Running', '2021-02-20'); INSERT INTO member_workout_date (member_id, activity, workout_date) VALUES (2, 'Yoga', '2021-02-20'); INSERT INTO member_workout_date (member_id, activity, workout_date) VALUES (3, 'Running', '2021-02-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT member_id FROM member_workout_date WHERE workout_date = '2021-02-20';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 뉴멕시코에서 원주민 소유의 생산자들이 판매한 농축물의 평균 그램당 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ProducersNewMexico (ProducerID INT, Name VARCHAR(100), State VARCHAR(100), Ownership VARCHAR(50)); CREATE TABLE ConcentratePrices (PriceID INT, ProducerID INT, PricePerGram DECIMAL(5,2), PriceDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT P.Name, AVG(CP.PricePerGram) as AvgPricePerGram FROM ProducersNewMexico P JOIN ConcentratePrices CP ON P.ProducerID = CP.ProducerID WHERE P.State = 'New Mexico' AND P.Ownership = 'Indigenous' AND CP.PriceDate >= DATEADD(quarter, -1, GETDATE()) AND CP.PricePerGram IS NOT NULL GROUP BY P.Name;"
    },
    {
        "instruction": "입력 텍스트: 해저 지도화 프로젝트에서 가장 깊은 곳은 얼마나 깊습니까?\n\nDDL statements:\nCREATE TABLE ocean_floor_mapping (location TEXT, depth REAL); INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Sunda Trench', 8047.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(depth) FROM ocean_floor_mapping;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 월별로 \"articles\" 테이블에 몇 개의 기사가 게시되었나요?\n\nDDL statements:\nCREATE TABLE articles (article_id INT, title VARCHAR(100), category VARCHAR(50), publication_date DATE, views INT); INSERT INTO articles (article_id, title, category, publication_date, views) VALUES (1, 'News from the Capital', 'Politics', '2022-01-01', 1500), (2, 'Tech Innovations in 2022', 'Technology', '2022-01-02', 1200), (3, 'The Art of Persuasion', 'Psychology', '2022-01-03', 1800), (4, 'Education Reforms in Europe', 'Education', '2022-01-04', 1000), (5, 'Climate Change in Asia', 'Environment', '2022-02-05', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM publication_date), COUNT(article_id) FROM articles WHERE publication_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY EXTRACT(MONTH FROM publication_date);"
    },
    {
        "instruction": "입력 텍스트: 2020년에 카리브해를 방문한 관광객의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE caribbean_tourists (id INT, country VARCHAR(20), region VARCHAR(20), year INT, visitors INT); INSERT INTO caribbean_tourists (id, country, region, year, visitors) VALUES (1, 'Jamaica', 'Caribbean', 2020, 500000), (2, 'Bahamas', 'Caribbean', 2020, 300000), (3, 'Puerto Rico', 'Caribbean', 2020, 400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(visitors) as total_visitors FROM caribbean_tourists WHERE region = 'Caribbean' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2021년 오리건에서 인디카 종류의 그램당 평균 가격은 얼마였나요?\n\nDDL statements:\nCREATE TABLE prices (id INT, state VARCHAR(50), year INT, strain_type VARCHAR(50), price FLOAT); INSERT INTO prices (id, state, year, strain_type, price) VALUES (1, 'Oregon', 2021, 'Indica', 12.5), (2, 'Oregon', 2021, 'Sativa', 15.0), (3, 'California', 2021, 'Hybrid', 13.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM prices WHERE state = 'Oregon' AND year = 2021 AND strain_type = 'Indica';"
    },
    {
        "instruction": "입력 텍스트: 북서' 지역에서 어느 주로든 배송된 가장 무거운 상위 3개의 패키지를 찾으세요.\n\nDDL statements:\nCREATE TABLE warehouses (id INT, name TEXT, region TEXT); INSERT INTO warehouses (id, name, region) VALUES (1, 'Seattle Warehouse', 'northwest'), (2, 'Portland Warehouse', 'northwest'); CREATE TABLE packages (id INT, warehouse_id INT, weight FLOAT, state TEXT); INSERT INTO packages (id, warehouse_id, weight, state) VALUES (1, 1, 55.5, 'Washington'), (2, 1, 43.3, 'Oregon'), (3, 2, 66.8, 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY weight DESC) as row_num FROM packages p JOIN warehouses w ON p.warehouse_id = w.id WHERE w.region = 'northwest') sub WHERE row_num <= 3;"
    },
    {
        "instruction": "입력 텍스트: Sunnyside' 지역의 화재 긴급 상황에 대한 평균 응답 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE emergencies (id INT, emergency_type VARCHAR(20), neighborhood VARCHAR(20), response_time FLOAT); INSERT INTO emergencies (id, emergency_type, neighborhood, response_time) VALUES (1, 'medical', 'Northside', 7.5), (2, 'fire', 'Sunnyside', 6.3), (3, 'fire', 'Downtown', 8.1), (4, 'fire', 'Sunnyside', 6.8), (5, 'medical', 'Northside', 7.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) FROM emergencies WHERE emergency_type = 'fire' AND neighborhood = 'Sunnyside';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 예산 증가액이 가장 큰 상위 2개의 농촌 인프라 프로젝트를 찾으세요?\n\nDDL statements:\nCREATE TABLE RuralInfrastructure (ProjectID INT, ProjectName VARCHAR(50), Location VARCHAR(50), Budget FLOAT, FiscalYear INT); INSERT INTO RuralInfrastructure (ProjectID, ProjectName, Location, Budget, FiscalYear) VALUES (1, 'Road Construction', 'Nigeria', 500000.00, 2019), (2, 'Bridge Construction', 'Kenya', 600000.00, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProjectName, (Budget - LAG(Budget, 1) OVER (PARTITION BY ProjectName ORDER BY FiscalYear)) AS BudgetDifference FROM RuralInfrastructure WHERE Location = 'Africa' ORDER BY BudgetDifference DESC, ProjectName LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 위치와 연도별 평균 수자원 보존 사업 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE WaterConservationBudget (id INT, initiative_name VARCHAR(50), location VARCHAR(50), budget_amount INT, start_date DATE, end_date DATE); INSERT INTO WaterConservationBudget (id, initiative_name, location, budget_amount, start_date, end_date) VALUES (1, 'Initiative A', 'City A', 100000, '2022-01-01', '2022-12-31'); INSERT INTO WaterConservationBudget (id, initiative_name, location, budget_amount, start_date, end_date) VALUES (2, 'Initiative B', 'City B', 150000, '2022-01-01', '2022-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, EXTRACT(YEAR FROM start_date) AS initiative_year, AVG(budget_amount) AS avg_budget FROM WaterConservationBudget GROUP BY location, initiative_year;"
    },
    {
        "instruction": "입력 텍스트: 모든 탐사 저널리즘 프로젝트와 해당 팀 멤버를 나열하세요.\n\nDDL statements:\nCREATE TABLE projects (id INT, name TEXT, type TEXT); INSERT INTO projects VALUES (1, 'Project A', 'investigative'); INSERT INTO projects VALUES (2, 'Project B', 'regular');   CREATE TABLE team_members (id INT, project_id INT, name TEXT); INSERT INTO team_members VALUES (1, 1, 'John Doe'); INSERT INTO team_members VALUES (2, 1, 'Jane Smith'); INSERT INTO team_members VALUES (3, 2, 'Mike Johnson');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT projects.name, team_members.name FROM projects INNER JOIN team_members ON projects.id = team_members.project_id WHERE projects.type = 'investigative';"
    },
    {
        "instruction": "입력 텍스트: 중국에서 출발한 화물의 최소 무게는 얼마인가요?\n\nDDL statements:\nCREATE TABLE shipments (id INT, source VARCHAR(20), destination VARCHAR(20), weight FLOAT); INSERT INTO shipments (id, source, destination, weight) VALUES (1, 'China', 'United States', 50.5), (2, 'China', 'Canada', 30.3), (3, 'Mexico', 'United States', 45.6), (4, 'Canada', 'United States', 25.8), (5, 'Canada', 'Mexico', 38.2), (6, 'Mexico', 'Canada', 40.1), (7, 'Brazil', 'United States', 70.0), (8, 'China', 'Germany', 20.5), (9, 'China', 'Australia', 28.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(weight) FROM shipments WHERE source = 'China';"
    },
    {
        "instruction": "입력 텍스트: 2018년, 2019년, 2020년 서울에서 관광으로 인한 평균 지역 경제 영향은 얼마입니까?\n\nDDL statements:\nCREATE TABLE tourism_impact (year INT, city TEXT, economic_impact INT); INSERT INTO tourism_impact (year, city, economic_impact) VALUES (2018, 'Seoul', 12000), (2019, 'Seoul', 15000), (2020, 'Seoul', 9000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(economic_impact) FROM tourism_impact WHERE city = 'Seoul' AND year IN (2018, 2019, 2020);"
    },
    {
        "instruction": "입력 텍스트: 남미 지역에서 인력 개발에 중점을 둔 회사들의 총 직원 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, country TEXT, workforce_development BOOLEAN, num_employees INT); INSERT INTO companies (id, name, country, workforce_development, num_employees) VALUES (1, 'UVW Corp', 'Brazil', TRUE, 800), (2, 'XYZ Inc', 'Argentina', FALSE, 900), (3, 'ABC Co', 'Colombia', TRUE, 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_employees) FROM companies WHERE country IN ('Brazil', 'Argentina', 'Colombia') AND workforce_development = TRUE;"
    },
    {
        "instruction": "입력 텍스트: \"Virtual Combat\"을 플레이한 남미 출신 플레이어들이 한 구매의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerRegion VARCHAR(20), GameName VARCHAR(20)); INSERT INTO Players (PlayerID, PlayerRegion, GameName) VALUES (1, 'South America', 'Virtual Combat'), (2, 'North America', 'Virtual Combat'), (3, 'South America', 'Virtual Combat'); CREATE TABLE Purchases (PlayerID INT, Amount DECIMAL(5,2)); INSERT INTO Purchases (PlayerID, Amount) VALUES (1, 12.50), (2, 15.00), (3, 17.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT Players.PlayerID) FROM Players JOIN Purchases ON Players.PlayerID = Purchases.PlayerID WHERE Players.PlayerRegion = 'South America' AND Players.GameName = 'Virtual Combat';"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 해양 산성화 연구 출판물이 가장 많은 상위 3개 국가를 찾아주세요.\n\nDDL statements:\nCREATE TABLE publications (id INTEGER, title TEXT, country TEXT, publication_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM publications WHERE publication_date >= '2015-01-01' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 북미 지역의 농촌 보건 센터들이 제공하는 환자의 총 수는 얼마이며, 이 중 25000명 이상을 제공하는 센터는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE rural_health_centers (center_id INT, center_name VARCHAR(100), country VARCHAR(50), num_patients INT); INSERT INTO rural_health_centers (center_id, center_name, country, num_patients) VALUES (1, 'Center A', 'United States', 28000), (2, 'Center B', 'United States', 24000), (3, 'Center C', 'Canada', 31000), (4, 'Center D', 'Canada', 36000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) AS total_patients_served, COUNT(*) FILTER (WHERE num_patients > 25000) AS centers_with_more_than_25000_patients FROM rural_health_centers WHERE country IN (SELECT name FROM countries WHERE continent = 'North America');"
    },
    {
        "instruction": "입력 텍스트: 어느 나라가 가장 많은 천연 재료를 공급하나요?\n\nDDL statements:\nCREATE TABLE Ingredients (id INT, product_id INT, country VARCHAR(255), is_natural BOOLEAN); INSERT INTO Ingredients (id, product_id, country, is_natural) VALUES (1, 1, 'USA', true), (2, 1, 'Canada', false), (3, 2, 'France', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as total_natural FROM Ingredients WHERE is_natural = true GROUP BY country ORDER BY total_natural DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 독립 아티스트들이 발표한 팝 장르의 노래들의 평균 길이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE indie_artists (artist_id INT, name VARCHAR(100), genre VARCHAR(20)); INSERT INTO indie_artists (artist_id, name, genre) VALUES (1, 'Taylor Swift', 'Pop'), (2, 'Billie Eilish', 'Pop'); CREATE TABLE songs (song_id INT, title VARCHAR(100), length FLOAT, artist_id INT); INSERT INTO songs (song_id, title, length, artist_id) VALUES (1, 'Shake it Off', 198.3, 1), (2, 'Bad Guy', 224.5, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(length) FROM songs JOIN indie_artists ON songs.artist_id = indie_artists.artist_id WHERE indie_artists.genre = 'Pop' AND indie_artists.name IN ('Taylor Swift', 'Billie Eilish');"
    },
    {
        "instruction": "입력 텍스트: ports' 테이블에서 지역이 '북아메리카'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE ports (id INT PRIMARY KEY, name VARCHAR(50), region VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM ports WHERE region = 'North America';"
    },
    {
        "instruction": "입력 텍스트: 극장 이벤트의 최대 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (id INT, name TEXT, category TEXT, price DECIMAL(5,2)); INSERT INTO events (id, name, category, price) VALUES (1, 'Concert', 'music', 50.00), (2, 'Theater Play', 'theater', 75.00), (3, 'Jazz Festival', 'music', 35.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM events WHERE category = 'theater';"
    },
    {
        "instruction": "입력 텍스트: 교육'과 '예술' 카테고리에서 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, Category TEXT, Amount DECIMAL); INSERT INTO Donations (DonationID, DonorID, Category, Amount) VALUES (1, 1, 'Arts', 50), (2, 1, 'Education', 100), (3, 2, 'Arts', 75), (4, 2, 'Education', 25), (5, 3, 'Arts', 100), (6, 3, 'Education', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Amount) FROM Donations WHERE Category IN ('Education', 'Arts');"
    },
    {
        "instruction": "입력 텍스트: 모든 해양 보호 구역의 평균 수심은 얼마입니까?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (area_name VARCHAR(50), depth FLOAT); INSERT INTO marine_protected_areas (area_name, depth) VALUES ('Galapagos Islands', 2000.0), ('Great Barrier Reef', 1000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) FROM marine_protected_areas;"
    },
    {
        "instruction": "입력 텍스트: crop_yield' 테이블에서 'yield_id'가 301인 행의 'crop_type' 열을 'rice'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE crop_yield (yield_id INT, crop_type VARCHAR(20), yield_amount INT, timestamp TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE crop_yield SET crop_type = 'rice' WHERE yield_id = 301;"
    },
    {
        "instruction": "입력 텍스트: 2022년 하반기 프랑스 방문객 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE visitor_statistics (id INT, country TEXT, year INT, half INT, visitors INT); INSERT INTO visitor_statistics (id, country, year, half, visitors) VALUES (1, 'France', 2022, 1, 1500000), (2, 'France', 2022, 2, 1800000), (3, 'Italy', 2022, 1, 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(visitors) FROM visitor_statistics WHERE country = 'France' AND half = 2;"
    },
    {
        "instruction": "입력 텍스트: \"climate change\"와 관련된 모든 뉴스 스토리와 해당 연령대별로 그룹화된 \"news_stories\" 및 \"audience_demographics\" 테이블의 관객 통계를 나열합니다.\n\nDDL statements:\nCREATE TABLE news_stories (id INT, title VARCHAR(100), content TEXT, topic VARCHAR(30)); CREATE TABLE audience_demographics (id INT, news_story_id INT, age INT, gender VARCHAR(10), location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT news_stories.title, FLOOR(audience_demographics.age / 10) * 10 as age_range, COUNT(*) FROM news_stories INNER JOIN audience_demographics ON news_stories.id = audience_demographics.news_story_id WHERE news_stories.topic = 'climate change' GROUP BY news_stories.title, age_range;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 참여국가 수가 가장 많았던 국방 외교 이벤트는 무엇인가요?\n\nDDL statements:\nCREATE TABLE defense_diplomacy (event_id INT, year INT, country VARCHAR(50)); INSERT INTO defense_diplomacy (event_id, year, country) VALUES (123, 2019, 'India'), (123, 2019, 'China'), (456, 2019, 'Russia'), (456, 2019, 'United States'), (789, 2019, 'Germany'), (789, 2019, 'France'), (321, 2019, 'Brazil'), (321, 2019, 'Argentina'); INSERT INTO defense_diplomacy (event_id, year, country) VALUES (567, 2019, 'Indonesia'), (567, 2019, 'Malaysia'), (890, 2019, 'Japan'), (890, 2019, 'South Korea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT event_id, COUNT(DISTINCT country) FROM defense_diplomacy WHERE year = 2019 GROUP BY event_id ORDER BY COUNT(DISTINCT country) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 데이터셋 A를 사용하여 훈련된 모델 중 만족도 점수가 4.0보다 높은 모델의 비율이 각 지역별로 어떻게 되는지?\n\nDDL statements:\nCREATE TABLE models (id INT, dataset VARCHAR(20), satisfaction FLOAT, region VARCHAR(20)); INSERT INTO models VALUES (1, 'datasetA', 4.3, 'Europe'), (2, 'datasetA', 4.5, 'Asia'), (3, 'datasetB', 3.9, 'Africa'), (4, 'datasetB', 4.1, 'Africa'), (5, 'datasetA', 4.2, 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, 100.0 * AVG(satisfaction > 4.0) FROM models WHERE dataset = 'datasetA' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 기관별 학생들의 최소 정신 건강 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE student_mental_health (student_id INT, institution_id INT, mental_health_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT institution_id, MIN(mental_health_score) as min_mental_health_score FROM student_mental_health GROUP BY institution_id;"
    },
    {
        "instruction": "입력 텍스트: 컨트리 장르에서 가장 짧은 song_length는 무엇인가요?\n\nDDL statements:\nCREATE TABLE genres (genre VARCHAR(10), song_id INT, song_length FLOAT);   INSERT INTO genres (genre, song_id, song_length) VALUES ('country', 13, 175.3), ('country', 14, 200.2), ('country', 15, 190.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(song_length) FROM genres WHERE genre = 'country';"
    },
    {
        "instruction": "입력 텍스트: 광고 노출을 받지 않은 사용자를 확인하세요.\n\nDDL statements:\nCREATE TABLE users (id INT, name VARCHAR(50), join_date DATE, total_likes INT); CREATE TABLE posts (id INT, user_id INT, content TEXT, posted_at TIMESTAMP, likes INT); CREATE TABLE ads (id INT, post_id INT, impressions INT, clicks INT, cost FLOAT); INSERT INTO users (id, name, join_date, total_likes) VALUES (1, 'Sanaa', '2021-01-01', 120), (2, 'Babacar', '2020-06-15', 180), (3, 'Joanne', '2019-08-03', 200); INSERT INTO posts (id, user_id, content, posted_at, likes) VALUES (1, 1, 'Exploring social media data', '2021-03-02 10:30:00', 20), (2, 2, 'Data privacy in social networks', '2021-02-18 14:45:00', 30), (3, 3, 'Programming tips for data analysts', '2021-03-01 09:00:00', 50); INSERT INTO ads (id, post_id, impressions, clicks, cost) VALUES (1, 1, 5000, 100, 50.5), (2, 2, 7000, 120, 55.3), (3, 3, 3000, 50, 30.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.id, u.name FROM users u LEFT JOIN posts p ON u.id = p.user_id LEFT JOIN ads a ON p.id = a.post_id WHERE a.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 가장 많은 컨테이너를 수령한 항구의 이름을 구하시오.\n\nDDL statements:\nCREATE TABLE port (port_id INT, port_name TEXT, country TEXT);CREATE TABLE shipment (shipment_id INT, container_count INT, ship_date DATE, port_id INT); INSERT INTO port VALUES (1, 'Sydney', 'Australia'), (2, 'Tokyo', 'Japan'), (3, 'Los Angeles', 'USA'); INSERT INTO shipment VALUES (1, 500, '2020-01-01', 1), (2, 300, '2020-02-15', 1), (3, 400, '2020-03-01', 2), (4, 200, '2019-07-01', 3), (5, 100, '2018-01-01', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT port_name FROM port INNER JOIN (SELECT port_id, SUM(container_count) as total_containers FROM shipment WHERE YEAR(ship_date) = 2020 GROUP BY port_id ORDER BY total_containers DESC LIMIT 1) subquery ON port.port_id = subquery.port_id;"
    },
    {
        "instruction": "입력 텍스트: 각 주에 있는 병원은 몇 개이며, 그 병원들의 총 병상 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE states (id INT, name TEXT); INSERT INTO states (id, name) VALUES (1, 'California'), (2, 'Texas'); CREATE TABLE hospitals (id INT, name TEXT, state_id INT, num_beds INT); INSERT INTO hospitals (id, name, state_id, num_beds) VALUES (1, 'Hospital A', 1, 500), (2, 'Hospital B', 2, 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT states.name, COUNT(hospitals.id), SUM(hospitals.num_beds) FROM hospitals INNER JOIN states ON hospitals.state_id = states.id GROUP BY states.name;"
    },
    {
        "instruction": "입력 텍스트: 2020년 아마존 열대우림의 최대 탄소 흡수량(메트릭톤 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE carbon_sequestration (forest_type VARCHAR(30), year INT, sequestration FLOAT); INSERT INTO carbon_sequestration (forest_type, year, sequestration) VALUES ('Tropical Rainforest - Amazon', 2020, 1234.5), ('Tropical Rainforest - Amazon', 2019, 7890.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(sequestration) FROM carbon_sequestration WHERE forest_type = 'Tropical Rainforest - Amazon' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 특정 우편번호 지역에서 인증되지 않은 커뮤니티 건강 관리자를 나열합니다.\n\nDDL statements:\nCREATE TABLE community_health_workers (id INT PRIMARY KEY, worker_name VARCHAR(255), certification_date DATE, zip_code VARCHAR(10)); CREATE VIEW worker_cert_dates AS SELECT worker_name, MIN(certification_date) as min_cert_date FROM community_health_workers GROUP BY worker_name;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT worker_name FROM community_health_workers WHERE zip_code = '11123' AND certification_date IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 가장 빠른 선박 유형의 최대 속도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Vessels (ID VARCHAR(10), Name VARCHAR(20), Type VARCHAR(20), Max_Speed FLOAT); INSERT INTO Vessels (ID, Name, Type, Max_Speed) VALUES ('1', 'Vessel A', 'Cargo', 20.5), ('2', 'Vessel B', 'Tanker', 25.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Max_Speed) FROM Vessels WHERE Type = (SELECT Type FROM Vessels WHERE Max_Speed = (SELECT MAX(Max_Speed) FROM Vessels));"
    },
    {
        "instruction": "입력 텍스트: SupportServices' 테이블에서 'Assistive Listening Devices' 서비스의 예산을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE SupportServices (ServiceID INT, ServiceName VARCHAR(50), ServiceType VARCHAR(50), Budget DECIMAL(10,2)); INSERT INTO SupportServices (ServiceID, ServiceName, ServiceType, Budget) VALUES (1, 'ASL Interpreter', 'SignLanguage', 15000), (2, 'Wheelchair Ramp', 'PhysicalAccess', 8000), (3, 'Braille Materials', 'VisualAssistance', 12000), (4, 'Assistive Listening Devices', 'AuditoryAssistance', 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE SupportServices SET Budget = 13000 WHERE ServiceName = 'Assistive Listening Devices';"
    },
    {
        "instruction": "입력 텍스트: community_development' 테이블에서 'community_size'가 500 미만인 모든 레코드를 삭제하세요?\n\nDDL statements:\nCREATE TABLE community_development (id INT, community_name TEXT, community_size INT, region TEXT, funding FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM community_development WHERE community_size < 500;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 분기별로 나누어 순환 공급망이 있는 제품과 없는 제품의 수익 차이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE product_revenue (product_id int, circular_supply_chain boolean, revenue decimal, sale_date date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATEPART(YEAR, sale_date) AS year, DATEPART(QUARTER, sale_date) AS quarter, (SUM(CASE WHEN circular_supply_chain THEN revenue ELSE 0 END) - SUM(CASE WHEN NOT circular_supply_chain THEN revenue ELSE 0 END)) AS revenue_difference FROM product_revenue WHERE sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY DATEPART(YEAR, sale_date), DATEPART(QUARTER, sale_date);"
    },
    {
        "instruction": "입력 텍스트: traffic' 테이블에서 case_outcome이 'pending'인 모든 사례를 삭제하세요\n\nDDL statements:\nCREATE TABLE traffic (case_id INT, client_name VARCHAR(50), case_type VARCHAR(20), case_outcome VARCHAR(20), case_date DATE); INSERT INTO traffic (case_id, client_name, case_type, case_outcome, case_date) VALUES (7, 'Alice Davis', 'traffic', 'settled', '2021-02-22');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM traffic WHERE case_outcome = 'pending';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 지역에서 월별로 접수된 장애 지원 요청 건수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Request (RequestID INT, RequestDate DATE, Region VARCHAR(50), RequestType VARCHAR(50)); INSERT INTO Request (RequestID, RequestDate, Region, RequestType) VALUES (1, '2021-01-01', 'Northeast', 'Disability Support'); INSERT INTO Request (RequestID, RequestDate, Region, RequestType) VALUES (2, '2021-02-15', 'Southeast', 'Disability Support'); INSERT INTO Request (RequestID, RequestDate, Region, RequestType) VALUES (3, '2020-08-01', 'Midwest', 'Disability Support');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATEPART(YEAR, RequestDate) AS Year, DATEPART(MONTH, RequestDate) AS Month, Region, COUNT(*) AS Requests FROM Request WHERE RequestType = 'Disability Support' AND RequestDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY DATEPART(YEAR, RequestDate), DATEPART(MONTH, RequestDate), Region;"
    },
    {
        "instruction": "입력 텍스트: Apple Music에서 K-pop 트랙의 일별 총 스트리밍 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE DailyAppleStreams (StreamID INT, TrackID INT, PlatformID INT, Date DATE, Streams INT); INSERT INTO DailyAppleStreams (StreamID, TrackID, PlatformID, Date, Streams) VALUES (1, 1, 5, '2022-01-01', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(DAY FROM Date) as Day, EXTRACT(MONTH FROM Date) as Month, EXTRACT(YEAR FROM Date) as Year, SUM(Streams) as TotalStreams FROM DailyAppleStreams JOIN Tracks ON DailyAppleStreams.TrackID = Tracks.TrackID JOIN StreamingPlatforms ON DailyAppleStreams.PlatformID = StreamingPlatforms.PlatformID WHERE Genre = 'K-pop' AND PlatformName = 'Apple Music' GROUP BY Day, Month, Year;"
    },
    {
        "instruction": "입력 텍스트: 주거용 건물에서 일한 건설 노동자의 최대 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ConstructionLaborStatistics (id INT, name VARCHAR(50), job VARCHAR(50), salary INT); INSERT INTO ConstructionLaborStatistics VALUES (1, 'John Doe', 'Carpenter', 45000); INSERT INTO ConstructionLaborStatistics VALUES (2, 'Jane Smith', 'Electrician', 60000); CREATE TABLE BuildingTypes (id INT, building_type VARCHAR(50)); INSERT INTO BuildingTypes VALUES (1, 'Residential'); INSERT INTO BuildingTypes VALUES (2, 'Commercial'); CREATE TABLE WorkerBuildings (worker_id INT, building_id INT); INSERT INTO WorkerBuildings VALUES (1, 1); INSERT INTO WorkerBuildings VALUES (2, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(cls.salary) FROM ConstructionLaborStatistics cls JOIN WorkerBuildings wb ON cls.id = wb.worker_id JOIN BuildingTypes bt ON wb.building_id = bt.id WHERE bt.building_type = 'Residential';"
    },
    {
        "instruction": "입력 텍스트: 유럽에 있는 지속 가능성 등급이 5이고 방문객 수가 최소 1000명 이상인 모든 목적지를 찾으세요.\n\nDDL statements:\nCREATE TABLE Destinations (destination_id INT, name VARCHAR(50), country VARCHAR(50), sustainability_rating INT, visitor_count INT); INSERT INTO Destinations (destination_id, name, country, sustainability_rating, visitor_count) VALUES (1, 'Eco Village', 'France', 5, 1500); INSERT INTO Destinations (destination_id, name, country, sustainability_rating, visitor_count) VALUES (2, 'Green City', 'Germany', 4, 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Destinations WHERE country IN ('Europe') AND sustainability_rating = 5 AND visitor_count >= 1000;"
    },
    {
        "instruction": "입력 텍스트: 달라스의 버스 104에 대한 새로운 버스 유지보수 기록을 추가합니다\n\nDDL statements:\nCREATE TABLE buses (bus_id INT, city VARCHAR(50)); INSERT INTO buses (bus_id, city) VALUES (101, 'Portland'), (102, 'Portland'), (103, 'Seattle'), (104, 'Dallas'); CREATE TABLE maintenance (record_id INT, bus_id INT, year INT); INSERT INTO maintenance (record_id, bus_id, year) VALUES (1, 101, 2015), (2, 102, 2017), (3, 101, 2018), (4, 103, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO maintenance (record_id, bus_id, year) VALUES (5, 104, 2020);"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 1인당 물 사용량이 가장 높은 커뮤니티는 어디인가요?\n\nDDL statements:\nCREATE TABLE communities (id INT, name TEXT, state TEXT, water_usage FLOAT); INSERT INTO communities (id, name, state, water_usage) VALUES (1, 'Los Angeles', 'California', 150), (2, 'San Francisco', 'California', 80), (3, 'San Diego', 'California', 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, AVG(water_usage) as avg_water_usage FROM communities WHERE state = 'California' GROUP BY name ORDER BY avg_water_usage DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 북미 국가들에서 전통 예술 프로그램에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE TraditionalArts (country VARCHAR(50), budget INT); INSERT INTO TraditionalArts (country, budget) VALUES ('United States', 1500000), ('Canada', 900000), ('Mexico', 700000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM TraditionalArts WHERE country IN ('United States', 'Canada', 'Mexico') AND region = 'North America';"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2019년에 유럽 연합에서 수출된 유로퓸의 총 수량을 제공하세요.\n\nDDL statements:\nCREATE TABLE europium_exports (year INT, quantity INT); INSERT INTO europium_exports (year, quantity) VALUES (2018, 200), (2019, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM europium_exports WHERE year IN (2018, 2019);"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 현재 매립지 용량을 입방미터로 얼마인가요?\n\nDDL statements:\nCREATE TABLE landfill_capacity(region VARCHAR(255), capacity_cu_m FLOAT, current_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, capacity_cu_m FROM landfill_capacity WHERE current_date = GETDATE();"
    },
    {
        "instruction": "입력 텍스트: \"attractions\" 테이블에서 \"popularity_score\"가 7 미만이고 \"category\"가 'Museum'인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE attractions (attraction_id INT, attraction_name VARCHAR(50), popularity_score DECIMAL(2,1), category VARCHAR(20), PRIMARY KEY (attraction_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM attractions WHERE popularity_score < 7 AND category = 'Museum';"
    },
    {
        "instruction": "입력 텍스트: 재난 구호' 또는 '주택' 관련 프로젝트에 참여한 자원봉사자의 총 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'disaster relief'), (2, 'Alice', 'housing'), (3, 'Charlie', 'education');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM volunteers WHERE cause_area IN ('disaster relief', 'housing');"
    },
    {
        "instruction": "입력 텍스트: 지난 해 각 주별 정신 건강 동등성 위반 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mental_health_parity (state VARCHAR(2), violations INT); INSERT INTO mental_health_parity (state, violations) VALUES ('CA', 20), ('NY', 30), ('TX', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.state, COUNT(*) as violations FROM mental_health_parity m WHERE m.violations > 0 AND m.violations < 365 GROUP BY m.state;"
    },
    {
        "instruction": "입력 텍스트: 포르투갈에서 유기농 화장품 제품의 최소 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE OrganicProducts (product VARCHAR(255), country VARCHAR(255), price DECIMAL(10,2)); INSERT INTO OrganicProducts (product, country, price) VALUES ('Lip Balm', 'Portugal', 5), ('Face Mask', 'Portugal', 10), ('Hand Cream', 'Portugal', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(price) FROM OrganicProducts WHERE country = 'Portugal';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 체결된 방위 계약의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE contract_timeline (contract_value NUMERIC, contract_date DATE); INSERT INTO contract_timeline (contract_value, contract_date) VALUES (6000000, '2022-01-01'), (4000000, '2022-02-15'), (3000000, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM contract_timeline WHERE contract_date >= DATEADD(quarter, -1, CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: 바켄 지층에 있는 우물들의 평균 생산율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wells (well_id INT, well_name VARCHAR(255), well_type VARCHAR(255), location VARCHAR(255)); INSERT INTO wells VALUES (1, 'Well A', 'Onshore', 'Bakken Formation'); INSERT INTO wells VALUES (2, 'Well B', 'Onshore', 'Utica Shale');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_rate) FROM (SELECT well_id, production_rate FROM well_production WHERE location LIKE 'Bakken%' ORDER BY production_rate DESC) WHERE row_number() OVER (ORDER BY production_rate DESC) <= 10;"
    },
    {
        "instruction": "입력 텍스트: 홀뮴과 툴륨의 시장 동향을 비교하다\n\nDDL statements:\nCREATE TABLE market_trends (year INT, element VARCHAR(10), price FLOAT); INSERT INTO market_trends VALUES (2015, 'Holmium', 100), (2016, 'Holmium', 110), (2015, 'Thulium', 200), (2016, 'Thulium', 220);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT element, price FROM market_trends WHERE year = 2015 UNION SELECT element, price FROM market_trends WHERE year = 2016 ORDER BY element, price;"
    },
    {
        "instruction": "입력 텍스트: passenger_count' 테이블에서 노선별 및 시간대별 승객 수를 보여주세요.\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS public_transport;CREATE TABLE IF NOT EXISTS public_transport.passenger_count (count_id SERIAL PRIMARY KEY, route_id INTEGER, passenger_count INTEGER, count_date DATE, count_time TIME);INSERT INTO public_transport.passenger_count (route_id, passenger_count, count_date, count_time) VALUES (101, 500, '2021-12-01', '10:00:00'), (102, 350, '2021-12-01', '11:00:00'), (101, 550, '2021-12-02', '12:00:00'), (102, 380, '2021-12-02', '13:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(HOUR FROM count_time) AS hour_of_day, route_id, passenger_count FROM public_transport.passenger_count;"
    },
    {
        "instruction": "입력 텍스트: 2021년 6월 각 지역별 총 강수량을 계산하세요.\n\nDDL statements:\nCREATE TABLE rainfall_data (id INT, region VARCHAR(255), rainfall INT, measurement_date DATE); INSERT INTO rainfall_data (id, region, rainfall, measurement_date) VALUES (1, 'North', 20, '2021-06-01'); INSERT INTO rainfall_data (id, region, rainfall, measurement_date) VALUES (2, 'South', 30, '2021-06-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(rainfall) as total_rainfall FROM rainfall_data WHERE measurement_date BETWEEN '2021-06-01' AND '2021-06-30' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 공급업체의 순환 공급망 이니셔티브 수를 나열합니다.\n\nDDL statements:\nCREATE TABLE Vendors (VendorID INT, VendorName TEXT, Country TEXT);CREATE TABLE SupplyChain (SupplyChainID INT, ProductID INT, VendorID INT, CircularSupplyChain BOOLEAN); INSERT INTO Vendors VALUES (1, 'VendorC', 'Canada'), (2, 'VendorD', 'Canada'); INSERT INTO SupplyChain VALUES (1, 1, 1, true), (2, 2, 1, false), (3, 3, 2, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.VendorName, COUNT(s.SupplyChainID) FROM Vendors v LEFT JOIN SupplyChain s ON v.VendorID = s.VendorID AND s.CircularSupplyChain = true GROUP BY v.VendorID, v.VendorName;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 VR 게임을 플레이한 플레이어는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Players.Country, COUNT(DISTINCT Players.PlayerID) FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID GROUP BY Players.Country;"
    },
    {
        "instruction": "입력 텍스트: 각 알고리즘의 국가별 평균 안전 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ai_safety (id INT, country VARCHAR(255), algorithm VARCHAR(255), safety_score FLOAT); INSERT INTO ai_safety (id, country, algorithm, safety_score) VALUES (1, 'USA', 'Algorithm A', 0.85), (2, 'Germany', 'Algorithm B', 0.92), (3, 'Japan', 'Algorithm C', 0.78);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT algorithm, country, AVG(safety_score) as average_safety_score FROM ai_safety GROUP BY algorithm, country;"
    },
    {
        "instruction": "입력 텍스트: 예술 및 문화 부문에서 매달 평균 기부된 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donations (donation_date DATE, donation_amount FLOAT, sector VARCHAR(255)); INSERT INTO donations (donation_date, donation_amount, sector) VALUES ('2021-01-01', 100.00, 'arts and culture'), ('2021-01-15', 50.00, 'education'), ('2021-02-20', 200.00, 'arts and culture'), ('2021-03-10', 75.00, 'healthcare'), ('2021-03-25', 150.00, 'arts and culture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(donation_amount) FROM donations WHERE sector = 'arts and culture' GROUP BY MONTH(donation_date);"
    },
    {
        "instruction": "입력 텍스트: 아메리카 지역에서 NATO 회원국이 수행한 인도주의 지원 임무의 수를 국가별 임무 수에 따라 내림차순으로 정렬하여 확인하세요.\n\nDDL statements:\nCREATE TABLE HumanitarianMissions (member VARCHAR(255), region VARCHAR(255), mission VARCHAR(255), year INT); INSERT INTO HumanitarianMissions (member, region, mission, year) VALUES ('Canada', 'Americas', 'Mission 1', 2018); INSERT INTO HumanitarianMissions (member, region, mission, year) VALUES ('United States', 'Americas', 'Mission 2', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT member, COUNT(mission) as mission_count, ROW_NUMBER() OVER (ORDER BY COUNT(mission) DESC) as mission_rank FROM HumanitarianMissions WHERE member LIKE 'NATO%' AND region = 'Americas' GROUP BY member ORDER BY mission_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 캐나다에서 판매된 하이브리드 및 전기차량의 총 판매량은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Vehicle_Sales (id INT, vehicle_type VARCHAR(255), quantity_sold INT, region VARCHAR(50), sale_quarter INT); INSERT INTO Vehicle_Sales (id, vehicle_type, quantity_sold, region, sale_quarter) VALUES (1, 'Tesla Model 3 (Hybrid)', 1000, 'Canada', 1); INSERT INTO Vehicle_Sales (id, vehicle_type, quantity_sold, region, sale_quarter) VALUES (2, 'Chevrolet Volt (Electric)', 800, 'Canada', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity_sold) FROM Vehicle_Sales WHERE region = 'Canada' AND (vehicle_type = 'Tesla Model 3 (Hybrid)' OR vehicle_type = 'Chevrolet Volt (Electric)') AND sale_quarter = 1;"
    },
    {
        "instruction": "입력 텍스트: habitat_preservation' 테이블에서 보전 상태가 'Vulnerable'이고 지역이 'Africa'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE habitat_preservation (id INT, region VARCHAR(255), preservation_status VARCHAR(255)); INSERT INTO habitat_preservation (id, region, preservation_status) VALUES (1, 'Asia', 'Critical'), (2, 'Africa', 'Vulnerable'), (3, 'South America', 'Stable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM habitat_preservation WHERE preservation_status = 'Vulnerable' AND region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 인도에서 조달한 화장품 제품의 유기농 성분 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE india_ingredient_sourcing (id INT, product_id INT, organic_ingredients_percentage INT); INSERT INTO india_ingredient_sourcing (id, product_id, organic_ingredients_percentage) VALUES (1, 1, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(organic_ingredients_percentage) FROM india_ingredient_sourcing;"
    },
    {
        "instruction": "입력 텍스트: 2021년 아메리카 지역 고객들에게 발급된 대출의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE loans (id INT, customer_name VARCHAR(50), region VARCHAR(50), amount DECIMAL(10, 2), year INT); INSERT INTO loans (id, customer_name, region, amount, year) VALUES (1, 'Sofia', 'North America', 4000, 2021), (2, 'Pedro', 'South America', 6000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM loans WHERE region LIKE 'America%' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 미국 주식 펀드에 투자한 모든 고객의 자산 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name TEXT, region TEXT); INSERT INTO clients (client_id, name, region) VALUES (1, 'John Doe', 'US'), (2, 'Jane Smith', 'CA'); CREATE TABLE investments (client_id INT, fund_id INT, amount DECIMAL(10, 2)); INSERT INTO investments (client_id, fund_id, amount) VALUES (1, 1, 15000.00), (1, 2, 20000.00), (2, 1, 30000.00); CREATE TABLE funds (fund_id INT, fund_name TEXT, region TEXT); INSERT INTO funds (fund_id, fund_name, region) VALUES (1, 'US Equity Fund', 'US'), (2, 'Intl Equity Fund', 'EU');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(i.amount) FROM clients c JOIN investments i ON c.client_id = i.client_id JOIN funds f ON i.fund_id = f.fund_id WHERE f.region = 'US';"
    },
    {
        "instruction": "입력 텍스트: 2022년 영국 런던에서 진행된 대면 전시회에 참석한 BIPOC으로 식별된 방문객 수와 그들의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Visitors (ID INT, Age INT, Gender VARCHAR(10), Rating INT, City VARCHAR(20), Country VARCHAR(20), Ethnicity VARCHAR(20)); INSERT INTO Visitors (ID, Age, Gender, Rating, City, Country, Ethnicity) VALUES (1, 35, 'Female', 8, 'London', 'UK', 'BIPOC'); CREATE TABLE Exhibitions (ID INT, Title VARCHAR(50), City VARCHAR(20), Country VARCHAR(20), Date DATE, InPerson BOOLEAN); INSERT INTO Exhibitions (ID, Title, City, Country, Date, InPerson) VALUES (1, 'The Art of the Renaissance', 'London', 'UK', '2022-03-01', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Visitors.Rating), COUNT(Visitors.ID) FROM Visitors INNER JOIN Exhibitions ON Visitors.City = Exhibitions.City AND Visitors.Country = Exhibitions.Country WHERE Exhibitions.InPerson = TRUE AND Visitors.Ethnicity = 'BIPOC' AND Exhibitions.Date BETWEEN '2022-01-01' AND '2022-12-31';"
    },
    {
        "instruction": "입력 텍스트: 희토류 생산으로 인한 온실가스 배출이 가장 높은 상위 3개국은 무엇인가요?\n\nDDL statements:\nCREATE TABLE emissions (country VARCHAR(50), emissions INT); INSERT INTO emissions (country, emissions) VALUES ('China', 12000), ('USA', 3500), ('Australia', 1800), ('India', 500), ('Brazil', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM emissions ORDER BY emissions DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 8000미터보다 깊은 모든 해구의 평균 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE trenches (trench_id INT, name VARCHAR(100), depth FLOAT); INSERT INTO trenches (trench_id, name, depth) VALUES (1, 'Mariana Trench', 10994); INSERT INTO trenches (trench_id, name, depth) VALUES (2, 'Tonga Trench', 10882);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) FROM trenches WHERE depth > 8000;"
    },
    {
        "instruction": "입력 텍스트: 기계공학 프로그램 대학원생 중 국제 학생의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Students (StudentID INT, Gender VARCHAR(10), Program VARCHAR(50), Nationality VARCHAR(50)); INSERT INTO Students (StudentID, Gender, Program, Nationality) VALUES (1, 'Female', 'Computer Science', 'USA'), (2, 'Male', 'Computer Science', 'Canada'), (3, 'Female', 'Computer Science', 'USA'), (4, 'Male', 'Electrical Engineering', 'India'), (5, 'Female', 'Electrical Engineering', 'USA'), (6, 'Male', 'Electrical Engineering', 'Mexico'), (7, 'Female', 'Chemical Engineering', 'USA'), (8, 'Male', 'Chemical Engineering', 'Canada'), (9, 'Female', 'Mechanical Engineering', 'China'), (10, 'Male', 'Mechanical Engineering', 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE Nationality <> 'USA')) * 100.0 / COUNT(*) FROM Students WHERE Program = 'Mechanical Engineering';"
    },
    {
        "instruction": "입력 텍스트: 2021년 부문별 총 에너지 소비량은 얼마였나요?\n\nDDL statements:\nCREATE TABLE energy_consumption (year INT, sector VARCHAR(255), consumption FLOAT); INSERT INTO energy_consumption (year, sector, consumption) VALUES (2015, 'Residential', 1200), (2015, 'Commercial', 2500), (2015, 'Industrial', 5000), (2021, 'Residential', 1500), (2021, 'Commercial', 2800), (2021, 'Industrial', 5500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(consumption) as total_consumption, sector FROM energy_consumption WHERE year = 2021 GROUP BY sector;"
    },
    {
        "instruction": "입력 텍스트: habitat_preservation' 테이블에서 각 대륙의 평균 동물 개체 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE habitat_preservation (id INT, animal_species VARCHAR(50), population INT, continent VARCHAR(50)); INSERT INTO habitat_preservation (id, animal_species, population, continent) VALUES (1, 'Tiger', 2000, 'Asia'), (2, 'Elephant', 5000, 'Africa'), (3, 'Giraffe', 8000, 'Africa'), (4, 'Kangaroo', 9000, 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, AVG(population) FROM habitat_preservation GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 가장 높은 연봉을 받는 5명의 농촌 보건 의료 전문가와 그들의 직급을 찾아주세요.\n\nDDL statements:\nCREATE TABLE professionals (name VARCHAR(255), job_title VARCHAR(255), salary NUMERIC(10, 2)); INSERT INTO professionals (name, job_title, salary) VALUES ('Professional A', 'Doctor', 90000), ('Professional B', 'Nurse', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, job_title, salary FROM professionals ORDER BY salary DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에는 몇 개의 디스프로슘 광산이 있나요?\n\nDDL statements:\nCREATE TABLE Dysprosium_Mines (mine_id INT, country TEXT); INSERT INTO Dysprosium_Mines (mine_id, country) VALUES (1, 'Canada'), (2, 'USA'), (3, 'Australia'), (4, 'China'), (5, 'Greenland');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Dysprosium_Mines WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 2022년 유럽에서 기후 적응 프로젝트를 위해 각 기관이 제공한 총 기후 금융은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance_organizations (organization VARCHAR(50), finance_amount NUMERIC(10, 2), year INT, region VARCHAR(50), project_type VARCHAR(50)); INSERT INTO climate_finance_organizations (organization, finance_amount, year, region, project_type) VALUES ('European Investment Bank', 200000, 2022, 'Europe', 'climate adaptation'), ('European Bank for Reconstruction and Development', 150000, 2022, 'Europe', 'climate adaptation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organization, SUM(finance_amount) FROM climate_finance_organizations WHERE project_type = 'climate adaptation' AND year = 2022 AND region = 'Europe' GROUP BY organization;"
    },
    {
        "instruction": "입력 텍스트: 각 농장에서 기록된 최소 수온은 무엇인가요?\n\nDDL statements:\nCREATE TABLE FarmWaterTemp (FarmID int, Date date, WaterTemp float); INSERT INTO FarmWaterTemp (FarmID, Date, WaterTemp) VALUES (1, '2022-01-01', 10.5), (1, '2022-01-02', 11.2), (2, '2022-01-01', 12.1), (2, '2022-01-02', 12.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FarmID, MIN(WaterTemp) as MinTemp FROM FarmWaterTemp GROUP BY FarmID;"
    },
    {
        "instruction": "입력 텍스트: 마이애미 시의 시민 피드백 기록에 대한 평균 응답 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE citizen_feedback_records (city VARCHAR(20), response_time INT); INSERT INTO citizen_feedback_records (city, response_time) VALUES ('Miami', 36); INSERT INTO citizen_feedback_records (city, response_time) VALUES ('Miami', 42); INSERT INTO citizen_feedback_records (city, response_time) VALUES ('Los Angeles', 48); INSERT INTO citizen_feedback_records (city, response_time) VALUES ('Los Angeles', 54);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) FROM citizen_feedback_records WHERE city = 'Miami';"
    },
    {
        "instruction": "입력 텍스트: 2018년 케냐에는 몇 개의 학교가 건설되었나요?\n\nDDL statements:\nCREATE TABLE schools (id INT, country TEXT, year INT, num_schools INT); INSERT INTO schools\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM schools WHERE country = 'Kenya' AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기 뉴욕의 폐기물 발생 메트릭스에 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE waste_generation_metrics(quarter INT, state VARCHAR(255), waste_quantity INT); INSERT INTO waste_generation_metrics VALUES (1, 'New York', 1200000), (2, 'New York', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO waste_generation_metrics (quarter, state, waste_quantity) VALUES (1, 'New York', 1300000);"
    },
    {
        "instruction": "입력 텍스트: 각 지역의 야생동물 서식지 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE RegionWildlifeHabitats (region_id INT, wildlife_type_id INT, count INT); INSERT INTO RegionWildlifeHabitats (region_id, wildlife_type_id, count) VALUES (1, 1, 50), (2, 2, 40), (3, 3, 60), (4, 4, 70), (1, 2, 45), (2, 3, 55), (3, 4, 65), (4, 1, 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Rwh.region_id, SUM(Rwh.count) as total_habitats FROM RegionWildlifeHabitats Rwh GROUP BY Rwh.region_id;"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 심해 잠수정이 도달한 최대 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE submersible_dives (id INT, location VARCHAR(255), depth INT); INSERT INTO submersible_dives (id, location, depth) VALUES (1, 'Mariana Trench', 10994), (2, 'Challenger Deep', 10972), (3, 'Tonga Trench', 10823), (4, 'Java Trench', 8040), (5, 'Sirena Deep', 7493);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(depth) FROM submersible_dives WHERE location = 'Mariana Trench';"
    },
    {
        "instruction": "입력 텍스트: LATAM' 지역에서 아직 AI 기반 서비스를 도입하지 않은 호텔은 어디인가요?\n\nDDL statements:\nCREATE TABLE hotels (id INT, name TEXT, region TEXT); INSERT INTO hotels (id, name, region) VALUES (1, 'Hotel1', 'LATAM'), (2, 'Hotel2', 'LATAM'), (3, 'Hotel3', 'APAC'); CREATE TABLE ai_adoption (hotel_id INT, ai_adoption_date DATE); INSERT INTO ai_adoption (hotel_id, ai_adoption_date) VALUES (1, '2021-01-01'), (2, '2021-02-01'), (4, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotels.name FROM hotels LEFT JOIN ai_adoption ON hotels.id = ai_adoption.hotel_id WHERE hotels.region = 'LATAM' AND ai_adoption.hotel_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후 남미에서 수행된 인도주의적 원조 작업은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Humanitarian_Aid (Aid_ID INT PRIMARY KEY, Aid_Name VARCHAR(255), Recipient VARCHAR(255), Amount DECIMAL(10,2), Date_Provided DATE, Location VARCHAR(255)); INSERT INTO Humanitarian_Aid (Aid_ID, Aid_Name, Recipient, Amount, Date_Provided, Location) VALUES (1, 'Operation Allies Welcome', 'Afghanistan', 780000000, '2021-08-29', 'United States');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Aid_Name FROM Humanitarian_Aid WHERE Location IN (SELECT Name FROM Countries WHERE Continent = 'South America') AND Date_Provided >= '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 기록된 해양 생물 서식지의 최대 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE species (id INT, name VARCHAR(255), max_habitat_depth FLOAT, ocean_basin VARCHAR(255)); INSERT INTO species (id, name, max_habitat_depth, ocean_basin) VALUES (1, 'Atlantic Salmon', 100.0, 'Atlantic'), (2, 'Blue Whale', 500.0, 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(max_habitat_depth) FROM species WHERE ocean_basin = 'Atlantic';"
    },
    {
        "instruction": "입력 텍스트: 한 달 이내에 유지보수가 필요한 장비를 표시하는 뷰를 생성합니다.\n\nDDL statements:\nCREATE TABLE military_equipment_maintenance (id INT PRIMARY KEY, equipment_type VARCHAR(255), last_maintenance_date DATE, next_maintenance_date DATE, maintenance_frequency_months INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW equipment_maintenance_due AS SELECT * FROM military_equipment_maintenance WHERE next_maintenance_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '1 month';"
    },
    {
        "instruction": "입력 텍스트: Engineering' 부서의 모든 직원들의 평균 급여를 표시하세요.\n\nDDL statements:\nCREATE TABLE Employee (EmployeeID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Position VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10, 2)); INSERT INTO Employee (EmployeeID, FirstName, LastName, Position, Department, Salary) VALUES (1, 'John', 'Doe', 'Quality Engineer', 'Quality Control', 50000.00), (2, 'Jane', 'Doe', 'Quality Technician', 'Quality Control', 40000.00), (3, 'Mike', 'Smith', 'Mechanical Engineer', 'Engineering', 60000.00), (4, 'Lucy', 'Johnson', 'Electrical Engineer', 'Engineering', 70000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM Employee WHERE Department = 'Engineering';"
    },
    {
        "instruction": "입력 텍스트: 남아프리카의 농촌 지역에 있는 보건소의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE healthcare_centers (id INT, name TEXT, country TEXT, location TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM healthcare_centers WHERE country = 'South Africa' AND location = 'rural';"
    },
    {
        "instruction": "입력 텍스트: 각 아티스트가 2021년에 몇 번의 이벤트를 진행했나요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(50)); INSERT INTO Artists (ArtistID, ArtistName) VALUES (1, 'John Doe'), (2, 'Jane Smith'); CREATE TABLE Events (EventID INT, ArtistID INT, EventDate DATE); INSERT INTO Events (EventID, ArtistID, EventDate) VALUES (1, 1, '2021-01-01'), (2, 1, '2021-02-01'), (3, 2, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.ArtistName, COUNT(e.EventID) as NumEvents FROM Artists a INNER JOIN Events e ON a.ArtistID = e.ArtistID WHERE e.EventDate >= '2021-01-01' AND e.EventDate < '2022-01-01' GROUP BY a.ArtistName;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 가장 많은 고유 기부자로부터 기부를 받은 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget FLOAT); CREATE TABLE DonorPrograms (DonationID INT, ProgramID INT, DonorID INT, DonationDate DATE); INSERT INTO Programs (ProgramID, ProgramName, Budget) VALUES (1, 'Education', 10000.00), (2, 'Health', 15000.00); INSERT INTO DonorPrograms (DonationID, ProgramID, DonorID, DonationDate) VALUES (1, 1, 1, '2021-01-01'), (2, 1, 2, '2021-02-01'), (3, 2, 3, '2021-03-01'), (4, 2, 4, '2021-04-01'), (5, 1, 5, '2021-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Programs.ProgramName, COUNT(DISTINCT DonorPrograms.DonorID) as UniqueDonors FROM Programs INNER JOIN DonorPrograms ON Programs.ProgramID = DonorPrograms.ProgramID WHERE YEAR(DonorPrograms.DonationDate) = 2021 GROUP BY Programs.ProgramName ORDER BY UniqueDonors DESC;"
    },
    {
        "instruction": "입력 텍스트: 모든 가동 중인 우주선의 평균 화성까지의 거리는 얼마입니까?\n\nDDL statements:\nCREATE TABLE mars_spacecraft (id INT, name VARCHAR(255), type VARCHAR(255), operational BOOLEAN, distance_from_mars FLOAT); INSERT INTO mars_spacecraft (id, name, type, operational, distance_from_mars) VALUES (1, 'Curiosity Rover', 'Rover', true, 5); INSERT INTO mars_spacecraft (id, name, type, operational, distance_from_mars) VALUES (2, 'Perseverance Rover', 'Rover', true, 10); INSERT INTO mars_spacecraft (id, name, type, operational, distance_from_mars) VALUES (3, 'InSight Lander', 'Lander', false, 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(distance_from_mars) FROM mars_spacecraft WHERE operational = true;"
    },
    {
        "instruction": "입력 텍스트: 각 숙소 유형을 처음 받은 학생 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Accommodations (accommodation_id INT, student_id INT, accommodation_type VARCHAR(255), accommodation_date DATE); CREATE TABLE Students (student_id INT, department VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT accommodation_type, COUNT(DISTINCT student_id) as number_of_students FROM Accommodations WHERE student_id NOT IN ( SELECT student_id FROM Accommodations WHERE accommodation_date < ( SELECT MIN(accommodation_date) FROM Accommodations WHERE accommodation_type = Accommodations.accommodation_type )) GROUP BY accommodation_type;"
    },
    {
        "instruction": "입력 텍스트: fleet_management' 테이블에서 선박의 최소 수용 능력은 얼마입니까?\n\nDDL statements:\nCREATE TABLE fleet_management (id INT, name VARCHAR(50), type VARCHAR(50), capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(capacity) FROM fleet_management;"
    },
    {
        "instruction": "입력 텍스트: 포르투갈의 친환경 숙박 시설의 평균 방문객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE bookings (id INT, accommodation_id INT, visitors INT); INSERT INTO bookings (id, accommodation_id, visitors) VALUES (1, 1, 100), (2, 1, 120), (3, 2, 80); CREATE TABLE accommodations (id INT, name TEXT, country TEXT, is_eco_friendly BOOLEAN); INSERT INTO accommodations (id, name, country, is_eco_friendly) VALUES (1, 'Eco Lodge', 'Portugal', TRUE), (2, 'Green Hotel', 'Portugal', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(b.visitors) FROM bookings b JOIN accommodations a ON b.accommodation_id = a.id WHERE a.country = 'Portugal' AND a.is_eco_friendly = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 공정 무역 인증 제품의 평균 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE products (product_id int, name varchar(255), price decimal(5,2), is_fair_trade boolean); INSERT INTO products (product_id, name, price, is_fair_trade) VALUES (1, 'Organic Cotton T-Shirt', 25.99, true), (2, 'Regular Cotton T-Shirt', 15.99, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM products WHERE is_fair_trade = true;"
    },
    {
        "instruction": "입력 텍스트: 방위 프로젝트들을 각각의 총 장비 판매 가격과 판매된 장비 수와 함께 나열하고, 총 판매 가격이 높은 순으로 정렬하세요.\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS defense_projects;CREATE TABLE IF NOT EXISTS defense_projects (project_id INT, project_name VARCHAR(255), total_equipment_sale_price DECIMAL(10, 2), quantity INT, project_start_date DATE, project_end_date DATE);INSERT INTO defense_projects (project_id, project_name, total_equipment_sale_price, quantity, project_start_date, project_end_date) VALUES (1, 'Project_X', 5000000, 5, '2021-01-01', '2022-12-31'), (2, 'Project_Y', 3000000, 3, '2021-04-01', '2023-03-31'), (3, 'Project_Z', 7000000, 7, '2021-07-01', '2024-06-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, total_equipment_sale_price, SUM(quantity) AS total_equipment_sold FROM defense_projects GROUP BY project_name, total_equipment_sale_price ORDER BY total_equipment_sale_price DESC;"
    },
    {
        "instruction": "입력 텍스트: 목적지에 도착한 지 일주일이 넘은 화물의 상태를 '배송 완료'로 업데이트하세요.\n\nDDL statements:\nCREATE SCHEMA if not exists ocean_shipping;CREATE TABLE if not exists ocean_shipping.cargo (id INT, status VARCHAR(255), arrived_at DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE ocean_shipping.cargo SET status = 'delivered' WHERE arrived_at < DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"
    },
    {
        "instruction": "입력 텍스트: 북부 지역의 뉴스 소스에서 발행된 의견 기사와 탐사 저널리즘 기사의 총 수는 NewsSourceG와 NewsSourceH가 발행한 기사를 제외하고 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA news;CREATE TABLE NewsSource (name varchar(255), type varchar(10), region varchar(10));INSERT INTO NewsSource (name, type, region) VALUES ('NewsSourceG', 'opinion', 'northern'), ('NewsSourceH', 'investigative', 'northern'), ('NewsSourceI', 'news', 'northern'), ('NewsSourceJ', 'investigative', 'northern'), ('NewsSourceK', 'opinion', 'northern'), ('NewsSourceL', 'news', 'northern');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ( (SELECT * FROM news.NewsSource WHERE (region = 'northern') AND type IN ('investigative', 'opinion') AND name NOT IN ('NewsSourceG', 'NewsSourceH')) ) AS northern_opinion_investigative"
    },
    {
        "instruction": "입력 텍스트: commodity_prices' 테이블에서 'region'이 'South America'인 기록에 대해 'Quinoa'의 가격을 파운드당 $3.50으로 설정하세요.\n\nDDL statements:\nCREATE TABLE commodity_prices (id INT, commodity VARCHAR(50), price FLOAT, region VARCHAR(50)); INSERT INTO commodity_prices (id, commodity, price, region) VALUES (1, 'Quinoa', 3.25, 'South America'), (2, 'Rice', 2.10, 'Asia'), (3, 'Corn', 1.80, 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE commodity_prices SET price = 3.50 WHERE commodity = 'Quinoa' AND region = 'South America';"
    },
    {
        "instruction": "입력 텍스트: \"warehouse_list\" 뷰에 있는 각 창고에 대한 새로운 레코드를 \"warehouses\" 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE warehouses (id INT PRIMARY KEY, name VARCHAR(50), city VARCHAR(50), country VARCHAR(50)); CREATE VIEW warehouse_list AS SELECT 'SEA' AS warehouse, 'Seattle' AS city, 'USA' AS country UNION SELECT 'NYC' AS warehouse, 'New York' AS city, 'USA' AS country;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO warehouses (name, city, country) SELECT warehouse, city, country FROM warehouse_list;"
    },
    {
        "instruction": "입력 텍스트: 유럽 브랜드 제품 중에서 50회 이상 리뷰된 제품들 중 선호도 평가가 4 이상인 제품은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE Product_Reviews (review_id INT, product_id INT, review_text TEXT, helpful_votes INT, review_date DATE, preference_rating INT); INSERT INTO Product_Reviews (review_id, product_id, review_text, helpful_votes, review_date, preference_rating) VALUES (1, 1001, 'Lovely product', 55, '2021-09-01', 4), (2, 1002, 'Great color', 75, '2021-08-15', 5), (3, 1003, 'Disappointing quality', 35, '2021-07-01', 2), (4, 1004, 'Good but expensive', 60, '2021-06-10', 4); CREATE TABLE Product_Details (product_id INT, brand_id INT, brand TEXT, country TEXT); INSERT INTO Product_Details (product_id, brand_id, brand, country) VALUES (1001, 1, 'EcoWise Cosmetics', 'France'), (1002, 2, 'Nature’s Beauty', 'Germany'), (1003, 3, 'Green Visions', 'Italy'), (1004, 4, 'Pure & Simple', 'Spain');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_id FROM Product_Reviews WHERE preference_rating > 4 INTERSECT SELECT product_id FROM Product_Details WHERE country IN (SELECT country FROM Product_Details WHERE country IN ('France', 'Germany', 'Italy', 'Spain') GROUP BY country HAVING COUNT(DISTINCT brand) > 1);"
    },
    {
        "instruction": "입력 텍스트: 독일에서의 온라인 치료 성공률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE therapy_sessions (id INT PRIMARY KEY, patient_id INT, therapy_type VARCHAR(50), country VARCHAR(50), success BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM therapy_sessions WHERE country = 'Germany' AND therapy_type = 'online therapy' AND success = TRUE;"
    },
    {
        "instruction": "입력 텍스트: habitat 테이블에 id가 201이고, 면적이 150.5이며, 상태가 'Protected'인 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE habitat (id INT, area FLOAT, status VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO habitat (id, area, status) VALUES (201, 150.5, 'Protected');"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 '클라우드' 자산 유형에서 발생한 보안 사고 및 취약점의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE cloud_issues (id INT, asset_type VARCHAR(50), issue_count INT, issue_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT asset_type, SUM(issue_count) as total_issues FROM cloud_issues WHERE asset_type = 'cloud' AND issue_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY asset_type;"
    },
    {
        "instruction": "입력 텍스트: 호주로 오는 국제 방문객 중 아시아-태평양 지역에서 온 방문객의 비율을 구하세요.\n\nDDL statements:\nCREATE TABLE region_stats (region TEXT, year INT, visitors INT); INSERT INTO region_stats (region, year, visitors) VALUES ('Asia-Pacific', 2021, 100000), ('Europe', 2021, 80000), ('North America', 2021, 50000), ('Australia', 2021, 200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * SUM(CASE WHEN region = 'Asia-Pacific' THEN visitors ELSE 0 END) / SUM(visitors) as percentage FROM region_stats WHERE year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 남미에서 진행된 유전학 연구 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT, title VARCHAR(50), location VARCHAR(50)); INSERT INTO projects (id, title, location) VALUES (1, 'Genome Mapping', 'Canada'), (2, 'DNA Sequencing', 'Africa'), (3, 'Gene Therapy', 'South America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM projects WHERE location = 'South America';"
    },
    {
        "instruction": "입력 텍스트: 헤어케어 카테고리에서 동물 실험을 하지 않은 제품의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE haircare_cruelty (product_id INTEGER, product_category VARCHAR(20), is_cruelty_free BOOLEAN); INSERT INTO haircare_cruelty (product_id, product_category, is_cruelty_free) VALUES (1, 'Shampoo', true), (2, 'Shampoo', false), (3, 'Conditioner', true), (4, 'Conditioner', false), (5, 'Styling Product', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE is_cruelty_free = true) * 100.0 / COUNT(*)) AS percentage_cruelty_free FROM haircare_cruelty WHERE product_category = 'Shampoo' OR product_category = 'Conditioner' OR product_category = 'Styling Product';"
    },
    {
        "instruction": "입력 텍스트: 각 주별로 분류된 농촌 병원의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hospitals (hospital_id INT, hospital_name TEXT, beds INT, rural BOOLEAN, state_id INT); INSERT INTO hospitals (hospital_id, hospital_name, beds, rural, state_id) VALUES (1, 'Hospital A', 100, true, 1); CREATE TABLE states (state_id INT, state TEXT); INSERT INTO states (state_id, state) VALUES (1, 'Alabama'), (2, 'Alaska');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(hospitals.hospital_id) hospital_count, states.state FROM hospitals JOIN states ON hospitals.state_id = states.state_id WHERE hospitals.rural = true GROUP BY states.state;"
    },
    {
        "instruction": "입력 텍스트: Habitat D'가 존재한다면 모든 기록을 삭제하세요\n\nDDL statements:\nCREATE TABLE Habitat (name VARCHAR(20), animal_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Habitat WHERE name = 'Habitat D';"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 당뇨병 진단을 받은 환자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE patient (patient_id INT, age INT, gender TEXT, diagnosis TEXT, state TEXT); INSERT INTO patient (patient_id, age, gender, diagnosis, state) VALUES (1, 35, 'Female', 'Diabetes', 'Texas'); INSERT INTO patient (patient_id, age, gender, diagnosis, state) VALUES (2, 42, 'Male', 'Diabetes', 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM patient WHERE diagnosis = 'Diabetes' AND state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 텍사스에서 연봉이 60,000달러 이상인 건설 노동자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE labor_statistics (id INT PRIMARY KEY, worker_name VARCHAR(255), state VARCHAR(255), annual_salary FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM labor_statistics WHERE state = 'Texas' AND annual_salary > 60000 AND YEAR(employment_start_date) = 2019;"
    },
    {
        "instruction": "입력 텍스트: 노동권 침해를 신고한 근로자들의 조합원 여부를 침해 유형별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE violations (id INT, worker_id INT, location TEXT, type TEXT, union_member BOOLEAN); INSERT INTO violations (id, worker_id, location, type, union_member) VALUES (1, 1, 'California', 'wage theft', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, union_member FROM violations GROUP BY type, union_member;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 '수학' 학과에 수여된 연구 보조금 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE departments (id INT, name TEXT); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'), (2, 'Physics'), (3, 'Mathematics'); CREATE TABLE grants (id INT, department_id INT, amount INT, year INT); INSERT INTO grants (id, department_id, amount, year) VALUES (1, 1, 500000, 2019), (2, 2, 750000, 2020), (3, 1, 600000, 2021), (4, 3, 900000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM grants WHERE department_id = (SELECT id FROM departments WHERE name = 'Mathematics') AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 인도와 브라질의 가전제품 평균 에너지 효율 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE appliances (country VARCHAR(30), rating FLOAT); INSERT INTO appliances (country, rating) VALUES ('India', 3.2), ('India', 3.4), ('Brazil', 2.9), ('Brazil', 3.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM appliances WHERE country IN ('India', 'Brazil') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: \"Midwest\" 지역의 공장에서 발생하는 월별 평균 작업장 안전 사고 건수는 \"safety_database\"에서 얼마인가요?\n\nDDL statements:\nCREATE TABLE incidents (id INT, month INT, region VARCHAR(50), num_incidents INT); INSERT INTO incidents (id, month, region, num_incidents) VALUES (1, 1, 'Midwest', 5), (2, 2, 'Midwest', 7), (3, 3, 'Midwest', 6), (4, 4, 'Midwest', 4), (5, 5, 'Midwest', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_incidents) FROM incidents WHERE region = 'Midwest' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 아시아에 있는 어류 사료 공장의 이름과 생산 능력, 그리고 연결된 양식장의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE fish_feed_factories (id INT, name TEXT, region TEXT, capacity INT); CREATE TABLE factory_connections (id INT, factory_id INT, farm_id INT); INSERT INTO fish_feed_factories (id, name, region, capacity) VALUES (1, 'Factory A', 'Asia', 5000), (2, 'Factory B', 'Asia', 6000), (3, 'Factory C', 'Europe', 4000); INSERT INTO factory_connections (id, factory_id, farm_id) VALUES (1, 1, 1), (2, 1, 2), (3, 2, 3), (4, 3, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FFF.name, FFF.capacity, TF.name AS farm_name FROM fish_feed_factories FFF JOIN factory_connections FC ON FFF.id = FC.factory_id JOIN tilapia_farms TF ON FC.farm_id = TF.id WHERE FFF.region = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: CRISPR 기술을 사용하는 유전 연구 프로젝트는 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists genetics; CREATE TABLE if not exists genetics.projects( project_id INT PRIMARY KEY, name VARCHAR(100), technology VARCHAR(50)); CREATE TABLE if not exists genetics.crispr( crispr_id INT PRIMARY KEY, project_id INT, name VARCHAR(100), FOREIGN KEY (project_id) REFERENCES genetics.projects(project_id)); INSERT INTO genetics.projects (project_id, name, technology) VALUES (1, 'ProjectX', 'Genetic Engineering'); INSERT INTO genetics.crispr (crispr_id, project_id) VALUES (1, 1); INSERT INTO genetics.crispr (crispr_id, project_id) VALUES (2, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name FROM genetics.projects p JOIN genetics.crispr c ON p.project_id = c.project_id WHERE p.technology = 'CRISPR';"
    },
    {
        "instruction": "입력 텍스트: 소셜 미디어 스키마의 users 테이블에서 가장 많은 사용자가 가입한 상위 5개 도시는 무엇인가요?\n\nDDL statements:\nCREATE TABLE users (user_id INT, username VARCHAR(50), sign_up_date DATE, city VARCHAR(50)); INSERT INTO users (user_id, username, sign_up_date, city) VALUES (1, 'user1', '2021-01-01', 'San Francisco'), (2, 'user2', '2021-01-02', 'New York'), (3, 'user3', '2021-01-03', 'Los Angeles'), (4, 'user4', '2021-01-04', 'San Francisco'), (5, 'user5', '2021-01-05', 'Austin');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) as num_users FROM users GROUP BY city ORDER BY num_users DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주의 모든 커뮤니티 치안 활동을 나열하세요.\n\nDDL statements:\nCREATE TABLE community_policing (id INT, state VARCHAR(20), initiative VARCHAR(50)); INSERT INTO community_policing (id, state, initiative) VALUES (1, 'Texas', 'Neighborhood Watch'), (2, 'California', 'Coffee with a Cop'), (3, 'Texas', 'Citizens Police Academy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative FROM community_policing WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 기부금이 가장 많은 상위 2명의 기부자의 이름과 총 기부금을 내림차순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(50), total_donation FLOAT); INSERT INTO donors (id, name, total_donation) VALUES (1, 'John Doe', 500.00), (2, 'Jane Smith', 350.00), (3, 'Mike Johnson', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, total_donation FROM (SELECT name, total_donation, ROW_NUMBER() OVER (ORDER BY total_donation DESC) as rank FROM donors) as subquery WHERE rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스의 모든 뷰를 나열합니다.\n\nDDL statements:\nCREATE VIEW vw_top_scorers AS SELECT * FROM (SELECT name, goals_scored, ROW_NUMBER() OVER (ORDER BY goals_scored DESC) as rn FROM athlete_stats) WHERE rn <= 3;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM information_schema.views;"
    },
    {
        "instruction": "입력 텍스트: 지난 5번의 동계 올림픽에서 가장 많은 메달을 획득한 선수는 누구인가요?\n\nDDL statements:\nCREATE TABLE medals (athlete VARCHAR(50), game_year INT, medal VARCHAR(50)); INSERT INTO medals (athlete, game_year, medal) VALUES ('Davis', 2014, 'Gold'), ('Davis', 2018, 'Gold'), ('Fisher', 2014, 'Silver'), ('Fisher', 2018, 'Bronze');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT athlete, SUM(CASE WHEN medal = 'Gold' THEN 3 WHEN medal = 'Silver' THEN 2 WHEN medal = 'Bronze' THEN 1 END) AS total_points FROM medals WHERE game_year >= YEAR(DATEADD(year, -5, GETDATE())) AND game_year < YEAR(GETDATE()) GROUP BY athlete"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기에 지중해로 위험물질을 운송한 선박의 평균 속도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, type TEXT, speed FLOAT);CREATE TABLE cargos (id INT, vessel_id INT, material TEXT, destination TEXT, date DATE); INSERT INTO vessels (id, name, type, speed) VALUES (1, 'VesselA', 'Tanker', 15.5); INSERT INTO cargos (id, vessel_id, material, destination, date) VALUES (1, 1, 'Hazardous', 'Mediterranean', '2021-10-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(v.speed) FROM vessels v JOIN cargos c ON v.id = c.vessel_id WHERE c.material = 'Hazardous' AND c.destination = 'Mediterranean' AND c.date BETWEEN '2021-07-01' AND '2021-09-30';"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 운항하는 컨테이너선의 이름과 총 화물 용량을 나열하시오.\n\nDDL statements:\nCREATE TABLE container_ships (id INT, name VARCHAR(100), cargo_capacity INT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, SUM(cargo_capacity) FROM container_ships WHERE region = 'Pacific Ocean' GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: operational_machines'라는 이름의 뷰를 생성하여 'Operational' 상태인 모든 기계를 검색합니다.\n\nDDL statements:\nCREATE TABLE machines (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), status VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW operational_machines AS SELECT * FROM machines WHERE status = 'Operational';"
    },
    {
        "instruction": "입력 텍스트: 각각의 재생 가능 에너지 프로젝트 유형별로 최소 용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE projects (name TEXT, type TEXT, capacity INTEGER); INSERT INTO projects (name, type, capacity) VALUES ('Project 1', 'Wind', 100), ('Project 2', 'Solar', 200), ('Project 3', 'Wind', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, MIN(capacity) FROM projects GROUP BY type"
    },
    {
        "instruction": "입력 텍스트: 아시아인 또는 태평양 섬 주민으로 식별하는 교사들의 평균 연수 시간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE teachers (id INT PRIMARY KEY, name VARCHAR(50), professional_development_hours INT, gender VARCHAR(50), race VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(t.professional_development_hours) as avg_hours FROM teachers t WHERE t.race IN ('Asian', 'Pacific Islander');"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 'smart_cities' 스키마에 있는 전기차 충전소의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists smart_cities; CREATE TABLE if not exists smart_cities.ev_charging_stations (station_id int, name varchar(255), location varchar(255), country varchar(50)); INSERT INTO smart_cities.ev_charging_stations (station_id, name, location, country) VALUES (1, 'EV Charging Station 1', 'City A', 'Country A'), (2, 'EV Charging Station 2', 'City B', 'Country B');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM smart_cities.ev_charging_stations GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: BPE003' 공정에 대한 생물공정 공학 정보는 무엇인가요?\n\nDDL statements:\nCREATE TABLE bioprocess_engineering (id INT, process_id TEXT, equipment TEXT, parameters TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment, parameters FROM bioprocess_engineering WHERE process_id = 'BPE003';"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 '대나무'로 만들어진 제품은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE products (product_id INT, name TEXT, material TEXT, country TEXT); INSERT INTO products (product_id, name, material, country) VALUES (1, 'Bamboo Toothbrush', 'Bamboo', 'Indonesia'), (2, 'Plastic Toothbrush', 'Plastic', 'China'); CREATE TABLE countries (country TEXT, region TEXT); INSERT INTO countries (country, region) VALUES ('Indonesia', 'Asia'), ('China', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT countries.country, COUNT(*) as product_count FROM products INNER JOIN countries ON products.country = countries.country WHERE products.material = 'Bamboo' GROUP BY countries.country;"
    },
    {
        "instruction": "입력 텍스트: 유럽 시장에서 재활용 재료로 만든 제품들의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), price DECIMAL(5,2), material VARCHAR(50), country VARCHAR(50)); CREATE TABLE materials (id INT PRIMARY KEY, name VARCHAR(50), recycled BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(products.price) AS avg_price FROM products INNER JOIN materials ON products.material = materials.name WHERE materials.recycled = TRUE AND products.country IN ('Austria', 'Belgium', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Slovakia', 'Slovenia', 'Spain', 'Sweden');"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에서 가장 많이 발생하는 범죄 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE public.crime_types (id SERIAL PRIMARY KEY, state VARCHAR(255), crime_type VARCHAR(255), count INTEGER); INSERT INTO public.crime_types (state, crime_type, count) VALUES ('Texas', 'Theft', 2000), ('Texas', 'Assault', 1500), ('Texas', 'Theft', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crime_type FROM public.crime_types WHERE state = 'Texas' GROUP BY crime_type ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 2023년도 장애 지원 프로그램에 할당된 총 예산이 프로그램 유형별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE DisabilitySupportPrograms (ProgramID INT, ProgramName VARCHAR(255), Budget DECIMAL(10,2), Year INT); INSERT INTO DisabilitySupportPrograms (ProgramID, ProgramName, Budget, Year) VALUES (1, 'Sign Language Interpretation', 50000, 2023), (2, 'Assistive Technology', 75000, 2023), (3, 'Accessible Transportation', 120000, 2023);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProgramName, SUM(Budget) AS TotalBudget FROM DisabilitySupportPrograms WHERE Year = 2023 GROUP BY ProgramName;"
    },
    {
        "instruction": "입력 텍스트: hotel_tech_adoption' 테이블에 있는 호텔들이 제공하는 AI 기능의 최소 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE hotel_tech_adoption (hotel_id INT, ai_powered_features INT); INSERT INTO hotel_tech_adoption (hotel_id, ai_powered_features) VALUES (1, 5), (2, 3), (3, 4), (4, 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(ai_powered_features) FROM hotel_tech_adoption;"
    },
    {
        "instruction": "입력 텍스트: 미시간주의 정신 건강 전문가들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE MentalHealthProfessional (ProfessionalID INT, Age INT, Specialty VARCHAR(50), State VARCHAR(20)); INSERT INTO MentalHealthProfessional (ProfessionalID, Age, Specialty, State) VALUES (1, 50, 'Psychologist', 'Michigan'); INSERT INTO MentalHealthProfessional (ProfessionalID, Age, Specialty, State) VALUES (2, 45, 'Social Worker', 'Michigan'); INSERT INTO MentalHealthProfessional (ProfessionalID, Age, Specialty, State) VALUES (3, 55, 'Counselor', 'Michigan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM MentalHealthProfessional WHERE State = 'Michigan';"
    },
    {
        "instruction": "입력 텍스트: 혁신 지원금을 500만 달러 이상 받은 수령인은 누구인가요?\n\nDDL statements:\nCREATE TABLE Innovation_Grants (Grant_ID INT PRIMARY KEY, Grant_Name VARCHAR(255), Recipient VARCHAR(255), Amount DECIMAL(10,2), Date_Granted DATE); INSERT INTO Innovation_Grants (Grant_ID, Grant_Name, Recipient, Amount, Date_Granted) VALUES (1, 'Project STARLIGHT', 'Lockheed Martin', 5000000, '2018-05-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Recipient FROM Innovation_Grants WHERE Amount > 5000000;"
    },
    {
        "instruction": "입력 텍스트: 12개월 이상 지속되는 방위 사업 프로젝트의 최소 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_projects(project_id INT, project_name VARCHAR(50), duration INT, cost FLOAT); INSERT INTO defense_projects VALUES (1, 'Project A', 36, 5000000), (2, 'Project B', 24, 4000000), (3, 'Project C', 18, 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(cost) FROM defense_projects WHERE duration > 12;"
    },
    {
        "instruction": "입력 텍스트: 호주와 뉴질랜드에서 친환경 인증을 받은 숙박 시설의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists countries (id INT, name VARCHAR(20)); INSERT INTO countries (id, name) VALUES (1, 'Australia'), (2, 'New Zealand'); CREATE TABLE if not exists accommodations (id INT, name VARCHAR(50), country_id INT, eco_certified BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, SUM(a.eco_certified) FROM accommodations a JOIN countries c ON a.country_id = c.id WHERE c.name IN ('Australia', 'New Zealand') GROUP BY c.name;"
    },
    {
        "instruction": "입력 텍스트: 수학과에서 출판된 논문 수가 가장 많은 상위 5명의 대학원생을 나열하세요.\n\nDDL statements:\nCREATE TABLE graduate_students (id INT, name VARCHAR(50), department VARCHAR(50)); CREATE TABLE publications (id INT, title VARCHAR(100), author_id INT, department VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gs.name, COUNT(p.id) AS paper_count FROM graduate_students gs JOIN publications p ON gs.id = p.author_id WHERE gs.department = 'Mathematics' GROUP BY gs.id, gs.name ORDER BY paper_count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: Ancient_Ceramics' 테이블에 있는 유물들의 평균 연대는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Ancient_Ceramics (id INT, artifact_name VARCHAR(50), age INT); INSERT INTO Ancient_Ceramics (id, artifact_name, age) VALUES (1, 'Pottery Shard A', 2000), (2, 'Pottery Shard B', 3000), (3, 'Pottery Shard C', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM Ancient_Ceramics;"
    },
    {
        "instruction": "입력 텍스트: 런던에서 열리는 콘서트의 최대 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Concerts (id INT, city VARCHAR(20), price DECIMAL(5,2)); INSERT INTO Concerts (id, city, price) VALUES (1, 'Paris', 35.50), (2, 'London', 42.00), (3, 'Paris', 28.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM Concerts WHERE city = 'London';"
    },
    {
        "instruction": "입력 텍스트: 2022년 첫 분기에 제품 B의 최고 판매 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (product_id VARCHAR(255), sale_date DATE, sale_price DECIMAL(10,2)); INSERT INTO sales (product_id, sale_date, sale_price) VALUES ('B', '2022-01-01', 25.99), ('B', '2022-02-01', 29.99), ('B', '2022-03-01', 35.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(sale_price) FROM sales WHERE product_id = 'B' AND QUARTER(sale_date) = 1 AND YEAR(sale_date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티에 있는 도시 농장은 몇 개이며, 총 작물 수확량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE urban_farms (id INT, farm_name VARCHAR(50), city VARCHAR(20), total_yield INT); INSERT INTO urban_farms (id, farm_name, city, total_yield) VALUES (1, 'Urban Acres', 'New York City', 10000), (2, 'City Farm', 'New York City', 15000), (3, 'Rooftop Farms', 'New York City', 20000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*), SUM(total_yield) FROM urban_farms WHERE city = 'New York City';"
    },
    {
        "instruction": "입력 텍스트: FTTH' 기술을 사용하는 '아프리카' 지역의 광대역 가입자에 대한 새로운 기록을 삽입하세요.\n\nDDL statements:\nCREATE TABLE subscribers(id INT, technology VARCHAR(20), type VARCHAR(10), region VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO subscribers(id, technology, type, region) VALUES (6, 'FTTH', 'broadband', 'Africa'), (7, 'FTTH', 'broadband', 'Africa');"
    },
    {
        "instruction": "입력 텍스트: 전기 및 자율 주행 차량의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE autonomous_vehicles (id INT, model VARCHAR(50), type VARCHAR(20)); INSERT INTO autonomous_vehicles (id, model, type) VALUES (1, 'Model X', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Wayve', 'Autonomous');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(type = 'Electric') + SUM(type = 'Autonomous') FROM autonomous_vehicles;"
    },
    {
        "instruction": "입력 텍스트: 어떤 유물들이 3개 이상의 발굴 현장에서 발견되었나요?\n\nDDL statements:\nCREATE TABLE Artifacts (id INT, excavation_site VARCHAR(20), artifact_name VARCHAR(30), pieces INT); INSERT INTO Artifacts (id, excavation_site, artifact_name, pieces) VALUES (1, 'BronzeAge', 'Sword', 3000,), (2, 'AncientRome', 'Sword', 2500,), (3, 'AncientGaul', 'Sword', 1500,);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artifact_name FROM Artifacts GROUP BY artifact_name HAVING COUNT(DISTINCT excavation_site) > 3;"
    },
    {
        "instruction": "입력 텍스트: 각 예술가가 만든 작품은 몇 점입니까?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName TEXT); INSERT INTO Artists (ArtistID, ArtistName) VALUES (1, 'Picasso'), (2, 'Frida Kahlo'), (3, 'Van Gogh'); CREATE TABLE Artworks (ArtworkID INT, ArtistID INT); INSERT INTO Artworks (ArtworkID, ArtistID) VALUES (1, 1), (2, 1), (3, 2), (4, 2), (5, 3), (6, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistID, COUNT(*) as TotalArtworks FROM Artworks GROUP BY ArtistID;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시의 각 구별 병원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hospitals (id INT, name TEXT, borough TEXT, num_beds INT); INSERT INTO hospitals (id, name, borough, num_beds) VALUES (1, 'Bellevue Hospital', 'Manhattan', 808), (2, 'Elmhurst Hospital', 'Queens', 545), (3, 'Harlem Hospital', 'Manhattan', 271), (4, 'Jacobi Hospital', 'Bronx', 457), (5, 'Kings County Hospital', 'Brooklyn', 627);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT borough, COUNT(*) as num_hospitals FROM hospitals GROUP BY borough;"
    },
    {
        "instruction": "입력 텍스트: 독일에 있는 'Windfarm 1' 풍력 에너지 프로젝트의 설치 용량을 150MW로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE wind_energy (project_id INT, project_name VARCHAR(255), country VARCHAR(255), installed_capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE wind_energy SET installed_capacity = 150 WHERE project_name = 'Windfarm 1' AND country = 'Germany';"
    },
    {
        "instruction": "입력 텍스트: 2021년 뉴델리에 위치한 화학 제조 공장에서 월별로 보고된 안전 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE safety_incidents_india (plant_location VARCHAR(50), incident_date DATE); INSERT INTO safety_incidents_india (plant_location, incident_date) VALUES ('New Delhi chemical plant', '2021-01-01'); INSERT INTO safety_incidents_india (plant_location, incident_date) VALUES ('New Delhi chemical plant', '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date_format(incident_date, '%Y-%m') as month, count(*) as total_incidents FROM safety_incidents_india WHERE plant_location = 'New Delhi chemical plant' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 조달 테이블에서 '유기농 채소' 공급업체를 승인된 것으로 표시하도록 업데이트하세요.\n\nDDL statements:\nCREATE TABLE sustainable_sourcing (supplier_id INT, supplier_name VARCHAR(255), is_approved BOOLEAN); INSERT INTO sustainable_sourcing (supplier_id, supplier_name, is_approved) VALUES (1, 'Conventional Vegetables', false); INSERT INTO sustainable_sourcing (supplier_id, supplier_name, is_approved) VALUES (2, 'Organic Vegetables', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE sustainable_sourcing SET is_approved = true WHERE supplier_name = 'Organic Vegetables';"
    },
    {
        "instruction": "입력 텍스트: 2010년부터 2020년 사이에 각 국가에서 발사된 우주 임무는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE space_missions (mission_id INT, country VARCHAR(50), launch_year INT); INSERT INTO space_missions (mission_id, country, launch_year) VALUES (1, 'USA', 2010), (2, 'USA', 2012), (3, 'China', 2015), (4, 'Russia', 2016), (5, 'India', 2017), (6, 'Japan', 2018), (7, 'USA', 2019), (8, 'China', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as mission_count FROM space_missions WHERE launch_year BETWEEN 2010 AND 2020 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 기부 금액을 기준으로 상위 3명의 기부자는 누구인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, Name TEXT, TotalDonation FLOAT); INSERT INTO Donors (DonorID, Name, TotalDonation) VALUES (1, 'John Smith', 500.00), (2, 'Jane Doe', 350.00), (3, 'Alice', 600.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, TotalDonation FROM Donors ORDER BY TotalDonation DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 광산 사이트별로 기록된 채굴 활동의 총 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE mining_sites (site_id INT, site_name VARCHAR(255)); INSERT INTO mining_sites (site_id, site_name) VALUES (1, 'Site A'), (2, 'Site B'); CREATE TABLE mining_activities (activity_id INT, site_id INT, activity_date DATE); INSERT INTO mining_activities (activity_id, site_id, activity_date) VALUES (1, 1, '2022-01-01'), (2, 1, '2022-01-02'), (3, 2, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.site_name, COUNT(a.activity_id) as total_activities FROM mining_sites s INNER JOIN mining_activities a ON s.site_id = a.site_id GROUP BY s.site_name;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이후에 발사된 유인 우주 임무의 수를 각 임무를 담당한 우주 기관별로 그룹화하여 보여주세요.\n\nDDL statements:\nCREATE TABLE Space_Missions ( id INT, mission_name VARCHAR(255), launch_year INT, space_agency VARCHAR(255) );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT space_agency, COUNT(*) as total_missions FROM Space_Missions WHERE launch_year >= 2000 GROUP BY space_agency;"
    },
    {
        "instruction": "입력 텍스트: 지난 주 동안의 평균 토양 수분 수준과 함께 모든 농장을 나열하고, 평균 수분이 가장 높은 순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE field (id INT, name VARCHAR(255)); CREATE TABLE soil_moisture (id INT, field_id INT, moisture INT, timestamp TIMESTAMP); INSERT INTO field VALUES (1, 'Field C'), (2, 'Field D'); INSERT INTO soil_moisture VALUES (1, 1, 60, '2022-05-01 10:00:00'), (2, 2, 70, '2022-05-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, AVG(sm.moisture) as avg_moisture FROM field f INNER JOIN soil_moisture sm ON f.id = sm.field_id WHERE sm.timestamp BETWEEN DATE_SUB(NOW(), INTERVAL 1 WEEK) AND NOW() GROUP BY f.name ORDER BY avg_moisture DESC;"
    },
    {
        "instruction": "입력 텍스트: 변호사에 대한 정보를 담은 새로운 테이블을 추가하세요.\n\nDDL statements:\nCREATE TABLE lawyers (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE lawyer_cases (id INT PRIMARY KEY, lawyer_id INT, case_number VARCHAR(50), FOREIGN KEY (lawyer_id) REFERENCES lawyers(id));"
    },
    {
        "instruction": "입력 텍스트: \"GreenTech Solutions\"의 2020년 이전 다양성 지표를 삭제하세요\n\nDDL statements:\nCREATE TABLE diversity (id INT PRIMARY KEY AUTO_INCREMENT, company_id INT, metric VARCHAR(255), value FLOAT, diversity_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM diversity WHERE diversity_date < '2020-01-01' AND company_id IN (SELECT id FROM company WHERE name = 'GreenTech Solutions');"
    },
    {
        "instruction": "입력 텍스트: 공급업체 중에서 준수 점수를 기준으로 가장 윤리적인 노동 관행을 가진 공급업체는 어떤 곳인가요?\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, supplier_name VARCHAR(255), compliance_score INT); INSERT INTO suppliers (supplier_id, supplier_name, compliance_score) VALUES (1, 'Supplier A', 90), (2, 'Supplier B', 85), (3, 'Supplier C', 95);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_name, compliance_score, RANK() OVER (ORDER BY compliance_score DESC) as rank FROM suppliers;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별로 고유 기부자 수와 각 프로그램별 총 기부금액을 찾으세요.\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, ProgramID INT, DonationAmount DECIMAL); INSERT INTO Donations (DonationID, DonorID, ProgramID, DonationAmount) VALUES (1, 1, 1, 150.00), (2, 2, 1, 120.00), (3, 3, 2, 90.00), (4, 1, 3, 100.00), (5, 4, 1, 160.00), (6, 1, 2, 180.00), (7, 2, 2, 130.00), (8, 3, 3, 110.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Programs.Name, COUNT(DISTINCT Donors.DonorID) as NumDonors, SUM(Donations.DonationAmount) as TotalDonations FROM Programs JOIN Donations ON Programs.ProgramID = Donations.ProgramID JOIN Donors ON Donations.DonorID = Donors.DonorID GROUP BY Programs.Name;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 또는 캘리포니아에서 해결된 사건의 사건 ID와 결과를 나열합니다.\n\nDDL statements:\nCREATE TABLE cases (case_id INT, case_outcome VARCHAR(10), case_state VARCHAR(10)); INSERT INTO cases (case_id, case_outcome, case_state) VALUES (1, 'Won', 'Texas'), (2, 'Lost', 'California'), (3, 'Pending', 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT case_id, case_outcome FROM cases WHERE case_state = 'Texas' UNION SELECT case_id, case_outcome FROM cases WHERE case_state = 'California';"
    },
    {
        "instruction": "입력 텍스트: WestCoast' 지역에 설치된 풍력 발전소의 총 설치 용량(MW)을 제조업체별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE wind_farms (id INT, name VARCHAR(50), region VARCHAR(50), manufacturer VARCHAR(50), capacity INT); INSERT INTO wind_farms (id, name, region, manufacturer, capacity) VALUES (1, 'WindFarm1', 'WestCoast', 'ManufacturerA', 150), (2, 'WindFarm2', 'WestCoast', 'ManufacturerB', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT manufacturer, SUM(capacity) FROM wind_farms WHERE region = 'WestCoast' GROUP BY manufacturer;"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2020년 사이에 브라질에서 성공한 경제 다양화 노력은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE economic_diversification_efforts (id INT, country VARCHAR(20), success BOOLEAN, start_year INT, end_year INT); INSERT INTO economic_diversification_efforts (id, country, success, start_year, end_year) VALUES (1, 'Brazil', true, 2018, 2020), (2, 'Brazil', false, 2016, 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM economic_diversification_efforts WHERE country = 'Brazil' AND start_year >= 2018 AND end_year <= 2020 AND success = true;"
    },
    {
        "instruction": "입력 텍스트: 유럽의 난민 지원 단체가 받은 자금 중 최소 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE funding (id INT, organization VARCHAR(255), region VARCHAR(255), amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(amount) FROM funding WHERE region = 'Europe' AND organization LIKE '%refugee support%';"
    },
    {
        "instruction": "입력 텍스트: 섬유 산업에서 공정한 임금을 받는 근로자의 비율이 가장 높은 국가는 어디이며, 그 국가들에서의 평균 임금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fair_wages (country VARCHAR(50), workers INT, avg_wage FLOAT, fair_wage_percentage FLOAT); INSERT INTO fair_wages (country, workers, avg_wage, fair_wage_percentage) VALUES ('Canada', 300000, 3000.00, 0.90), ('Spain', 400000, 2800.00, 0.85), ('Italy', 500000, 2500.00, 0.95), ('Japan', 200000, 4000.00, 0.80), ('Australia', 100000, 4500.00, 0.92);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(avg_wage) as avg_fair_wage FROM fair_wages WHERE fair_wage_percentage >= 0.8 ORDER BY avg_fair_wage DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: animal_population' 테이블에 있는 동물들의 총 수를 동물 종류별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE animal_population (id INT, animal_type VARCHAR(50), population INT); INSERT INTO animal_population (id, animal_type, population) VALUES (1, 'Felines', 5000), (2, 'Herbivores', 8000), (3, 'Primates', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal_type, SUM(population) FROM animal_population GROUP BY animal_type;"
    },
    {
        "instruction": "입력 텍스트: 중앙아메리카에서 지난 3년 동안 시작된 금융 능력 프로그램의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE financial_capability_programs (id INT, program_name VARCHAR(255), country VARCHAR(255), launch_date DATE); INSERT INTO financial_capability_programs (id, program_name, country, launch_date) VALUES (1, 'Financial Literacy 101', 'Panama', '2020-02-15'), (2, 'Money Management for Youth', 'Costa Rica', '2019-08-01'), (3, 'Budgeting Basics', 'Nicaragua', '2021-01-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM financial_capability_programs WHERE country LIKE 'Central America' AND launch_date >= DATEADD(year, -3, CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기에 EU에서 판매된 지속 가능성 점수가 7점 미만인 제품을 제외한 스킨케어 제품의 평균 지속 가능성 점수를 계산하세요.\n\nDDL statements:\nCREATE TABLE skincare_sales(sale_id INT, product_id INT, sale_date DATE, sustainability_score INT);CREATE TABLE products(product_id INT, product_name TEXT, category TEXT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(s.sustainability_score) FROM skincare_sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'skincare' AND p.country LIKE 'EU%' AND s.sustainability_score >= 7 AND DATE_PART('year', s.sale_date) = 2021 AND DATE_PART('quarter', s.sale_date) = 3;"
    },
    {
        "instruction": "입력 텍스트: ports' 테이블에 다음과 같은 세부 정보를 가진 새로운 레코드를 추가하세요: 항구 이름 'Seattle', 위도 47.61, 경도 -122.33.\n\nDDL statements:\nCREATE TABLE ports (id INT, name VARCHAR(50), latitude DECIMAL(10,8), longitude DECIMAL(11,8), PRIMARY KEY(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO ports (name, latitude, longitude) VALUES ('Seattle', 47.6097, -122.3262);"
    },
    {
        "instruction": "입력 텍스트: 졸업생 테이블의 학생 이름을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE graduates (id INT, name VARCHAR(50), department VARCHAR(50), gpa DECIMAL(3,2)); INSERT INTO graduates (id, name, department, gpa) VALUES (1, 'Oliver Anderson', 'Computer Science', 3.6), (2, 'Zoe Davis', 'Mathematics', 3.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE graduates SET name = 'Olivia Anderson' WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다에 있는 파이프라인의 총 개수를 구하세요.\n\nDDL statements:\nCREATE TABLE pipelines_us_canada (pipeline_name VARCHAR(50), country VARCHAR(50), length INT); INSERT INTO pipelines_us_canada (pipeline_name, country, length) VALUES ('Keystone XL', 'Canada', 1900), ('Energy East', 'Canada', 4600), ('Dakota Access', 'United States', 1172), ('Gulf Coast', 'United States', 979);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(IIF(country = 'Canada', 1, 0)) + SUM(IIF(country = 'United States', 1, 0)) FROM pipelines_us_canada;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에서 네트워크 신호 강도가 4 이상인 모바일 가입자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE mobile_subscribers (subscriber_id INT, state VARCHAR(20), signal_strength INT); INSERT INTO mobile_subscribers (subscriber_id, state, signal_strength) VALUES (1, 'New York', 5), (2, 'California', 4), (3, 'California', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mobile_subscribers WHERE state = 'California' AND signal_strength >= 4;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 중요 보안 사건을 해결하는 데 평균 몇 일이 걸리나요?\n\nDDL statements:\nCREATE TABLE CriticalIncidents (id INT, region VARCHAR(255), resolution_days INT); INSERT INTO CriticalIncidents (id, region, resolution_days) VALUES (1, 'APAC', 12), (2, 'EMEA', 18), (3, 'AMER', 24);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CriticalIncidents.region AS Region, AVG(CriticalIncidents.resolution_days) AS Average_Resolution_Days FROM CriticalIncidents WHERE CriticalIncidents.resolution_days >= 14 GROUP BY CriticalIncidents.region;"
    },
    {
        "instruction": "입력 텍스트: 우주 임무의 기간과 우주비행사의 평균 의료 위험도 사이의 상관관계는 무엇인가요?\n\nDDL statements:\nCREATE TABLE SpaceMissions (id INT, mission_name TEXT, duration INT);CREATE TABLE AstronautMedicalData (id INT, mission_id INT, medical_risk FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CORR(SpaceMissions.duration, AstronautMedicalData.medical_risk) FROM SpaceMissions INNER JOIN AstronautMedicalData ON SpaceMissions.id = AstronautMedicalData.mission_id;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 기반을 둔 기관들이 하루에 기부한 평균 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donation (donation_id INT, donation_date DATE, amount DECIMAL(10,2), organization_location VARCHAR(50)); INSERT INTO donation (donation_id, donation_date, amount, organization_location) VALUES (1, '2022-01-01', 50.00, 'Africa'), (2, '2022-01-02', 100.00, 'Europe'), (3, '2022-02-01', 75.00, 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM donation WHERE organization_location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 각 직무 카테고리별로, 개시된 지 1주일 이내에 마감된 채용공고를 제외하고, 채용공고를 채우는 데 평균적으로 얼마나 걸리는지 알려주세요.\n\nDDL statements:\nCREATE TABLE JobOpenings (OpeningID INT, JobTitle VARCHAR(50), JobCategory VARCHAR(30), OpeningDate DATE, CloseDate DATE); INSERT INTO JobOpenings (OpeningID, JobTitle, JobCategory, OpeningDate, CloseDate) VALUES (1, 'Software Engineer', 'IT', '2021-01-01', '2021-01-15'), (2, 'HR Manager', 'HR', '2021-02-01', '2021-02-15'), (3, 'Data Analyst', 'IT', '2021-03-01', '2021-03-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT JobCategory, AVG(DATEDIFF(CloseDate, OpeningDate)) FROM JobOpenings WHERE DATEDIFF(CloseDate, OpeningDate) > 7 GROUP BY JobCategory;"
    },
    {
        "instruction": "입력 텍스트: M'으로 시작하는 캐나다 우편번호를 가진 고객들의 모든 클레임과 해당 보험 유형을 나열하세요.\n\nDDL statements:\nCREATE TABLE Claims (ClaimID INT, PolicyID INT); CREATE TABLE Policy (PolicyID INT, PolicyType VARCHAR(20), CustomerID INT, CustomerPostalCode VARCHAR(7)); INSERT INTO Claims (ClaimID, PolicyID) VALUES (1, 1), (2, 2), (3, 3); INSERT INTO Policy (PolicyID, PolicyType, CustomerID, CustomerPostalCode) VALUES (1, 'Homeowners', 101, 'M1M1M1'), (2, 'Auto', 102, 'A1A1A1'), (3, 'Renters', 103, 'M2M2M2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Claims.ClaimID, Policy.PolicyType FROM Claims INNER JOIN Policy ON Claims.PolicyID = Policy.PolicyID WHERE Policy.CustomerPostalCode LIKE 'M%';"
    },
    {
        "instruction": "입력 텍스트: CarbonOffsets 스키마에서 탄소 상쇄 이니셔티브와 그 비용을 표시하세요.\n\nDDL statements:\nCREATE SCHEMA CarbonOffsets; USE CarbonOffsets; CREATE TABLE CarbonOffsetInitiatives (id INT, initiative_name VARCHAR(100), cost DECIMAL(10,2)); INSERT INTO CarbonOffsetInitiatives (id, initiative_name, cost) VALUES (1, 'Tree Planting', 10000.00), (2, 'Carbon Capture Technology', 50000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name, cost FROM CarbonOffsets.CarbonOffsetInitiatives;"
    },
    {
        "instruction": "입력 텍스트: 우주선의 최대 질량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Spacecraft (SpacecraftID INT, Manufacturer VARCHAR(50), Model VARCHAR(50), Mass FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Mass) FROM Spacecraft;"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드별로 가장 비싼 뷰티 제품 상위 2개를 나열하세요.\n\nDDL statements:\nCREATE TABLE beauty_products (product_name TEXT, price DECIMAL(5,2), brand TEXT); INSERT INTO beauty_products (product_name, price, brand) VALUES ('Cleanser', 15.99, 'Natural Glow'), ('Toner', 14.99, 'Natural Glow'), ('Moisturizer', 29.99, 'Natural Glow'), ('Cleanser', 25.99, 'Pure Beauty'), ('Toner', 24.99, 'Pure Beauty');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand, product_name, price FROM (SELECT brand, product_name, price, ROW_NUMBER() OVER (PARTITION BY brand ORDER BY price DESC) as rank FROM beauty_products WHERE brand IN ('Natural Glow', 'Pure Beauty')) sub WHERE rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: 그들이 추천한 후보자 수를 기준으로 상위 5명의 리크루터는 누구인가요?\n\nDDL statements:\nCREATE TABLE Recruiters (RecruiterID INT, RecruiterName VARCHAR(20), CandidateID INT); INSERT INTO Recruiters (RecruiterID, RecruiterName, CandidateID) VALUES (1, 'John Doe', 10), (2, 'Jane Smith', 11), (3, 'Jim Brown', 12), (4, 'Jake White', 13), (5, 'Jill Black', 14);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT RecruiterName FROM (SELECT RecruiterName, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Recruiters r JOIN Candidates c ON r.CandidateID = c.CandidateID GROUP BY RecruiterName) AS Subquery WHERE Rank <= 5;"
    },
    {
        "instruction": "입력 텍스트: 사회과학 부서의 저자별 평균 출판물 수를 저자의 성별에 따라 구분하세요.\n\nDDL statements:\nCREATE TABLE publication (id INT, author VARCHAR(50), department VARCHAR(30), year INT, title VARCHAR(100), gender VARCHAR(10)); INSERT INTO publication (id, author, department, year, title, gender) VALUES (1, 'Violet', 'Social Sciences', 2019, 'Social Theory', 'Female'), (2, 'William', 'Social Sciences', 2018, 'Political Analysis', 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, AVG(num_publications) as avg_publications FROM (SELECT gender, author, COUNT(*) as num_publications FROM publication GROUP BY department, gender, author) AS subquery GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: CyberSphere'라는 특정 VR 게임을 플레이한 플레이어들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Players.Age) FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 생산된 하이브리드 차량의 평균 마력은 얼마인가요?\n\nDDL statements:\nCREATE TABLE VehicleData (VIN VARCHAR(20), Model VARCHAR(20), Horsepower INT, ProductionYear INT, VehicleType VARCHAR(20)); INSERT INTO VehicleData (VIN, Model, Horsepower, ProductionYear, VehicleType) VALUES ('AA11BB2233', 'ModelX', 400, 2021, 'Hybrid'), ('CC22DD3344', 'ModelY', 500, 2022, 'Hybrid');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Horsepower) FROM VehicleData WHERE ProductionYear = 2021 AND VehicleType = 'Hybrid';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 팝 송의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE songs (id INT, title VARCHAR(255), genre VARCHAR(255), release_date DATE); INSERT INTO songs (id, title, genre, release_date) VALUES (1, 'Dancing Queen', 'pop', '1976-08-18'); CREATE TABLE sales (id INT, song_id INT, country VARCHAR(255), revenue DECIMAL(10,2)); CREATE VIEW pop_songs AS SELECT * FROM songs WHERE genre = 'pop'; CREATE VIEW usa_sales AS SELECT * FROM sales WHERE country = 'USA';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales.revenue) FROM pop_songs JOIN sales ON songs.id = sales.song_id WHERE sales.country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 플로리다에서 연락처 정보를 업데이트한 지역 보건 근로자는 누구인가요?\n\nDDL statements:\nCREATE TABLE WorkerContactInfo (WorkerID INT, ContactID INT, Address VARCHAR(100), State VARCHAR(2), LastUpdated DATE); INSERT INTO WorkerContactInfo (WorkerID, ContactID, Address, State, LastUpdated) VALUES (1, 1, '123 Main St', 'Florida', '2021-05-01'); UPDATE WorkerContactInfo SET Address = '456 Oak St' WHERE ContactID = 1 AND State = 'Florida';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT WorkerID, Address FROM WorkerContactInfo WHERE State = 'Florida' AND LastUpdated > '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: 제품 이름과 그에 해당하는 원재료를 제품 이름 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE ingredients (ingredient_id INT, ingredient VARCHAR(255), product_id INT); CREATE TABLE products (product_id INT, product_name VARCHAR(255)); INSERT INTO ingredients (ingredient_id, ingredient, product_id) VALUES (1, 'Aqua', 1), (2, 'Glycerin', 1), (3, 'Sodium Laureth Sulfate', 1), (4, 'Cocamidopropyl Betaine', 1), (5, 'Parfum', 1); INSERT INTO products (product_id, product_name) VALUES (1, 'Loreal Shampoo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.product_name, ingredients.ingredient FROM ingredients JOIN products ON ingredients.product_id = products.product_id ORDER BY product_name;"
    },
    {
        "instruction": "입력 텍스트: 북극해에 있는 해양보호구역 중 면적이 100,000보다 큰 곳은 어디인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (region VARCHAR(20), name VARCHAR(50), size FLOAT); INSERT INTO marine_protected_areas (region, name, size) VALUES ('Arctic Ocean', 'Fram Strait Conservation Area', 120000); INSERT INTO marine_protected_areas (region, name, size) VALUES ('Arctic Ocean', 'Nansen and Amundsen Basins Marine Protected Area', 250000); INSERT INTO marine_protected_areas (region, name, size) VALUES ('Southern Ocean', 'Ross Sea Marine Protected Area', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM marine_protected_areas WHERE region = 'Arctic Ocean' AND size > 100000;"
    },
    {
        "instruction": "입력 텍스트: 지역별 커뮤니티 보건 근로자들의 정신 건강 점수 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE MentalHealthScores (WorkerID INT, WorkerName TEXT, Region TEXT, MentalHealthScore INT); INSERT INTO MentalHealthScores (WorkerID, WorkerName, Region, MentalHealthScore) VALUES (1, 'John Doe', 'Northeast', 85), (2, 'Jane Smith', 'Northeast', 90), (3, 'Alice Johnson', 'South', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, AVG(MentalHealthScore) as Avg_Score, STDDEV(MentalHealthScore) as StdDev_Score FROM MentalHealthScores GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: beauty_products' 테이블에 'Water', 'Organic Castor Oil' 성분을 가진 새로운 제품 'Natural Mascara'에 대한 데이터를 입력하세요.\n\nDDL statements:\nCREATE TABLE beauty_products (product_id INT PRIMARY KEY, product_name VARCHAR(255), ingredient VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO beauty_products (product_id, product_name, ingredient) VALUES ((SELECT MAX(product_id) FROM beauty_products)+1, 'Natural Mascara', 'Water'); INSERT INTO beauty_products (product_id, product_name, ingredient) VALUES ((SELECT MAX(product_id) FROM beauty_products)+1, 'Natural Mascara', 'Organic Castor Oil');"
    },
    {
        "instruction": "입력 텍스트: WaterConservation' 테이블에 있는 고유한 물 절약 방안 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE WaterConservation (initiative_id INT, initiative_type VARCHAR(20), region VARCHAR(20)); INSERT INTO WaterConservation (initiative_id, initiative_type, region) VALUES (1, 'Rainwater Harvesting', 'RegionA'), (2, 'Greywater Recycling', 'RegionB'), (3, 'Smart Irrigation', 'RegionC');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT initiative_type FROM WaterConservation;"
    },
    {
        "instruction": "입력 텍스트: 도시 내 공원과 레크리에이션 센터의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE parks (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255));   CREATE TABLE recreation_centers (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM parks UNION ALL SELECT COUNT(*) FROM recreation_centers;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 각 멤버십 유형별로 가입한 사용자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE memberships (membership_id INT, membership_type VARCHAR(50), start_date DATE); INSERT INTO memberships (membership_id, membership_type, start_date) VALUES (1, 'Basic', '2022-05-01'), (2, 'Premium', '2022-06-01'), (3, 'Elite', '2022-07-01'), (4, 'Basic', '2022-08-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT membership_type, COUNT(membership_id) as users_signed_up FROM memberships WHERE start_date >= DATEADD(month, -1, CURRENT_DATE) GROUP BY membership_type;"
    },
    {
        "instruction": "입력 텍스트: 태평양에 있는 평균 수심이 150미터보다 깊은 해양보호구역의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (id INT, name TEXT, region TEXT, avg_depth FLOAT); INSERT INTO marine_protected_areas (id, name, region, avg_depth) VALUES (1, 'Galapagos Marine Reserve', 'Pacific', 200.0), (2, 'Great Barrier Reef Marine Park', 'Pacific', 100.0), (3, 'Monterey Bay National Marine Sanctuary', 'Pacific', 120.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_protected_areas WHERE region = 'Pacific' AND avg_depth > 150;"
    },
    {
        "instruction": "입력 텍스트: 각 제품 카테고리별 총 매출액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SalesData (ProductID INT, Category VARCHAR(50), SalesAmount NUMERIC); INSERT INTO SalesData (ProductID, Category, SalesAmount) VALUES (1, 'Lipstick', 100); INSERT INTO SalesData (ProductID, Category, SalesAmount) VALUES (2, 'Foundation', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Category, SUM(SalesAmount) as TotalSalesAmount FROM SalesData GROUP BY Category;"
    },
    {
        "instruction": "입력 텍스트: 결핵 사례의 인종 및 민족별 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE tb_cases (case_id INT, race_ethnicity_id INT, cases_count INT); CREATE TABLE race_ethnicity (race_ethnicity_id INT, race VARCHAR(50), ethnicity VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT re.race, re.ethnicity, SUM(tc.cases_count) AS total_cases FROM tb_cases tc JOIN race_ethnicity re ON tc.race_ethnicity_id = re.race_ethnicity_id GROUP BY re.race_ethnicity_id;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이후에 스페인 출신 작가들이 만든 작품은 몇 점입니까?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, Name TEXT, Nationality TEXT, CreationYear INT);   CREATE TABLE Artworks (ArtworkID INT, ArtistID INT, CreationYear INT);   INSERT INTO Artists (ArtistID, Name, Nationality, CreationYear) VALUES (1, 'Pablo Picasso', 'Spanish', 1881);   INSERT INTO Artworks (ArtworkID, ArtistID, CreationYear) VALUES (1, 1, 2005);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Artworks A JOIN Artists B ON A.ArtistID = B.ArtistID WHERE B.Nationality = 'Spanish' AND A.CreationYear > 2000;"
    },
    {
        "instruction": "입력 텍스트: 립스틱과 립밤의 총 판매량을 찾아주세요.\n\nDDL statements:\nCREATE TABLE cosmetics_sales (product VARCHAR(255), sale_date DATE, sales_quantity INT); INSERT INTO cosmetics_sales (product, sale_date, sales_quantity) VALUES ('Lipstick', '2021-01-01', 200), ('Lip Balm', '2021-01-01', 150), ('Lipstick', '2021-01-02', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales_quantity) FROM cosmetics_sales WHERE product IN ('Lipstick', 'Lip Balm');"
    },
    {
        "instruction": "입력 텍스트: GreenEnergy' 스키마에서 에너지 효율 등급이 가장 낮은 국가는 어디인가요?\n\nDDL statements:\nCREATE SCHEMA GreenEnergy; CREATE TABLE Countries (country_id INT, country_name VARCHAR(100), energy_efficiency_rating INT); INSERT INTO Countries (country_id, country_name, energy_efficiency_rating) VALUES (1, 'USA', 70), (2, 'Canada', 75), (3, 'Mexico', 65);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country_name, energy_efficiency_rating FROM GreenEnergy.Countries ORDER BY energy_efficiency_rating ASC;"
    },
    {
        "instruction": "입력 텍스트: DroughtHistory' 테이블에서 100000명 이상의 사람들에게 영향을 미친 가뭄의 수를 세어보세요.\n\nDDL statements:\nCREATE TABLE DroughtHistory (id INT, drought_id INT, affected_population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM DroughtHistory WHERE affected_population > 100000;"
    },
    {
        "instruction": "입력 텍스트: projects' 스키마에서 'total_cost'가 100000000 이상이고 아직 완료되지 않은 프로젝트의 이름과 'start_date'는 무엇인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, name VARCHAR(50), total_cost FLOAT, start_date DATE, completion_date DATE); INSERT INTO projects (id, name, total_cost, start_date, completion_date) VALUES (1, 'Big Dig', 14800000000, '1982-01-01', '2007-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, start_date FROM projects WHERE total_cost >= 100000000 AND completion_date IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 현재 연도에 가장 많은 총 기부금을 받은 상위 5개 기관을 찾으세요.\n\nDDL statements:\nCREATE TABLE organization (org_id INT, org_name VARCHAR(255)); CREATE TABLE donation (don_id INT, donor_id INT, org_id INT, donation_amount INT, donation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT org_id, SUM(donation_amount) AS total_donations FROM donation WHERE EXTRACT(YEAR FROM donation_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY org_id ORDER BY total_donations DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 칠레와 페루의 광산 작업에서 매달 평균 사용되는 물의 양과 각 작업별로 사용된 총 물의 양은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mining_operations (id INT, country VARCHAR(20), operation_name VARCHAR(30), water_usage FLOAT); INSERT INTO mining_operations (id, country, operation_name, water_usage) VALUES (1, 'Chile', 'Operation D', 15000.5); INSERT INTO mining_operations (id, country, operation_name, water_usage) VALUES (2, 'Chile', 'Operation E', 12000.3); INSERT INTO mining_operations (id, country, operation_name, water_usage) VALUES (3, 'Peru', 'Operation F', 18000.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT operation_name, AVG(water_usage) AS avg_water_usage, SUM(water_usage) AS total_water_usage FROM mining_operations WHERE country IN ('Chile', 'Peru') GROUP BY operation_name;"
    },
    {
        "instruction": "입력 텍스트: 2021년 네바다 주의 어느 약국에서 발생한 최대 수익은 얼마였나요?\n\nDDL statements:\nCREATE TABLE dispensaries (id INT, state VARCHAR(50), year INT, revenue FLOAT); INSERT INTO dispensaries (id, state, year, revenue) VALUES (1, 'Nevada', 2021, 2000000.0), (2, 'Nevada', 2021, 2500000.5), (3, 'California', 2021, 1800000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(revenue) FROM dispensaries WHERE state = 'Nevada' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 열리는 전시회의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Exhibitions (exhibition_id INT, location VARCHAR(255), rating DECIMAL(3, 2)); INSERT INTO Exhibitions (exhibition_id, location, rating) VALUES (1, 'Tokyo', 4.5), (2, 'Tokyo', 4.7), (3, 'London', 4.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM Exhibitions WHERE location = 'Tokyo';"
    },
    {
        "instruction": "입력 텍스트: 유럽 대학에서 지난 5년간 제공된 윤리적 AI 과정의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Ethical_AI_Courses_Year (Year INT, Courses INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Courses) FROM Ethical_AI_Courses_Year WHERE Year BETWEEN 2016 AND 2021 AND Country IN ('Germany', 'France', 'Spain', 'Italy', 'UK');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕과 플로리다에서의 독특한 정신 건강 동등 정책을 나열하세요.\n\nDDL statements:\nCREATE TABLE mental_health_parity (policy_id INT, policy_description VARCHAR(100), state VARCHAR(20)); INSERT INTO mental_health_parity (policy_id, policy_description, state) VALUES (1, 'Policy 1', 'New York'), (2, 'Policy 2', 'New York'), (3, 'Policy 3', 'Florida'), (4, 'Policy 4', 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT state, policy_description FROM mental_health_parity WHERE state IN ('New York', 'Florida')"
    },
    {
        "instruction": "입력 텍스트: 2020년에 북극해에서 목격된 해양 포유류는 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE Arctic_sightings (animal_name TEXT, sighting_date DATE); INSERT INTO Arctic_sightings (animal_name, sighting_date) VALUES ('Beluga Whale', '2020-01-01'), ('Narwhal', '2020-03-15'), ('Walrus', '2020-07-22');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal_name FROM Arctic_sightings WHERE sighting_date BETWEEN '2020-01-01' AND '2020-12-31';"
    },
    {
        "instruction": "입력 텍스트: Jane Doe' 기부자의 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donor_name VARCHAR(30), donation_amount DECIMAL(5,2)); INSERT INTO donors (donor_id, donor_name, donation_amount) VALUES (1, 'Jane Doe', 300), (2, 'Mary Smith', 400), (3, 'Bob Johnson', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE donor_name = 'Jane Doe';"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 재료를 사용하는 공장에서 노동 비용이 가장 높고 낮은 나라는 어디인가요?\n\nDDL statements:\nCREATE TABLE country_labor (country VARCHAR(255), factory VARCHAR(255), labor_cost DECIMAL(5,2)); INSERT INTO country_labor (country, factory, labor_cost) VALUES ('Bangladesh', 'Factory1', 5.00), ('Bangladesh', 'Factory2', 6.00), ('Bangladesh', 'Factory3', 4.50), ('China', 'Factory4', 7.50), ('China', 'Factory5', 8.00), ('India', 'Factory6', 3.50), ('India', 'Factory7', 3.75); CREATE TABLE sustainable_materials (factory VARCHAR(255), material VARCHAR(255)); INSERT INTO sustainable_materials (factory, material) VALUES ('Factory1', 'organic cotton'), ('Factory2', 'recycled polyester'), ('Factory4', 'organic cotton'), ('Factory6', 'recycled polyester');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(labor_cost) AS max_labor_cost, MIN(labor_cost) AS min_labor_cost FROM country_labor JOIN sustainable_materials ON country_labor.factory = sustainable_materials.factory GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2021년 이전에 소말리아로 이루어진 모든 배송 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Deliveries (delivery_id INT, delivery_date DATE, item_id INT, quantity INT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Deliveries WHERE Deliveries.country = 'Somalia' AND Deliveries.delivery_date < '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: ABC Corp' 회사에 수여된 방위 계약은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Contracts (id INT, contract_number VARCHAR(50), contract_date DATE, contract_value FLOAT, contractor VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Contracts WHERE contractor = 'ABC Corp' AND contract_type = 'Defense';"
    },
    {
        "instruction": "입력 텍스트: container_receipts' 테이블에서 지난 3년 동안 1월에 수령된 컨테이너는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE container_receipts (id INT, container_id INT, receipt_date DATE, PRIMARY KEY(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM container_receipts WHERE MONTH(receipt_date) = 1 AND YEAR(receipt_date) BETWEEN YEAR(NOW()) - 3 AND YEAR(NOW());"
    },
    {
        "instruction": "입력 텍스트: Money Market' 펀드 유형의 지난 분기 평균 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transactions (id INT, customer_id INT, fund_type VARCHAR(50), transaction_amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (id, customer_id, fund_type, transaction_amount, transaction_date) VALUES (1, 1, 'Money Market', 5000.00, '2022-01-01'); INSERT INTO transactions (id, customer_id, fund_type, transaction_amount, transaction_date) VALUES (2, 2, 'Equity', 8000.00, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(transaction_amount) FROM transactions WHERE fund_type = 'Money Market' AND transaction_date >= DATEADD(quarter, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: Dakar' 항구에서 처리하는 컨테이너의 최소 무게는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ports (id INT, name VARCHAR(20)); INSERT INTO ports (id, name) VALUES (1, 'Dakar'), (2, 'Abidjan'); CREATE TABLE containers (id INT, weight INT, port_id INT); INSERT INTO containers (id, weight, port_id) VALUES (1, 1000, 1), (2, 500, 1), (3, 2000, 2), (4, 2500, 2), (5, 1500, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(weight) FROM containers WHERE port_id = (SELECT id FROM ports WHERE name = 'Dakar');"
    },
    {
        "instruction": "입력 텍스트: 독일에 있는 음악 산업 분야의 사용자 중 지난 주에 게시한 사람들의 최대 팔로워 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (id INT, country VARCHAR(255), industry VARCHAR(255), followers INT, last_post_time DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(followers) FROM users WHERE country = 'Germany' AND industry = 'music' AND last_post_time > DATE_SUB(NOW(), INTERVAL 1 WEEK);"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후에 개봉한 한국 영화의 평균 제작비는 얼마인가요?\n\nDDL statements:\nCREATE TABLE movie (id INT PRIMARY KEY, title VARCHAR(255), year INT, country VARCHAR(255), budget INT); INSERT INTO movie (id, title, year, country, budget) VALUES (1, 'MovieA', 2011, 'South Korea', 5000000), (2, 'MovieB', 2012, 'South Korea', 7000000), (3, 'MovieC', 2008, 'South Korea', 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM movie WHERE country = 'South Korea' AND year > 2010;"
    },
    {
        "instruction": "입력 텍스트: 브라질에 있는 500헥타르 이상의 숲에 사는 동물들의 총 개체 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE forests (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), hectares DECIMAL(10,2)); CREATE TABLE animals (id INT PRIMARY KEY, species VARCHAR(50), population INT, forest_id INT, FOREIGN KEY (forest_id) REFERENCES forests(id)); INSERT INTO forests (id, name, country, hectares) VALUES (1, 'Rainforest', 'Brazil', 700000.00); INSERT INTO animals (id, species, population, forest_id) VALUES (1, 'Jaguar', 1200, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(animals.population) FROM forests INNER JOIN animals ON forests.id = animals.forest_id WHERE forests.country = 'Brazil' AND forests.hectares > 500;"
    },
    {
        "instruction": "입력 텍스트: 남미 지역에서 폐기물 처리 비용이 가장 낮은 하위 2개 카테고리의 화학 제조 폐기물 처리 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE chemicals (id INT, name VARCHAR(255), category VARCHAR(255), waste_disposal_cost FLOAT, region VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(waste_disposal_cost) as total_cost FROM (SELECT chemicals.name as category, SUM(waste_disposal_cost) as waste_disposal_cost FROM chemicals WHERE region = 'South America' GROUP BY chemicals.name ORDER BY waste_disposal_cost LIMIT 2) as subquery;"
    },
    {
        "instruction": "입력 텍스트: habitats' 테이블에서 'South America'라는 이름을 가진 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE habitats (id INT PRIMARY KEY, name VARCHAR(50), size INT); INSERT INTO habitats (id, name, size) VALUES (1, 'Africa', 100000), (2, 'Asia', 200000), (3, 'South America', 150000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM habitats WHERE name = 'South America';"
    },
    {
        "instruction": "입력 텍스트: 호주 각 도시에 있는 녹색 지붕이 있는 부동산은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE properties (property_id INT, city VARCHAR(20), region VARCHAR(20), green_roof BOOLEAN); INSERT INTO properties (property_id, city, region, green_roof) VALUES (1, 'Sydney', 'Australia', true), (2, 'Melbourne', 'Australia', false), (3, 'Sydney', 'Australia', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) as count_of_properties FROM properties WHERE green_roof = true AND region = 'Australia' GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 유럽의 모든 광산 프로젝트 중 환경 영향이 보고된 광물의 총 추출량(킬로그램 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE productivity (project_id INT, mineral TEXT, quantity INT, environmental_impact TEXT); INSERT INTO productivity (project_id, mineral, quantity, environmental_impact) VALUES (1, 'gold', 1200, 'high'), (2, 'copper', 1500, 'low');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM productivity, projects WHERE productivity.project_id = projects.id AND projects.continent = 'Europe' AND environmental_impact IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: AI 안전 연구의 가장 최근 출판 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE safety_research (research_name TEXT, publication_date DATE); INSERT INTO safety_research (research_name, publication_date) VALUES ('Research1', '2021-05-01'), ('Research2', '2022-01-10'), ('Research3', '2023-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(publication_date) FROM safety_research;"
    },
    {
        "instruction": "입력 텍스트: 2022년 수확량이 가장 높은 상위 3개의 작물을 확인하세요.\n\nDDL statements:\nCREATE TABLE Crop (CropID int, CropName varchar(50), Yield int); INSERT INTO Crop (CropID, CropName, Yield) VALUES (1, 'Corn', 200), (2, 'Soybeans', 180), (3, 'Wheat', 150), (4, 'Corn', 220), (5, 'Soybeans', 250), (6, 'Wheat', 160);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CropName, ROW_NUMBER() OVER (ORDER BY Yield DESC) as Rank FROM Crop WHERE Year = 2022 HAVING Rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2022년 4월 한 달 동안 'Harbor Park'에서 발급된 교통 위반 티켓은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE traffic_citations (id INT, citation_time TIMESTAMP, location VARCHAR(20)); INSERT INTO traffic_citations (id, citation_time, location) VALUES (1, '2022-04-01 14:30:00', 'Harbor Park'), (2, '2022-04-03 09:15:00', 'Central Park');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM traffic_citations WHERE location = 'Harbor Park' AND citation_time >= '2022-04-01' AND citation_time < '2022-05-01';"
    },
    {
        "instruction": "입력 텍스트: 북극에서 각 달에 기록된 최고 기온과 최저 기온은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ArcticTemperature(month VARCHAR(10), temperature FLOAT);INSERT INTO ArcticTemperature(month, temperature) VALUES('January', -25.0), ('February', -30.0), ('March', -20.0), ('January', -20.0), ('February', -35.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT month, MAX(temperature), MIN(temperature) FROM ArcticTemperature GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: \"smart_cities\" 테이블에 새로운 스마트 시티 프로젝트를 추가합니다.\n\nDDL statements:\nCREATE TABLE smart_cities (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), population INT, start_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO smart_cities (id, name, location, population, start_year) VALUES (1, 'GreenCity', 'Tokyo', 2000000, 2018);"
    },
    {
        "instruction": "입력 텍스트: 최근 2년 이내에 출시된 동물 실험을 하지 않은 제품들의 평균 소비자 평점은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE cosmetics (product_id INT, product_name VARCHAR(50), consumer_rating FLOAT, is_cruelty_free BOOLEAN, launch_date DATE); INSERT INTO cosmetics (product_id, product_name, consumer_rating, is_cruelty_free, launch_date) VALUES (1, 'Lipstick A', 4.2, true, '2021-01-01'), (2, 'Eye Shadow B', 3.8, false, '2020-06-15'), (3, 'Mascara C', 4.5, true, '2022-03-27');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(consumer_rating) FROM cosmetics WHERE is_cruelty_free = true AND launch_date >= DATEADD(year, -2, CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: Impact Capital'이 'Healthcare' 분야에 투자한 평균 ESG 점수를 찾으세요.\n\nDDL statements:\nCREATE TABLE InvestmentsESG (id INT, investor VARCHAR(255), sector VARCHAR(255), esg_score DECIMAL(3,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(esg_score) FROM InvestmentsESG WHERE investor = 'Impact Capital' AND sector = 'Healthcare';"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 발행된 여행 경보의 가장 흔한 이유는 무엇인가요?\n\nDDL statements:\nCREATE TABLE TravelAdvisoryReasons (AdvisoryID INT, Reason VARCHAR(255), IssueDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Reason, COUNT(Reason) OVER (PARTITION BY Reason) AS NumAdvisories, ROW_NUMBER() OVER (ORDER BY COUNT(Reason) DESC) AS Rank FROM TravelAdvisoryReasons WHERE IssueDate >= ADD_MONTHS(CURRENT_DATE, -6) GROUP BY Reason HAVING Rank <= 5;"
    },
    {
        "instruction": "입력 텍스트: 2018년과 2021년의 총 물 사용량을 입방미터로 계산하세요\n\nDDL statements:\nCREATE TABLE water_usage (year INT, usage FLOAT); INSERT INTO water_usage (year, usage) VALUES (2018, 1234.56), (2019, 2345.67), (2020, 3456.78), (2021, 4567.89);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(usage) FROM water_usage WHERE year IN (2018, 2021);"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 재생 가능한 에너지원 '풍력'에서 발생하는 총 에너지 생산량(단위: MWh)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_production (country TEXT, source TEXT, energy_generated FLOAT); INSERT INTO energy_production (country, source, energy_generated) VALUES ('USA', 'wind', 12000), ('Canada', 'wind', 8000), ('Mexico', 'wind', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(energy_generated) FROM energy_production WHERE source = 'wind' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 댄스 퍼포먼스' 이벤트에 참석한 원주민 또는 태평양 섬 주민으로 식별되는 방문객은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Events (event_id INT, event_name VARCHAR(255), attendees INT); INSERT INTO Events (event_id, event_name, attendees) VALUES (1, 'Music Festival', 800), (4, 'Dance Performance', 600); CREATE TABLE Attendee_Demographics (attendee_id INT, attendee_race VARCHAR(255), event_id INT); INSERT INTO Attendee_Demographics (attendee_id, attendee_race, event_id) VALUES (4, 'Indigenous', 4), (5, 'Pacific Islander', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Attendee_Demographics AD JOIN Events E ON AD.event_id = E.event_id WHERE E.event_name = 'Dance Performance' AND AD.attendee_race IN ('Indigenous', 'Pacific Islander');"
    },
    {
        "instruction": "입력 텍스트: 테이블 timber_production과 regions에서 지난 5년간 각 지역의 총 목재 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE timber_production (production_id INT, region_id INT, year INT, volume FLOAT); CREATE TABLE regions (region_id INT, region_name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.region_name, SUM(tp.volume) FROM timber_production tp JOIN regions r ON tp.region_id = r.region_id WHERE tp.year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY r.region_name;"
    },
    {
        "instruction": "입력 텍스트: 글루텐 프리 제품의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(255), rating DECIMAL(2,1), gluten_free BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM products WHERE gluten_free = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기에 각 군사 장비 유형별 유지 보수 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE military_equipment (equipment_type VARCHAR(255), date DATE, cost FLOAT); INSERT INTO military_equipment (equipment_type, date, cost) VALUES ('Tank', '2021-07-01', 123456.78), ('Aircraft', '2021-07-02', 234567.89), ('Ship', '2021-07-03', 345678.90), ('Vehicle', '2021-07-04', 456789.01);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_type, SUM(cost) as total_cost FROM military_equipment WHERE date BETWEEN '2021-07-01' AND '2021-09-30' GROUP BY equipment_type;"
    },
    {
        "instruction": "입력 텍스트: Grants' 스키마에서 해양 생명 연구에 수여된 평균 보조금 금액은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA Grants; CREATE TABLE ResearchGrants (grant_id INT, grant_amount DECIMAL(10,2), grant_type VARCHAR(255)); INSERT INTO ResearchGrants (grant_id, grant_amount, grant_type) VALUES (1, 50000.00, 'MarineLifeResearch'), (2, 75000.00, 'OceanMapping'), (3, 30000.00, 'MarineLifeResearch');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(grant_amount) FROM Grants.ResearchGrants WHERE grant_type = 'MarineLifeResearch';"
    },
    {
        "instruction": "입력 텍스트: 베이징 시에서 지난 1년 동안 시행된 스마트 시티 프로젝트의 평균 에너지 절감량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE smart_city_projects (project_id INT, project_name VARCHAR(100), city VARCHAR(100), implementation_date DATE, energy_savings FLOAT); INSERT INTO smart_city_projects (project_id, project_name, city, implementation_date, energy_savings) VALUES (1, 'Smart Lighting', 'Beijing', '2022-01-01', 15.0), (2, 'Smart Grid', 'Beijing', '2022-07-01', 25.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_savings) FROM smart_city_projects WHERE city = 'Beijing' AND implementation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 주문 총량이 가장 낮은 공급업체가 보유한 공정 노동 관행 인증은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Suppliers (SupplierID INT, SupplierName VARCHAR(50), TotalOrders INT); CREATE TABLE Certifications (SupplierID INT, Certification VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Certifications.SupplierID, Certifications.Certification FROM Certifications JOIN (SELECT SupplierID FROM Suppliers ORDER BY TotalOrders LIMIT 1) AS LowestOrders ON Certifications.SupplierID = LowestOrders.SupplierID;"
    },
    {
        "instruction": "입력 텍스트: 1985년과 2000년 사이에 건설된 가장 긴 파이프라인과 그들의 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE pipelines (id INT, name TEXT, location TEXT, length INT, type TEXT, year INT); INSERT INTO pipelines (id, name, location, length, type, year) VALUES (1, 'Zack', 'Russia, China', 2483, 'Oil', 2013); INSERT INTO pipelines (id, name, location, length, type, year) VALUES (2, 'Baku-Tbilisi-Ceyhan', 'Azerbaijan, Georgia, Turkey', 1099, 'Oil', 2006);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, type, length FROM pipelines WHERE year > 1985 AND year < 2000 ORDER BY length DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 메뉴 카테고리별 총 수익을 보여주세요.\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, menu_category VARCHAR(255), revenue INT); INSERT INTO sales (sale_id, menu_category, revenue) VALUES (1, 'Appetizers', 500), (2, 'Entrees', 700), (3, 'Desserts', 600), (4, 'Beverages', 800); CREATE TABLE menu_categories (menu_category VARCHAR(255)); INSERT INTO menu_categories (menu_category) VALUES ('Appetizers'), ('Entrees'), ('Desserts'), ('Beverages');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mc.menu_category, SUM(s.revenue) AS total_revenue FROM sales s JOIN menu_categories mc ON s.menu_category = mc.menu_category GROUP BY mc.menu_category;"
    },
    {
        "instruction": "입력 텍스트: SpaceX에서 발사한 모든 우주선의 이름과 발사 날짜를 나열하시오.\n\nDDL statements:\nCREATE TABLE Spacecrafts (Spacecraft_ID INT, Name VARCHAR(100), Manufacturer VARCHAR(100), Launch_Date DATE); INSERT INTO Spacecrafts (Spacecraft_ID, Name, Manufacturer, Launch_Date) VALUES (1, 'Crew Dragon', 'SpaceX', '2019-03-02'), (2, 'Starship', 'SpaceX', '2020-05-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, Launch_Date FROM Spacecrafts WHERE Manufacturer = 'SpaceX';"
    },
    {
        "instruction": "입력 텍스트: 인도와 브라질에 있는 50MWh 이상 용량을 가진 에너지 저장 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE energy_storage (country VARCHAR(20), capacity INT); INSERT INTO energy_storage (country, capacity) VALUES ('India', 75), ('India', 60), ('India', 52), ('Brazil', 100), ('Brazil', 120), ('Brazil', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM energy_storage WHERE country IN ('India', 'Brazil') AND capacity > 50;"
    },
    {
        "instruction": "입력 텍스트: Pop' 장르의 노래는 총 몇 곡인가요?\n\nDDL statements:\nCREATE TABLE music_database (id INT, title TEXT, genre TEXT, duration INT); INSERT INTO music_database (id, title, genre, duration) VALUES (1, 'Song1', 'Pop', 200), (2, 'Song2', 'Rock', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM music_database WHERE genre = 'Pop';"
    },
    {
        "instruction": "입력 텍스트: HR 부서 직원들의 최대 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), Department VARCHAR(20), Salary FLOAT); INSERT INTO Employees (EmployeeID, Gender, Department, Salary) VALUES (1, 'Male', 'IT', 75000), (2, 'Female', 'IT', 70000), (3, 'Non-binary', 'HR', 65000), (4, 'Male', 'HR', 70000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Salary) FROM Employees WHERE Department = 'HR';"
    },
    {
        "instruction": "입력 텍스트: NBA의 'Pacific' 디비전에서 선수들이 기록한 평균 득점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE divisions (id INT, name VARCHAR(20), league VARCHAR(20)); INSERT INTO divisions (id, name, league) VALUES (1, 'Pacific', 'NBA'); CREATE TABLE stats (id INT, athlete INT, game INT, points INT, rebounds INT, assists INT); INSERT INTO stats (id, athlete, game, points, rebounds, assists) VALUES (1, 1, 1, 30, 5, 8); CREATE TABLE athletes (id INT, name VARCHAR(50), team INT, position VARCHAR(10)); INSERT INTO athletes (id, name, team, position) VALUES (1, 'Player A', 1, 'Guard'); CREATE TABLE teams (id INT, name VARCHAR(50), league VARCHAR(20)); INSERT INTO teams (id, name, league) VALUES (1, 'Team A', 'NBA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(s.points) FROM stats s INNER JOIN athletes a ON s.athlete = a.id INNER JOIN teams t ON a.team = t.id INNER JOIN divisions d ON t.league = d.league WHERE d.name = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 미국 각 주에서의 평균 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_id INT, state TEXT, donation_amount FLOAT); INSERT INTO donations (id, donor_id, state, donation_amount) VALUES (1, 1, 'California', 5000.00), (2, 2, 'Texas', 3000.00), (3, 3, 'New York', 2000.00), (4, 4, 'Florida', 4000.00), (5, 5, 'Illinois', 1000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(donation_amount) FROM donations WHERE state IN ('California', 'Texas', 'New York', 'Florida', 'Illinois') GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월의 모든 식품 안전 검사 기록을 삭제합니다\n\nDDL statements:\nCREATE TABLE food_safety_inspections (record_id INT, inspection_date DATE, violation_count INT); INSERT INTO food_safety_inspections (record_id, inspection_date, violation_count) VALUES (1, '2022-01-01', 3), (2, '2022-01-15', 0), (3, '2022-02-01', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM food_safety_inspections WHERE inspection_date >= '2022-01-01' AND inspection_date <= '2022-01-31';"
    },
    {
        "instruction": "입력 텍스트: 자신의 관리자와 같은 이름을 가진 직원을 찾으세요.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), ManagerID INT); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, ManagerID) VALUES (1, 'Jane', 'Smith', 'Marketing', 2), (2, 'Bruce', 'Johnson', 'IT', NULL), (3, 'Alice', 'Williams', 'Marketing', 1), (4, 'Charlie', 'Brown', 'HR', NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT E1.FirstName FROM Employees E1 INNER JOIN Employees E2 ON E1.ManagerID = E2.EmployeeID WHERE E1.FirstName = E2.FirstName;"
    },
    {
        "instruction": "입력 텍스트: 동남아시아에 위치한 프로젝트에서 가장 높은 영향 점수를 가진 사회 문제는 무엇인가요?\n\nDDL statements:\nCREATE TABLE social_issues (id INT PRIMARY KEY, name VARCHAR(255), impact_score INT);CREATE TABLE projects (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), budget DECIMAL(10,2));CREATE TABLE project_issues (project_id INT, issue_id INT, PRIMARY KEY (project_id, issue_id));CREATE VIEW high_impact_issues AS SELECT * FROM social_issues WHERE impact_score >= 75;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name, p.location, si.name as issue, si.impact_score FROM projects p JOIN project_issues pi ON p.id = pi.project_id JOIN social_issues si ON pi.issue_id = si.id WHERE p.location = 'Southeast Asia' AND si.impact_score IN (SELECT impact_score FROM high_impact_issues);"
    },
    {
        "instruction": "입력 텍스트: 지난 10년간 인도적 지원을 받은 모든 국가를 나열하세요.\n\nDDL statements:\nCREATE TABLE humanitarian_assistance (id INT, country VARCHAR(50), year INT, amount INT); INSERT INTO humanitarian_assistance (id, country, year, amount) VALUES (1, 'Afghanistan', 2001, 10000), (2, 'Iraq', 2003, 20000), (3, 'Haiti', 2010, 30000), (4, 'Syria', 2011, 40000), (5, 'Yemen', 2015, 50000), (6, 'Somalia', 2016, 60000), (7, 'South Sudan', 2017, 70000), (8, 'Myanmar', 2018, 80000), (9, 'Venezuela', 2019, 90000), (10, 'Syria', 2020, 100000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM humanitarian_assistance WHERE year >= YEAR(DATEADD(year, -10, GETDATE())) GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: \"geological_survey\" 테이블에서 조사된 모든 고유 광물을 나열하세요.\n\nDDL statements:\nCREATE TABLE geological_survey (mineral VARCHAR(50), extraction_method VARCHAR(50)); INSERT INTO geological_survey (mineral, extraction_method) VALUES ('Gold', 'Heap leaching'), ('Silver', 'Flotation'), ('Iron Ore', 'Drilling'), ('Copper', 'Open pit mining'), ('Zinc', 'Underground mining'), ('Lead', 'Quarrying');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT mineral FROM geological_survey;"
    },
    {
        "instruction": "입력 텍스트: 북극과 남극에서 사용되는 고유한 토착 언어는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE indigenous_communities ( id INT PRIMARY KEY, name VARCHAR(255), population INT, region VARCHAR(255), language VARCHAR(255)); INSERT INTO indigenous_communities (id, name, population, region, language) VALUES (1, 'Community A', 500, 'Arctic', 'Language A'); INSERT INTO indigenous_communities (id, name, population, region, language) VALUES (2, 'Community B', 700, 'Antarctic', 'Language B');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT language) FROM indigenous_communities WHERE region IN ('Arctic', 'Antarctic');"
    },
    {
        "instruction": "입력 텍스트: 2010년부터 2020년까지 개발도상국에 기후 완화 및 적응을 위해 개발된 국가들이 제공한 기후 재정의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ClimateFinance (donor_country VARCHAR(50), recipient_country VARCHAR(50), year INT, finance_type VARCHAR(50), amount FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM ClimateFinance WHERE donor_country NOT LIKE 'Developing%' AND recipient_country LIKE 'Developing%' AND finance_type IN ('climate mitigation', 'climate adaptation') AND year BETWEEN 2010 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 상위 5명의 변호사가 패소한 사건의 수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE cases (id INT, attorney VARCHAR(255), outcome VARCHAR(255), date DATE); INSERT INTO cases (id, attorney, outcome, date) VALUES (1, 'Brown', 'lost', '2021-01-01'), (2, 'Smith', 'won', '2021-02-01'), (3, 'Brown', 'lost', '2021-03-01'), (4, 'Johnson', 'won', '2021-04-01'), (5, 'Brown', 'lost', '2021-05-01'); CREATE TABLE attorney_billing_rates (attorney VARCHAR(255), billing_rate FLOAT); INSERT INTO attorney_billing_rates (attorney, billing_rate) VALUES ('Brown', 300.00), ('Smith', 350.00), ('Johnson', 400.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT attorney FROM cases WHERE outcome = 'lost' AND date >= DATE_SUB('2021-07-01', INTERVAL 6 MONTH) GROUP BY attorney ORDER BY COUNT(*) DESC LIMIT 5) AS top_5_attorneys;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 관광 숙박 시설 중에서 100개 이상의 긍정적인 리뷰를 받은 곳은 어디인가요?\n\nDDL statements:\nCREATE TABLE accommodations (accommodation_id INT, name VARCHAR(255), location VARCHAR(255), type VARCHAR(255), num_reviews INT, avg_review_score DECIMAL(5,2)); INSERT INTO accommodations (accommodation_id, name, location, type, num_reviews, avg_review_score) VALUES (1, 'Eco Lodge', 'Amazon Rainforest', 'Eco-friendly', 120, 4.8), (2, 'Green Hotel', 'Barcelona', 'Eco-friendly', 150, 4.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location, type FROM accommodations WHERE num_reviews > 100 AND avg_review_score >= 4.0;"
    },
    {
        "instruction": "입력 텍스트: 공급업체 테이블에서 '두부'와 '두유'를 모두 공급하는 공급업체를 보여주세요.\n\nDDL statements:\nCREATE TABLE Suppliers (id INT PRIMARY KEY, name VARCHAR(255), product VARCHAR(255), quantity INT); INSERT INTO Suppliers (id, name, product, quantity) VALUES (1, 'Supplier A', 'Tofu', 50), (2, 'Supplier B', 'Soy Milk', 100), (3, 'Supplier A', 'Soy Milk', 75), (4, 'Supplier C', 'Tofu', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s1.name FROM Suppliers s1 INNER JOIN Suppliers s2 ON s1.name = s2.name WHERE s1.product = 'Tofu' AND s2.product = 'Soy Milk';"
    },
    {
        "instruction": "입력 텍스트: 조직별로 월별로 배치된 위성의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, organization VARCHAR(50), launch_date DATE); INSERT INTO satellites (id, organization, launch_date) VALUES (1, 'NASA', '2021-01-01'), (2, 'SpaceX', '2021-02-14'), (3, 'Roscosmos', '2021-03-20'), (4, 'CNSA', '2021-04-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organization, YEAR(launch_date) as year, MONTH(launch_date) as month, COUNT(*) as total_satellites FROM satellites GROUP BY organization, year, month;"
    },
    {
        "instruction": "입력 텍스트: 허가증 ID 999에 대해 8000달러의 벌금이 부과된 새로운 노동 위반 사항을 입력하세요.\n\nDDL statements:\nCREATE TABLE labor_stats (permit_id INT, fine INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO labor_stats (permit_id, fine) VALUES (999, 8000);"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 있는 당뇨병을 앓고 있는 남성 환자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE patient (patient_id INT, age INT, gender VARCHAR(10), state VARCHAR(10), disease VARCHAR(20)); INSERT INTO patient (patient_id, age, gender, state, disease) VALUES (1, 65, 'Male', 'Texas', 'Diabetes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM patient WHERE gender = 'Male' AND state = 'Texas' AND disease = 'Diabetes';"
    },
    {
        "instruction": "입력 텍스트: 아시아' 지역에서 가장 많은 가상 투어 세션을 가진 온라인 여행사는 어디인가요?\n\nDDL statements:\nCREATE TABLE otas (ota_id INT, ota_name TEXT, region TEXT, virtual_tour_sessions INT); INSERT INTO otas (ota_id, ota_name, region, virtual_tour_sessions) VALUES (1, 'OTA 1', 'Asia', 1000), (2, 'OTA 2', 'Europe', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ota_name, virtual_tour_sessions FROM otas WHERE region = 'Asia' ORDER BY virtual_tour_sessions DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 AI 기반 호텔 예약 시스템의 시장 점유율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE bookings (id INT, region TEXT, system_type TEXT, bookings INT); INSERT INTO bookings (id, region, system_type, bookings) VALUES (1, 'Europe', 'AI-powered', 3000), (2, 'Asia', 'AI-powered', 2500), (3, 'North America', 'traditional', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, system_type, ROUND(100.0 * bookings / (SELECT SUM(bookings) FROM bookings WHERE region = 'Europe'), 2) as market_share FROM bookings WHERE region = 'Europe' AND system_type = 'AI-powered';"
    },
    {
        "instruction": "입력 텍스트: 동물 테이블에 'Lion'이라는 종과 300이라는 개체 수, 'Threatened'라는 상태를 가진 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE animals (species VARCHAR(50), population INT, status VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO animals (species, population, status) VALUES ('Lion', 300, 'Threatened');"
    },
    {
        "instruction": "입력 텍스트: \"메이크업\" 카테고리에 대해 지난 분기 동안 각 브랜드의 총 매출을 나열하세요.\n\nDDL statements:\nCREATE TABLE sales_quarterly (id INT, brand VARCHAR(100), category VARCHAR(100), sales_date DATE, revenue FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand, SUM(revenue) as total_sales FROM sales_quarterly WHERE category = 'makeup' AND sales_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') GROUP BY brand;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이후부터 2015년 이전까지 시행된 사이버보안 전략을 나열하시오.\n\nDDL statements:\nCREATE TABLE Cybersecurity_Strategies (Year INT, Strategy VARCHAR(255)); INSERT INTO Cybersecurity_Strategies (Year, Strategy) VALUES (2005, 'Cybersecurity Initiative'), (2010, 'Comprehensive National Cybersecurity Initiative'), (2015, 'Cybersecurity National Action Plan');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Strategy FROM Cybersecurity_Strategies WHERE Year BETWEEN 2000 AND 2015;"
    },
    {
        "instruction": "입력 텍스트: 각 제공업체의 광대역 서비스 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE broadband_providers (provider_id INT, provider_name VARCHAR(255), region VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO broadband_providers (provider_id, provider_name, region, revenue) VALUES (1, 'Provider A', 'North', 5000), (2, 'Provider B', 'South', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT provider_name, SUM(revenue) FROM broadband_providers GROUP BY provider_name;"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 지역에서 이동 장애가 있는 학생들이 얼마나 많은 편의를 제공받았습니까?\n\nDDL statements:\nCREATE TABLE Accommodations (StudentID INT, Region VARCHAR(50), AccommodationType VARCHAR(50), Year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, COUNT(StudentID) FROM Accommodations WHERE DisabilityType = 'mobility impairment' AND Year = 2019 GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 국가별 섬유 공급업체의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE textile_suppliers (supplier_id INT, supplier_country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_country, COUNT(*) AS supplier_count FROM textile_suppliers GROUP BY supplier_country ORDER BY supplier_count DESC"
    },
    {
        "instruction": "입력 텍스트: agricultural_projects'라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE agricultural_projects (id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(50), funding_source VARCHAR(50), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE agricultural_projects (id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(50), funding_source VARCHAR(50), start_date DATE, end_date DATE);"
    },
    {
        "instruction": "입력 텍스트: 2021년 1분기에 특정 약품의 총 판매액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE drug_sales(drug_id INT, sale_date DATE, amount DECIMAL(10,2)); INSERT INTO drug_sales(drug_id, sale_date, amount) VALUES (1, '2021-01-01', 1000), (1, '2021-01-15', 1500), (2, '2021-01-01', 2000), (2, '2021-01-15', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug_id, SUM(amount) as total_sales FROM drug_sales WHERE sale_date BETWEEN '2021-01-01' AND '2021-03-31' GROUP BY drug_id;"
    },
    {
        "instruction": "입력 텍스트: 각 문화 역량 프로그램별 정신 건강 동등 위반 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE cultural_competency_program (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO cultural_competency_program (id, name, location) VALUES (1, 'Care for All', 'New York'), (2, 'Cultura y Salud', 'California'), (3, 'Together We Heal', 'Florida'); CREATE TABLE mental_health_parity_violations (id INT, program_id INT, violation_count INT); INSERT INTO mental_health_parity_violations (id, program_id, violation_count) VALUES (1, 1, 3), (2, 2, 0), (3, 1, 2), (4, 3, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ccp.name, mhpv.violation_count FROM cultural_competency_program ccp INNER JOIN mental_health_parity_violations mhpv ON ccp.id = mhpv.program_id;"
    },
    {
        "instruction": "입력 텍스트: 그린란드 출신의 연구원들은 누구인가요?\n\nDDL statements:\nCREATE TABLE researchers (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO researchers (id, name, country) VALUES (1, 'Sanna Simula', 'Finland'), (2, 'Kristian Olsen', 'Greenland'), (3, 'Agnes Sorensen', 'Greenland');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM researchers WHERE country = 'Greenland';"
    },
    {
        "instruction": "입력 텍스트: \"departments\" 테이블에 새로운 부서를 추가하세요\n\nDDL statements:\nCREATE TABLE departments (id INT, department VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO departments (id, department) VALUES (5, 'Diversity & Inclusion');"
    },
    {
        "instruction": "입력 텍스트: 미국에 있는 모든 풍력 발전소의 이름과 발전 용량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE wind_farms (name TEXT, capacity INTEGER, country TEXT); INSERT INTO wind_farms (name, capacity, country) VALUES ('Wind Farm 1', 100, 'USA'), ('Wind Farm 2', 200, 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, capacity FROM wind_farms WHERE country = 'USA'"
    },
    {
        "instruction": "입력 텍스트: 어떤 작물에 해당하는 씨앗이 없나요?\n\nDDL statements:\nCREATE TABLE seeds (id INT PRIMARY KEY, name VARCHAR(50), quantity INT, crop_id INT, FOREIGN KEY (crop_id) REFERENCES crops(id)); INSERT INTO seeds (id, name, quantity, crop_id) VALUES (1, 'Seed B', 200, 2); CREATE TABLE crops (id INT PRIMARY KEY, name VARCHAR(50), yield INT); INSERT INTO crops (id, name, yield) VALUES (2, 'Rice', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crops.name FROM crops LEFT JOIN seeds ON crops.id = seeds.crop_id WHERE seeds.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: smart_cities' 테이블에 'GreenTech District'라는 새로운 스마트 시티 프로젝트를 추가하세요.\n\nDDL statements:\nCREATE TABLE smart_cities (id INT PRIMARY KEY, city_name VARCHAR(100), initiative VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO smart_cities (city_name, initiative) VALUES ('GreenTech District', 'smart city');"
    },
    {
        "instruction": "입력 텍스트: 2022년에 '미국' 관광객들이 가장 많이 방문한 도시 상위 3곳을 나열하세요.\n\nDDL statements:\nCREATE TABLE virtual_tours (id INT, city TEXT, country TEXT, views INT); INSERT INTO virtual_tours (id, city, country, views) VALUES (1, 'New York', 'US', 5000), (2, 'Los Angeles', 'US', 4500), (3, 'Paris', 'France', 3000), (4, 'London', 'UK', 3500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(views) as total_views FROM virtual_tours WHERE country = 'US' GROUP BY city ORDER BY total_views DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 그리스의 문화 유산 장소들에 하루 평균 방문객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE cultural_sites (site_id INT, site_name TEXT, daily_visitors INT); INSERT INTO cultural_sites (site_id, site_name, daily_visitors) VALUES (1, 'Acropolis', 500), (2, 'Parthenon', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(daily_visitors) FROM cultural_sites;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 힙합 아티스트들이 창출한 콘서트 수익의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE concert_events (event_id INT, artist_id INT, event_date DATE, event_location VARCHAR(255), genre VARCHAR(50), revenue DECIMAL(10,2)); INSERT INTO concert_events (event_id, artist_id, event_date, event_location, genre, revenue) VALUES (1, 1, '2022-01-01', 'NYC', 'Hip-Hop', 500000.00); CREATE TABLE artist_demographics (artist_id INT, artist_name VARCHAR(255), genre VARCHAR(50)); INSERT INTO artist_demographics (artist_id, artist_name, genre) VALUES (1, 'Jay-Z', 'Hip-Hop');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(ce.revenue) FILTER (WHERE ad.genre = 'Hip-Hop')) / SUM(ce.revenue) FROM concert_events ce JOIN artist_demographics ad ON ce.artist_id = ad.artist_id WHERE ce.event_date BETWEEN '2021-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 호러 장르에서 가장 높은 평점을 받은 영화는?\n\nDDL statements:\nCREATE TABLE Movie_Ratings (movie VARCHAR(255), genre VARCHAR(50), rating FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT movie, rating FROM Movie_Ratings WHERE genre = 'horror' ORDER BY rating DESC;"
    },
    {
        "instruction": "입력 텍스트: 청소년 발달에 중점을 둔 프로그램의 평균 프로그램 성과 점수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ProgramOutcomes (ProgramOutcomeID int, ProgramArea varchar(50), OutcomeScore int); INSERT INTO ProgramOutcomes (ProgramOutcomeID, ProgramArea, OutcomeScore) VALUES (1, 'Youth Development', 85); INSERT INTO ProgramOutcomes (ProgramOutcomeID, ProgramArea, OutcomeScore) VALUES (2, 'Mental Health', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(OutcomeScore) FROM ProgramOutcomes WHERE ProgramArea = 'Youth Development';"
    },
    {
        "instruction": "입력 텍스트: test_drives' 테이블에서 가장 최근 달에 시험된 자율 주행 차량은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE test_drives (id INT, vehicle_name VARCHAR(50), test_date DATE, vehicle_type VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_name, vehicle_type, MAX(test_date) OVER (PARTITION BY vehicle_type) AS max_test_date FROM test_drives WHERE vehicle_type LIKE '%Autonomous%';"
    },
    {
        "instruction": "입력 텍스트: 각 조직별로 자원봉사자의 총 수와 자원봉사자들이 기여한 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Organizations (org_id INT, org_name TEXT); CREATE TABLE Volunteers (vol_id INT, volunteer_name TEXT, hours_contributed INT, org_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT O.org_name, COUNT(V.vol_id) as total_volunteers, SUM(V.hours_contributed) as total_hours FROM Organizations O INNER JOIN Volunteers V ON O.org_id = V.org_id GROUP BY O.org_name;"
    },
    {
        "instruction": "입력 텍스트: 오버워치' 게임에서 플레이어 이름과 그들의 평균 점수를 표시하세요.\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Name VARCHAR(50)); INSERT INTO Players (PlayerID, Name) VALUES (1, 'John Doe'); INSERT INTO Players (PlayerID, Name) VALUES (2, 'Jane Smith'); CREATE TABLE Overwatch_Scores (PlayerID INT, Score INT); INSERT INTO Overwatch_Scores (PlayerID, Score) VALUES (1, 100); INSERT INTO Overwatch_Scores (PlayerID, Score) VALUES (1, 120); INSERT INTO Overwatch_Scores (PlayerID, Score) VALUES (2, 150); INSERT INTO Overwatch_Scores (PlayerID, Score) VALUES (2, 160);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.Name, AVG(os.Score) FROM Players p INNER JOIN Overwatch_Scores os ON p.PlayerID = os.PlayerID GROUP BY p.Name;"
    },
    {
        "instruction": "입력 텍스트: mining_operations' 테이블과 'waste_generation' 테이블에 있는 각 광산 작업별 총 폐기물 발생량은 무엇이며, 폐기물 발생량 순으로 정렬된 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE mining_operations (operation_id INT, name VARCHAR(50)); INSERT INTO mining_operations (operation_id, name) VALUES (1, 'Operation A'); INSERT INTO mining_operations (operation_id, name) VALUES (2, 'Operation B'); CREATE TABLE waste_generation (operation_id INT, waste_generation INT); INSERT INTO waste_generation (operation_id, waste_generation) VALUES (1, 20); INSERT INTO waste_generation (operation_id, waste_generation) VALUES (2, 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mining_operations.name, waste_generation.waste_generation FROM mining_operations INNER JOIN waste_generation ON mining_operations.operation_id = waste_generation.operation_id ORDER BY waste_generation DESC;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에 있는 기부자들 중 최대 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, country TEXT, donation_amount DECIMAL); INSERT INTO donors (id, name, country, donation_amount) VALUES (1, 'Jean Dupont', 'France', 500.00), (2, 'Maria Garcia', 'Spain', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(donation_amount) FROM donors WHERE country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 2020년부터 2022년까지 미국에 판매된 군사 장비의 총 판매액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MilitaryEquipmentSales (id INT PRIMARY KEY, sale_year INT, equipment_type VARCHAR(50), country VARCHAR(50), sale_value FLOAT); INSERT INTO MilitaryEquipmentSales (id, sale_year, equipment_type, country, sale_value) VALUES (1, 2020, 'Aircraft', 'United States', 12000000), (2, 2021, 'Vehicles', 'United States', 8000000), (3, 2022, 'Naval Equipment', 'United States', 15000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sale_value) FROM MilitaryEquipmentSales WHERE sale_year BETWEEN 2020 AND 2022 AND country = 'United States';"
    },
    {
        "instruction": "입력 텍스트: 국제선 도착이 가장 많은 상위 3개 공항을 찾으세요.\n\nDDL statements:\nCREATE TABLE AirportData (Airport VARCHAR(20), ArrivalType VARCHAR(20), NumFlights INT); INSERT INTO AirportData (Airport, ArrivalType, NumFlights) VALUES ('LAX', 'International', 1000), ('JFK', 'International', 1500), ('Heathrow', 'International', 2000), ('LAX', 'Domestic', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Airport, SUM(NumFlights) AS TotalFlights FROM AirportData WHERE ArrivalType = 'International' GROUP BY Airport ORDER BY TotalFlights DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 서울에서 열린 전시회에 30세 초과 방문객은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Exhibitions (exhibition_id INT, city VARCHAR(20), country VARCHAR(20)); INSERT INTO Exhibitions (exhibition_id, city, country) VALUES (1, 'Seoul', 'South Korea'), (2, 'Busan', 'South Korea'), (3, 'Incheon', 'South Korea'); CREATE TABLE Visitors (visitor_id INT, exhibition_id INT, age INT); INSERT INTO Visitors (visitor_id, exhibition_id, age) VALUES (1, 1, 35), (2, 1, 40), (3, 2, 25), (4, 2, 28), (5, 3, 19), (6, 3, 32);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(visitor_id) FROM Visitors v JOIN Exhibitions e ON v.exhibition_id = e.exhibition_id WHERE e.city = 'Seoul' AND v.age > 30;"
    },
    {
        "instruction": "입력 텍스트: community_engagement' 테이블에서 언어를 사용하는 사람들의 평균 나이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE community_engagement (id INT, name VARCHAR(50), language VARCHAR(50), age INT); INSERT INTO community_engagement (id, name, language, age) VALUES (1, 'John Doe', 'English', 45), (2, 'Jane Smith', 'Spanish', 32);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM community_engagement WHERE language IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 작전 내구의 자유에 얼마나 많은 정보 요원이 배치되었나요?\n\nDDL statements:\nCREATE TABLE intelligence_personnel (personnel_id INT PRIMARY KEY, operation_name VARCHAR(255), personnel_count INT); INSERT INTO intelligence_personnel (personnel_id, operation_name, personnel_count) VALUES (1, 'Operation Iraqi Freedom', 3000), (2, 'Operation Enduring Freedom', 4000), (3, 'Operation Inherent Resolve', 5000), (4, 'Operation Freedom''s Sentinel', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT personnel_count FROM intelligence_personnel WHERE operation_name = 'Operation Enduring Freedom';"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 프로그램에 할당된 총 예산은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Program_Budget (program_id INT, budget_amount DECIMAL(10,2), budget_year INT); INSERT INTO Program_Budget (program_id, budget_amount, budget_year) VALUES (1, 15000.00, 2022), (2, 12000.00, 2022), (3, 18000.00, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, budget_amount as total_2022_budget FROM Program_Budget WHERE budget_year = 2022 GROUP BY program_id;"
    },
    {
        "instruction": "입력 텍스트: 남미로 급행 배송된 총 패키지 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE packages (id INT, shipped_date DATE, origin VARCHAR(50), destination VARCHAR(50), shipping_method VARCHAR(50)); INSERT INTO packages (id, shipped_date, origin, destination, shipping_method) VALUES (1, '2022-01-01', 'United States', 'Brazil', 'expedited'), (2, '2022-01-15', 'Canada', 'Argentina', 'standard');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM packages WHERE destination = 'South America' AND shipping_method = 'expedited';"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 분기별로 각 카테고리에 지출된 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Budget (BudgetID INT, Category TEXT, Amount DECIMAL(10,2), SpendDate DATE); INSERT INTO Budget (BudgetID, Category, Amount, SpendDate) VALUES (1, 'Supplies', 1500, '2021-07-05'), (2, 'Salaries', 5000, '2021-08-28'), (3, 'Rent', 2000, '2021-09-30'), (4, 'Community Outreach', 8000, '2021-07-14'), (5, 'Community Outreach', 6000, '2021-09-20'), (6, 'Education', 12000, '2021-01-01'), (7, 'Education', 10000, '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Category, DATE_FORMAT(SpendDate, '%Y-%q') as Quarter, SUM(Amount) as TotalBudget FROM Budget GROUP BY Category, Quarter;"
    },
    {
        "instruction": "입력 텍스트: 농촌 병원의 평균 병상 수를 주별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE hospitals (hospital_id INT, hospital_name TEXT, beds INT, rural BOOLEAN, state_id INT); INSERT INTO hospitals (hospital_id, hospital_name, beds, rural, state_id) VALUES (1, 'Hospital A', 100, true, 1); CREATE TABLE states (state_id INT, state TEXT); INSERT INTO states (state_id, state) VALUES (1, 'Alabama'), (2, 'Alaska');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(hospitals.beds) avg_beds, states.state FROM hospitals JOIN states ON hospitals.state_id = states.state_id WHERE hospitals.rural = true GROUP BY states.state;"
    },
    {
        "instruction": "입력 텍스트: 2021년 2분기 각 국가별 평균 데이터 사용량(GB)은 얼마였나요?\n\nDDL statements:\nCREATE TABLE mobile_subscribers (subscriber_id INT, data_usage DECIMAL(5,2), country VARCHAR(50)); INSERT INTO mobile_subscribers (subscriber_id, data_usage, country) VALUES (1, 3.5, 'USA'), (2, 2.8, 'Canada'), (3, 1.9, 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(data_usage) AS avg_data_usage_gb FROM mobile_subscribers WHERE country IN ('USA', 'Canada', 'Mexico') AND YEAR(registration_date) = 2021 AND QUARTER(registration_date) = 2 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 모든 농촌 의료 시설의 위치를 'Northern New York'으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE facilities (id INT, name TEXT, location TEXT, capacity INT); INSERT INTO facilities (id, name, location, capacity) VALUES (1, 'Rural Upstate Health Center', 'New York', 40), (2, 'Rural Finger Lakes Clinic', 'New York', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE facilities SET location = 'Northern New York' WHERE location = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 농업 혁신 프로젝트의 총 개수와 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, country VARCHAR(50), type VARCHAR(50), budget INT); INSERT INTO projects (id, country, type, budget) VALUES (1, 'Mexico', 'Precision Agriculture', 50000), (2, 'Brazil', 'Drip Irrigation', 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*), SUM(budget) FROM projects GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: TopStudents' 뷰를 삭제하세요\n\nDDL statements:\nCREATE TABLE Students (StudentID INT, Name VARCHAR(100), Grade INT); CREATE VIEW TopStudents AS SELECT Name, Grade FROM Students WHERE Grade >= 12;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DROP VIEW TopStudents;"
    },
    {
        "instruction": "입력 텍스트: 다양성 교육을 이수한 직원의 총 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Training (TrainingID INT, EmployeeID INT, TrainingType VARCHAR(20), CompletionDate DATE); INSERT INTO Training (TrainingID, EmployeeID, TrainingType, CompletionDate) VALUES (1, 4, 'Diversity', '2022-02-20'), (2, 5, 'Diversity', '2022-03-05'), (3, 6, 'Safety', '2022-04-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Training WHERE TrainingType = 'Diversity';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주의 판사들이 설정한 모든 법적 선례를 나열하십시오.\n\nDDL statements:\nCREATE TABLE legal_precedents (precedent_id INT, judge_state VARCHAR(2), precedent_text TEXT); INSERT INTO legal_precedents (precedent_id, judge_state, precedent_text) VALUES (1, 'NY', 'Precedent 1'), (2, 'CA', 'Precedent 2'), (3, 'NY', 'Precedent 3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT precedent_text FROM legal_precedents WHERE judge_state = 'NY';"
    },
    {
        "instruction": "입력 텍스트: 애니메이션' 장르 영화의 총 제작 예산과 평균 상영 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Movies (MovieID INT, Title VARCHAR(255), Genre VARCHAR(50), ReleaseYear INT, ProductionBudget DECIMAL(10,2), RunningTime INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, SUM(ProductionBudget) AS Total_Budget, AVG(RunningTime) AS Avg_Running_Time FROM Movies WHERE Genre = 'Animation' GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: 재무 역량 프로그램과 그 시작 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE financial_capability_programs (program_id INT, program_name VARCHAR(255), start_date DATE); INSERT INTO financial_capability_programs (program_id, program_name, start_date) VALUES (1, 'Financial Literacy', '2021-09-01'); INSERT INTO financial_capability_programs (program_id, program_name, start_date) VALUES (2, 'Budgeting Skills', '2022-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name, start_date FROM financial_capability_programs;"
    },
    {
        "instruction": "입력 텍스트: 각 연령대의 예술가들이 만든 예술품 수는 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA art; CREATE TABLE art_pieces (artist_id INT, artist_name VARCHAR(255), artist_age INT, art_count INT); INSERT INTO art.art_pieces (artist_id, artist_name, artist_age, art_count) VALUES (1, 'Sophia Chen', 30, 15), (2, 'Hector Rodriguez', 40, 20), (3, 'Mei Lin', 50, 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist_age, COUNT(*) as count FROM art.art_pieces GROUP BY artist_age;"
    },
    {
        "instruction": "입력 텍스트: safety_data 테이블에 있는 화학물질의 이름과 해당 위험 분류는 무엇인가요?\n\nDDL statements:\nCREATE TABLE safety_data (chemical_name VARCHAR(255), hazard_category VARCHAR(255)); INSERT INTO safety_data (chemical_name, hazard_category) VALUES ('Hydrochloric Acid', 'Corrosive'), ('Acetone', 'Flammable'), ('Sodium Hydroxide', 'Corrosive');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT chemical_name, hazard_category FROM safety_data;"
    },
    {
        "instruction": "입력 텍스트: 모든 역 이름과 해당 위도 및 경도를 나열합니다.\n\nDDL statements:\nCREATE TABLE stations (station_id INT, name VARCHAR(255), latitude DECIMAL(9,6), longitude DECIMAL(9,6));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, latitude, longitude FROM stations;"
    },
    {
        "instruction": "입력 텍스트: 해양 심층에 서식하는 새로운 종 'Yetidracus profundis'를 종 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE species (scientific_name TEXT, common_name TEXT, conservation_status TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO species (scientific_name, common_name, conservation_status) VALUES ('Yetidracus profundis', 'Yeti Shark', 'Vulnerable');"
    },
    {
        "instruction": "입력 텍스트: CityE에 있는 경찰서의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE police_stations (id INT, city VARCHAR(50), station_count INT); INSERT INTO police_stations (id, city, station_count) VALUES (1, 'CityE', 7), (2, 'CityF', 9), (3, 'CityG', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT station_count FROM police_stations WHERE city = 'CityE';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 농촌 지역 보건 의료 서비스에 대해 받은 시민 피드백은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE feedback (service varchar(20), location varchar(20), date date); INSERT INTO feedback (service, location, date) VALUES ('Education', 'Urban', '2021-01-01'), ('Healthcare', 'Urban', '2021-02-01'), ('Education', 'Rural', '2020-12-01'), ('Healthcare', 'Rural', '2020-11-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM feedback WHERE service = 'Healthcare' AND location = 'Rural' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: Navy' 지부에서 수행한 인도주의 지원 작전의 총 횟수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE Operations (id INT, branch VARCHAR(20), type VARCHAR(30)); INSERT INTO Operations (id, branch, type) VALUES (1, 'Navy', 'Humanitarian Assistance');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Operations WHERE branch = 'Navy' AND type = 'Humanitarian Assistance';"
    },
    {
        "instruction": "입력 텍스트: 환자 ID가 4인 환자의 치료 기간을 18회로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE patients (id INT PRIMARY KEY, name VARCHAR(255), age INT); INSERT INTO patients (id, name, age) VALUES (4, 'Alex Sam', 27); CREATE TABLE treatments (id INT PRIMARY KEY, patient_id INT, name VARCHAR(255), duration INT); INSERT INTO treatments (id, patient_id, name, duration) VALUES (2, 4, 'Cognitive Behavioral Therapy (CBT)', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE treatments SET duration = 18 WHERE patient_id = 4;"
    },
    {
        "instruction": "입력 텍스트: \"rural_hospitals\" 테이블에 있는 각 농촌 병원이 서비스한 환자의 총 수는 병원 이름별로 구분되어 얼마인가요?\n\nDDL statements:\nCREATE TABLE rural_hospitals (hospital_name VARCHAR(255), patient_count INT); INSERT INTO rural_hospitals (hospital_name, patient_count) VALUES ('Hospital1', 10), ('Hospital1', 11), ('Hospital2', 20), ('Hospital2', 21), ('Hospital3', 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hospital_name, SUM(patient_count) OVER (PARTITION BY hospital_name) FROM rural_hospitals;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기 각 국가의 GDP 대비 평균 방위비 지출 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE defense_spending (country VARCHAR(255), defense_spending_gdp NUMERIC, quarter INT, year INT); INSERT INTO defense_spending (country, defense_spending_gdp, quarter, year) VALUES ('USA', 3.5, 2, 2022), ('China', 2.0, 2, 2022), ('India', 2.5, 2, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(defense_spending_gdp) FROM defense_spending WHERE quarter = 2 AND year = 2022 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 호주의 광산 운영에서 최소 환경 영향 점수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE MiningOperations (id INT, location TEXT, impact_score INT);INSERT INTO MiningOperations (id, location, impact_score) VALUES (1, 'Australia', 55), (2, 'Brazil', 60), (3, 'South Africa', 45), (4, 'Australia', 65);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(impact_score) FROM MiningOperations WHERE location = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 발생한 취약점 점수의 분포와 취약점 점수 순위는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Vulnerabilities (system_id INT, vulnerability_score DECIMAL(3,2), timestamp TIMESTAMP); INSERT INTO Vulnerabilities (system_id, vulnerability_score, timestamp) VALUES (1, 7.5, '2022-01-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vulnerability_score, RANK() OVER (ORDER BY vulnerability_score DESC) as vulnerability_rank FROM Vulnerabilities WHERE timestamp BETWEEN DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 WEEK) AND CURRENT_TIMESTAMP;"
    },
    {
        "instruction": "입력 텍스트: threat_actors' 테이블에서 가장 많은 위협 행위자를 보유한 상위 3개 국가를 찾으세요.\n\nDDL statements:\nCREATE TABLE threat_actors (id INT, actor_name VARCHAR(50), country VARCHAR(50)); INSERT INTO threat_actors (id, actor_name, country) VALUES (1, 'APT34', 'Iran'), (2, 'Lazarus', 'North Korea'), (3, 'Cozy Bear', 'Russia'), (4, 'APT34', 'Iran'), (5, 'Lazarus', 'North Korea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM threat_actors GROUP BY country ORDER BY COUNT(*) DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: customers' 테이블에서 고객 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), address VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM customers WHERE customer_id = 1001;"
    },
    {
        "instruction": "입력 텍스트: 각 아티스트의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ArtSales (SaleID INT, ArtistID INT, Revenue INT); INSERT INTO ArtSales (SaleID, ArtistID, Revenue) VALUES (1, 1, 1000), (2, 1, 2000), (3, 2, 3000), (4, 2, 1500), (5, 3, 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistID, SUM(Revenue) as TotalRevenue FROM ArtSales GROUP BY ArtistID;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 버스 서비스를 이용한 사용자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE users (id INT, name TEXT, last_used_bus DATETIME);   INSERT INTO users (id, name, last_used_bus) VALUES (1, 'Alice', '2022-01-01'), (2, 'Bob', '2022-02-15'), (3, 'Charlie', '2022-01-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM users WHERE last_used_bus >= DATE_SUB(NOW(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 유럽에 기반을 둔 기관들이 제공하는 연간 기후 금융의 평균을 구하되, 영국을 제외하고 계산하세요.\n\nDDL statements:\nCREATE TABLE europe_org (id INT PRIMARY KEY, organization VARCHAR(255), country VARCHAR(50)); INSERT INTO europe_org (id, organization, country) VALUES (1, 'European Investment Bank', 'Germany'), (2, 'European Bank for Reconstruction and Development', 'France'), (3, 'European Central Bank', 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(annual_finance) FROM (SELECT YEAR(date) AS year, SUM(amount) AS annual_finance FROM finance JOIN europe_org ON finance.organization_id = europe_org.id WHERE country NOT IN ('UK') GROUP BY YEAR(date)) AS annual_finance_table;"
    },
    {
        "instruction": "입력 텍스트: fish_stock' 테이블에 있는 각 어종별 총 재고 수준과 총 바이오매스는 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_stock (id INT, species VARCHAR(255), stock_level INT, biomass DECIMAL(6,2)); INSERT INTO fish_stock (id, species, stock_level, biomass) VALUES (1, 'Tilapia', 250, 325.45), (2, 'Salmon', 180, 2134.67), (3, 'Tilapia', 300, 412.34), (4, 'Catfish', 150, 654.32), (5, 'Salmon', 200, 2500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, SUM(stock_level) as total_stock, SUM(biomass) as total_biomass FROM fish_stock GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 2019년 북미 지역에서의 정보 작전에 대한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE IntelligenceBudget (BudgetID INT, Operation TEXT, Region TEXT, Year INT, Budget INT); INSERT INTO IntelligenceBudget (BudgetID, Operation, Region, Year, Budget) VALUES (1, 'Operation Red Sparrow', 'North America', 2019, 5000000); INSERT INTO IntelligenceBudget (BudgetID, Operation, Region, Year, Budget) VALUES (2, 'Operation Blue Fox', 'North America', 2019, 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget) as TotalBudget FROM IntelligenceBudget WHERE Region = 'North America' AND Year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 해양 생물 종 이름에 'Tuna'가 포함된 모든 레코드를 marine_species 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE marine_species (id INT, name VARCHAR(50), population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM marine_species WHERE name LIKE '%Tuna%';"
    },
    {
        "instruction": "입력 텍스트: 각 해에 제작된 영화 수를 구하되, 3편 미만인 해는 제외하세요.\n\nDDL statements:\nCREATE TABLE Movies (movie_id INT PRIMARY KEY, title VARCHAR(100), release_year INT); INSERT INTO Movies (movie_id, title, release_year) VALUES (1, 'The Shawshank Redemption', 1994), (2, 'The Godfather', 1972), (3, 'Inception', 2010), (4, 'Parasite', 2019), (5, 'Minari', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT release_year, COUNT(*) FROM Movies GROUP BY release_year HAVING COUNT(*) >= 3;"
    },
    {
        "instruction": "입력 텍스트: 초현실주의' 장르에 속한 작품들과 그 작품들이 북미에서 전시된 횟수를 나열하세요.\n\nDDL statements:\nCREATE TABLE Artworks (ArtworkID INT, ArtworkName VARCHAR(50), Genre VARCHAR(20)); INSERT INTO Artworks (ArtworkID, ArtworkName, Genre) VALUES (1, 'The Persistence of Memory', 'Surrealism'); CREATE TABLE ExhibitionsArtworks (ExhibitionID INT, ArtworkID INT, Location VARCHAR(20)); INSERT INTO ExhibitionsArtworks (ExhibitionID, ArtworkID) VALUES (1, 1), (2, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Artworks.ArtworkName, COUNT(DISTINCT ExhibitionsArtworks.ExhibitionID) FROM Artworks INNER JOIN ExhibitionsArtworks ON Artworks.ArtworkID = ExhibitionsArtworks.ArtworkID WHERE Artworks.Genre = 'Surrealism' AND ExhibitionsArtworks.Location LIKE 'North%';"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 생산된 제품 중 윤리적으로 조달되고 순환 공급망을 가진 제품의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, country VARCHAR(50), is_ethically_sourced BOOLEAN, has_circular_supply_chain BOOLEAN, revenue DECIMAL(10, 2)); CREATE VIEW country_products AS SELECT country, revenue FROM products WHERE is_ethically_sourced = TRUE AND has_circular_supply_chain = TRUE GROUP BY country;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(revenue) FROM country_products GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2020년 이후 사하라 사막 이남 아프리카에서 진행된 커뮤니티 개발 프로젝트는 무엇이었나요?\n\nDDL statements:\nCREATE TABLE Community_Development (id INT, name VARCHAR(50), location VARCHAR(50), budget DECIMAL(10,2), start_date DATE); INSERT INTO Community_Development (id, name, location, budget, start_date) VALUES (1, 'Youth Empowerment', 'Rural Kenya', 20000.00, '2020-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location, budget FROM Community_Development WHERE start_date >= '2020-01-01';"
    },
    {
        "instruction": "입력 텍스트: incident_responses' 테이블에서 각 분석가가 대응한 보안 사고의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE incident_responses (id INT, incident_type VARCHAR(50), status VARCHAR(20), responded_by VARCHAR(100)); INSERT INTO incident_responses (id, incident_type, status, responded_by) VALUES (1, 'Phishing', 'Resolved', 'Security Analyst 1'), (2, 'Malware', 'In Progress', 'Security Analyst 2'), (3, 'Ransomware', 'Resolved', 'Security Analyst 1'), (4, 'DDoS', 'Resolved', 'Security Analyst 3'), (5, 'SQL Injection', 'Resolved', 'Security Analyst 2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT responded_by, COUNT(*) FROM incident_responses GROUP BY responded_by;"
    },
    {
        "instruction": "입력 텍스트: 플로리다에서 지난 1년 동안 폐렴 주사를 맞은 환자들의 중간 연령은 무엇인가요?\n\nDDL statements:\nCREATE TABLE patient (patient_id INT, age INT, gender VARCHAR(10), state VARCHAR(10)); INSERT INTO patient (patient_id, age, gender, state) VALUES (1, 60, 'Female', 'Florida'); INSERT INTO patient (patient_id, age, gender, state) VALUES (2, 55, 'Male', 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) OVER (PARTITION BY state ORDER BY flu_shot_date DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS median_age_by_state FROM patient WHERE state = 'Florida' AND flu_shot_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 로스앤젤레스 항에 정박한 선박의 일 평균 연료 소비량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE VesselFuel (FuelID INT, VesselID INT, FuelDate DATE, FuelConsumed INT); INSERT INTO VesselFuel (FuelID, VesselID, FuelDate, FuelConsumed) VALUES (1, 1, '2021-05-15', 50), (2, 2, '2021-06-20', 75), (3, 3, '2021-07-05', 60); CREATE TABLE VesselDocking (DockingID INT, VesselID INT, DockingDate DATE, Port VARCHAR(20)); INSERT INTO VesselDocking (DockingID, VesselID, DockingDate, Port) VALUES (1, 1, '2021-05-10', 'Los Angeles'), (2, 2, '2021-06-15', 'New York'), (3, 3, '2021-07-01', 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(FuelConsumed) FROM VesselFuel VF JOIN VesselDocking VD ON VF.VesselID = VD.VesselID WHERE VD.DockingDate >= DATEADD(month, -1, GETDATE()) AND Port = 'Los Angeles';"
    },
    {
        "instruction": "입력 텍스트: New York'에 거주하는 보험 가입자들의 평균 보험 발급 날짜는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE policyholders (id INT, name TEXT, state TEXT); INSERT INTO policyholders (id, name, state) VALUES (1, 'John Doe', 'California'); INSERT INTO policyholders (id, name, state) VALUES (2, 'Jane Smith', 'Texas'); INSERT INTO policyholders (id, name, state) VALUES (3, 'Mike Johnson', 'New York');   CREATE TABLE policies (id INT, policyholder_id INT, issue_date DATE); INSERT INTO policies (id, policyholder_id, issue_date) VALUES (1, 1, '2021-01-01'); INSERT INTO policies (id, policyholder_id, issue_date) VALUES (2, 1, '2021-03-15'); INSERT INTO policies (id, policyholder_id, issue_date) VALUES (3, 3, '2022-02-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(issue_date) FROM policies JOIN policyholders ON policies.policyholder_id = policyholders.id WHERE policyholders.state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 2021년 말레이시아의 커뮤니티 개발 이니셔티브에서 평균 투자 금액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Investments (id INT, investment_id INT, initiative_type VARCHAR(20), investment_amount DECIMAL(10,2), investment_date DATE, country VARCHAR(20)); INSERT INTO Investments (id, investment_id, initiative_type, investment_amount, investment_date, country) VALUES (1, 6001, 'Community Development', 2500.00, '2021-01-15', 'Malaysia'), (2, 6002, 'Infrastructure', 5000.00, '2021-02-20', 'Malaysia'), (3, 6003, 'Community Development', 3000.00, '2021-03-31', 'Malaysia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(investment_amount) FROM Investments WHERE initiative_type = 'Community Development' AND country = 'Malaysia' AND YEAR(investment_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: Purple Line' 버스의 평균 요금을 계산하세요.\n\nDDL statements:\nCREATE TABLE bus_fares (route_name VARCHAR(50), fare FLOAT); INSERT INTO bus_fares (route_name, fare) VALUES ('Purple Line', 1.25), ('Purple Line', 1.25), ('Orange Line', 1.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fare) FROM bus_fares WHERE route_name = 'Purple Line';"
    },
    {
        "instruction": "입력 텍스트: 2018년 인도가 ASEAN 국가들과 개최한 국방 외교 행사의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE defense_diplomacy (id INT, country VARCHAR(255), year INT, event_name VARCHAR(255)); INSERT INTO defense_diplomacy (id, country, year, event_name) VALUES (1, 'Indonesia', 2018, 'India-Indonesia Defense Cooperation Dialogue');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT event_name FROM defense_diplomacy WHERE country LIKE 'ASEAN%' AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 사용된 각각의 원단 유형별 평균 수량은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Production (production_id INT, garment_id INT, fabric_id INT, quantity INT); INSERT INTO Production (production_id, garment_id, fabric_id, quantity) VALUES (1, 101, 1, 5), (2, 102, 2, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Fabrics.fabric_type, AVG(Production.quantity) as avg_quantity FROM Fabrics JOIN Production ON Fabrics.fabric_id = Production.fabric_id WHERE YEAR(Production.production_date) = 2021 GROUP BY Fabrics.fabric_type;"
    },
    {
        "instruction": "입력 텍스트: 2020년 국가별 1인당 평균 이산화탄소 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE co2_emissions (country VARCHAR(50), year INT, emission_per_capita FLOAT); INSERT INTO co2_emissions (country, year, emission_per_capita) VALUES ('United States', 2020, 15.52), ('China', 2020, 7.38), ('India', 2020, 1.97), ('Germany', 2020, 8.91), ('Brazil', 2020, 2.43);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(emission_per_capita)  FROM co2_emissions WHERE year = 2020 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 열대 지역에 있는 모든 물고기의 총 생물량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE fish_stock (fish_id INT PRIMARY KEY, species VARCHAR(50), location VARCHAR(50), biomass FLOAT); INSERT INTO fish_stock (fish_id, species, location, biomass) VALUES (1, 'tuna', 'tropical', 250.5), (2, 'salmon', 'arctic', 180.3), (3, 'cod', 'temperate', 120.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(biomass) FROM fish_stock WHERE location = 'tropical';"
    },
    {
        "instruction": "입력 텍스트: 각 주에 있는 일차 진료 클리닉의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE states (id INT, state VARCHAR(50)); INSERT INTO states (id, state) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); CREATE TABLE clinics (id INT, name VARCHAR(50), type VARCHAR(50), state_id INT); INSERT INTO clinics (id, name, type, state_id) VALUES (1, 'Aurora Health Center', 'Primary Care', 1), (2, 'Bluebonnet Clinic', 'Primary Care', 2), (3, 'Queens Medical Associates', 'Primary Care', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.state, COUNT(c.id) AS total_clinics FROM clinics c JOIN states s ON c.state_id = s.id WHERE c.type = 'Primary Care' GROUP BY s.state;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 각 미디어 매체에서 발행된 기사 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE articles (id INT, media_outlet VARCHAR(20), date DATE); CREATE VIEW last_week AS SELECT CURDATE() - INTERVAL day day FROM (SELECT 0 day UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6) days; INSERT INTO articles VALUES (1, 'CNN', '2022-01-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT media_outlet, COUNT(*) as article_count FROM articles INNER JOIN last_week ON DATEDIFF(articles.date, last_week.day) BETWEEN 0 AND 6 GROUP BY media_outlet;"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 'autonomous_vehicles' 데이터베이스에 보고된 안전 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE incidents (incident_id INT, report_date DATE); INSERT INTO incidents (incident_id, report_date) VALUES (1, '2022-01-01'), (2, '2022-01-10'), (3, '2022-02-15'), (4, '2022-03-20'), (5, '2022-03-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as incident_count FROM incidents WHERE report_date >= DATEADD(month, -3, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: USA'에서 발행된 콘텐츠의 평균 정보 오류 탐지 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE content (id INT, title VARCHAR(50), location VARCHAR(50), score INT); INSERT INTO content (id, title, location, score) VALUES (1, 'Article 1', 'USA', 75), (2, 'Article 2', 'Canada', 80), (3, 'News 1', 'USA', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(score) FROM content WHERE location = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 같은 주에 있는 모든 농촌 클리닉 간의 평균 거리는 얼마인가요? 이는 의료 전문가가 없는 클리닉을 포함합니다.\n\nDDL statements:\nCREATE TABLE Addresses (AddressID int, Address varchar(50), ClinicID int, Longitude decimal(10,8), Latitude decimal(10,8)); INSERT INTO Addresses (AddressID, Address, ClinicID, Longitude, Latitude) VALUES (1, 'Address A', 1, 145.12345678, -37.87654321), (2, 'Address B', 1, 145.12345678, -37.87654321), (3, 'Address C', 2, 145.12345678, -37.87654321), (4, 'Address D', 3, 115.12345678, -37.87654321);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, AVG(ST_Distance(Addresses1.Address, Addresses2.Address)) AS AvgDistance FROM Addresses AS Addresses1 JOIN Addresses AS Addresses2 ON Addresses1.State = Addresses2.State GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: 남반구에 있는 모든 해양 보호 구역의 이름과 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (area_name TEXT, location TEXT); INSERT INTO marine_protected_areas (area_name, location) VALUES ('Great Barrier Reef', 'Southern Hemisphere'), ('Antarctic Peninsula', 'Southern Hemisphere');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT area_name, location FROM marine_protected_areas WHERE location = 'Southern Hemisphere';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 교육 기관에 대한 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_state VARCHAR(255), recipient_sector VARCHAR(255), donation_amount DECIMAL(10,2)); INSERT INTO donations (id, donor_state, recipient_sector, donation_amount) VALUES (1, 'California', 'education', 1500.00), (2, 'California', 'healthcare', 500.00), (3, 'Texas', 'education', 2000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(donation_amount) FROM donations WHERE donor_state = 'California' AND recipient_sector = 'education';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 디스프로슘을 가장 많이 생산하는 상위 2개국의 총 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE production (country VARCHAR(255), element VARCHAR(255), quantity INT, year INT); INSERT INTO production (country, element, quantity, year) VALUES ('China', 'Dysprosium', 50000, 2019), ('United States', 'Dysprosium', 20000, 2019), ('Australia', 'Dysprosium', 15000, 2019), ('Malaysia', 'Dysprosium', 10000, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(quantity) as total_production FROM (SELECT country, quantity, RANK() OVER (PARTITION BY element ORDER BY quantity DESC) as rank FROM production WHERE element = 'Dysprosium' AND year = 2019) WHERE rank <= 2 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 마리아나 해구의 최대 및 최소 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE trench_depths (trench_name TEXT, depth INTEGER);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(depth), MIN(depth) FROM trench_depths WHERE trench_name = 'Mariana Trench';"
    },
    {
        "instruction": "입력 텍스트: 2020년 아시아-태평양 지역 국가들의 군사 혁신을 위해 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA military_innovation;CREATE TABLE ap_budget (country VARCHAR(50), budget INT, year INT, region VARCHAR(50));INSERT INTO ap_budget (country, budget, year, region) VALUES ('China', 8000000, 2020, 'Asia-Pacific'), ('Japan', 6000000, 2020, 'Asia-Pacific'), ('India', 4000000, 2020, 'Asia-Pacific'), ('South Korea', 7000000, 2020, 'Asia-Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM military_innovation.ap_budget WHERE year = 2020 AND region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 방위 산업에서 보고된 사이버 보안 사건은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Cybersecurity_Incidents (id INT, industry VARCHAR(50), year INT, reported_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(reported_count) FROM Cybersecurity_Incidents WHERE industry = 'defense' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 평균 식품 안전 검사 점수가 가장 낮은 상위 3개 도시와 각 도시에서 실시된 검사의 총 횟수를 나열하세요.\n\nDDL statements:\nCREATE TABLE cities (city_id INT, city VARCHAR(255)); CREATE TABLE inspections (inspection_id INT, city_id INT, score INT); INSERT INTO cities VALUES (1, 'New York'); INSERT INTO cities VALUES (2, 'Los Angeles'); INSERT INTO inspections VALUES (1, 1, 85); INSERT INTO inspections VALUES (2, 1, 90); INSERT INTO inspections VALUES (3, 2, 70); INSERT INTO inspections VALUES (4, 2, 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.city, AVG(i.score) as average_score, COUNT(i.inspection_id) as total_inspections FROM cities c INNER JOIN inspections i ON c.city_id = i.city_id GROUP BY c.city ORDER BY average_score ASC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 미국으로 수입된 유기농 과일의 총 무게는 얼마입니까?\n\nDDL statements:\nCREATE TABLE FruitImport(id INT, name TEXT, weight FLOAT, is_organic BOOLEAN, export_country TEXT, import_country TEXT); INSERT INTO FruitImport(id, name, weight, is_organic, export_country, import_country) VALUES (1, 'Pineapple', 500.5, TRUE, 'Brazil', 'USA'), (2, 'Orange', 350.2, FALSE, 'Brazil', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(weight) FROM FruitImport WHERE name = 'Pineapple' AND is_organic = TRUE AND export_country = 'Brazil' AND import_country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: StudentMentalHealth' 테이블에서 원주민으로 식별되는 학생들의 최소 정신 건강 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE StudentMentalHealth (id INT, name TEXT, mental_health_score INT, ethnicity TEXT); INSERT INTO StudentMentalHealth (id, name, mental_health_score, ethnicity) VALUES (1, 'Jessica', 75, 'Latinx'), (2, 'Lucas', 85, 'Asian'), (3, 'Oliver', 95, 'Indigenous');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(mental_health_score) FROM StudentMentalHealth WHERE ethnicity = 'Indigenous';"
    },
    {
        "instruction": "입력 텍스트: 각 유형별 운동선수 웰빙 프로그램 참가자 수는 총 몇 명인가요?\n\nDDL statements:\nCREATE TABLE wellbeing_program_participants (id INT, participant VARCHAR(255), program VARCHAR(255)); INSERT INTO wellbeing_program_participants (id, participant, program) VALUES (1, 'Jane Smith', 'Yoga'), (2, 'Mike Johnson', 'Meditation'), (3, 'Lisa Davis', 'Pilates'), (4, 'John Brown', 'Yoga'), (5, 'Emma Wilson', 'Meditation'), (6, 'Daniel Kim', 'Pilates');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, COUNT(*) as total_participants FROM wellbeing_program_participants GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 산업에서 여성 창업자들이 받은 평균 펀딩 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE founders(id INT, gender VARCHAR(10), industry VARCHAR(20), funding FLOAT); INSERT INTO founders(id, gender, industry, funding) VALUES (1, 'Female', 'Healthcare', 1000000); INSERT INTO founders(id, gender, industry, funding) VALUES (2, 'Male', 'Healthcare', 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(funding) FROM (SELECT funding FROM founders WHERE gender = 'Female' AND industry = 'Healthcare') AS female_healthcare_funding;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일간 사이트별로 구분된 금의 일일 생산량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE site (site_id INT, site_name VARCHAR(50)); INSERT INTO site (site_id, site_name) VALUES (1, 'Site A'), (2, 'Site B'); CREATE TABLE production (production_id INT, site_id INT, product VARCHAR(10), production_date DATE, quantity INT); INSERT INTO production (production_id, site_id, product, production_date, quantity) VALUES (1, 1, 'gold', '2021-01-01', 50), (2, 1, 'gold', '2021-01-02', 60), (3, 1, 'gold', '2021-01-03', 70), (4, 2, 'gold', '2021-01-01', 80), (5, 2, 'gold', '2021-01-02', 90), (6, 2, 'gold', '2021-01-03', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_id, product, production_date, quantity, ROW_NUMBER() OVER (PARTITION BY site_id, production_date ORDER BY site_id, production_date) AS daily_production FROM production WHERE product = 'gold' AND production_date >= DATEADD(day, -30, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: Fries'를 제공하지 않는 모든 식당의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE menus (id INT, restaurant_id INT, item_name TEXT); INSERT INTO menus (id, restaurant_id, item_name) VALUES (1, 1, 'Burger'), (2, 1, 'Fries'), (3, 2, 'Salad'), (4, 3, 'Pizza');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT restaurant_name FROM restaurants WHERE id NOT IN (SELECT restaurant_id FROM menus WHERE item_name = 'Fries');"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 구매하지 않은 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE customer_transactions (customer_id INT, transaction_date DATE); INSERT INTO customer_transactions (customer_id, transaction_date) VALUES (1, '2022-01-01'), (2, '2022-02-03'), (3, '2022-06-14');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT ct.customer_id, c.customer_name FROM customer_transactions ct RIGHT JOIN customers c ON ct.customer_id = c.customer_id WHERE ct.transaction_date IS NULL OR ct.transaction_date < DATE_SUB(NOW(), INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: energy_storage' 스키마에서 용량이 100보다 낮은 에너지 저장 기술은 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA energy_storage;CREATE TABLE storage_tech (name VARCHAR(50), capacity INT);INSERT INTO energy_storage.storage_tech (name, capacity) VALUES ('Battery1', 200), ('Capacitor1', 120), ('Flywheel1', 175);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM energy_storage.storage_tech WHERE capacity < 100;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 가장 인구가 많은 도시와 가장 인구가 적은 도시의 인구 차이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE City (CityName VARCHAR(50), Country VARCHAR(50), Population INT); INSERT INTO City (CityName, Country, Population) VALUES ('Delhi', 'India', 19000000), ('Mumbai', 'India', 18500000), ('Bangalore', 'India', 8500000), ('Hyderabad', 'India', 6800000), ('Ahmedabad', 'India', 5600000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Population) - MIN(Population) AS PopulationDifference FROM City WHERE Country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 청바지에서 가장 인기 있는 사이즈는 무엇인가요?\n\nDDL statements:\nCREATE TABLE jeans_sales (sale_id INTEGER, product_id INTEGER, size INTEGER, quantity INTEGER); INSERT INTO jeans_sales (sale_id, product_id, size, quantity) VALUES (1, 2001, 30, 5), (2, 2002, 32, 10), (3, 2003, 34, 8), (4, 2004, 30, 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT size, SUM(quantity) AS total_quantity FROM jeans_sales GROUP BY size ORDER BY total_quantity DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: safety_violations 테이블의 각 부서에서 기록된 안전 규정 위반 사항은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE safety_violations (department VARCHAR(255), violations INTEGER);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, COUNT(violations) FROM safety_violations GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: vw_top_scorers'라는 이름의 뷰를 생성하여 가장 많은 골을 득점한 상위 3명의 선수를 표시합니다.\n\nDDL statements:\nCREATE TABLE athlete_stats (athlete_id INT PRIMARY KEY, name VARCHAR(100), sport VARCHAR(50), team VARCHAR(50), games_played INT, goals_scored INT, assists INT); INSERT INTO athlete_stats (athlete_id, name, sport, team, games_played, goals_scored, assists) VALUES (1, 'John Doe', 'Soccer', 'Blue Eagles', 10, 5, 3), (2, 'Jane Smith', 'Soccer', 'Blue Eagles', 12, 7, 2), (3, 'Raj Patel', 'Cricket', 'Indian Lions', 15, 30, 15), (4, 'Emma Johnson', 'Basketball', 'NY Knicks', 20, 15, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW vw_top_scorers AS SELECT * FROM (SELECT name, goals_scored, ROW_NUMBER() OVER (ORDER BY goals_scored DESC) as rn FROM athlete_stats) WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 오픈 교수법 시험에 합격한 학생의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE open_pedagogy_exam (student_id INT, region VARCHAR(50), pass INT); INSERT INTO open_pedagogy_exam (student_id, region, pass) VALUES (1, 'Northeast', 1), (2, 'Northeast', 0), (3, 'Southeast', 1), (4, 'Southeast', 1), (5, 'Midwest', 0), (6, 'Midwest', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, 100.0 * SUM(pass) / COUNT(*) as pass_percentage FROM open_pedagogy_exam GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 클래식 음악 콘서트에 방문한 관람객 중 반복해서 참석한 관람객의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Visitors (visitor_id INT, event_name TEXT); INSERT INTO Visitors (visitor_id, event_name) VALUES (1, 'Classical Music Concert'), (2, 'Classical Music Concert'), (3, 'Opera'), (4, 'Classical Music Concert');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT visitor_id) * 100.0 / (SELECT COUNT(DISTINCT visitor_id) FROM Visitors WHERE event_name LIKE '%Classical Music%') FROM Visitors WHERE event_name LIKE '%Classical Music%';"
    },
    {
        "instruction": "입력 텍스트: 탄소 배출권 테이블에 있는 탄소 상쇄 이니셔티브가 있는 모든 국가를 나열하세요.\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS carbon_offsets; CREATE TABLE IF NOT EXISTS carbon_offsets.carbon_offsets (  offset_id INT NOT NULL,  country_code VARCHAR(2) NOT NULL,  co2_emissions_reduction FLOAT NOT NULL,  PRIMARY KEY (offset_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT country_code FROM carbon_offsets.carbon_offsets;"
    },
    {
        "instruction": "입력 텍스트: 유전학 연구 프로젝트와 각각의 책임 연구원을 모두 나열하세요.\n\nDDL statements:\nCREATE SCHEMA if not exists genetics; USE genetics; CREATE TABLE if not exists projects (id INT PRIMARY KEY, name VARCHAR(255), lead_researcher VARCHAR(255)); INSERT INTO projects (id, name, lead_researcher) VALUES (1, 'ProjectX', 'Dr. Jane Doe'), (2, 'ProjectY', 'Dr. John Smith'), (3, 'ProjectZ', 'Dr. Maria Garcia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM projects;"
    },
    {
        "instruction": "입력 텍스트: menu_items 테이블에서 Veggie Burger의 가격을 $13.00로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE menu_items (menu_item_id INT, name VARCHAR(255), description TEXT, price DECIMAL(5,2), category VARCHAR(255), sustainability_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE menu_items SET price = 13.00 WHERE name = 'Veggie Burger';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 농업 기계의 총 CO2 배출량을 나열하십시오.\n\nDDL statements:\nCREATE TABLE machine_emissions (machine TEXT, co2_emissions INTEGER, start_time TIMESTAMP, end_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT machine, SUM(co2_emissions) as total_emissions FROM machine_emissions WHERE start_time BETWEEN DATEADD(month, -1, CURRENT_TIMESTAMP) AND CURRENT_TIMESTAMP GROUP BY machine;"
    },
    {
        "instruction": "입력 텍스트: \"인상주의 전시회\"에 참석한 방문객들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Exhibitions (ExhibitionID INT, ExhibitionName VARCHAR(255), Age INT); INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, Age) VALUES (1, 'Impressionist Exhibition', 35), (2, 'Modern Art Exhibition', 32);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Exhibitions WHERE ExhibitionName = 'Impressionist Exhibition';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 평생교육 과정을 완료한 학생 수는 얼마이며, 완료 횟수에 따라 정렬된 순서대로 나타내세요.\n\nDDL statements:\nCREATE TABLE countries (country_id INT, country_name VARCHAR(50)); INSERT INTO countries VALUES (1, 'Country A'), (2, 'Country B'), (3, 'Country C'); CREATE TABLE student_lifelong_learning (student_id INT, country_id INT, course_completion BOOLEAN); INSERT INTO student_lifelong_learning VALUES (1, 1, TRUE), (2, 1, TRUE), (3, 2, FALSE), (4, 2, TRUE), (5, 3, TRUE), (6, 3, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country_id, country_name, COUNT(*) as completion_count FROM student_lifelong_learning GROUP BY country_id, country_name ORDER BY completion_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 재무 부서에서 지난 달에 탐지된 취약점들의 평균 위험 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, department VARCHAR(255), risk_score INT, detected_at TIMESTAMP); INSERT INTO vulnerabilities (id, department, risk_score, detected_at) VALUES (1, 'finance', 7, '2022-01-01 10:00:00'), (2, 'finance', 5, '2022-01-15 14:30:00'), (3, 'hr', 8, '2022-02-01 09:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(risk_score) FROM vulnerabilities WHERE department = 'finance' AND detected_at >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 현재 연도에 가장 많은 학생이 등록한 오픈 교육 과정은 무엇인가요?\n\nDDL statements:\nCREATE TABLE open_pedagogy_enrollment (student_id INT, course_id INT, enrollment_date DATE); INSERT INTO open_pedagogy_enrollment VALUES (1, 101, '2022-01-01'), (2, 102, '2022-01-02'); CREATE TABLE open_pedagogy_courses (course_id INT, course_name VARCHAR(50)); INSERT INTO open_pedagogy_courses VALUES (101, 'Open Source Software'), (102, 'Data Science');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT course_name, COUNT(DISTINCT student_id) OVER (PARTITION BY course_id ORDER BY COUNT(DISTINCT student_id) DESC) as rank FROM open_pedagogy_enrollment JOIN open_pedagogy_courses ON open_pedagogy_enrollment.course_id = open_pedagogy_courses.course_id WHERE YEAR(enrollment_date) = YEAR(CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: 2022년도에 요일별 기부 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor VARCHAR(50), cause VARCHAR(50), amount DECIMAL(10, 2), donation_date DATE); INSERT INTO donations (id, donor, cause, amount, donation_date) VALUES (1, 'John Doe', 'Education', 500, '2022-04-01'), (2, 'Jane Smith', 'Health', 300, '2022-04-15'), (3, 'Alice Johnson', 'Environment', 700, '2022-05-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(DOW FROM donation_date) as day_of_week, COUNT(*) as number_of_donations FROM donations WHERE donation_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY day_of_week;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 델리에서의 최소 재활용률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE recycling_rates (city VARCHAR(50), year INT, recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates (city, year, recycling_rate) VALUES ('Delhi', 2017, 0.45), ('Delhi', 2018, 0.48), ('Delhi', 2019, 0.51), ('Delhi', 2020, 0.54), ('Delhi', 2021, 0.57);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(recycling_rate) FROM recycling_rates WHERE city = 'Delhi' AND year BETWEEN 2017 AND 2022;"
    },
    {
        "instruction": "입력 텍스트: Auto' 범주에 해당하는 정책들의 평균 청구 금액을 계산하세요.\n\nDDL statements:\nCREATE TABLE claim_3 (claim_id INT, claim_type VARCHAR(20), claim_amount FLOAT, policy_type VARCHAR(20)); INSERT INTO claim_3 (claim_id, claim_type, claim_amount, policy_type) VALUES (6, 'Vandalism', 2200.00, 'Auto'), (9, 'Theft', 1900.00, 'Auto'), (10, 'Accident', 5000.00, 'Auto');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(claim_amount) FROM claim_3 WHERE policy_type = 'Auto';"
    },
    {
        "instruction": "입력 텍스트: 2016년부터 2020년까지 아프리카에 제공된 기후 금융의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (region VARCHAR(50), year INT, amount FLOAT); INSERT INTO climate_finance (region, year, amount) VALUES ('Africa', 2016, 1200.5), ('Africa', 2017, 1500.3), ('Africa', 2018, 1800.2), ('Africa', 2019, 2000.1), ('Africa', 2020, 2500.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM climate_finance WHERE region = 'Africa' AND year BETWEEN 2016 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 인구가 500만 명을 초과하는 도시의 시민당 평균 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE City (id INT, name VARCHAR(50), population INT, budget DECIMAL(10,2)); INSERT INTO City (id, name, population, budget) VALUES (1, 'Tokyo', 37400686, 15000000); INSERT INTO City (id, name, population, budget) VALUES (2, 'Delhi', 30290936, 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, AVG(budget / population) as 'Avg Budget per Citizen' FROM City WHERE population > 5000000 GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 제조된 제품들을 제품 카테고리별로 그룹화하여 각 제품의 평균 화학 농도를 구하세요.\n\nDDL statements:\nCREATE TABLE Chemical_Concentration (Product VARCHAR(255), Product_Category VARCHAR(255), Chemical_Concentration DECIMAL(5,2), Manufacturing_Country VARCHAR(255)); INSERT INTO Chemical_Concentration (Product, Product_Category, Chemical_Concentration, Manufacturing_Country) VALUES ('Product1', 'CategoryA', 0.12, 'Canada'), ('Product2', 'CategoryA', 0.15, 'USA'), ('Product3', 'CategoryB', 0.20, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Product_Category, AVG(Chemical_Concentration) AS Avg_Concentration FROM Chemical_Concentration WHERE Manufacturing_Country = 'Canada' GROUP BY Product_Category;"
    },
    {
        "instruction": "입력 텍스트: 가장 많은 피드백을 제공한 상위 5명의 시민을 찾으세요\n\nDDL statements:\nCREATE TABLE feedback (citizen_id INT, service_id INT, rating INT); INSERT INTO feedback (citizen_id, service_id, rating) VALUES (1, 123, 5), (2, 123, 4), (3, 123, 5), (1, 456, 3), (2, 456, 4), (3, 456, 5), (4, 789, 2), (5, 789, 2), (6, 789, 3), (1, 987, 4), (2, 987, 4), (3, 987, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT citizen_id, COUNT(*) as feedback_count FROM feedback GROUP BY citizen_id ORDER BY feedback_count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2021년 하반기에 화학과에 수여된 연구 보조금의 평균 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ResearchGrants(GranteeID INT, Department VARCHAR(20), Amount FLOAT, GrantDate DATE); INSERT INTO ResearchGrants(GranteeID, Department, Amount, GrantDate) VALUES (1, 'Chemistry', 50000, '2021-07-01'), (2, 'Chemistry', 75000, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rg.Amount) FROM ResearchGrants rg WHERE rg.Department = 'Chemistry' AND MONTH(rg.GrantDate) > 6 AND YEAR(rg.GrantDate) = 2021;"
    },
    {
        "instruction": "입력 텍스트: vehicles' 테이블에는 각 차량 유형별로 몇 대의 차량이 있습니까?\n\nDDL statements:\nCREATE TABLE vehicles (vehicle_id INT, vehicle_type VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_type, COUNT(*) as vehicle_count FROM vehicles GROUP BY vehicle_type;"
    },
    {
        "instruction": "입력 텍스트: FoodSafetyRecords.SustainableFarmingPractices 테이블에 스페인의 유기농 농장에 대한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE FoodSafetyRecords.SustainableFarmingPractices (farmName TEXT, country TEXT, sustainablePractices TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO FoodSafetyRecords.SustainableFarmingPractices (farmName, country, sustainablePractices) VALUES ('La Huerta Organica', 'Spain', 'Uses 100% organic fertilizers and promotes biodiversity');"
    },
    {
        "instruction": "입력 텍스트: 함대 내 각 선박의 안전 사고 총 건수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessel_incident_count (vessel_id INT, incident_count INT);  CREATE TABLE safety_incidents (vessel_id INT, incident_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO vessel_incident_count (vessel_id, incident_count) SELECT vessel_id, COUNT(*) FROM safety_incidents GROUP BY vessel_id;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시티에서 각 재료 유형별로 발생하는 총 폐기물 양은 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_generation (location VARCHAR(50), material_type VARCHAR(50), quantity INT); INSERT INTO waste_generation (location, material_type, quantity) VALUES ('New York City', 'Plastic', 1500), ('New York City', 'Paper', 2000), ('New York City', 'Metal', 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material_type, SUM(quantity) FROM waste_generation WHERE location = 'New York City' GROUP BY material_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 가장 높은 참전 용사 실업률을 가진 상위 3개 주를 나열하세요.\n\nDDL statements:\nCREATE TABLE veteran_unemployment (state VARCHAR(2), unemployment_rate FLOAT, unemployment_date DATE); INSERT INTO veteran_unemployment (state, unemployment_rate, unemployment_date) VALUES ('CA', 0.05, '2022-01-01'), ('NY', 0.06, '2022-02-01'), ('TX', 0.04, '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(unemployment_rate) AS avg_unemployment_rate FROM veteran_unemployment WHERE unemployment_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY state ORDER BY avg_unemployment_rate DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: Volunteers'라는 이름의 테이블을 생성하세요.\n\nDDL statements:\nCREATE TABLE Volunteers( id INT PRIMARY KEY AUTO_INCREMENT, volunteer_name VARCHAR(255), hours_served INT, volunteer_date DATE)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE Volunteers( id INT PRIMARY KEY AUTO_INCREMENT, volunteer_name VARCHAR(255), hours_served INT, volunteer_date DATE)"
    },
    {
        "instruction": "입력 텍스트: 올해 초부터 \"고위험\"으로 분류된 모든 정보 작전의 이름과 설명은 무엇인가요?\n\nDDL statements:\nCREATE TABLE IntelligenceOperations (OperationName VARCHAR(100), RiskLevel VARCHAR(50), Description TEXT); INSERT INTO IntelligenceOperations (OperationName, RiskLevel, Description) VALUES ('Operation Alpha', 'high risk', 'Desc for Alpha'), ('Operation Bravo', 'medium risk', 'Desc for Bravo'), ('Operation Charlie', 'low risk', 'Desc for Charlie'), ('Operation Delta', 'high risk', 'Desc for Delta');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT OperationName, RiskLevel, Description FROM IntelligenceOperations WHERE RiskLevel = 'high risk' AND OperationName >= '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 한 해 동안 개최된 방위 외교 행사의 최대 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Defense_Diplomacy (Nation VARCHAR(50), Continent VARCHAR(50), Year INT, Events INT); INSERT INTO Defense_Diplomacy (Nation, Continent, Year, Events) VALUES ('Germany', 'Europe', 2018, 30), ('France', 'Europe', 2019, 35), ('UK', 'Europe', 2017, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Events) FROM Defense_Diplomacy WHERE Continent = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주 프로젝트의 건축 허가 발급 지연 평균 일수가 전체 평균 지연 일수에 비해 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE BuildingPermits (State VARCHAR(2), Project VARCHAR(50), IssueDate DATE, PermitDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(IssueDate, PermitDate)) as TexasAvg, AVG(DATEDIFF(IssueDate, PermitDate)) over () as OverallAvg FROM BuildingPermits WHERE State = 'TX';"
    },
    {
        "instruction": "입력 텍스트: construction_labor_stats' 테이블에서 'Ontario' 지역의 건설 프로젝트 중 최소 노동 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE construction_labor_stats (province TEXT, project_id INT, labor_cost FLOAT); INSERT INTO construction_labor_stats (province, project_id, labor_cost) VALUES ('Ontario', 1, 12000), ('Ontario', 2, 14000), ('Ontario', 3, 16000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(labor_cost) FROM construction_labor_stats WHERE province = 'Ontario';"
    },
    {
        "instruction": "입력 텍스트: 미드웨스트 지역의 고객들의 평균 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, name VARCHAR(50), region VARCHAR(20), transaction_amount DECIMAL(10,2)); INSERT INTO customers (customer_id, name, region, transaction_amount) VALUES (1, 'John Doe', 'Midwest', 500.00), (2, 'Jane Smith', 'Northeast', 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(transaction_amount) FROM customers WHERE region = 'Midwest';"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 국가의 총 탄소 흡수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE carbon_sequestration (country_code CHAR(3), year INT, sequestration FLOAT); INSERT INTO carbon_sequestration (country_code, year, sequestration) VALUES ('BRA', 2021, 3.5), ('BRA', 2020, 3.3), ('CAN', 2021, 2.9), ('CAN', 2020, 2.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country_name, SUM(cs.sequestration) as total_sequestration FROM carbon_sequestration cs INNER JOIN country c ON cs.country_code = c.country_code WHERE cs.year = 2021 GROUP BY c.country_name;"
    },
    {
        "instruction": "입력 텍스트: 아프리카' 지역에 있는 쉼터의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE regions (region_id INT, region_name VARCHAR(20)); INSERT INTO regions (region_id, region_name) VALUES (1, 'americas'), (2, 'europe'), (3, 'asia'), (4, 'africa'); CREATE TABLE shelters (shelter_id INT, shelter_name VARCHAR(30), region_id INT); INSERT INTO shelters (shelter_id, shelter_name, region_id) VALUES (1, 'Emergency Shelter 1', 4), (2, 'Temporary Home', 4), (3, 'Relief House', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM shelters WHERE region_id = (SELECT region_id FROM regions WHERE region_name = 'africa');"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 소매 부문에서 발생한 보안 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, sector VARCHAR(20), date DATE); INSERT INTO security_incidents (id, sector, date) VALUES (1, 'retail', '2021-05-01'), (2, 'retail', '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM security_incidents WHERE sector = 'retail' AND date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 지구 주변 궤도에 있는 모든 우주 잔해의 총 질량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE debris (id INT, name VARCHAR(255), mass FLOAT, orbit VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(debris.mass) FROM debris WHERE debris.orbit = 'LEO' OR debris.orbit = 'GEO' OR debris.orbit = 'MEO';"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기에 20시간 이상 봉사한 모든 자원봉사자를 나열하시오.\n\nDDL statements:\nCREATE TABLE volunteers (volunteer_id INT, volunteer_name TEXT, volunteer_hours INT, volunteer_quarter INT, volunteer_year INT); INSERT INTO volunteers (volunteer_id, volunteer_name, volunteer_hours, volunteer_quarter, volunteer_year) VALUES (1, 'Bob Brown', 25, 1, 2023), (2, 'Charlie Davis', 15, 1, 2023);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT volunteer_name FROM volunteers WHERE volunteer_quarter = 1 AND volunteer_year = 2023 AND volunteer_hours >= 20;"
    },
    {
        "instruction": "입력 텍스트: budget' 테이블에서 가장 많은 예산 삭감을 당한 부서는 어디인가요?\n\nDDL statements:\nCREATE TABLE budget (program_id INT, program_name VARCHAR(255), budget DECIMAL(10,2), fiscal_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name, (LAG(budget, 1) OVER (ORDER BY fiscal_year) - budget) AS budget_cuts FROM budget WHERE (LAG(budget, 1) OVER (ORDER BY fiscal_year) - budget) = (SELECT MAX((LAG(budget, 1) OVER (ORDER BY fiscal_year) - budget)) FROM budget) ORDER BY budget_cuts DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 가장 많은 옹호자를 가진 상위 2개 이슈는 무엇인가요?\n\nDDL statements:\nCREATE TABLE If Not Exists advocacy (advocate_id INT, advocate_name TEXT, location TEXT, issue TEXT); INSERT INTO advocacy (advocate_id, advocate_name, location, issue) VALUES (4, 'Michael Brown', 'Canada', 'Refugee Rights'), (5, 'Emma White', 'Canada', 'Education'), (6, 'James Green', 'Canada', 'Healthcare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, issue, COUNT(*) as num_advocates FROM advocacy GROUP BY location, issue ORDER BY num_advocates DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 친환경 건물 데이터를 저장하기 위한 'green_buildings' 테이블을 생성하세요.\n\nDDL statements:\nCREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size INT, certification VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size INT, certification VARCHAR(50));"
    },
    {
        "instruction": "입력 텍스트: 최근 5년간 해안 침식 증가율이 가장 큰 원주민 공동체는 어디인가요?\n\nDDL statements:\nCREATE TABLE coastal_erosion (id INT, community VARCHAR(255), erosion_rate FLOAT, year INT); CREATE TABLE indigenous_communities (id INT, name VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.name, (c2.erosion_rate - c1.erosion_rate) AS erosion_increase FROM indigenous_communities i JOIN coastal_erosion c1 ON i.location = c1.community AND c1.year = YEAR(CURDATE()) - 5 JOIN coastal_erosion c2 ON i.location = c2.community AND c2.year = YEAR(CURDATE()) ORDER BY erosion_increase DESC;"
    },
    {
        "instruction": "입력 텍스트: 일본과 한국에서 수행된 자율 주행 연구의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Studies (ID INT, Location VARCHAR(255), Type VARCHAR(255)); INSERT INTO Studies (ID, Location, Type) VALUES (1, 'Japan', 'Autonomous Driving'), (2, 'South Korea', 'Autonomous Driving'), (3, 'France', 'Electric Vehicles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Studies WHERE Location IN ('Japan', 'South Korea') AND Type = 'Autonomous Driving';"
    },
    {
        "instruction": "입력 텍스트: 도쿄'에서 단일 크레인이 처리하는 컨테이너의 최대 무게는 무엇인가요?\n\nDDL statements:\nCREATE TABLE port (port_id INT, name TEXT);CREATE TABLE crane (crane_id INT, port_id INT, name TEXT);CREATE TABLE container (container_id INT, crane_id INT, weight INT);INSERT INTO port VALUES (3, 'Tokyo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crane.name, MAX(container.weight) FROM crane JOIN port ON crane.port_id = port.port_id JOIN container ON crane.crane_id = container.crane_id WHERE port.name = 'Tokyo' GROUP BY crane.name;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별로 기록된 자원봉사 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE programs (id INT, name VARCHAR(255)); INSERT INTO programs (id, name) VALUES (1, 'Environment'), (2, 'Arts'); CREATE TABLE volunteer_hours (id INT, program_id INT, hours DECIMAL(10,2)); INSERT INTO volunteer_hours (id, program_id, hours) VALUES (1, 1, 5), (2, 2, 10), (3, 1, 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, SUM(hours) OVER (PARTITION BY program_id) AS total_hours FROM volunteer_hours;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 시속 55마일로 제한된 도로를 찾으세요.\n\nDDL statements:\nCREATE TABLE Roads (Name VARCHAR(255), Speed_limit_mph INT, State VARCHAR(255)); INSERT INTO Roads (Name, Speed_limit_mph, State) VALUES ('New York State Route 17', 55, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name FROM Roads WHERE Speed_limit_mph = 55 AND State = 'New York';"
    },
    {
        "instruction": "입력 텍스트: Hey Jude' 노래가 미국에서 얼마나 많은 스트리밍을 받았나요?\n\nDDL statements:\nCREATE TABLE streams (song VARCHAR(50), country VARCHAR(50), streams INT); INSERT INTO streams (song, country, streams) VALUES ('Hey Jude', 'United States', 1000000), ('Hey Jude', 'Canada', 500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(streams) FROM streams WHERE song = 'Hey Jude' AND country = 'United States';"
    },
    {
        "instruction": "입력 텍스트: 요가 또는 줌바 운동을 한 회원들과 그들의 총 운동 횟수를 나열합니다.\n\nDDL statements:\nCREATE TABLE membership_data (member_id INT, join_date DATE); CREATE TABLE workout_data (workout_id INT, member_id INT, workout_type VARCHAR(20), workout_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.member_id, m.join_date, COUNT(w.workout_id) as total_workouts FROM membership_data m JOIN workout_data w ON m.member_id = w.member_id WHERE w.workout_type IN ('yoga', 'zumba') GROUP BY m.member_id;"
    },
    {
        "instruction": "입력 텍스트: Inventory 테이블에 menu_id가 1234이고, 수량이 25개, 재입고 날짜가 '2023-02-20'인 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE Inventory (inventory_id INT PRIMARY KEY, menu_id INT, supplier_id INT, quantity INT, restock_date DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Inventory (menu_id, quantity, restock_date) VALUES (1234, 25, '2023-02-20');"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 힙합 콘서트로 가장 많은 수익을 낸 도시는 어디인가요?\n\nDDL statements:\nCREATE TABLE Concerts (location VARCHAR(50), concert_genre VARCHAR(20), year INT, revenue FLOAT); INSERT INTO Concerts (location, concert_genre, year, revenue) VALUES ('New York', 'Hip-Hop', 2020, 45000.00), ('Atlanta', 'Hip-Hop', 2020, 55000.00), ('Los Angeles', 'Hip-Hop', 2021, 65000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, MAX(revenue) FROM Concerts WHERE concert_genre = 'Hip-Hop' AND year BETWEEN (SELECT MAX(year) - 2 FROM Concerts) AND MAX(year) GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 어느 농장이 물 부족 문제를 겪었으며 평균 기온이 농장 C보다 높은가요?\n\nDDL statements:\nCREATE TABLE Fields (FieldID varchar(5), FieldName varchar(10), AvgTemperature float, WaterShortageIssue bool); INSERT INTO Fields (FieldID, FieldName, AvgTemperature, WaterShortageIssue) VALUES ('A', 'Field A', 25.6, true), ('B', 'Field B', 26.3, false), ('C', 'Field C', 22.1, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FieldName FROM Fields WHERE WaterShortageIssue = true AND AvgTemperature > (SELECT AvgTemperature FROM Fields WHERE FieldName = 'Field C');"
    },
    {
        "instruction": "입력 텍스트: 남아프리카 출신의 새로운 사용자와 소셜 미디어 트렌드에 관한 그들의 게시물을 삽입하세요.\n\nDDL statements:\nCREATE TABLE users (id INT, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE posts (id INT, user_id INT, content TEXT, created_at TIMESTAMP); CREATE VIEW latest_post AS SELECT posts.user_id, MAX(posts.created_at) AS latest_post FROM posts GROUP BY posts.user_id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO users (id, name, country) VALUES (3, 'Charlize', 'South Africa'), (4, 'Dumisani', 'South Africa'); INSERT INTO posts (id, user_id, content, created_at) SELECT NULL, users.id, 'Excited about new social media trends! #socialmedia', NOW() FROM users WHERE users.id NOT IN (SELECT latest_post.user_id FROM latest_post) AND users.country = 'South Africa';"
    },
    {
        "instruction": "입력 텍스트: 공유 전동 킥보드의 평균 속도가 가장 높은 상위 3개 도시를 찾으세요.\n\nDDL statements:\nCREATE TABLE city (city_id int, city_name varchar(50), country varchar(50));CREATE TABLE shared_escooters (ride_id int, city_id int, avg_speed float);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city_name, AVG(avg_speed) as avg_speed  FROM city JOIN shared_escooters ON city.city_id = shared_escooters.city_id GROUP BY city_name ORDER BY avg_speed DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: SouthAmerica' 스키마에 있는 군사용 드론은 몇 대인가요?\n\nDDL statements:\nCREATE SCHEMA SouthAmerica; CREATE TABLE MilitaryDrones (id INT, name VARCHAR(255), type VARCHAR(255), in_operation BOOLEAN); INSERT INTO MilitaryDrones (id, name, type, in_operation) VALUES (1, 'Heron', 'Reconnaissance', true); INSERT INTO MilitaryDrones (id, name, type, in_operation) VALUES (2, 'Harop', 'Combat', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM SouthAmerica.MilitaryDrones WHERE in_operation = true;"
    },
    {
        "instruction": "입력 텍스트: 런던에서 하이브리드 버스 사용 비율이 50% 이상인 모든 대중교통 노선을 나열합니다.\n\nDDL statements:\nCREATE TABLE public_transportation (route_id INT, route_name TEXT, vehicle_type TEXT, is_hybrid BOOLEAN, passengers INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT route_name FROM public_transportation WHERE vehicle_type = 'Bus' AND is_hybrid = TRUE GROUP BY route_name HAVING COUNT(*) FILTER (WHERE is_hybrid = TRUE) / COUNT(*) > 0.5 AND route_name LIKE 'London%';"
    },
    {
        "instruction": "입력 텍스트: \"ocean_pollution\" 테이블에 다음 데이터를 가진 새로운 기록을 추가하세요: \"플라스틱\", \"대서양 쓰레기 섬\", 2010\n\nDDL statements:\nCREATE TABLE ocean_pollution (id INT PRIMARY KEY, pollutant_type VARCHAR(255), location VARCHAR(255), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO ocean_pollution (pollutant_type, location, year) VALUES ('Plastic', 'Great Pacific Garbage Patch', 2010);"
    },
    {
        "instruction": "입력 텍스트: 항공 운항 부서에서 발생한 소프트웨어 문제와 관련된 사건을 찾으세요.\n\nDDL statements:\nCREATE TABLE Incidents (IncidentID INT, Date DATE, Type VARCHAR(20), Description TEXT, Department VARCHAR(20)); INSERT INTO Incidents (IncidentID, Date, Type, Description, Department) VALUES (1, '2021-05-01', 'Safety', 'Landing gear malfunction', 'Flight Operations'); INSERT INTO Incidents (IncidentID, Date, Type, Description, Department) VALUES (2, '2021-06-15', 'Technical', 'Software glitch', 'Flight Operations');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Incidents WHERE Department = 'Flight Operations' AND Type = 'Technical'"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 월에 개설된 사건 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Cases (id INT, case_number INT, opened_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MONTH(opened_date) AS Month, COUNT(*) AS NumberOfCases FROM Cases WHERE YEAR(opened_date) = 2021 GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: Retailer E가 판매한 Cannabis Topicals의 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE revenue (id INT, retailer VARCHAR(255), product VARCHAR(255), price FLOAT, quantity INT); INSERT INTO revenue (id, retailer, product, price, quantity) VALUES (1, 'Retailer E', 'Cannabis Topicals', 50.0, 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * quantity) FROM revenue WHERE retailer = 'Retailer E' AND product = 'Cannabis Topicals';"
    },
    {
        "instruction": "입력 텍스트: 우주선이 우주에서 기록한 최고 온도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE TemperatureRecords (id INT, spacecraft VARCHAR(255), date DATE, temperature INT); INSERT INTO TemperatureRecords (id, spacecraft, date, temperature) VALUES (1, 'Voyager 1', '1977-09-12', 240); INSERT INTO TemperatureRecords (id, spacecraft, date, temperature) VALUES (2, 'Voyager 2', '1977-08-20', 230);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT spacecraft, MAX(temperature) FROM TemperatureRecords;"
    },
    {
        "instruction": "입력 텍스트: vehicle_registrations' 테이블에서 단일 날짜에 등록된 차량의 최대 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE vehicle_registrations (registration_date DATE, is_ev BOOLEAN, PRIMARY KEY (registration_date, is_ev)); INSERT INTO vehicle_registrations (registration_date, is_ev) VALUES ('2022-03-20', true); INSERT INTO vehicle_registrations (registration_date, is_ev) VALUES ('2022-03-20', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(registrations_per_day) FROM (SELECT registration_date, COUNT(*) AS registrations_per_day FROM vehicle_registrations GROUP BY registration_date) subquery;"
    },
    {
        "instruction": "입력 텍스트: 중간 주택 가격이 전국 평균보다 높은 우편번호 지역에 거주하는 각 보험 계약자의 이름과 주소는 무엇인가요?\n\nDDL statements:\nCREATE TABLE policyholder (policyholder_id INT, name VARCHAR(50), address VARCHAR(100), zip_code INT); CREATE TABLE zip_codes (zip_code INT, median_home_value INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policyholder.name, policyholder.address FROM policyholder JOIN zip_codes ON policyholder.zip_code = zip_codes.zip_code WHERE median_home_value > (SELECT AVG(median_home_value) FROM zip_codes);"
    },
    {
        "instruction": "입력 텍스트: safe_dataset' 테이블에서 'text' 데이터에 대해 몇 개의 'rows'가 있습니까?\n\nDDL statements:\nCREATE TABLE safe_dataset (id INT, data_type TEXT, rows INT); INSERT INTO safe_dataset (id, data_type, rows) VALUES (1, 'text', 500), (2, 'images', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(rows) FROM safe_dataset WHERE data_type = 'text';"
    },
    {
        "instruction": "입력 텍스트: 모바일 폰' 서브카테고리에 속한 모든 제품의 이름과 가격은 무엇인가요?\n\nDDL statements:\nCREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), price DECIMAL(5,2), category VARCHAR(50), subcategory VARCHAR(50)); INSERT INTO products (id, name, price, category, subcategory) VALUES (1, 'Laptop', 999.99, 'Electronics', 'Computers'); INSERT INTO products (id, name, price, category, subcategory) VALUES (2, 'Phone', 599.99, 'Electronics', 'Mobile Phones'); INSERT INTO products (id, name, price, category, subcategory) VALUES (3, 'Tablet', 499.99, 'Electronics', 'Tablets');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, price FROM products WHERE subcategory = 'Mobile Phones';"
    },
    {
        "instruction": "입력 텍스트: 불안 환자들에게 적용된 CBT 치료법의 성공률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE PatientTreatments (PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Success BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * SUM(Success) / COUNT(*) AS SuccessRate FROM PatientTreatments WHERE Condition = 'anxiety' AND Treatment = 'CBT';"
    },
    {
        "instruction": "입력 텍스트: 호주의 도시 농업 이니셔티브의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE urban_initiatives (country VARCHAR(255), initiative_type VARCHAR(255), percentage DECIMAL(5,2)); INSERT INTO urban_initiatives (country, initiative_type, percentage) VALUES ('Australia', 'Urban Agriculture', 60.5), ('Canada', 'Urban Agriculture', 55.2), ('New Zealand', 'Urban Farming', 45.6); CREATE VIEW australian_urban_initiatives AS SELECT * FROM urban_initiatives WHERE country = 'Australia';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT percentage FROM australian_urban_initiatives WHERE initiative_type = 'Urban Agriculture';"
    },
    {
        "instruction": "입력 텍스트: 현재 회계 연도에 물리학과에 수여된 총 보조금 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Grants (GrantID INT, Title VARCHAR(100), Amount DECIMAL(10,2), Organization VARCHAR(50), StartDate DATE, EndDate DATE, Department VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Amount) as 'Total Grant Amount' FROM Grants WHERE Department = 'Physics' AND StartDate >= DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0) AND EndDate < DATEADD(year, DATEDIFF(year, 0, GETDATE()) + 1, 0);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 소외계층 커뮤니티에서 우리 프로그램에 참여한 자원봉사자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, volunteer_name TEXT, community TEXT, participation_date DATE); INSERT INTO Volunteers (id, volunteer_name, community, participation_date) VALUES (1, 'Jamila Green', 'African American', '2022-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT community, COUNT(*) as num_volunteers FROM Volunteers WHERE participation_date >= DATEADD(year, -1, GETDATE()) AND community IN ('African American', 'Hispanic', 'Indigenous', 'LGBTQ+', 'Persons with Disabilities') GROUP BY community;"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 기관이 지원한 난민 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE organizations (id INT, org_name VARCHAR(50), org_type VARCHAR(20)); CREATE TABLE refugees (id INT, refugee_name VARCHAR(50), org_id INT, support_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT o.org_name, COUNT(r.id) FROM organizations o JOIN refugees r ON o.id = r.org_id WHERE YEAR(r.support_date) = 2019 GROUP BY o.org_name;"
    },
    {
        "instruction": "입력 텍스트: 멕시코의 접근 가능한 교실 수를 250개로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE classrooms (id INT, country VARCHAR(50), num_accessible INT); INSERT INTO classrooms (id, country, num_accessible) VALUES (1, 'USA', 500), (2, 'Canada', 300), (3, 'Mexico', 200), (4, 'Brazil', 400), (5, 'Argentina', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE classrooms SET num_accessible = 250 WHERE country = 'Mexico';"
    },
    {
        "instruction": "입력 텍스트: 그린테크' 산업에 속한 회사들이 받은 총 펀딩 금액을 결정하세요.\n\nDDL statements:\nCREATE TABLE funds (company_id INT, funding_amount DECIMAL(10, 2), funding_date DATE); INSERT INTO funds VALUES (1, 500000, '2022-01-01'); INSERT INTO funds VALUES (2, 300000, '2021-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding_amount) FROM funds INNER JOIN companies ON funds.company_id = companies.company_id WHERE companies.industry = 'Greentech';"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역의 예산이 1000만 달러 미만인 모든 방위 사업 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE DefenseProjects (id INT, project_name VARCHAR(100), region VARCHAR(50), start_date DATE, end_date DATE, budget FLOAT); INSERT INTO DefenseProjects (id, project_name, region, start_date, end_date, budget) VALUES (1, 'Project D', 'Africa', '2021-01-01', '2021-12-31', 8000000); INSERT INTO DefenseProjects (id, project_name, region, start_date, end_date, budget) VALUES (2, 'Project E', 'Africa', '2020-01-01', '2020-12-31', 12000000); INSERT INTO DefenseProjects (id, project_name, region, start_date, end_date, budget) VALUES (3, 'Project F', 'Africa', '2019-01-01', '2020-06-30', 15000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM DefenseProjects WHERE region = 'Africa' AND budget < 10000000;"
    },
    {
        "instruction": "입력 텍스트: 2020년 중동 국가 중 군사 지출이 가장 많은 나라의 지출액은 얼마였나요?\n\nDDL statements:\nCREATE TABLE middle_east_military_spending (id INT, country VARCHAR(255), year INT, spending FLOAT); INSERT INTO middle_east_military_spending (id, country, year, spending) VALUES (1, 'Saudi Arabia', 2020, 80.0), (2, 'Iran', 2020, 45.0), (3, 'Turkey', 2020, 30.0), (4, 'Israel', 2020, 25.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(spending) FROM middle_east_military_spending WHERE country IN ('Saudi Arabia', 'Iran', 'Turkey', 'Israel', 'Iraq', 'United Arab Emirates', 'Egypt', 'Syria', 'Lebanon', 'Jordan') AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 각 hotel_id별 리뷰 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE hotel_reviews (hotel_id INT, review_date DATE, review_score INT); INSERT INTO hotel_reviews (hotel_id, review_date, review_score) VALUES (123, '2022-01-01', 8), (123, '2022-01-02', 9), (456, '2022-01-01', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_id, COUNT(*) FROM hotel_reviews GROUP BY hotel_id;"
    },
    {
        "instruction": "입력 텍스트: 각 항구에서 처리된 화물의 총 중량을 연도와 주차별로 그룹화하여 계산합니다.\n\nDDL statements:\nCREATE TABLE ports (port_id INT, port_name VARCHAR(50), country VARCHAR(50)); CREATE TABLE cargo_handling (id INT, port_id INT, weight FLOAT, handling_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.port_name, DATE_FORMAT(ch.handling_date, '%Y-%u') as time_period, SUM(ch.weight) as total_weight FROM cargo_handling ch JOIN ports p ON ch.port_id = p.port_id GROUP BY p.port_name, time_period;"
    },
    {
        "instruction": "입력 텍스트: 마지막으로 우주로 간 아프리카계 미국인 우주비행사는 누구인가요?\n\nDDL statements:\nCREATE TABLE astronauts (id INT, name VARCHAR(255), country VARCHAR(255), race VARCHAR(255), flight_date DATE); INSERT INTO astronauts (id, name, country, race, flight_date) VALUES (1, 'Ronald McNair', 'United States', 'African American', '1984-02-03'), (2, 'Guion Bluford', 'United States', 'African American', '1983-08-30'), (3, 'Bernard Harris', 'United States', 'African American', '1993-02-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM astronauts WHERE race = 'African American' AND flight_date = (SELECT MAX(flight_date) FROM astronauts WHERE race = 'African American');"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 보건 서비스에 대한 평균 예산 배정은 얼마인가요?\n\nDDL statements:\nCREATE TABLE states (state_id INT PRIMARY KEY, state_name VARCHAR(50)); INSERT INTO states VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); CREATE TABLE healthcare_budget (state_id INT, service VARCHAR(50), budget_allocation INT); INSERT INTO healthcare_budget VALUES (1, 'Primary Care', 5000000), (1, 'Specialty Care', 7000000), (2, 'Primary Care', 4000000), (2, 'Specialty Care', 6000000), (3, 'Primary Care', 8000000), (3, 'Specialty Care', 9000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.state_name, AVG(hb.budget_allocation) FROM states s JOIN healthcare_budget hb ON s.state_id = hb.state_id GROUP BY s.state_id;"
    },
    {
        "instruction": "입력 텍스트: 가격이 50,000달러 이상인 자율 주행 차량의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE vehicle_prices (id INT, make VARCHAR(50), model VARCHAR(50), price INT, is_autonomous BOOLEAN); INSERT INTO vehicle_prices (id, make, model, price, is_autonomous) VALUES (1, 'Tesla', 'Model S', 75000, true), (2, 'Tesla', 'Model 3', 40000, false), (3, 'Nissan', 'Leaf', 30000, false), (4, 'Ford', 'Mustang Mach-E', 50000, false), (5, 'Chevy', 'Bolt EUV', 35000, false), (6, 'Waymo', 'Pacifica', 60000, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as count FROM vehicle_prices WHERE price > 50000 AND is_autonomous = true;"
    },
    {
        "instruction": "입력 텍스트: 모든 유전 연구 프로젝트와 해당하는 책임 연구원을 나열하세요.\n\nDDL statements:\nCREATE TABLE genetic_research (id INT, project_name VARCHAR(100), pi_name VARCHAR(100)); INSERT INTO genetic_research (id, project_name, pi_name) VALUES (1, 'ProjectX', 'Dr. Johnson'); INSERT INTO genetic_research (id, project_name, pi_name) VALUES (2, 'ProjectY', 'Dr. Smith');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, pi_name FROM genetic_research;"
    },
    {
        "instruction": "입력 텍스트: 군사 장비 판매 기록의 총 비용을 10% 인상된 가격으로 업데이트하세요\n\nDDL statements:\nCREATE TABLE sales_data (id INT, equipment_name TEXT, sale_date DATE, quantity INT, total_cost FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE sales_data SET total_cost = total_cost * 1.10;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서의 광산 운영에 대한 평균 탄소 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MiningOperations (OperationID INT, MineName VARCHAR(50), Location VARCHAR(50), CarbonEmissions INT); INSERT INTO MiningOperations (OperationID, MineName, Location, CarbonEmissions) VALUES (1, 'Platinum Mine', 'South Africa', 100), (2, 'Gold Mine', 'Ghana', 120), (3, 'Diamond Mine', 'Botswana', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(CarbonEmissions) FROM MiningOperations WHERE Location LIKE 'Africa%';"
    },
    {
        "instruction": "입력 텍스트: 2020년 1월에 PORT001에 도착한 선박 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE vessels (id VARCHAR(20), name VARCHAR(20)); CREATE TABLE ports (id VARCHAR(20), name VARCHAR(20)); INSERT INTO vessels (id, name) VALUES ('VES002', 'VESSEL002'), ('VES003', 'VESSEL003'); INSERT INTO ports (id, name) VALUES ('POR001', 'PORT001'), ('POR002', 'PORT002'); CREATE TABLE arrivals (vessel_id VARCHAR(20), port_id VARCHAR(20), arrival_date DATE); INSERT INTO arrivals (vessel_id, port_id, arrival_date) VALUES ('VES002', 'POR001', '2020-01-03'), ('VES003', 'POR001', '2020-01-07'), ('VES002', 'POR002', '2019-12-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessels.name FROM vessels JOIN arrivals ON vessels.id = arrivals.vessel_id JOIN ports ON arrivals.port_id = ports.id WHERE ports.name = 'PORT001' AND arrival_date BETWEEN '2020-01-01' AND '2020-01-31';"
    },
    {
        "instruction": "입력 텍스트: 2022년 4분기 각 약품의 판매 지역별 매출액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE sales_data (drug VARCHAR(20), region VARCHAR(20), date DATE, revenue NUMERIC(12, 2)); INSERT INTO sales_data (drug, region, date, revenue) VALUES ('Drug1', 'North', '2022-10-01', 500000.00), ('Drug2', 'North', '2022-10-01', 600000.00), ('Drug1', 'South', '2022-10-01', 450000.00), ('Drug2', 'South', '2022-10-01', 500000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug, SUM(CASE WHEN region = 'North' THEN revenue ELSE 0 END) AS north_revenue, SUM(CASE WHEN region = 'South' THEN revenue ELSE 0 END) AS south_revenue FROM sales_data WHERE date BETWEEN '2022-10-01' AND '2022-12-31' GROUP BY drug;"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 국가별로 수행한 평화유지 작전은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE peacekeeping_operations (country VARCHAR(50), year INT, operation_id INT); INSERT INTO peacekeeping_operations (country, year, operation_id) VALUES ('France', 2019, 123), ('United States', 2019, 456), ('France', 2019, 789), ('Brazil', 2019, 321);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(DISTINCT operation_id) FROM peacekeeping_operations WHERE year = 2019 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: fish_stock 테이블에 Tilapia에 대한 새로운 어류 재고 데이터를 입력하세요.\n\nDDL statements:\nCREATE TABLE fish_stock (id INT PRIMARY KEY, species VARCHAR(255), quantity INT, location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fish_stock (id, species, quantity, location) VALUES (401, 'Tilapia', 500, 'Brazil');"
    },
    {
        "instruction": "입력 텍스트: 안전 기록 테이블에서 선박 유형이 'Bulker'인 선박 테이블의 선박 ID를 가진 모든 기록의 상태를 '통과'로 변경하세요.\n\nDDL statements:\nCREATE TABLE safety_records (id INT PRIMARY KEY, vessel_id INT, inspection_date DATE, status VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE safety_records SET status = 'Passed' WHERE vessel_id IN (SELECT id FROM vessels WHERE vessel_type = 'Bulker');"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 연간 방문객 수로 가장 인기 있는 관광지는 무엇인가요?\n\nDDL statements:\nCREATE TABLE tourist_destinations (name VARCHAR(255), location VARCHAR(255), year INT, visitors INT); INSERT INTO tourist_destinations (name, location, year, visitors) VALUES ('Pyramids of Giza', 'Egypt', 2015, 9671000), ('Victoria Falls', 'Zambia/Zimbabwe', 2015, 3180000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, MAX(visitors) FROM tourist_destinations WHERE location LIKE '%Africa%' GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: labour_productivity' 테이블에서 'South America'에 위치한 광산의 노동 위반 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE labour_productivity (mine_location VARCHAR(255), violation_count INT); INSERT INTO labour_productivity (mine_location, violation_count) VALUES ('North America', 15), ('South America', 22), ('Asia', 30), ('Europe', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM labour_productivity WHERE mine_location = 'South America';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 비디오 콘텐츠에 대한 사용자 참여가 가장 많은 상위 5개 국가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE if not exists country (country_code varchar(2), country_name varchar(50));CREATE TABLE if not exists video_content (video_id int, user_id int, content_type varchar(10), country_code varchar(2), post_date date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country_name, COUNT(vc.video_id) as total_video_views FROM country c INNER JOIN video_content vc ON c.country_code = vc.country_code WHERE vc.post_date >= DATEADD(day, -30, GETDATE()) AND vc.content_type = 'video' GROUP BY c.country_name ORDER BY total_video_views DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 모든 레스토랑의 각 메뉴 아이템에 적용된 지속 가능한 조달 할인율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(255), City varchar(255)); CREATE TABLE Menu (MenuID int, RestaurantID int, MenuItem varchar(255), Price decimal(5,2)); CREATE TABLE Sustainability (SustainabilityID int, MenuID int, Discount decimal(5,2)); CREATE TABLE Sales (SaleID int, MenuID int, Quantity int, SaleDate date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT M.MenuItem, SUM(S.Quantity) as TotalQuantitySold, AVG(S.Quantity * M.Price * ISNULL(S.Discount, 0)) as AverageRevenue, AVG(S.Quantity * M.Price * ISNULL(S.Discount, 0)) / SUM(S.Quantity * M.Price) as AverageDiscountPercentage FROM Menu M INNER JOIN Sustainability S ON M.MenuID = S.MenuID INNER JOIN (SELECT MenuID, SUM(Quantity) as Quantity FROM Sales WHERE YEAR(SaleDate) = 2022 AND QUARTER(SaleDate) = 1 GROUP BY MenuID) S ON M.MenuID = S.MenuID GROUP BY M.MenuItem;"
    },
    {
        "instruction": "입력 텍스트: 재생 가능 에너지 프로젝트의 설치 용량이 가장 높은 상위 5개 주를 보여주세요.\n\nDDL statements:\nCREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT); CREATE TABLE states (state_code CHAR(2), state_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_location, SUM(capacity_mw) AS total_capacity FROM renewable_projects GROUP BY project_location ORDER BY total_capacity DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 엔진 용량이 2000 미만인 화물선과 유조선을 제외한 선박의 이름과 엔진 용량을 표시하세요.\n\nDDL statements:\nCREATE TABLE Vessels (ID INT, Name VARCHAR(50), Type VARCHAR(50), Engine_Capacity INT); INSERT INTO Vessels (ID, Name, Type, Engine_Capacity) VALUES (1, 'MV Aurora', 'Passenger Ship', 1500), (2, 'MV Galileo', 'Research Vessel', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, Engine_Capacity FROM Vessels WHERE Engine_Capacity < 2000 AND Type NOT IN ('Cargo Ship', 'Tanker');"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 가장 높고 낮은 오염 사고 건수를 가진 선박을 확인하세요.\n\nDDL statements:\nCREATE TABLE pollution_incidents (vessel_name TEXT, incident_count INT, ocean TEXT); INSERT INTO pollution_incidents (vessel_name, incident_count, ocean) VALUES ('VesselD', 5, 'Atlantic'), ('VesselE', 2, 'Atlantic'), ('VesselF', 8, 'Atlantic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel_name, incident_count FROM (SELECT vessel_name, incident_count, DENSE_RANK() OVER (ORDER BY incident_count DESC) as high_rank, DENSE_RANK() OVER (ORDER BY incident_count ASC) as low_rank FROM pollution_incidents WHERE ocean = 'Atlantic') ranked_incidents WHERE high_rank = 1 OR low_rank = 1;"
    },
    {
        "instruction": "입력 텍스트: 텍사스와 캘리포니아 주에서 발급된 상업용 건물의 모든 건축 허가증 번호를 나열하세요.\n\nDDL statements:\nCREATE TABLE permit (id INT, state VARCHAR(20), type VARCHAR(20), permit_number INT); INSERT INTO permit (id, state, type, permit_number) VALUES (1, 'Texas', 'Commercial', 100), (2, 'Texas', 'Residential', 150), (3, 'California', 'Commercial', 80), (4, 'California', 'Residential', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT permit_number FROM permit WHERE (state = 'Texas' OR state = 'California') AND type = 'Commercial';"
    },
    {
        "instruction": "입력 텍스트: 포괄적 주택 정책을 가진 부동산이 가장 많은 상위 3개 도시를 나열하세요.\n\nDDL statements:\nCREATE TABLE city_properties (city VARCHAR(50), inclusive BOOLEAN, property_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*) AS count FROM city_properties WHERE inclusive = TRUE GROUP BY city ORDER BY count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 가장 인기 있는 가상 투어 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, tour_type TEXT, country TEXT, popularity INT); INSERT INTO virtual_tours (tour_id, tour_type, country, popularity) VALUES (1, 'Museum Tours', 'Brazil', 1200), (2, 'Historical Sites', 'Brazil', 1500), (3, 'Nature Reserves', 'Brazil', 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT tour_type, popularity FROM virtual_tours WHERE country = 'Brazil' ORDER BY popularity DESC;"
    },
    {
        "instruction": "입력 텍스트: justice_schemas.legal_tech_providers 테이블에서 법률 기술 제공업체가 제공하는 도구의 최대 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE justice_schemas.legal_tech_providers (id INT PRIMARY KEY, name TEXT, num_tools INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(num_tools) FROM justice_schemas.legal_tech_providers;"
    },
    {
        "instruction": "입력 텍스트: 기술' 산업에서 근무하는 직원들에게 지급된 총 급여가 가장 높은 상위 5개 지역을 확인하세요.\n\nDDL statements:\nCREATE TABLE Regions (id INT, region_name VARCHAR(50)); INSERT INTO Regions (id, region_name) VALUES (1, 'Northeast'); INSERT INTO Regions (id, region_name) VALUES (2, 'Southeast'); CREATE TABLE Workers (id INT, name VARCHAR(50), salary FLOAT, industry VARCHAR(50), region_id INT); INSERT INTO Workers (id, name, salary, industry, region_id) VALUES (1, 'John Doe', 50000, 'technology', 1); INSERT INTO Workers (id, name, salary, industry, region_id) VALUES (2, 'Jane Smith', 55000, 'technology', 1); INSERT INTO Workers (id, name, salary, industry, region_id) VALUES (3, 'Mike Johnson', 60000, 'technology', 2); INSERT INTO Workers (id, name, salary, industry, region_id) VALUES (4, 'Emily Brown', 65000, 'technology', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Regions.region_name, SUM(Workers.salary) FROM Workers INNER JOIN Regions ON Workers.region_id = Regions.id WHERE Workers.industry = 'technology' GROUP BY Regions.region_name ORDER BY SUM(Workers.salary) DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2018년도 월별 이트륨 생산량의 평균을 계산하세요.\n\nDDL statements:\nCREATE TABLE Yttrium_Production (Year INT, Month INT, Quantity INT); INSERT INTO Yttrium_Production (Year, Month, Quantity) VALUES (2017, 1, 125), (2017, 2, 140), (2017, 3, 155), (2017, 4, 170), (2018, 1, 185), (2018, 2, 210), (2018, 3, 235), (2018, 4, 260), (2018, 5, 285), (2018, 6, 310), (2018, 7, 335), (2018, 8, 360), (2018, 9, 385), (2018, 10, 410), (2018, 11, 435), (2018, 12, 460);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Quantity) FROM Yttrium_Production WHERE Year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 2017년 플로리다 주의 산업용 건물 평균 에너지 효율 등급은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE industrial_building_energy_efficiency (state VARCHAR(20), year INT, energy_efficiency_rating FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_efficiency_rating) FROM industrial_building_energy_efficiency WHERE state = 'Florida' AND year = 2017;"
    },
    {
        "instruction": "입력 텍스트: Tower' 다리의 가장 최근 점검 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE Bridges (id INT, name VARCHAR(50), inspection_date DATE); INSERT INTO Bridges (id, name, inspection_date) VALUES (1, 'Golden Gate', '2020-05-01'), (2, 'Brooklyn', '2019-12-20'), (3, 'Tower', '2021-03-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(inspection_date) FROM Bridges WHERE name = 'Tower';"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 관행을 가진 제조업체가 가장 많은 국가는 어디입니까?\n\nDDL statements:\nCREATE TABLE ManufacturerSustainability (manufacturer_id INT, manufacturer_name VARCHAR(255), country VARCHAR(255), uses_sustainable_materials BOOLEAN, has_fair_labor_practices BOOLEAN); INSERT INTO ManufacturerSustainability (manufacturer_id, manufacturer_name, country, uses_sustainable_materials, has_fair_labor_practices) VALUES (1, 'ABC Manufacturing', 'USA', true, true), (2, 'XYZ Manufacturing', 'Canada', false, true), (3, 'Green Manufacturing', 'Mexico', true, false), (4, 'Eco Manufacturing', 'India', true, true), (5, 'Sustainable Manufacturing', 'China', false, true), (6, 'Fair Trade Manufacturing', 'Brazil', true, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as num_sustainable_manufacturers FROM ManufacturerSustainability WHERE uses_sustainable_materials = true AND has_fair_labor_practices = true GROUP BY country ORDER BY num_sustainable_manufacturers DESC;"
    },
    {
        "instruction": "입력 텍스트: 보건 부문에서 발생한 보안 사고의 총 건수와 그 중 고위험 사고는 몇 건인가요?\n\nDDL statements:\nCREATE TABLE incidents (incident_id INT, incident_date DATE, severity INT, department VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN department = 'healthcare' THEN 1 ELSE 0 END) as healthcare_incidents, SUM(CASE WHEN department = 'healthcare' AND severity >= 4 THEN 1 ELSE 0 END) as high_severity_healthcare_incidents FROM incidents;"
    },
    {
        "instruction": "입력 텍스트: 2021년 첫 번째 분기부터 두 번째 분기까지 시카고의 각 지역에서 중간 매물 가격의 변화를 찾으세요.\n\nDDL statements:\nCREATE TABLE neighborhoods (name VARCHAR(255), city VARCHAR(255), state VARCHAR(255), country VARCHAR(255), PRIMARY KEY (name)); INSERT INTO neighborhoods (name, city, state, country) VALUES ('Lincoln Park', 'Chicago', 'IL', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, (b.median_price - a.median_price) as price_change FROM (SELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY listing_price) as median_price, DATE_TRUNC('quarter', date_posted) as quarter FROM real_estate_listings WHERE city = 'Chicago' AND date_posted < '2021-04-01' GROUP BY name, quarter) a JOIN (SELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY listing_price) as median_price, DATE_TRUNC('quarter', date_posted) as quarter FROM real_estate_listings WHERE city = 'Chicago' AND date_posted < '2021-07-01' GROUP BY name, quarter) b ON a.name = b.name AND a.quarter = b.quarter - INTERVAL '3 months';"
    },
    {
        "instruction": "입력 텍스트: 2020년 캘리포니아 주에서의 군사 계약에 대한 총 지출액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE military_contracts (id INT, contract_number VARCHAR(255), state VARCHAR(255), amount DECIMAL(10,2), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM military_contracts WHERE state = 'California' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: crime_incidents' 테이블에 새로운 범죄 사건을 추가하세요.\n\nDDL statements:\nCREATE TABLE crime_incidents (incident_id INT, did INT, incident_type VARCHAR(255), incident_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO crime_incidents (incident_id, did, incident_type, incident_date) VALUES (1, 1, 'Theft', '2022-01-01');"
    },
    {
        "instruction": "입력 텍스트: 어떤 비건 아이섀도 제품의 판매액이 $100 이상인가요?\n\nDDL statements:\nCREATE TABLE product (id INT, name VARCHAR(50), category VARCHAR(50), is_vegan BOOLEAN); INSERT INTO product (id, name, category, is_vegan) VALUES (1, 'Eyeshadow 1', 'Eyeshadow', true), (2, 'Eyeshadow 2', 'Eyeshadow', false), (3, 'Eyeshadow 3', 'Eyeshadow', true); CREATE TABLE sales (id INT, product_id INT, sales_amount DECIMAL(10,2)); INSERT INTO sales (id, product_id, sales_amount) VALUES (1, 1, 120.00), (2, 2, 75.00), (3, 3, 110.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name FROM product p JOIN sales s ON p.id = s.product_id WHERE p.is_vegan = true AND s.sales_amount > 100.00 AND p.category = 'Eyeshadow';"
    },
    {
        "instruction": "입력 텍스트: 아시아에 있는 수산 양식장에서 나라별로 각 어종의 총 바이오매스는 얼마인가요?\n\nDDL statements:\nCREATE TABLE aquatic_farms (id INT, name VARCHAR(255), country VARCHAR(255)); INSERT INTO aquatic_farms (id, name, country) VALUES (1, 'Farm A', 'China'), (2, 'Farm B', 'Japan'), (3, 'Farm C', 'Vietnam'); CREATE TABLE fish_farms (id INT, farm_id INT, species_id INT, biomass FLOAT, date DATE); INSERT INTO fish_farms (id, farm_id, species_id, biomass, date) VALUES (1, 1, 1, 1000, '2021-01-01'), (2, 1, 2, 800, '2021-01-01'), (3, 2, 1, 1200, '2021-01-01'), (4, 3, 2, 900, '2021-01-01'), (5, 1, 3, 1500, '2021-02-01'); CREATE TABLE fish_species (id INT, name VARCHAR(255)); INSERT INTO fish_species (id, name) VALUES (1, 'Salmon'), (2, 'Tilapia'), (3, 'Cod');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.country, fs.name, SUM(f.biomass) as total_biomass FROM fish_farms f JOIN aquatic_farms a ON f.farm_id = a.id JOIN fish_species fs ON f.species_id = fs.id WHERE a.country LIKE 'Asia%' GROUP BY f.country, fs.name;"
    },
    {
        "instruction": "입력 텍스트: 모든 계좌와 그 계좌의 잔액 및 마지막 거래 날짜를 나열하세요(해당하는 경우).\n\nDDL statements:\nCREATE TABLE accounts (id INT PRIMARY KEY, client_id INT, product VARCHAR(255), balance DECIMAL(10,2)); INSERT INTO accounts (id, client_id, product, balance) VALUES (1, 1001, 'Checking', 5000.00), (2, 1002, 'Savings', 25000.00), (3, 1003, 'Checking', 8000.00), (4, 1004, 'Credit Card', 3000.00); CREATE TABLE transactions (id INT PRIMARY KEY, account_id INT, type VARCHAR(255), amount DECIMAL(10,2), date DATE); INSERT INTO transactions (id, account_id, type, amount, date) VALUES (1, 1, 'Deposit', 2000.00, '2021-01-01'), (2, 2, 'Withdrawal', 1500.00, '2021-02-10'), (3, 3, 'Transfer', 500.00, '2021-03-20'), (4, 1003, 'Withdrawal', 1000.00, '2021-04-01'), (5, 1002, 'Withdrawal', 500.00, '2021-05-15'), (6, 5, 'Deposit', 1000.00, '2021-06-01'), (7, 4, 'Payment', 500.00, '2021-06-15'); CREATE VIEW latest_transaction AS SELECT account_id, MAX(date) AS max_date FROM transactions GROUP BY account_id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.id, a.product, a.balance, lt.max_date FROM accounts a LEFT JOIN latest_transaction lt ON a.id = lt.account_id;"
    },
    {
        "instruction": "입력 텍스트: clients' 테이블에서 성이 'Lee'인 모든 고객을 제거하세요\n\nDDL statements:\nCREATE TABLE clients (client_id INT PRIMARY KEY, client_first_name VARCHAR(50), client_last_name VARCHAR(50)); INSERT INTO clients (client_id, client_first_name, client_last_name) VALUES (1, 'Grace', 'Lee'), (2, 'James', 'Lee'), (3, 'Jasmine', 'Wong'), (4, 'Henry', 'Chen');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM clients WHERE client_last_name = 'Lee';"
    },
    {
        "instruction": "입력 텍스트: 태평양에 있는 모든 해양보호구역의 평균 수심은 얼마이며, 이러한 지역들을 관할하는 독특한 국가는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (area_name TEXT, depth FLOAT, region TEXT); INSERT INTO marine_protected_areas (area_name, depth, region) VALUES ('Galapagos Islands', 2000, 'Pacific'); INSERT INTO marine_protected_areas (area_name, depth, region) VALUES ('Great Barrier Reef', 1000, 'Pacific'); CREATE TABLE countries (country_name TEXT, region TEXT); INSERT INTO countries (country_name, region) VALUES ('Ecuador', 'Pacific'); INSERT INTO countries (country_name, region) VALUES ('Australia', 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) AS avg_depth, COUNT(DISTINCT c.country_name) AS country_count FROM marine_protected_areas mpa JOIN countries c ON mpa.region = c.region;"
    },
    {
        "instruction": "입력 텍스트: 아프리카, 남아메리카, 오세아니아에서 문화 유산 체험으로 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Revenue (region TEXT, category TEXT, amount NUMERIC); INSERT INTO Revenue (region, category, amount) VALUES ('Africa', 'Cultural Heritage', 20000), ('Africa', 'Virtual Tour', 15000), ('South America', 'Cultural Heritage', 30000), ('South America', 'Virtual Tour', 20000), ('Oceania', 'Cultural Heritage', 10000), ('Oceania', 'Virtual Tour', 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(amount) FROM Revenue WHERE category = 'Cultural Heritage' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 모든 비건 메뉴 항목의 가격을 5% 감소시켜라\n\nDDL statements:\nCREATE TABLE menu_items (item_id INT, item_name VARCHAR(50), is_vegan BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu_items (item_id, item_name, is_vegan, price) VALUES (1, 'Steak', false, 25.99), (2, 'Salad', false, 12.49), (3, 'Pizza', true, 16.99), (4, 'Pasta', false, 18.99), (5, 'Soda', false, 2.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE menu_items SET price = price * 0.95 WHERE is_vegan = true;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 정부 투명성 점수 중 최소값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE government_transparency (year INT, score INT); INSERT INTO government_transparency (year, score) VALUES (2016, 70), (2017, 75), (2018, 85), (2019, 78), (2020, 82), (2021, 86), (2016, 72), (2017, 77), (2018, 81), (2019, 74), (2020, 80), (2021, 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(score) FROM government_transparency WHERE year BETWEEN (SELECT MAX(year) - 4 FROM government_transparency) AND MAX(year);"
    },
    {
        "instruction": "입력 텍스트: XL 사이즈인 제품들의 평균 선호도 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(255), size VARCHAR(50), supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES suppliers(id)); INSERT INTO products (id, name, size, supplier_id) VALUES (1, 'Product X', 'XL', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.product_id, AVG(cp.preference) AS average_preference FROM products p JOIN customer_preferences cp ON p.id = cp.product_id WHERE p.size = 'XL' GROUP BY p.product_id;"
    },
    {
        "instruction": "입력 텍스트: 브로드밴드 가입자의 유지율은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE broadband_subscribers (subscriber_id INT, subscribe_date DATE, cancel_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) / (SELECT COUNT(*) FROM broadband_subscribers WHERE cancel_date IS NULL) AS retention_rate;"
    },
    {
        "instruction": "입력 텍스트: 미국에 있는 스마트 시티의 이름과 그린 빌딩 인증은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SmartCities (id INT, name VARCHAR(50), country VARCHAR(50), population INT, area_size FLOAT); INSERT INTO SmartCities (id, name, country, population, area_size) VALUES (4, 'Austin', 'USA', 967855, 820.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name, g.certification FROM SmartCities s INNER JOIN GreenBuildings g ON s.country = g.country WHERE s.country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: FinancialWellbeing 테이블에서 'Fatima'의 재정적 안녕 점수를 2만큼 증가시키세요.\n\nDDL statements:\nCREATE TABLE FinancialWellbeing (userID VARCHAR(20), wellbeingScore INT); INSERT INTO FinancialWellbeing (userID, wellbeingScore) VALUES ('Ahmed', 6), ('Sara', 8), ('Fatima', 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE FinancialWellbeing SET wellbeingScore = wellbeingScore + 2 WHERE userID = 'Fatima';"
    },
    {
        "instruction": "입력 텍스트: MarineLife' 스키마의 인도-태평양 지역에 있는 산호초의 총 바이오매스는 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA MarineLife;CREATE TABLE CoralReefs (id INT, region TEXT, biomass REAL); INSERT INTO CoralReefs (id, region, biomass) VALUES (1, 'Indo-Pacific', 230000), (2, 'Atlantic Ocean', 85000), (3, 'Caribbean', 92000), (4, 'Mediterranean Sea', 50000), (5, 'Red Sea', 120000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(biomass) AS total_biomass FROM MarineLife.CoralReefs WHERE region = 'Indo-Pacific' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 함대가 소유한 선박의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE fleets (fleet_id INT, fleet_name VARCHAR(50), number_of_vessels INT); INSERT INTO fleets (fleet_id, fleet_name, number_of_vessels) VALUES (1, 'FleetA', 10), (2, 'FleetB', 15), (3, 'FleetC', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT fleet_name, SUM(number_of_vessels) FROM fleets GROUP BY fleet_name;"
    },
    {
        "instruction": "입력 텍스트: 각 주에 있는 병원과 클리닉은 몇 개씩 있나요?\n\nDDL statements:\nCREATE TABLE Hospitals (name VARCHAR(255), location VARCHAR(255), type VARCHAR(255), state VARCHAR(255)); INSERT INTO Hospitals (name, location, type, state) VALUES ('Rural General Hospital', 'Springfield', 'Hospital', 'Illinois'), ('Urban General Hospital', 'Meadowville', 'Hospital', 'New York'); CREATE TABLE Clinics (name VARCHAR(255), location VARCHAR(255), type VARCHAR(255), state VARCHAR(255)); INSERT INTO Clinics (name, location, type, state) VALUES ('Rural Community Health Center', 'Oakwood', 'Clinic', 'Illinois'), ('Urban Community Health Center', 'Manhattan', 'Clinic', 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM Hospitals GROUP BY state UNION ALL SELECT state, COUNT(*) FROM Clinics GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 해군 장비 유형별 평균 유지보수 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE NavalEquipmentMaintenance (id INT, equipment_type VARCHAR(255), year INT, cost INT); INSERT INTO NavalEquipmentMaintenance (id, equipment_type, year, cost) VALUES (1, 'Submarine', 2021, 100000), (2, 'Warship', 2020, 200000), (3, 'Torpedo', 2022, 300000), (4, 'Submarine', 2022, 120000), (5, 'Warship', 2022, 250000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_type, AVG(cost) FROM NavalEquipmentMaintenance WHERE year = 2022 GROUP BY equipment_type;"
    },
    {
        "instruction": "입력 텍스트: AI 도입률이 가장 높은 상위 5개 호텔 체인은 무엇인가요?\n\nDDL statements:\nCREATE TABLE hotel_chains (hotel_chain_id INT, hotel_chain_name TEXT, hotel_id INT); INSERT INTO hotel_chains (hotel_chain_id, hotel_chain_name, hotel_id) VALUES (1, 'Chain A', 1), (2, 'Chain B', 2), (3, 'Chain C', 3); CREATE TABLE hotel_ai (hotel_id INT, ai_adoption_date DATE); INSERT INTO hotel_ai (hotel_id, ai_adoption_date) VALUES (1, '2021-12-15'), (1, '2022-02-01'), (2, '2021-11-10'), (3, '2021-09-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hc.hotel_chain_name, COUNT(*) as ai_adoption_count FROM hotel_chains hc JOIN hotel_ai ha ON hc.hotel_id = ha.hotel_id GROUP BY hc.hotel_chain_name ORDER BY ai_adoption_count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 아프리카와 남아시아에서 식량 정의 이니셔티브를 실천하는 농부들의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Food_Justice (Farmer_ID INT, Region VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Food_Justice (Farmer_ID, Region, Initiative, Year) VALUES (501, 'Africa', 'Community_Supported_Agriculture', 2021), (502, 'Africa', 'Fair_Trade', 2021), (503, 'South_Asia', 'Urban_Farming', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT Farmer_ID) FROM Food_Justice WHERE Region IN ('Africa', 'South Asia') AND Year = 2021 AND Initiative IN ('Community_Supported_Agriculture', 'Fair_Trade', 'Urban_Farming');"
    },
    {
        "instruction": "입력 텍스트: 농촌' 지역에서 각 네트워크 유형별 데이터 사용량 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, network VARCHAR(20), region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, network, region) VALUES (1, 'John Doe', 15.0, '4G', 'rural'), (2, 'Jane Doe', 18.0, '5G', 'rural'), (3, 'Mike Smith', 20.0, '4G', 'rural');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT network, region, AVG(data_usage) avg_data_usage FROM subscribers GROUP BY network, region;"
    },
    {
        "instruction": "입력 텍스트: 아시아 출신 아티스트들이 발매한 노래의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE artists (id INT PRIMARY KEY, name TEXT, country TEXT); CREATE TABLE songs (id INT PRIMARY KEY, title TEXT, year INT, artist_id INT, genre TEXT); INSERT INTO artists (id, name, country) VALUES (1, 'BTS', 'South Korea'), (2, 'Blackpink', 'South Korea'), (3, 'EXO', 'South Korea'), (4, 'Arijit Singh', 'India'), (5, 'Alka Yagnik', 'India'); INSERT INTO songs (id, title, year, artist_id, genre) VALUES (1, 'Dynamite', 2020, 1, 'Pop'), (2, 'How You Like That', 2020, 2, 'Hip-Hop'), (3, 'Love Shot', 2018, 3, 'Pop'), (4, 'Tum Hi Ho', 2013, 4, 'Bollywood'), (5, 'Dil Se Re', 1998, 5, 'Bollywood');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM songs s JOIN artists a ON s.artist_id = a.id WHERE a.country = 'South Korea' OR a.country = 'India';"
    },
    {
        "instruction": "입력 텍스트: \"cargo\" 테이블에 선박 102의 화물로 \"food\"를, 배송 날짜는 2021-06-15로 하는 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE cargo (id INT, vessel_id INT, cargo TEXT, delivery_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO cargo (id, vessel_id, cargo, delivery_date) VALUES (NULL, 102, 'food', '2021-06-15');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 상업 건물들 중에서 에너지 소비량이 12000 kWh 미만인 건물들의 평균 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE CommercialBuildings (id INT, state VARCHAR(20), energy_consumption INT); INSERT INTO CommercialBuildings (id, state, energy_consumption) VALUES (1, 'New York', 10000), (2, 'New York', 11000), (3, 'New York', 13000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_consumption) FROM CommercialBuildings WHERE state = 'New York' AND energy_consumption < 12000;"
    },
    {
        "instruction": "입력 텍스트: 파리에서 공유 전기자전거의 최대 여행 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE shared_ebikes (bike_id INT, trip_start_time TIMESTAMP, trip_end_time TIMESTAMP, trip_distance FLOAT, city VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(trip_distance) as max_distance FROM shared_ebikes WHERE city = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 동물 실험을 하지 않는 제품 중에서 평점이 4 이상인 제품의 총 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(255), price DECIMAL(5,2), cruelty_free BOOLEAN, rating DECIMAL(2,1));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) FROM products WHERE cruelty_free = TRUE AND rating >= 4;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 국가별 물 보존 노력의 총합을 계산하세요.\n\nDDL statements:\nCREATE TABLE oceania_countries (country VARCHAR(255), water_conservation_efforts INT); INSERT INTO oceania_countries (country, water_conservation_efforts) VALUES ('Australia', 15000000), ('New Zealand', 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(water_conservation_efforts) FROM oceania_countries GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 남아프리카의 농촌 지역 클리닉 중 정신 건강 서비스에 대한 환자 만족도가 가장 낮은 클리닉은 어디인가요?\n\nDDL statements:\nCREATE TABLE clinics_sa (id INT, name VARCHAR(255), rural_designation VARCHAR(50), province_id INT); INSERT INTO clinics_sa (id, name, rural_designation, province_id) VALUES (1, 'Clinic A', 'Rural', 1); CREATE TABLE patient_satisfaction (id INT, clinic_id INT, service_type VARCHAR(50), satisfaction FLOAT); INSERT INTO patient_satisfaction (id, clinic_id, service_type, satisfaction) VALUES (1, 1, 'Mental Health', 6.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, ps.satisfaction FROM clinics_sa c JOIN patient_satisfaction ps ON c.id = ps.clinic_id WHERE c.rural_designation = 'Rural' AND ps.service_type = 'Mental Health' ORDER BY ps.satisfaction ASC;"
    },
    {
        "instruction": "입력 텍스트: 민간 회사가 주도하는 우주 미션의 가장 이른 발사 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE space_missions (id INT, mission_name VARCHAR(50), launch_date DATE, launch_company VARCHAR(50)); INSERT INTO space_missions (id, mission_name, launch_date, launch_company) VALUES (1, 'STS-31', '1990-04-24', 'NASA'); INSERT INTO space_missions (id, mission_name, launch_date, launch_company) VALUES (2, 'Dream Chaser', '2013-01-31', 'Sierra Nevada Corporation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(launch_date) FROM space_missions WHERE launch_company NOT IN ('NASA', 'ESA', 'Roscosmos', 'JAXA', 'CNSA');"
    },
    {
        "instruction": "입력 텍스트: 2021년에 공급업체 X에게 판매된 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE purchases (supplier_id VARCHAR(255), purchase_date DATE, quantity INT); INSERT INTO purchases (supplier_id, purchase_date, quantity) VALUES ('X', '2021-01-01', 5), ('Y', '2021-01-02', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM purchases WHERE supplier_id = 'X' AND YEAR(purchase_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 모든 친환경 청바지의 가격을 $59.99로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(50), price DECIMAL(5, 2), sustainable BOOLEAN); INSERT INTO products (product_id, name, price, sustainable) VALUES (1, 'Eco-Friendly Jeans', 49.99, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE products SET price = 59.99 WHERE name = 'Eco-Friendly Jeans' AND sustainable = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 국가들에서 진행되는 모든 회복적 사법 프로그램의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE programs (program_id INT, program_name VARCHAR(50), country VARCHAR(20)); INSERT INTO programs (program_id, program_name, country) VALUES (1, 'Restorative Program 1', 'Nigeria'), (2, 'Restorative Program 2', 'South Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM programs WHERE country LIKE 'Africa%';"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역에서 최근 5년간 최소 500명 이상의 사람들에게 영향을 미친 재난의 이름과 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Disasters (disaster_id INT, name VARCHAR(255), type VARCHAR(255), affected_people INT, region VARCHAR(255), date DATE); INSERT INTO Disasters (disaster_id, name, type, affected_people, region, date) VALUES (1, 'Floods', 'Hydrological', 800, 'Asia', '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, type FROM Disasters WHERE region = 'Asia' AND affected_people >= 500 AND date >= '2016-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 군 지부별로 군사 장비 유지보수 요청 건수를 계산하세요.\n\nDDL statements:\nCREATE TABLE maintenance_requests (request_id INT, equipment_id INT, request_date DATE, branch VARCHAR(255)); CREATE VIEW equipment_by_branch AS SELECT equipment_id, branch FROM military_equipment JOIN maintenance_requests ON military_equipment.equipment_id = maintenance_requests.equipment_id;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT branch, COUNT(*) as num_requests FROM equipment_by_branch GROUP BY branch;"
    },
    {
        "instruction": "입력 텍스트: Van Gogh Alive' 전시회의 온라인 티켓 판매로 발생한 총 수익은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE ticket_sales (id INT, exhibition_name VARCHAR(50), ticket_price DECIMAL(5,2), sale_date DATE); INSERT INTO ticket_sales (id, exhibition_name, ticket_price, sale_date) VALUES (1, 'Van Gogh Alive', 25.00, '2022-03-01'); INSERT INTO ticket_sales (id, exhibition_name, ticket_price, sale_date) VALUES (2, 'Van Gogh Alive', 22.00, '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(ticket_price) FROM ticket_sales WHERE exhibition_name = 'Van Gogh Alive';"
    },
    {
        "instruction": "입력 텍스트: support_tickets 테이블에 새로운 고객 지원 티켓을 추가하세요.\n\nDDL statements:\nCREATE TABLE support_tickets (ticket_id INT, subscriber_id INT, ticket_subject VARCHAR(100), ticket_description TEXT, ticket_status VARCHAR(20), ticket_open_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO support_tickets (ticket_id, subscriber_id, ticket_subject, ticket_description, ticket_status, ticket_open_date) VALUES (23456, 12345, 'Internet Connection Issue', 'My internet connection is down', 'Open', '2022-01-02');"
    },
    {
        "instruction": "입력 텍스트: oil_production' 테이블에서 production_year가 2010년 미만인 모든 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE oil_production (id INT, field VARCHAR(50), country VARCHAR(50), production_year INT, production_number FLOAT); INSERT INTO oil_production (id, field, country, production_year, production_number) VALUES (1, 'Alberta', 'Canada', 2009, 123456.78); INSERT INTO oil_production (id, field, country, production_year, production_number) VALUES (2, 'Texas', 'USA', 2010, 98765.43);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM oil_production WHERE production_year < 2010;"
    },
    {
        "instruction": "입력 텍스트: 각 지방에 배정된 인프라에 대한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE provinces (province_id INT, province_name VARCHAR(255)); INSERT INTO provinces (province_id, province_name) VALUES (1, 'Alberta'), (2, 'British Columbia'), (3, 'Ontario'), (4, 'Quebec'); CREATE TABLE budget_allocations (year INT, province_id INT, category VARCHAR(255), amount INT); INSERT INTO budget_allocations (year, province_id, category, amount) VALUES (2022, 1, 'Infrastructure', 5000000), (2022, 2, 'Infrastructure', 6000000), (2022, 3, 'Infrastructure', 8000000), (2022, 4, 'Infrastructure', 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT province_name, SUM(amount) AS total_budget FROM budget_allocations WHERE year = 2022 AND category = 'Infrastructure' GROUP BY province_name;"
    },
    {
        "instruction": "입력 텍스트: 미드웨스트 지역에서 기술 관련 기사를 선호하는 독자들의 평균 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE readers (id INT, age INT, region VARCHAR(20)); INSERT INTO readers (id, age, region) VALUES (1, 30, 'Midwest'), (2, 35, 'Northeast'), (3, 28, 'Midwest'); CREATE TABLE preferences (id INT, reader_id INT, category VARCHAR(20)); INSERT INTO preferences (id, reader_id, category) VALUES (1, 1, 'technology'), (2, 2, 'politics'), (3, 3, 'technology');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(readers.age) FROM readers INNER JOIN preferences ON readers.id = preferences.reader_id WHERE readers.region = 'Midwest' AND preferences.category = 'technology';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아의 약국에서 100만 달러 이상의 총 소매 가치를 가진 품종을 생산하는 재배자를 식별합니다.\n\nDDL statements:\nCREATE TABLE Cultivators (CultivatorID INT, CultivatorName TEXT, State TEXT); INSERT INTO Cultivators (CultivatorID, CultivatorName, State) VALUES (1, 'Emerald Fields', 'California'); CREATE TABLE Production (ProductionID INT, CultivatorID INT, Strain TEXT, Weight DECIMAL(10,2), Price DECIMAL(10,2)); INSERT INTO Production (ProductionID, CultivatorID, Strain, Weight, Price) VALUES (1, 1, 'Sunset Sherbet', 100.00, 25.00); CREATE TABLE Inventory (InventoryID INT, DispensaryID INT, ProductionID INT); INSERT INTO Inventory (InventoryID, DispensaryID, ProductionID) VALUES (1, 1, 1); CREATE TABLE Sales (SaleID INT, InventoryID INT, Quantity INT, TotalPrice DECIMAL(10,2)); INSERT INTO Sales (SaleID, InventoryID, Quantity, TotalPrice) VALUES (1, 1, 5, 125.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.CultivatorName, SUM(s.TotalPrice) as TotalRetailValue FROM Cultivators c INNER JOIN Production p ON c.CultivatorID = p.CultivatorID INNER JOIN Inventory i ON p.ProductionID = i.ProductionID INNER JOIN Sales s ON i.InventoryID = s.InventoryID WHERE c.State = 'California' GROUP BY c.CultivatorName HAVING SUM(s.TotalPrice) > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 \"기후 변화\"와 관련된 콘텐츠를 게시한 사용자들은 몇 명의 팔로워를 가지고 있나요?\n\nDDL statements:\nCREATE TABLE users (id INT, followers INT); CREATE TABLE posts (id INT, user_id INT, content VARCHAR(255), post_date DATE); INSERT INTO users (id, followers) VALUES (1, 5000); INSERT INTO posts (id, user_id, content, post_date) VALUES (1, 1, 'Climate change is real', '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT users.followers FROM users JOIN posts ON users.id = posts.user_id WHERE posts.content ILIKE '%climate change%' AND posts.post_date >= NOW() - INTERVAL '30 days';"
    },
    {
        "instruction": "입력 텍스트: 캐나다 내 '긴급' 배송에 대한 배송 주소와 해당 평균 배송 시간(일 단위)을 지난 6개월 간 보여주세요.\n\nDDL statements:\nCREATE TABLE DeliveryAddresses (AddressID INT, DeliveryAddress VARCHAR(200));CREATE TABLE ShipmentInfo (ShipmentID INT, AddressID INT, ShipmentType VARCHAR(50), DeliveryDays INT); INSERT INTO DeliveryAddresses VALUES (1, '123 Main St, Toronto'); INSERT INTO ShipmentInfo VALUES (1, 1, 'Urgent', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DeliveryAddresses.DeliveryAddress, AVG(ShipmentInfo.DeliveryDays) as AvgDeliveryTime FROM DeliveryAddresses INNER JOIN ShipmentInfo ON DeliveryAddresses.AddressID = ShipmentInfo.AddressID WHERE ShipmentType = 'Urgent' AND COUNTRY(DeliveryAddress) = 'Canada' AND ShipmentInfo.DeliveryDays >= DATEDIFF(CURDATE(), '2021-01-01')/30 GROUP BY DeliveryAddresses.DeliveryAddress;"
    },
    {
        "instruction": "입력 텍스트: 주어진 player_id에 대한 새로운 점수로 game_scores 테이블을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE game_scores (id INT PRIMARY KEY, player_id INT, game_name VARCHAR(100), score INT); INSERT INTO game_scores VALUES (1, 1001, 'GameA', 5000), (2, 1002, 'GameB', 7000), (3, 1003, 'GameA', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE game_scores SET score = new_scores.score FROM (SELECT 1001 AS player_id, 'GameA' AS game_name, 5500 AS score UNION ALL SELECT 1003, 'GameA', 3500) AS new_scores WHERE game_scores.player_id = new_scores.player_id AND game_scores.game_name = new_scores.game_name;"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 카리브해 지역의 농촌 인프라 프로젝트에 대한 총 투자액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE project (id INT, name TEXT, location TEXT, investment_amount INT, year INT); INSERT INTO project (id, name, location, investment_amount, year) VALUES (1, 'Northern Highway', 'Jamaica', 2000000, 2019), (2, 'Southern Railway', 'Barbados', 1500000, 2020), (3, 'Central Dam', 'Trinidad', 2500000, 2018), (4, 'Eastern Irrigation', 'Cuba', 1000000, 2017);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment_amount) FROM project WHERE location LIKE 'Caribbean%' AND year BETWEEN 2019 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역의 그린 빌딩 프로젝트의 평균 탄소 상쇄량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE green_building_projects (project_id INT, project_name VARCHAR(50), region VARCHAR(20), carbon_offsets INT); INSERT INTO green_building_projects (project_id, project_name, region, carbon_offsets) VALUES (1, 'Green Office', 'Asia-Pacific', 500), (2, 'Sustainable Apartments', 'Europe', 300), (3, 'Eco-friendly Mall', 'Asia-Pacific', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(carbon_offsets) FROM green_building_projects WHERE region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 지역의 어느 커뮤니티에서도 기술 접근성 자금의 최소 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE tech_accessibility_funding (id INT, location VARCHAR(255), year INT, funding DECIMAL(10,2)); INSERT INTO tech_accessibility_funding (id, location, year, funding) VALUES (1, 'Oceania', 2019, 120000.00); INSERT INTO tech_accessibility_funding (id, location, year, funding) VALUES (2, 'Asia', 2019, 150000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(funding) FROM tech_accessibility_funding WHERE year = 2019 AND location = 'Oceania';"
    },
    {
        "instruction": "입력 텍스트: 2020년 콜로라도에서 월별로 발급된 건축 허가증의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE building_permits (id INT, permit_number VARCHAR(20), issue_date DATE, state VARCHAR(10)); INSERT INTO building_permits (id, permit_number, issue_date, state) VALUES (1, '12345', '2020-01-01', 'Colorado'); INSERT INTO building_permits (id, permit_number, issue_date, state) VALUES (2, '67890', '2020-02-15', 'Colorado');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MONTH(issue_date), COUNT(*) FROM building_permits WHERE state = 'Colorado' AND YEAR(issue_date) = 2020 GROUP BY MONTH(issue_date);"
    },
    {
        "instruction": "입력 텍스트: 각각의 재생 가능 에너지 프로젝트 유형별로 설치된 최대 용량(kW)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE renewable_projects (id INT, project_name VARCHAR(255), project_type VARCHAR(255), installed_capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, MAX(installed_capacity) FROM renewable_projects GROUP BY project_type;"
    },
    {
        "instruction": "입력 텍스트: 광산 운영' 부서에서 근무하며 회사에 5년 이상 재직한 직원들의 직책별 총 인원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees(id INT, name VARCHAR(50), department VARCHAR(50), job_title VARCHAR(50), years_with_company INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT job_title, COUNT(*) as total_employees FROM Employees WHERE department = 'Mining Operations' AND years_with_company > 5 GROUP BY job_title;"
    },
    {
        "instruction": "입력 텍스트: 30번 이상 체크인한 모든 사용자를 나열합니다\n\nDDL statements:\nCREATE TABLE user_check_ins (user_id INT, check_in_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT user_id FROM user_check_ins GROUP BY user_id HAVING COUNT(check_in_id) > 30;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 프랑스와 이탈리아의 문화 유산을 방문한 관광객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE france_culture (year INT, visitors INT); INSERT INTO france_culture (year, visitors) VALUES (2020, 4000000), (2019, 5000000); CREATE TABLE italy_culture (year INT, visitors INT); INSERT INTO italy_culture (year, visitors) VALUES (2020, 3500000), (2019, 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT visitors FROM france_culture WHERE year = 2020 UNION ALL SELECT visitors FROM italy_culture WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: Bike Rental' 시스템에서 'City Hall' 역에서 대여 가능한 자전거 총 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE BikeRental (id INT, station VARCHAR(20), num_bikes INT); INSERT INTO BikeRental (id, station, num_bikes) VALUES (1, 'City Hall', 30), (2, 'Penn Station', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_bikes) FROM BikeRental WHERE station = 'City Hall';"
    },
    {
        "instruction": "입력 텍스트: 방위 계약 총액이 가장 높은 상위 5개 주를 나열하세요\n\nDDL statements:\nCREATE TABLE defense_contracts (contract_id INT, company_name TEXT, state TEXT, value FLOAT); INSERT INTO defense_contracts (contract_id, company_name, state, value) VALUES (1, 'ABC Corp', 'Texas', 5000000), (2, 'DEF Inc', 'California', 7000000), (3, 'GHI Ltd', 'New York', 6000000), (4, 'JKL PLC', 'Florida', 4000000), (5, 'MNO Corp', 'Texas', 3000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(value) as total_value FROM defense_contracts GROUP BY state ORDER BY total_value DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 각 온라인 여행사의 월별 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE online_travel_agency (ota_id INT, ota_name TEXT, revenue INT, month INT); INSERT INTO online_travel_agency (ota_id, ota_name, revenue, month) VALUES (1, 'OTA 1', 5000, 1), (2, 'OTA 2', 7000, 1), (3, 'OTA 3', 6000, 2), (4, 'OTA 4', 8000, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT month, SUM(revenue) as total_revenue FROM online_travel_agency GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 평등 위반 건수를 주별로 나타내고, 위반 건수가 많은 순으로 내림차순으로 정렬해주세요.\n\nDDL statements:\nCREATE TABLE parity_violations (state VARCHAR(2), violations INT); INSERT INTO parity_violations (state, violations) VALUES ('NY', 40), ('CA', 35), ('TX', 50), ('FL', 25), ('IL', 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(violations) OVER (PARTITION BY 1) as total_violations FROM parity_violations ORDER BY total_violations DESC;"
    },
    {
        "instruction": "입력 텍스트: \"initiatives\" 테이블의 각 부서별로 고유한 이니셔티브의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE department (id INT, name TEXT);CREATE TABLE initiatives (id INT, department_id INT, title TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department.name, COUNT(DISTINCT initiatives.id) FROM department JOIN initiatives ON department.id = initiatives.department_id GROUP BY department.name;"
    },
    {
        "instruction": "입력 텍스트: Habitat 1'에는 몇 종의 동물이 있습니까?\n\nDDL statements:\nCREATE TABLE Habitat1(animal_id INT, species VARCHAR(20), population INT); INSERT INTO Habitat1 VALUES (1, 'Tiger', 15), (2, 'Elephant', 20), (3, 'Rhinoceros', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT species) FROM Habitat1;"
    },
    {
        "instruction": "입력 텍스트: safety_incidents' 테이블에서 '북아메리카'와 '유럽'에서 보고된 AI 안전 사고는 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE safety_incidents (incident_id INT, region TEXT, incident_count INT); INSERT INTO safety_incidents (incident_id, region, incident_count) VALUES (1, 'North America', 25), (2, 'Europe', 18), (3, 'Asia', 30), (4, 'Africa', 12), (5, 'South America', 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(incident_count) FROM safety_incidents WHERE region IN ('North America', 'Europe');"
    },
    {
        "instruction": "입력 텍스트: 각 팀의 최대 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE games (game_id INT, team_id INT, revenue DECIMAL(10,2)); INSERT INTO games (game_id, team_id, revenue) VALUES (1, 1, 10000.00), (2, 1, 12000.00), (3, 2, 15000.00), (4, 2, 18000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT t.team_name, MAX(g.revenue) as max_revenue FROM teams t JOIN games g ON t.team_id = g.team_id GROUP BY t.team_name;"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 호텔리어 AI를 도입한 LATAM 지역(라틴 아메리카)의 호텔들이 창출한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE hotel_revenue (hotel_id INT, region TEXT, revenue FLOAT, date DATE, ai_adoption BOOLEAN); INSERT INTO hotel_revenue (hotel_id, region, revenue, date, ai_adoption) VALUES (1, 'Brazil', 50000, '2022-07-01', true), (2, 'Argentina', 60000, '2022-07-01', false), (3, 'Mexico', 45000, '2022-07-01', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM hotel_revenue WHERE region = 'LATAM' AND ai_adoption = true AND date = '2022-07-01';"
    },
    {
        "instruction": "입력 텍스트: 자율 주행 차량의 도심 교통 평균 속도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Vehicle (id INT, name TEXT, is_autonomous BOOLEAN, city_traffic_speed FLOAT); INSERT INTO Vehicle (id, name, is_autonomous, city_traffic_speed) VALUES (1, 'Waymo', true, 25.6), (2, 'Tesla', true, 22.8), (3, 'Camry', false, 18.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(city_traffic_speed) FROM Vehicle WHERE is_autonomous = true;"
    },
    {
        "instruction": "입력 텍스트: 각 대륙별 국가의 평균 기대 수명은 얼마인가요?\n\nDDL statements:\nCREATE TABLE countries (country_id INT, country_name VARCHAR(255), continent VARCHAR(255), life_expectancy INT); INSERT INTO countries (country_id, country_name, continent, life_expectancy) VALUES (1, 'Canada', 'North America', 83), (2, 'Mexico', 'North America', 78), (3, 'Brazil', 'South America', 75), (4, 'Argentina', 'South America', 79);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, AVG(life_expectancy) as avg_life_expectancy FROM countries GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 각 산업 분야별로 여성이 창업한 회사의 최소 기업 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founder TEXT, industry TEXT, valuation INT); INSERT INTO company (id, name, founder, industry, valuation) VALUES (1, 'Acme Inc', 'Female', 'Tech', 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, MIN(valuation) FROM company WHERE founder = 'Female' GROUP BY industry;"
    },
    {
        "instruction": "입력 텍스트: 부서가 2개 이상인 도시의 총 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE City_Department (city_id INT, department_name VARCHAR(50), num_employees INT); INSERT INTO City_Department (city_id, department_name, num_employees) VALUES (1, 'Education', 15000); INSERT INTO City_Department (city_id, department_name, num_employees) VALUES (1, 'Transportation', 8000); INSERT INTO City_Department (city_id, department_name, num_employees) VALUES (2, 'Health', 6000); INSERT INTO City_Department (city_id, department_name, num_employees) VALUES (2, 'Public Safety', 10000); INSERT INTO City_Department (city_id, department_name, num_employees) VALUES (3, 'Housing', 5000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city_id, SUM(num_employees) as 'Total Employees' FROM City_Department GROUP BY city_id HAVING COUNT(city_id) > 2;"
    },
    {
        "instruction": "입력 텍스트: 가장 높은 피드백 점수를 가진 상위 2개 지역을 확인하고, 지역 이름과 피드백 점수를 표시하세요.\n\nDDL statements:\nCREATE TABLE Regions (Region VARCHAR(255), FeedbackScore INT); INSERT INTO Regions (Region, FeedbackScore) VALUES ('North', 80), ('South', 90), ('East', 85), ('West', 95);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, FeedbackScore FROM (SELECT Region, FeedbackScore, ROW_NUMBER() OVER (ORDER BY FeedbackScore DESC) AS Rank FROM Regions) AS RegionRanks WHERE Rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: 남아프리카에 있는 광산 사이트 중 환경 영향 평가(EIA)가 6개월 이상 지연된 곳을 나열하세요.\n\nDDL statements:\nCREATE TABLE mining_sites (site_id INT, site_name VARCHAR(50), country VARCHAR(20)); INSERT INTO mining_sites (site_id, site_name, country) VALUES (1, 'Mining Site A', 'South Africa'), (2, 'Mining Site B', 'South Africa'); CREATE TABLE eia_schedule (site_id INT, eia_date DATE); INSERT INTO eia_schedule (site_id, eia_date) VALUES (1, '2020-06-01'), (1, '2021-06-01'), (2, '2020-12-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_name FROM mining_sites LEFT JOIN eia_schedule ON mining_sites.site_id = eia_schedule.site_id WHERE eia_schedule.eia_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND eia_schedule.site_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 교사들이 완료한 전문 개발 교육의 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE teacher_development (teacher_id INT, professional_development TEXT, hours INT, country TEXT); INSERT INTO teacher_development (teacher_id, professional_development, hours, country) VALUES (1, 'Open Pedagogy', 10, 'USA'), (2, 'Blended Learning', 5, 'Canada'), (3, 'Open Pedagogy', 7, 'Mexico'), (4, 'Blended Learning', 8, 'Brazil'), (5, 'Open Pedagogy', 6, 'France'), (6, 'Blended Learning', 9, 'Spain'), (7, 'Open Pedagogy', 12, 'Germany'), (8, 'Blended Learning', 4, 'UK');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(hours) FROM teacher_development GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: NYC 지하철 시스템에서 요금 데이터가 누락된 여행을 제외하고, 여행당 평균 수집된 요금은 얼마입니까?\n\nDDL statements:\nCREATE TABLE nyc_subway (trip_id INT, route_id VARCHAR(10), fare FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fare) FROM nyc_subway WHERE fare IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 다음 2년 이내에 특허가 만료되는 모든 군사 기술을 나열하시오.\n\nDDL statements:\nCREATE TABLE MilitaryPatents (ID INT, Technology TEXT, PatentExpirationDate DATE); INSERT INTO MilitaryPatents (ID, Technology, PatentExpirationDate) VALUES (1, 'Stealth Technology', '2024-01-01'), (2, 'Artificial Intelligence', '2023-12-31'), (3, 'Cybersecurity', '2026-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Technology FROM MilitaryPatents WHERE PatentExpirationDate BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 2 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 판매되지 않은 모든 제품을 나열합니다\n\nDDL statements:\nCREATE TABLE product_sales (sale_date DATE, product_id INT, sale_quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product_id FROM product_sales WHERE sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY product_id HAVING COUNT(*) = 0;"
    },
    {
        "instruction": "입력 텍스트: 아메리카 지역의 고객들의 평균 월간 데이터 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, name VARCHAR(100), region VARCHAR(50), monthly_data_usage DECIMAL(10,2)); INSERT INTO customers (customer_id, name, region, monthly_data_usage) VALUES (1, 'John Doe', 'Americas', 10), (2, 'Jane Smith', 'Europe', 15), (3, 'Alice Johnson', 'Asia-Pacific', 8), (4, 'Bob Brown', 'Americas', 12), (5, 'Charlie Davis', 'Europe', 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(customers.monthly_data_usage) FROM customers WHERE customers.region = 'Americas';"
    },
    {
        "instruction": "입력 텍스트: Airline2'가 운영하는 항공편의 최대 안전 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Flights (id INT, airline VARCHAR(50), safety_score INT); INSERT INTO Flights (id, airline, safety_score) VALUES (1, 'Airline1', 90), (2, 'Airline1', 95), (3, 'Airline2', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(safety_score) FROM Flights WHERE airline = 'Airline2';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 공급업체 Y에게 판매된 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE purchases (supplier_id VARCHAR(255), purchase_date DATE, quantity INT); INSERT INTO purchases (supplier_id, purchase_date, quantity) VALUES ('Y', '2022-01-01', 5), ('Y', '2022-01-02', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM purchases WHERE supplier_id = 'Y' AND YEAR(purchase_date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 7월에 비바이너리 회원의 평균 체중 측정값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Members (Id INT, Gender VARCHAR(10)); CREATE TABLE Measurements (Id INT, MemberId INT, Weight DECIMAL(5,2), Date DATE); INSERT INTO Members (Id, Gender) VALUES (1, 'Female'), (2, 'Male'), (3, 'Female'), (4, 'Non-binary'); INSERT INTO Measurements (Id, MemberId, Weight, Date) VALUES (1, 1, 80.5, '2022-07-01'), (2, 1, 81.3, '2022-07-15'), (3, 2, 90.2, '2022-06-30'), (4, 3, 70.0, '2022-07-03'), (5, 4, 75.6, '2022-07-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Weight) FROM Measurements INNER JOIN Members ON Measurements.MemberId = Members.Id WHERE DATE_FORMAT(Date, '%Y-%m') = '2022-07' AND Gender = 'Non-binary';"
    },
    {
        "instruction": "입력 텍스트: 화학 학과에 수여된 연구 보조금의 총 개수와 평균 보조금 액수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE grants(id INT, department VARCHAR(50), grant_amount FLOAT, grant_date DATE); INSERT INTO grants VALUES (1, 'Chemistry', 50000.0, '2018-01-01'); INSERT INTO grants VALUES (2, 'Biology', 75000.0, '2017-05-15'); INSERT INTO grants VALUES (3, 'Chemistry', 60000.0, '2020-07-22'); INSERT INTO grants VALUES (4, 'Physics', 100000.0, '2019-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, COUNT(*), AVG(grant_amount) FROM grants WHERE department = 'Chemistry' GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 각 부서의 평균 급여를 계산하세요\n\nDDL statements:\nCREATE TABLE departments (id INT, name VARCHAR(20)); CREATE TABLE workers (id INT, department INT, salary FLOAT); INSERT INTO departments (id, name) VALUES (1, 'Engineering'), (2, 'Marketing'), (3, 'Human Resources'); INSERT INTO workers (id, department, salary) VALUES (1, 1, 70000), (2, 1, 80000), (3, 2, 60000), (4, 2, 65000), (5, 3, 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, AVG(w.salary) AS avg_salary FROM departments d JOIN workers w ON d.id = w.department GROUP BY d.name;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 각 지역 치안센터에서 가장 빈번한 절도 유형과 절도 건수의 총합을 계산하세요.\n\nDDL statements:\nCREATE TABLE CommunityPolicingCenters (CenterID INT, CenterName VARCHAR(255)); CREATE TABLE TheftTypes (TheftTypeID INT, TheftType VARCHAR(255)); CREATE TABLE Thefts (TheftID INT, TheftTypeID INT, CenterID INT, TheftDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CenterName, TheftType, COUNT(TheftID) as TheftsCount FROM Thefts t JOIN CommunityPolicingCenters c ON t.CenterID = c.CenterID JOIN TheftTypes tt ON t.TheftTypeID = tt.TheftTypeID WHERE t.TheftDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY CenterName, TheftType ORDER BY CenterName, TheftsCount DESC;"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 생산된 비건 화장품이 아닌 제품의 평균 이산화탄소 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE company_info (company_id INT, company_name VARCHAR(255), country VARCHAR(255), is_vegan BOOLEAN, co2_emissions INT); INSERT INTO company_info (company_id, company_name, country, is_vegan, co2_emissions) VALUES (1, 'Paris Beauty', 'France', false, 500), (2, 'London Luxury', 'UK', true, 400), (3, 'Berlin Skincare', 'Germany', false, 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(co2_emissions) FROM company_info WHERE country IN ('France', 'UK', 'Germany') AND is_vegan = false;"
    },
    {
        "instruction": "입력 텍스트: 단일 달 중 가장 많은 고래 관찰 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE whale_sightings (month TEXT, number_of_sightings INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(number_of_sightings) FROM whale_sightings;"
    },
    {
        "instruction": "입력 텍스트: 샤리아 준수 저축 프로그램에 최근 가입한 새로운 고객들의 기록을 삽입하세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name VARCHAR(50), program VARCHAR(50)); CREATE TABLE savings_programs (program VARCHAR(50), is_shariah_compliant BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO clients (client_id, name, program) SELECT seq.client_id, 'Ahmed Al-Faqeeh', 'Shariah Savings' FROM (SELECT 1001 + ROW_NUMBER() OVER() AS client_id FROM savings_programs WHERE is_shariah_compliant = TRUE LIMIT 5) AS seq; INSERT INTO savings_programs (program, is_shariah_compliant) VALUES ('Shariah Savings', TRUE);"
    },
    {
        "instruction": "입력 텍스트: 초현실주의' 시대에 창작된 작품 중 현재 '파리' 박물관에 있는 작품은 몇 점입니까?\n\nDDL statements:\nCREATE TABLE Artworks (ArtworkID INT, Title VARCHAR(255), Period VARCHAR(255), MuseumID INT); INSERT INTO Artworks VALUES (1, 'The Persistence of Memory', 'Surrealism', 3); CREATE TABLE Museums (MuseumID INT, Name VARCHAR(255), Location VARCHAR(255)); INSERT INTO Museums VALUES (3, 'Centre Pompidou', 'Paris');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(Artworks.ArtworkID) FROM Artworks INNER JOIN Museums ON Artworks.MuseumID = Museums.MuseumID WHERE Artworks.Period = 'Surrealism' AND Museums.Location = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에 'military_equipment' 테이블의 equipment_id, type, 그리고 last_maintenance_date가 '2022-01-01'보다 큰 경우 Y/N으로 표시하는 'equipment_maintenance_summary'라는 새로운 뷰를 추가합니다.\n\nDDL statements:\nCREATE TABLE military_equipment (equipment_id INT, type VARCHAR(255), last_maintenance_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW equipment_maintenance_summary AS SELECT equipment_id, type, CASE WHEN last_maintenance_date > '2022-01-01' THEN 'Y' ELSE 'N' END as maintenance_indicator FROM military_equipment;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 판매되는 유기농 스킨케어 제품의 평균 가격이 주별로 어떻게 되는지 알려주세요.\n\nDDL statements:\nCREATE TABLE SkincareSales (product_name TEXT, price DECIMAL(5,2), sale_location TEXT); INSERT INTO SkincareSales (product_name, price, sale_location) VALUES ('Organic Facial Cleanser', 24.99, 'California'), ('Natural Moisturizer', 35.00, 'Texas'), ('Vegan Serum', 42.50, 'California'), ('Bio Toner', 29.99, 'New York'), ('Eco-friendly Sunscreen', 14.99, 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sale_location, AVG(price) FROM SkincareSales WHERE product_name LIKE '%organic%' GROUP BY sale_location;"
    },
    {
        "instruction": "입력 텍스트: 2019년 이전 날짜를 가진 재활용 센터 테이블의 모든 기록을 삭제하세요?\n\nDDL statements:\nCREATE TABLE RecyclingCenters (Center text, OperationDate date); INSERT INTO RecyclingCenters (Center, OperationDate) VALUES ('CenterD', '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM RecyclingCenters WHERE OperationDate < '2019-01-01';"
    },
    {
        "instruction": "입력 텍스트: 어느 주가 가장 높고 가장 낮은 의료 접근성 점수를 가지고 있나요?\n\nDDL statements:\nCREATE TABLE healthcare_access (id INT, state VARCHAR(2), score INT); INSERT INTO healthcare_access (id, state, score) VALUES (1, 'NY', 80), (2, 'CA', 85), (3, 'TX', 75), (4, 'FL', 70), (5, 'AK', 90), (6, 'MS', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, score FROM healthcare_access ORDER BY score DESC, state ASC LIMIT 1; SELECT state, score FROM healthcare_access ORDER BY score ASC, state ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 가장 많은 희토류 채굴을 한 상위 5개국과 그들의 총 희토류 생산량을 나열하세요.\n\nDDL statements:\nCREATE TABLE country_production (country VARCHAR(255), year INT, ree_production INT); INSERT INTO country_production (country, year, ree_production) VALUES ('China', 2021, 150000), ('USA', 2021, 16000), ('Australia', 2021, 24000), ('India', 2021, 6000), ('Brazil', 2021, 4000), ('Russia', 2021, 5000), ('Canada', 2021, 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(ree_production) AS total_production FROM country_production WHERE year = 2021 GROUP BY country ORDER BY total_production DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 남동부 지역에 위치한 공급업체의 식품 안전 위반 총 건수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Supplier (SupplierID INT, Location VARCHAR(20)); INSERT INTO Supplier VALUES (1, 'Southeast'), (2, 'Northwest'); CREATE TABLE Violation (ViolationID INT, SupplierID INT, ViolationType VARCHAR(20)); INSERT INTO Violation VALUES (1, 1, 'Sanitation'), (2, 1, 'Temperature'), (3, 2, 'Sanitation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Violation v JOIN Supplier s ON v.SupplierID = s.SupplierID WHERE s.Location = 'Southeast';"
    },
    {
        "instruction": "입력 텍스트: 육류, 유제품, 계란 중 어떤 조합이든 포함하는 요리의 총 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Dishes (DishID INT, DishName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Dishes (DishID, DishName, Type) VALUES (1, 'Beef Lasagna', 'Meat-dairy'), (2, 'Cheese Pizza', 'Dairy'), (3, 'Chicken Caesar Salad', 'Meat-dairy-eggs'), (4, 'Veggie Pizza', 'Dairy'), (5, 'Quiche', 'Dairy-eggs'), (6, 'Fried Rice', 'No animal products');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Dishes WHERE Type LIKE '%Meat%' OR Type LIKE '%Dairy%' OR Type LIKE '%Eggs%';"
    },
    {
        "instruction": "입력 텍스트: 베이 지역에 있는 지속 가능한 기능과 포괄적 주택 정책을 갖춘 부동산의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE properties (property_id INT, price DECIMAL(10,2), size INT, city VARCHAR(50), sustainable BOOLEAN, inclusive_policy BOOLEAN); INSERT INTO properties (property_id, price, size, city, sustainable, inclusive_policy) VALUES (1, 500000, 2000, 'Oakland', true, true), (2, 600000, 2500, 'San Francisco', false, false), (3, 450000, 1000, 'Oakland', true, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM properties WHERE city LIKE '%Bay Area%' AND sustainable = true AND inclusive_policy = true;"
    },
    {
        "instruction": "입력 텍스트: 웰빙 프로그램에 참여한 모든 선수들과 그들의 평균 나이를 나열하세요.\n\nDDL statements:\nCREATE TABLE athletes (athlete_id INT, name VARCHAR(255), age INT, program VARCHAR(255)); INSERT INTO athletes (athlete_id, name, age, program) VALUES (1, 'John Doe', 25, 'Wellbeing'), (2, 'Jane Smith', 30, 'Fitness'), (3, 'Alice Johnson', 35, 'Wellbeing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, AVG(age) FROM athletes WHERE program = 'Wellbeing' GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 미국에서 개인 기부자들에 의해 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50), AmountDonated float); INSERT INTO Donors (DonorID, DonorName, Country, AmountDonated) VALUES (1, 'John Doe', 'USA', 15000.00), (2, 'Jane Smith', 'Canada', 20000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(AmountDonated) FROM Donors WHERE Country = 'USA' AND YEAR(DonationDate) = 2020 AND DonorType = 'Individual';"
    },
    {
        "instruction": "입력 텍스트: 총 구매액이 가장 높은 상위 3명의 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, customer_name TEXT, purchases DECIMAL(10,2)); INSERT INTO customers (customer_id, customer_name, purchases) VALUES (1, 'John Smith', 1500.00), (2, 'Jane Doe', 2000.00), (3, 'Bob Johnson', 1000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customer_name, purchases FROM customers ORDER BY purchases DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 특정 국가에서 만들어진 제품으로부터 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales(sale_id INT, product_id INT, revenue DECIMAL(10,2)); CREATE TABLE products(product_id INT, country_of_origin VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales.revenue) FROM sales JOIN products ON sales.product_id = products.product_id WHERE products.country_of_origin = 'India';"
    },
    {
        "instruction": "입력 텍스트: Rainbow' 주의 주택 및 사회 복지 서비스에 대한 총 예산 배정액과 해당 주의 총 인구는 얼마인가요?\n\nDDL statements:\nCREATE TABLE state_info (state VARCHAR(20), population INT); INSERT INTO state_info (state, population) VALUES ('Rainbow', 5500000); CREATE TABLE state_budget (state VARCHAR(20), service VARCHAR(20), allocation INT); INSERT INTO state_budget (state, service, allocation) VALUES ('Rainbow', 'Housing', 1200000), ('Rainbow', 'Social Welfare', 1800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sb.allocation), si.population FROM state_budget sb JOIN state_info si ON sb.state = si.state WHERE sb.service IN ('Housing', 'Social Welfare') AND sb.state = 'Rainbow';"
    },
    {
        "instruction": "입력 텍스트: 각 회사별 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Company (id INT, name VARCHAR(50), industry VARCHAR(50), founding_year INT); INSERT INTO Company (id, name, industry, founding_year) VALUES (1, 'Acme Inc', 'Tech', 2010); INSERT INTO Company (id, name, industry, founding_year) VALUES (2, 'Bravo Corp', 'Finance', 2005); CREATE TABLE Investments (id INT, company_id INT, investment_type VARCHAR(50), investment_amount INT); INSERT INTO Investments (id, company_id, investment_type, investment_amount) VALUES (1, 1, 'Seed', 1000000); INSERT INTO Investments (id, company_id, investment_type, investment_amount) VALUES (2, 1, 'Series A', 5000000); INSERT INTO Investments (id, company_id, investment_type, investment_amount) VALUES (3, 2, 'Seed', 750000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, SUM(i.investment_amount) as total_investment FROM Company c JOIN Investments i ON c.id = i.company_id GROUP BY c.name;"
    },
    {
        "instruction": "입력 텍스트: 암스테르담에 새로운 친환경 호텔을 추가하세요.\n\nDDL statements:\nCREATE TABLE eco_hotels (hotel_id INT, name TEXT, city TEXT, rating FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO eco_hotels (hotel_id, name, city, rating) VALUES (3, 'Eco Hotel Amsterdam', 'Amsterdam', 4.8);"
    },
    {
        "instruction": "입력 텍스트: 각 제품별 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investments (client_id INT, product VARCHAR(50), value DECIMAL(10,2)); INSERT INTO investments (client_id, product, value) VALUES (1, 'Stocks', 25000.00); INSERT INTO investments (client_id, product, value) VALUES (1, 'Bonds', 15000.00); INSERT INTO investments (client_id, product, value) VALUES (2, 'Stocks', 30000.00); INSERT INTO investments (client_id, product, value) VALUES (2, 'Mutual Funds', 10000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product, SUM(value) as total_investment FROM investments GROUP BY product;"
    },
    {
        "instruction": "입력 텍스트: 다음 선박에 대한 새로운 기록을 Vessel 테이블에 추가하세요: 'Tidal Titan' (유형: 조석, 최대 용량: 500톤), 'Geothermal Galleon' (유형: 지열, 최대 용량: 700톤)\n\nDDL statements:\nCREATE TABLE Vessel (Id INT IDENTITY(1,1) PRIMARY KEY, Name VARCHAR(50), Type VARCHAR(50), MaxCapacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Vessel (Name, Type, MaxCapacity) VALUES ('Tidal Titan', 'Tidal', 500), ('Geothermal Galleon', 'Geothermal', 700);"
    },
    {
        "instruction": "입력 텍스트: 2022년 3월에 심박수 모니터를 착용한 사용자는 몇 명입니까?\n\nDDL statements:\nCREATE SCHEMA wearables; CREATE TABLE device_usage (user_id INT, device VARCHAR(50), usage_date DATE); INSERT INTO device_usage VALUES (1, 'Heart Rate Monitor', '2022-03-15'), (2, 'Smartwatch', '2022-03-20'), (3, 'Heart Rate Monitor', '2022-03-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT user_id) FROM wearables.device_usage WHERE device = 'Heart Rate Monitor' AND usage_date >= '2022-03-01' AND usage_date <= '2022-03-31';"
    },
    {
        "instruction": "입력 텍스트: 레스토랑 \"Green Garden\"의 지속 가능성 등급을 업데이트하세요\n\nDDL statements:\nCREATE TABLE restaurants (id INT, name VARCHAR(255), location VARCHAR(255), sustainability_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE restaurants SET sustainability_rating = 5 WHERE name = 'Green Garden';"
    },
    {
        "instruction": "입력 텍스트: 미국으로의 란타넘 선적 횟수를 계산하세요. 단, 생산 능력이 1000톤 이상인 광산에서 나온 선적만 해당됩니다.\n\nDDL statements:\nCREATE TABLE LanthanumShipments (id INT PRIMARY KEY, mine_id INT, shipment_year INT, quantity INT, FOREIGN KEY (mine_id) REFERENCES LanthanumMines(id)); CREATE TABLE LanthanumMines (id INT PRIMARY KEY, name VARCHAR(100), production_capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM LanthanumShipments INNER JOIN LanthanumMines ON LanthanumShipments.mine_id = LanthanumMines.id WHERE LanthanumShipments.country = 'US' AND LanthanumMines.production_capacity > 1000;"
    },
    {
        "instruction": "입력 텍스트: 모든 회원의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA fitness; USE fitness; CREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(50), age INT, membership VARCHAR(20)); INSERT INTO members (member_id, name, age, membership) VALUES (1, 'John Doe', 30, 'gold'), (2, 'Jane Smith', 40, 'silver'), (3, 'Mike Johnson', 50, 'platinum'), (4, 'Alice Davis', 35, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM members;"
    },
    {
        "instruction": "입력 텍스트: 해양 생물 종류별 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_species (species_id INT, species_name VARCHAR(255), species_type VARCHAR(255)); INSERT INTO marine_species (species_id, species_name, species_type) VALUES (1, 'Blue Whale', 'Mammal'), (2, 'Clownfish', 'Fish'), (3, 'Green Sea Turtle', 'Reptile');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species_type, COUNT(*) FROM marine_species GROUP BY species_type;"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다 출신 플레이어들의 게임 장르별 평균 게임 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, GameGenre VARCHAR(255), GameDuration FLOAT, Country VARCHAR(255)); INSERT INTO Players (PlayerID, GameGenre, GameDuration, Country) VALUES (1, 'RPG', 150.5, 'USA'), (2, 'FPS', 120.3, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT GameGenre, AVG(GameDuration) as AvgGameDuration  FROM Players WHERE Country IN ('USA', 'Canada') GROUP BY GameGenre, Country WITH ROLLUP;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 제조된 각 우주선의 임무 수\n\nDDL statements:\nCREATE TABLE Spacecraft_Manufacturing(name VARCHAR(50), mass FLOAT, country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW Spacecraft_Missions AS SELECT name, COUNT(*) as missions FROM Spacecraft_Manufacturing JOIN Missions ON Spacecraft_Manufacturing.name = Missions.spacecraft WHERE Spacecraft_Manufacturing.country = 'USA' GROUP BY name;SELECT * FROM Spacecraft_Missions;"
    },
    {
        "instruction": "입력 텍스트: 총 직원 수가 500명을 초과하는데 성공적인 단체 교섭을 한 적이 있는 직장의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE workplaces (id INT, name TEXT, location TEXT, sector TEXT, total_employees INT, union_members INT, successful_cb BOOLEAN, cb_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT id) FROM workplaces WHERE successful_cb = TRUE AND total_employees > 500;"
    },
    {
        "instruction": "입력 텍스트: 공연 예술 이벤트의 총 참석자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists events (id INT, name VARCHAR(255), type VARCHAR(255), attendees INT); INSERT INTO events (id, name, type, attendees) VALUES (1, 'Symphony', 'Performing Arts', 250), (2, 'Dance Recital', 'Performing Arts', 180), (3, 'Painting Exhibit', 'Visual Arts', 300), (4, 'Sculpture Exhibit', 'Visual Arts', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(attendees) FROM events WHERE type = 'Performing Arts';"
    },
    {
        "instruction": "입력 텍스트: LGBTQ+로 정체성을 밝힌 개인이 창립한 스타트업의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, founding_year INT, founder_identifies_as_lgbtq BOOLEAN); INSERT INTO companies (id, name, founding_year, founder_identifies_as_lgbtq) VALUES (1, 'Delta Startups', 2020, true); INSERT INTO companies (id, name, founding_year, founder_identifies_as_lgbtq) VALUES (2, 'Epsilon Enterprises', 2018, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies WHERE founder_identifies_as_lgbtq = true;"
    },
    {
        "instruction": "입력 텍스트: CityData' 테이블에서 모든 주민들과 그들의 상세 정보를 나열하세요.\n\nDDL statements:\nCREATE TABLE CityData (resident_id INT, age INT, gender VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM CityData;"
    },
    {
        "instruction": "입력 텍스트: 2025년 독일의 매립지 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE country_landfill_capacity (country VARCHAR(20), year INT, capacity INT); INSERT INTO country_landfill_capacity (country, year, capacity) VALUES ('Germany', 2025, 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT capacity FROM country_landfill_capacity WHERE country = 'Germany' AND year = 2025;"
    },
    {
        "instruction": "입력 텍스트: 아프리카' 지역에서 탄소 강도가 가장 낮은 상위 2개국의 재생 가능 에너지 소비량(%)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE country_renewable_energy (country VARCHAR(100), region VARCHAR(100), renewable_energy_consumption FLOAT, carbon_intensity FLOAT); INSERT INTO country_renewable_energy (country, region, renewable_energy_consumption, carbon_intensity) VALUES ('South Africa', 'Africa', 40.0, 0.5), ('Egypt', 'Africa', 35.0, 0.6), ('Nigeria', 'Africa', 25.0, 0.7), ('Kenya', 'Africa', 50.0, 0.4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, renewable_energy_consumption FROM (SELECT country, renewable_energy_consumption, DENSE_RANK() OVER (ORDER BY carbon_intensity ASC) AS rank FROM country_renewable_energy WHERE region = 'Africa') subquery WHERE rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: 남극 지역의 지난 10년간 물개 인구 변화는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE seal_population (year INT, region VARCHAR(255), population INT); INSERT INTO seal_population (year, region, population) VALUES (2011, 'Antarctic', 1200000), (2012, 'Antarctic', 1180000), (2013, 'Antarctic', 1160000), (2014, 'Antarctic', 1150000), (2015, 'Antarctic', 1170000), (2016, 'Antarctic', 1190000), (2017, 'Antarctic', 1210000), (2018, 'Antarctic', 1230000), (2019, 'Antarctic', 1250000), (2020, 'Antarctic', 1270000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, population, LAG(population) OVER (ORDER BY year) as prev_population, population - LAG(population) OVER (ORDER BY year) as population_change FROM seal_population WHERE region = 'Antarctic';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아와 뉴멕시코의 원주민 커뮤니티를 위한 문화 프로그램이 받은 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Funding (id INT, state VARCHAR(2), program VARCHAR(20), amount FLOAT); INSERT INTO Funding (id, state, program, amount) VALUES (1, 'CA', 'Native Art', 150000.00), (2, 'NM', 'Pueblo Heritage', 200000.00), (3, 'CA', 'Tribal Music', 120000.00); CREATE TABLE Communities (id INT, state VARCHAR(2), indigenous VARCHAR(5)); INSERT INTO Communities (id, state, indigenous) VALUES (1, 'CA', 'yes'), (2, 'NM', 'yes'), (3, 'CA', 'yes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM Funding INNER JOIN Communities ON Funding.state = Communities.state WHERE Communities.indigenous = 'yes' AND Funding.state IN ('CA', 'NM');"
    },
    {
        "instruction": "입력 텍스트: \"hospitals\" 테이블에서 \"state\"가 \"TX\"인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE hospitals (id INT PRIMARY KEY, name TEXT, state TEXT, total_beds INT); INSERT INTO hospitals (id, name, state, total_beds) VALUES (1, 'Hospital 1', 'TX', 300), (2, 'Hospital 2', 'CA', 400), (3, 'Hospital 3', 'NY', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM hospitals WHERE state = 'TX';"
    },
    {
        "instruction": "입력 텍스트: 가장 많이 이용된 상위 5개 구간의 평균 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE trip_segments (segment_id INT, route_id INT, fare DECIMAL(5,2), passenger_count INT); INSERT INTO trip_segments (segment_id, route_id, fare, passenger_count) VALUES (1, 101, 2.50, 1000), (2, 101, 2.00, 1200), (3, 102, 3.00, 800), (4, 103, 1.50, 1500), (5, 104, 4.00, 600), (6, 105, 1.75, 500), (7, 106, 2.25, 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fare) FROM (SELECT fare, ROW_NUMBER() OVER (ORDER BY passenger_count DESC) rn FROM trip_segments) t WHERE rn <= 5;"
    },
    {
        "instruction": "입력 텍스트: 2023년에 50개 이상의 방을 가진 친환경 호텔에서 가장 높은 수익을 올린 상위 2개 국가를 확인하세요.\n\nDDL statements:\nCREATE TABLE Hotels (id INT, name TEXT, country TEXT, city TEXT, rooms INT, eco_certified BOOLEAN, revenue DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(revenue) AS total_revenue FROM Hotels WHERE eco_certified = TRUE AND rooms > 50 GROUP BY country ORDER BY total_revenue DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 최근 90일 동안 각 국가의 낮은 심각도 취약점 비율은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, date DATE, severity VARCHAR(10), ip VARCHAR(15), country VARCHAR(30)); INSERT INTO vulnerabilities (id, date, severity, ip, country) VALUES (1, '2021-01-01', 'low', '192.168.1.100', 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, 100.0 * COUNT(*) / (SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'low' AND date >= (CURRENT_DATE - INTERVAL '90' DAY)) as percentage FROM vulnerabilities WHERE severity = 'low' AND date >= (CURRENT_DATE - INTERVAL '90' DAY) GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 캘리포니아와 뉴욕에서 실시된 건강 형평성 지표 평가는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE HealthEquityMetrics (EvaluationID INT, State VARCHAR(255), EvaluationDate DATE); INSERT INTO HealthEquityMetrics (EvaluationID, State, EvaluationDate) VALUES (1, 'California', '2021-12-31'), (2, 'Texas', '2022-03-15'), (3, 'New York', '2022-05-05'), (4, 'Florida', '2022-07-01'), (5, 'Illinois', '2022-09-12'), (6, 'California', '2022-11-01'), (7, 'New York', '2022-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, COUNT(*) as EvaluationCount FROM HealthEquityMetrics WHERE State IN ('California', 'New York') AND EvaluationDate >= DATEADD(year, -1, GETDATE()) GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: 2021년 군사 기술 연구 개발에 배정된 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rnd_budget (fiscal_year INT, amount INT, category TEXT);INSERT INTO rnd_budget (fiscal_year, amount, category) VALUES (2019, 2000000, 'Military Technology Research and Development');INSERT INTO rnd_budget (fiscal_year, amount, category) VALUES (2020, 2500000, 'Military Technology Research and Development');INSERT INTO rnd_budget (fiscal_year, amount, category) VALUES (2021, 3000000, 'Military Technology Research and Development');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT amount FROM rnd_budget WHERE fiscal_year = 2021 AND category = 'Military Technology Research and Development';"
    },
    {
        "instruction": "입력 텍스트: 어떤 언어 보존 프로젝트가 가장 적은 참여도를 가지고 있나요?\n\nDDL statements:\nCREATE TABLE language_projects (id INT, name TEXT, language TEXT, engagement INT); INSERT INTO language_projects (id, name, language, engagement) VALUES (1, 'Project A', 'Language1', 5000), (2, 'Project B', 'Language2', 3000), (3, 'Project C', 'Language3', 7000), (4, 'Project D', 'Language1', 1000), (5, 'Project E', 'Language3', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT language, MIN(engagement) FROM language_projects GROUP BY language;"
    },
    {
        "instruction": "입력 텍스트: online_platform' 데이터베이스의 첫 10일 동안, 날짜별로 등록된 사용자 수와 누적 합계는 얼마인가요?\n\nDDL statements:\nCREATE TABLE online_platform (id INT, user_id INT, registration_date DATE); INSERT INTO online_platform (id, user_id, registration_date) VALUES (1, 1001, '2022-01-01'); INSERT INTO online_platform (id, user_id, registration_date) VALUES (2, 1002, '2022-01-01'); INSERT INTO online_platform (id, user_id, registration_date) VALUES (3, 1003, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT registration_date, COUNT(user_id) OVER (ORDER BY registration_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_total FROM online_platform WHERE registration_date <= '2022-01-10';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 '질소 비료 생산' 공정의 평균 폐기물 발생률(kg/일)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE manufacturing_processes (process_id INT, name TEXT); CREATE TABLE waste_generation (process_id INT, waste_amount INT, generation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT manufacturing_processes.name, AVG(waste_generation.waste_amount/1000.0/days_in_period) FROM manufacturing_processes INNER JOIN waste_generation ON manufacturing_processes.process_id = waste_generation.process_id WHERE manufacturing_processes.name = 'Nitrogen Fertilizer Production' AND waste_generation.generation_date > DATEADD(quarter, -1, GETDATE()) GROUP BY manufacturing_processes.name;"
    },
    {
        "instruction": "입력 텍스트: NY' 지역에서 'Auto' 보험 유형에 대한 평균 청구 금액을 계산하세요.\n\nDDL statements:\nCREATE TABLE claims (id INT, policy_id INT, claim_amount FLOAT, claim_date DATE); INSERT INTO claims (id, policy_id, claim_amount, claim_date) VALUES (1, 101, 500, '2022-01-01'), (2, 102, 800, '2022-02-01'), (3, 103, 300, '2022-03-01'); CREATE TABLE policies (id INT, policy_type TEXT, state TEXT); INSERT INTO policies (id, policy_type, state) VALUES (101, 'Auto', 'NY'), (102, 'Home', 'NY'), (103, 'Health', 'NJ');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(claim_amount) as avg_claim_amount FROM claims JOIN policies ON claims.policy_id = policies.id WHERE policies.policy_type = 'Auto' AND policies.state = 'NY';"
    },
    {
        "instruction": "입력 텍스트: 각 스포츠별 티켓 판매로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sports (sport VARCHAR(255)); CREATE TABLE ticket_prices (sport VARCHAR(255), price DECIMAL(5,2)); CREATE TABLE ticket_sales (sport VARCHAR(255), tickets INT); INSERT INTO sports VALUES ('Basketball'), ('Football'), ('Hockey'), ('Soccer'); INSERT INTO ticket_prices VALUES ('Basketball', 80.50), ('Basketball', 75.20), ('Football', 120.00), ('Football', 110.50), ('Hockey', 65.00), ('Hockey', 70.00), ('Soccer', 40.00), ('Soccer', 45.00); INSERT INTO ticket_sales VALUES ('Basketball', 2500), ('Basketball', 3000), ('Football', 5000), ('Football', 6000), ('Hockey', 2000), ('Hockey', 2500), ('Soccer', 1000), ('Soccer', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sport, SUM(price * tickets) as total_revenue FROM ticket_prices INNER JOIN ticket_sales ON ticket_prices.sport = ticket_sales.sport GROUP BY sport;"
    },
    {
        "instruction": "입력 텍스트: 남수단의 학생당 평균 교육 지원금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE education_aid (id INT, country VARCHAR(255), student_id INT, amount FLOAT); INSERT INTO education_aid (id, country, student_id, amount) VALUES (1, 'South Sudan', 1001, 150), (2, 'South Sudan', 1002, 120), (3, 'Syria', 1003, 100); CREATE TABLE students (id INT, country VARCHAR(255)); INSERT INTO students (id, country) VALUES (1001, 'South Sudan'), (1002, 'South Sudan'), (1003, 'Syria');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM education_aid ea JOIN students s ON ea.student_id = s.id WHERE s.country = 'South Sudan';"
    },
    {
        "instruction": "입력 텍스트: 남부 지역에서 판매된 메뉴 아이템으로부터 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE menu (menu_id INT, menu_name TEXT, menu_type TEXT, price DECIMAL, daily_sales INT, region TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * daily_sales) AS total_revenue FROM menu WHERE region = 'Southern';"
    },
    {
        "instruction": "입력 텍스트: 2020년 농촌 인프라 프로젝트의 최대 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE rural_infrastructure (id INT, year INT, project VARCHAR(50), budget FLOAT); INSERT INTO rural_infrastructure (id, year, project, budget) VALUES (1, 2018, 'Road Construction', 300000.00), (2, 2019, 'Water Supply', 500000.00), (3, 2020, 'Electrification', 700000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(budget) FROM rural_infrastructure WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 단일 기부금으로 1000달러 이상 기부한 모든 기부자를 나열하세요.\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(255)); INSERT INTO donors (id, name) VALUES (1, 'John'), (2, 'Jane'), (3, 'Mike'), (4, 'Lucy'); CREATE TABLE donations (id INT, donor_id INT, amount DECIMAL(10,2), donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 1, 500, '2021-01-01'), (2, 2, 1500, '2021-02-01'), (3, 3, 750, '2021-03-01'), (4, 4, 250, '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name FROM donors d JOIN donations don ON d.id = don.donor_id WHERE don.amount > 1000;"
    },
    {
        "instruction": "입력 텍스트: 기술' 업계에서 노조에 가입된 근로자의 최소 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Workers (EmployeeID INT, Industry VARCHAR(20), UnionMember BOOLEAN, Salary FLOAT); INSERT INTO Workers (EmployeeID, Industry, UnionMember, Salary) VALUES (1, 'Technology', true, 75000.0), (2, 'Technology', true, 76000.0), (3, 'Technology', false, 73000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Salary) FROM Workers WHERE Industry = 'Technology' AND UnionMember = true;"
    },
    {
        "instruction": "입력 텍스트: 스페인에서 제작된 영화들 중에서 얼마나 많은 독특한 장르들이 있습니까?\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(255), rating FLOAT, release_year INT, country VARCHAR(50), genre VARCHAR(50)); INSERT INTO movies (id, title, rating, release_year, country, genre) VALUES (1, 'Movie1', 7.5, 2010, 'Spain', 'Action'), (2, 'Movie2', 8.2, 2012, 'Spain', 'Drama'), (3, 'Movie3', 6.8, 2015, 'Spain', 'Comedy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT genre) FROM movies WHERE country = 'Spain';"
    },
    {
        "instruction": "입력 텍스트: 각 레스토랑의 평균 일일 매출, 전체 회사 매출, 그리고 가장 많이 벌고 가장 적게 번 레스토랑 간의 매출 차이를 계산하세요.\n\nDDL statements:\nCREATE TABLE Sales (SaleID int, RestaurantID int, SaleDate date, SaleAmount numeric(10, 2)); INSERT INTO Sales (SaleID, RestaurantID, SaleDate, SaleAmount) VALUES (1, 1, '2021-01-01', 5000); INSERT INTO Sales (SaleID, RestaurantID, SaleDate, SaleAmount) VALUES (2, 1, '2021-01-02', 6000); INSERT INTO Sales (SaleID, RestaurantID, SaleDate, SaleAmount) VALUES (3, 2, '2021-01-01', 7000); INSERT INTO Sales (SaleID, RestaurantID, SaleDate, SaleAmount) VALUES (4, 2, '2021-01-02', 8000); CREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(50), City varchar(50)); INSERT INTO Restaurants (RestaurantID, RestaurantName, City) VALUES (1, 'The Green Garden', 'San Francisco'); INSERT INTO Restaurants (RestaurantID, RestaurantName, City) VALUES (2, 'Healthy Bites', 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(S.SaleAmount) AS AverageDailyRevenue, SUM(S.SaleAmount) AS CompanyRevenue, MAX(R.TotalRevenue) - MIN(R.TotalRevenue) AS RevenueDifference FROM Sales S JOIN (SELECT RestaurantID, SUM(SaleAmount) AS TotalRevenue FROM Sales GROUP BY RestaurantID) R ON S.RestaurantID = R.RestaurantID;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 출신 작가들이 만든 작품 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE ArtPieces (ArtPieceID INT PRIMARY KEY, ArtPieceName VARCHAR(100), CreationDate DATE, ArtistID INT); INSERT INTO ArtPieces (ArtPieceID, ArtPieceName, CreationDate, ArtistID) VALUES (1, 'Aboriginal Artwork', '1900-01-01', 1); INSERT INTO ArtPieces (ArtPieceID, ArtPieceName, CreationDate, ArtistID) VALUES (2, 'Maori Artwork', '1800-01-01', 2); CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(100), Age INT, Nationality VARCHAR(50)); INSERT INTO Artists (ArtistID, ArtistName, Age, Nationality) VALUES (1, 'Amy Johnson', 26, 'Australian'); INSERT INTO Artists (ArtistID, ArtistName, Age, Nationality) VALUES (2, 'Te Rauparaha', 56, 'New Zealander');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtPieceName FROM ArtPieces JOIN Artists ON ArtPieces.ArtistID = Artists.ArtistID WHERE Artists.Nationality = 'Australian' OR Artists.Nationality = 'New Zealander';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 해결된 정신 건강 동등 위반 사건의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mental_health_parity (id INT PRIMARY KEY, incident_date DATE, incident_description TEXT, location TEXT, resolved BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100 * SUM(resolved)/COUNT(*) FROM mental_health_parity WHERE incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 각 대륙별로 군대 병과의 총 인원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE MilitaryPersonnel (PersonnelID INT, PersonnelBranch VARCHAR(20), PersonnelContinent VARCHAR(30), PersonnelCount INT); INSERT INTO MilitaryPersonnel (PersonnelID, PersonnelBranch, PersonnelContinent, PersonnelCount) VALUES (1, 'Army', 'Europe', 500000), (2, 'Navy', 'Africa', 350000), (3, 'Air Force', 'North America', 20000), (4, 'Marines', 'Asia', 25000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT PersonnelBranch, PersonnelContinent, SUM(PersonnelCount) as Total FROM MilitaryPersonnel GROUP BY PersonnelBranch, PersonnelContinent;"
    },
    {
        "instruction": "입력 텍스트: 각 지구에서 가장 흔한 유형의 긴급 대응은 무엇인가요?\n\nDDL statements:\nCREATE TABLE emergency_responses (id INT, district_name VARCHAR(20), response_type VARCHAR(20)); INSERT INTO emergency_responses (id, district_name, response_type) VALUES (1, 'District1', 'Fire'), (2, 'District1', 'EMS'), (3, 'District2', 'Police');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_name, response_type, COUNT(*) AS count FROM emergency_responses GROUP BY district_name, response_type ORDER BY district_name, count DESC;"
    },
    {
        "instruction": "입력 텍스트: Mateo Davis'가 수행한 모든 거래와 그 세부 사항을 나열합니다.\n\nDDL statements:\nCREATE TABLE transactions (id INT PRIMARY KEY, account_id INT, type VARCHAR(255), amount DECIMAL(10,2), date DATE, client_id INT); INSERT INTO transactions (id, account_id, type, amount, date, client_id) VALUES (1, 1, 'Deposit', 2000.00, '2021-01-01', 1001), (2, 2, 'Withdrawal', 1500.00, '2021-02-10', 1002), (3, 3, 'Transfer', 500.00, '2021-03-20', 1003), (4, 1003, 'Withdrawal', 1000.00, '2021-04-01', 1005), (5, 1002, 'Withdrawal', 500.00, '2021-05-15', 1006), (6, 5, 'Deposit', 1000.00, '2021-06-01', 1004), (7, 4, 'Payment', 500.00, '2021-06-15', 1004);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM transactions WHERE client_id = (SELECT id FROM clients WHERE name = 'Mateo Davis');"
    },
    {
        "instruction": "입력 텍스트: 각 장르별로 내림차순으로 총 수익이 얼마인가요?\n\nDDL statements:\nCREATE TABLE MusicGenre (GenreID INT, GenreName VARCHAR(50), Revenue DECIMAL(10,2)); INSERT INTO MusicGenre (GenreID, GenreName, Revenue) VALUES (1, 'Pop', 500000.00), (2, 'Rock', 450000.00), (3, 'Jazz', 300000.00), (4, 'Country', 250000.00), (5, 'Blues', 200000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT GenreName, SUM(Revenue) OVER (ORDER BY GenreName DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalRevenue FROM MusicGenre;"
    },
    {
        "instruction": "입력 텍스트: 2022년 기술 산업에서 구인 게시물이 가장 많은 상위 5개 도시는 무엇인가요?\n\nDDL statements:\nCREATE TABLE job_postings (id INT, city VARCHAR(50), industry VARCHAR(50), posts INT, year INT); INSERT INTO job_postings (id, city, industry, posts, year) VALUES (1, 'Seattle', 'Tech', 3000, 2022), (2, 'San Francisco', 'Tech', 4000, 2022), (3, 'New York', 'Tech', 5000, 2022), (4, 'London', 'Tech', 2500, 2022), (5, 'Berlin', 'Tech', 1500, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(posts) as total_posts FROM job_postings WHERE industry = 'Tech' AND year = 2022 GROUP BY city ORDER BY total_posts DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에는 법률 지원 제공자가 몇 명이나 있습니까?\n\nDDL statements:\nCREATE TABLE legal_aid_providers (provider_id INT, state VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM legal_aid_providers WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 성별에 따른 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE DonorGender (DonorID INT, DonorGender VARCHAR(10)); INSERT INTO DonorGender (DonorID, DonorGender) VALUES (1, 'Male'), (2, 'Female'), (3, 'Non-binary'), (4, 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorGender, SUM(DonationAmount) FROM Donations d JOIN DonorGender dg ON d.DonorID = dg.DonorID GROUP BY DonorGender;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 판매된 매트 립스틱의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ratings (product VARCHAR(255), rating INT, country VARCHAR(255)); INSERT INTO ratings (product, rating, country) VALUES ('Matte Lipstick', 4, 'US'), ('Liquid Lipstick', 5, 'Canada'), ('Lip Balm', 3, 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) as avg_rating FROM ratings WHERE product = 'Matte Lipstick' AND country = 'US';"
    },
    {
        "instruction": "입력 텍스트: 각 차량 유형별로 수집된 평균 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Fares (id INT, vehicle_type VARCHAR(10), fare DECIMAL(5,2)); INSERT INTO Fares (id, vehicle_type, fare) VALUES (1, 'Bus', 2.50), (2, 'Tram', 3.00), (3, 'Train', 5.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_type, AVG(fare) FROM Fares GROUP BY vehicle_type;"
    },
    {
        "instruction": "입력 텍스트: 최근 3년 이내에 설립된 LGBTQ+ 창업자가 있는 회사들이 모금한 자금의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founding_year INT, founder_gender TEXT, founder_lgbtq BOOLEAN); INSERT INTO company (id, name, founding_year, founder_gender, founder_lgbtq) VALUES (1, 'GreenTech Inc', 2021, 'non-binary', true); INSERT INTO company (id, name, founding_year, founder_gender, founder_lgbtq) VALUES (2, 'Fintech Boost', 2019, 'male', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding_raised) FROM investment_rounds INNER JOIN company ON investment_rounds.company_id = company.id WHERE company.founding_year >= (SELECT YEAR(CURRENT_DATE()) - 3) AND company.founder_lgbtq = true;"
    },
    {
        "instruction": "입력 텍스트: ABC123' 항목의 'inventory' 총 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE inventory (item VARCHAR(50), value FLOAT); INSERT INTO inventory (item, value) VALUES ('ABC123', 2000.00), ('DEF456', 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT value FROM inventory WHERE item = 'ABC123';"
    },
    {
        "instruction": "입력 텍스트: 각 주별 커뮤니티 보건 근로자의 총 수와 문화 역량 훈련 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE community_health_workers (id INT PRIMARY KEY, state VARCHAR(20), worker_count INT); CREATE TABLE cultural_competency_training (id INT PRIMARY KEY, state VARCHAR(20), training_hours INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.state, SUM(c.worker_count) AS worker_count, SUM(t.training_hours) AS training_hours FROM community_health_workers c INNER JOIN cultural_competency_training t ON c.state = t.state GROUP BY c.state;"
    },
    {
        "instruction": "입력 텍스트: HousingAffordability 테이블에 날짜 컬럼을 추가하세요.\n\nDDL statements:\nCREATE TABLE HousingAffordability (id INT PRIMARY KEY, city VARCHAR(50), state VARCHAR(50), index FLOAT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: ALTER TABLE HousingAffordability ADD COLUMN date DATE;"
    },
    {
        "instruction": "입력 텍스트: 다양한 설명 가능성 기법을 사용하는 모델들의 공정성 점수 분포는 어떻게 되나요?\n\nDDL statements:\n CREATE TABLE fairness_scores (id INT, model_name VARCHAR(50), explainability_technique VARCHAR(50), fairness_score FLOAT); INSERT INTO fairness_scores (id, model_name, explainability_technique, fairness_score) VALUES (1, 'ModelA', 'SHAP', 0.88), (2, 'ModelB', 'LIME', 0.91), (3, 'ModelC', 'TreeExplainer', 0.85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성:  SELECT explainability_technique, AVG(fairness_score) as avg_fairness_score FROM fairness_scores GROUP BY explainability_technique;"
    },
    {
        "instruction": "입력 텍스트: workforce_diversity' 테이블에 'Aboriginal' 성별 그룹에 대해 직원 수가 120명인 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE workforce_diversity (id INT, gender_group VARCHAR(30), num_employees INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO workforce_diversity (gender_group, num_employees) VALUES ('Aboriginal', 120);"
    },
    {
        "instruction": "입력 텍스트: 동북부 지역에서 활성 상태로 3개월 미만인 모든 광대역 구독자와 그들의 구독 시작 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE subscribers(id INT, subscription_start_date DATE, region VARCHAR(10), subscription_type VARCHAR(10)); INSERT INTO subscribers VALUES (1, '2022-08-15', 'Northeast', 'broadband');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT subscribers.id, subscribers.subscription_start_date FROM subscribers WHERE subscribers.region = 'Northeast' AND subscribers.subscription_type = 'broadband' AND DATEDIFF(CURDATE(), subscribers.subscription_start_date) < 90;"
    },
    {
        "instruction": "입력 텍스트: 중국'에서 설치된 재생 가능 에너지 원의 총 용량(GW)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE renewable_energy (energy_id INT, country VARCHAR(50), capacity FLOAT); INSERT INTO renewable_energy (energy_id, country, capacity) VALUES (1, 'China', 1200.5), (2, 'USA', 800.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM renewable_energy WHERE country = 'China';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 텍사스 주 정부에서 채택한 근거 기반 정책은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE evidence_based_policies (state VARCHAR(255), year INT, num_policies INT); INSERT INTO evidence_based_policies (state, year, num_policies) VALUES ('Texas', 2018, 15); INSERT INTO evidence_based_policies (state, year, num_policies) VALUES ('Texas', 2019, 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_policies) FROM evidence_based_policies WHERE state = 'Texas' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 각 회사별로 제조된 우주선의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Spacecraft_Manufacturers (Company VARCHAR(50), Spacecraft_Name VARCHAR(50), Manufacturing_Date DATE); INSERT INTO Spacecraft_Manufacturers (Company, Spacecraft_Name, Manufacturing_Date) VALUES ('SpaceX', 'Starship', '2022-01-01'); INSERT INTO Spacecraft_Manufacturers (Company, Spacecraft_Name, Manufacturing_Date) VALUES ('Blue Origin', 'New Glenn', '2021-08-01'); INSERT INTO Spacecraft_Manufacturers (Company, Spacecraft_Name, Manufacturing_Date) VALUES ('NASA', 'Orion', '2020-03-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Company, COUNT(*) as Total_Spacecraft FROM Spacecraft_Manufacturers GROUP BY Company;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 제출된 리뷰를 기반으로 동물 실험을 하지 않고 비건으로 표시된 뷰티 제품의 평균 평점을 찾으세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, cruelty_free BOOLEAN, vegan BOOLEAN); CREATE TABLE reviews (review_id INT, product_id INT, review_date DATE, review_rating INT); INSERT INTO products (product_id, product_name, cruelty_free, vegan) VALUES (1, 'Product 1', true, true), (2, 'Product 2', false, true), (3, 'Product 3', true, false), (4, 'Product 4', false, false); INSERT INTO reviews (review_id, product_id, review_date, review_rating) VALUES (1, 1, '2022-01-01', 5), (2, 1, '2022-01-15', 4), (3, 2, '2022-01-20', 3), (4, 3, '2022-01-25', 5), (5, 4, '2022-01-30', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(review_rating) AS avg_rating FROM products JOIN reviews ON products.product_id = reviews.product_id WHERE products.cruelty_free = true AND products.vegan = true AND review_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE;"
    },
    {
        "instruction": "입력 텍스트: 각 장르의 게임을 하는 플레이어들의 최대 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, GamePreference VARCHAR(20), Playtime INT); INSERT INTO Players (PlayerID, GamePreference, Playtime) VALUES (1, 'Shooter', 100), (2, 'RPG', 200), (3, 'Strategy', 150), (4, 'Shooter', 250), (5, 'RPG', 100); CREATE TABLE GameDesign (GameID INT, GameName VARCHAR(20), Genre VARCHAR(20)); INSERT INTO GameDesign (GameID, GameName, Genre) VALUES (1, 'GameA', 'Shooter'), (2, 'GameB', 'RPG'), (3, 'GameC', 'Strategy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT GameDesign.Genre, MAX(Players.Playtime) as MaxPlaytime FROM GameDesign INNER JOIN Players ON Players.GamePreference = GameDesign.Genre GROUP BY GameDesign.Genre;"
    },
    {
        "instruction": "입력 텍스트: 장애인 서비스 제공자별 포괄 노력의 총 수는 무엇입니까?\n\nDDL statements:\nCREATE TABLE inclusion_efforts (effort_id INT, effort_name VARCHAR(50), provider_name VARCHAR(50)); INSERT INTO inclusion_efforts (effort_id, effort_name, provider_name) VALUES (1, 'Wheelchair Ramp Construction', 'University A');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT provider_name, COUNT(*) as total_efforts FROM inclusion_efforts GROUP BY provider_name;"
    },
    {
        "instruction": "입력 텍스트: 기후 적응 분야에서 조직이 시작한 기후 커뮤니케이션 캠페인의 총 수와 이러한 캠페인의 평균 예산을 연도별로 나누어서 알려주세요.\n\nDDL statements:\nCREATE TABLE campaigns (year INT, sector VARCHAR(255), budget INT); INSERT INTO campaigns (year, sector, budget) VALUES (2015, 'Climate Adaptation', 50000); INSERT INTO campaigns (year, sector, budget) VALUES (2016, 'Climate Adaptation', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, COUNT(*) AS num_campaigns, AVG(budget) AS avg_budget FROM campaigns WHERE sector = 'Climate Adaptation' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: deep_sea_expeditions 테이블에서 모든 심해 탐사 원정과 그 위치를 나열하세요.\n\nDDL statements:\nCREATE TABLE deep_sea_expeditions (id INT PRIMARY KEY, expedition_name VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT expedition_name, location FROM deep_sea_expeditions;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 수학과 교수진에게 수여된 보조금의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE if NOT EXISTS grants (id INT, facultyid INT, department VARCHAR(20), amount INT, startdate DATE, enddate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM grants WHERE department='Mathematics' AND startdate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 프로젝트 비용이 15,000달러를 초과하는 프로젝트에 참여한 '전기 공학' 부서의 직원은 누구인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50)); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department) VALUES (9, 'Emily', 'Lee', 'Electrical Engineering'); CREATE TABLE Projects (ProjectID INT, ProjectName VARCHAR(50), StartDate DATE, EndDate DATE, Department VARCHAR(50), Cost DECIMAL(10,2)); INSERT INTO Projects (ProjectID, ProjectName, StartDate, EndDate, Department, Cost) VALUES (9, 'Power Grid Upgrade', '2022-03-15', '2022-10-31', 'Electrical Engineering', 20000.00); CREATE TABLE ProjectEmployees (ProjectID INT, EmployeeID INT); INSERT INTO ProjectEmployees (ProjectID, EmployeeID) VALUES (9, 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Employees.FirstName, Employees.LastName FROM Employees INNER JOIN ProjectEmployees ON Employees.EmployeeID = ProjectEmployees.EmployeeID INNER JOIN Projects ON ProjectEmployees.ProjectID = Projects.ProjectID WHERE Employees.Department = 'Electrical Engineering' AND Projects.Cost > 15000.00;"
    },
    {
        "instruction": "입력 텍스트: 화물 취급 장비가 가장 많은 상위 3개 항구를 찾으세요.\n\nDDL statements:\nCREATE TABLE ports (id INT, name VARCHAR(50)); CREATE TABLE cargo_equipment (id INT, port_id INT, type VARCHAR(50), quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name, SUM(ce.quantity) as total_quantity FROM ports p INNER JOIN cargo_equipment ce ON p.id = ce.port_id GROUP BY p.name ORDER BY total_quantity DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: carbon_offset_initiatives' 테이블에서 'Americas' 지역의 탄소 상쇄 이니셔티브의 총 탄소 상쇄량(톤 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE carbon_offset_initiatives (initiative_id INT, location TEXT, carbon_offset_tons FLOAT, region TEXT); INSERT INTO carbon_offset_initiatives (initiative_id, location, carbon_offset_tons, region) VALUES (1, 'New York', 500, 'Americas'), (2, 'Mexico City', 700, 'Americas'), (3, 'Rio de Janeiro', 300, 'Americas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(carbon_offset_tons) FROM carbon_offset_initiatives WHERE region = 'Americas';"
    },
    {
        "instruction": "입력 텍스트: 도쿄에 있는 식당에서 퀴노아를 재료로 포함하고 있는 메뉴 아이템의 이름과 카테고리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Menu_Item (id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), restaurant_id INT); CREATE TABLE Ingredient (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), menu_item_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name, m.category FROM Menu_Item m INNER JOIN Ingredient i ON m.id = i.menu_item_id WHERE i.name = 'Quinoa' AND m.restaurant_id IN (SELECT r.id FROM Restaurant r WHERE r.city = 'Tokyo');"
    },
    {
        "instruction": "입력 텍스트: 각 뉴스 카테고리별 고유 방문자 수를 구하세요.\n\nDDL statements:\nCREATE TABLE categories (id INT PRIMARY KEY, name TEXT NOT NULL); CREATE TABLE news_views (category_id INT, visitor_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT categories.name, COUNT(DISTINCT news_views.visitor_id) as unique_visitors FROM categories INNER JOIN news_views ON categories.id = news_views.category_id GROUP BY categories.name;"
    },
    {
        "instruction": "입력 텍스트: farmer_details' 테이블에 농부들의 민족 정보를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE farmer_details (farmer_id INT, name VARCHAR(50), ethnicity VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE farmer_details SET ethnicity = CASE farmer_id WHEN 1 THEN 'Hispanic' WHEN 2 THEN 'African American' ELSE 'Asian' END WHERE farmer_id IN (1, 2, 3);"
    },
    {
        "instruction": "입력 텍스트: InclusiveHousing 스키마의 각 도시에서 사용 가능한 저렴한 주택 단위는 얼마나 되나요?\n\nDDL statements:\nCREATE TABLE InclusiveHousing.AffordableHousing (city VARCHAR(50), units INT); INSERT INTO InclusiveHousing.AffordableHousing (city, units) VALUES ('Chicago', 500), ('Houston', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(units) AS total_units FROM InclusiveHousing.AffordableHousing GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 교육에 매년 평균 얼마가 지출되었나요?\n\nDDL statements:\nCREATE TABLE budget (year INT, category VARCHAR(255), amount INT); INSERT INTO budget (year, category, amount) VALUES (2018, 'Education', 50000), (2018, 'Transport', 70000), (2019, 'Education', 55000), (2019, 'Transport', 80000), (2020, 'Education', 60000), (2020, 'Transport', 90000), (2021, 'Education', 65000), (2021, 'Transport', 100000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM budget WHERE category = 'Education'"
    },
    {
        "instruction": "입력 텍스트: 공정 무역 인증 제품을 포함한 주문의 평균 배송 시간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE FairTradeOrders (id INT, delivery_time INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(delivery_time) FROM FairTradeOrders WHERE id IN (SELECT order_id FROM FairTradeCertification);"
    },
    {
        "instruction": "입력 텍스트: 광업 및 채석 부서에서 성별로 그룹화된 근로자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), Gender VARCHAR(50)); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Gender) VALUES (1, 'John', 'Doe', 'Mining and Quarry', 'Male'); INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Gender) VALUES (2, 'Jane', 'Doe', 'Mining and Quarry', 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, Gender, COUNT(*) as Total FROM Employees WHERE Department = 'Mining and Quarry' GROUP BY Department, Gender;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 각 국가별로 인도적 지원을 위해 제공된 군사 장비의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE MilitaryEquipment (id INT, year INT, country VARCHAR(255), equipment VARCHAR(255)); INSERT INTO MilitaryEquipment (id, year, country, equipment) VALUES (1, 2020, 'USA', 'Tents');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(1) as total_equipment FROM MilitaryEquipment WHERE year = 2020 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 아프리카계 미국인이 창업한 금융 기술 분야 스타트업의 총 투자 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE startups (id INT, name TEXT, founder_ethnicity TEXT, industry TEXT); CREATE TABLE investments (id INT, startup_id INT, funding_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investments.funding_amount) FROM startups INNER JOIN investments ON startups.id = investments.startup_id WHERE startups.founder_ethnicity = 'African American' AND startups.industry = 'Financial Technology';"
    },
    {
        "instruction": "입력 텍스트: donations' 테이블을 기준으로 분기별 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_id INT, amount DECIMAL(10,2), donation_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(QUARTER FROM donations.donation_date) AS quarter, SUM(donations.amount) FROM donations GROUP BY quarter;"
    },
    {
        "instruction": "입력 텍스트: 각 과목 영역별로 최소 한 과목 이상을 이수한 학생의 비율을 성별로 나누어서 알려주세요.\n\nDDL statements:\nCREATE TABLE students (id INT, gender VARCHAR(255), num_completed_courses INT); CREATE TABLE courses (id INT, subject_area_id INT, name VARCHAR(255)); CREATE TABLE enrollments (id INT, student_id INT, course_id INT); INSERT INTO students (id, gender, num_completed_courses) VALUES (1, 'Female', 3), (2, 'Female', 2), (3, 'Male', 1), (4, 'Male', 5), (5, 'Female', 4), (6, 'Male', 3); INSERT INTO courses (id, subject_area_id, name) VALUES (1, 1, 'Algebra'), (2, 1, 'Geometry'), (3, 2, 'Biology'), (4, 2, 'Chemistry'), (5, 3, 'History'), (6, 3, 'Literature'); INSERT INTO enrollments (id, student_id, course_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 1), (4, 1, 2), (5, 2, 3), (6, 3, 3), (7, 1, 4), (8, 2, 4), (9, 3, 4), (10, 1, 5), (11, 2, 5), (12, 3, 5), (13, 1, 6), (14, 2, 6), (15, 3, 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.gender, 100.0 * SUM(CASE WHEN s.num_completed_courses >= COUNT(DISTINCT c.subject_area_id) THEN 1 ELSE 0 END) / COUNT(s.id) AS pct_completed_subject_areas FROM students s JOIN enrollments e ON s.id = e.student_id JOIN courses c ON e.course_id = c.id GROUP BY s.gender;"
    },
    {
        "instruction": "입력 텍스트: 아시아의 평균 기대 수명은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Countries (ID INT, CountryName VARCHAR(100), Continent VARCHAR(50), LifeExpectancy FLOAT); INSERT INTO Countries (ID, CountryName, Continent, LifeExpectancy) VALUES (1, 'Afghanistan', 'Asia', 64.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(LifeExpectancy) FROM Countries WHERE Continent = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 대서양으로 운송된 비위험물의 평균 무게는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, type TEXT, safety_score FLOAT);CREATE TABLE cargos (id INT, vessel_id INT, material TEXT, destination TEXT, date DATE, weight FLOAT); INSERT INTO vessels (id, name, type, safety_score) VALUES (2, 'VesselK', 'Bulk Carrier', 85); INSERT INTO cargos (id, vessel_id, material, destination, date, weight) VALUES (2, 2, 'Non-dangerous', 'Atlantic', '2022-07-01', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(c.weight) FROM vessels v JOIN cargos c ON v.id = c.vessel_id WHERE v.safety_score > 80 AND c.material != 'Dangerous' AND c.destination = 'Atlantic' AND c.date BETWEEN '2022-07-01' AND '2022-09-30';"
    },
    {
        "instruction": "입력 텍스트: 완료된 농업 혁신 프로젝트의 평균 비용을 위치별로 찾아보세요.\n\nDDL statements:\nCREATE TABLE AgriculturalInnovations (id INT, name VARCHAR(50), type VARCHAR(20), cost INT, location VARCHAR(50), status VARCHAR(20)); INSERT INTO AgriculturalInnovations (id, name, type, cost, location, status) VALUES (1, 'Drip Irrigation System', 'Water', 3000, 'Nairobi', 'Completed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, AVG(cost) FROM AgriculturalInnovations WHERE status = 'Completed' GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 2020년 3월 플랫폼 2의 일일 석유 생산량을 찾아주세요.\n\nDDL statements:\nCREATE TABLE daily_oil_production (platform_id INT, production_date DATE, oil_production FLOAT); INSERT INTO daily_oil_production (platform_id, production_date, oil_production) VALUES (1, '2020-03-01', 50), (1, '2020-03-02', 60), (1, '2020-03-03', 70), (2, '2020-03-01', 80), (2, '2020-03-02', 90), (2, '2020-03-03', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT oil_production FROM daily_oil_production WHERE platform_id = 2 AND production_date BETWEEN '2020-03-01' AND '2020-03-03';"
    },
    {
        "instruction": "입력 텍스트: 기술 분야에서 소외된 커뮤니티가 주도하는 모든 AI 프로젝트의 이름을 나열하시오.\n\nDDL statements:\nCREATE TABLE ais (ai_id INT, project_name VARCHAR(100), project_leader VARCHAR(50)); INSERT INTO ais VALUES (1, 'AI for Health', 'Alice'), (2, 'AI for Education', 'Bob'), (3, 'AI for Environment', 'Charlie'); CREATE TABLE communities (community_id INT, community_name VARCHAR(50), leader_type VARCHAR(20)); INSERT INTO communities VALUES (1, 'Minority Women in Tech', 'underrepresented'), (2, 'Rural Tech Entrepreneurs', 'underrepresented');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM ais INNER JOIN communities ON ais.project_leader = communities.community_name WHERE leader_type = 'underrepresented';"
    },
    {
        "instruction": "입력 텍스트: 남한 자동차의 최소 안전 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Safety_Testing (year INT, make VARCHAR(50), model VARCHAR(50), rating FLOAT); INSERT INTO Safety_Testing (year, make, model, rating) VALUES (2022, 'Hyundai', 'Elantra', 4.8); INSERT INTO Safety_Testing (year, make, model, rating) VALUES (2022, 'Kia', 'Sorento', 4.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(rating) FROM Safety_Testing WHERE make = 'South Korean';"
    },
    {
        "instruction": "입력 텍스트: 회사에서 제공하는 고유 보험 유형을 나열하시오.\n\nDDL statements:\nCREATE TABLE InsuranceType (TypeID INT, InsuranceType TEXT); INSERT INTO InsuranceType (TypeID, InsuranceType) VALUES (1, 'Automotive'); INSERT INTO InsuranceType (TypeID, InsuranceType) VALUES (2, 'Homeowners'); INSERT INTO InsuranceType (TypeID, InsuranceType) VALUES (3, 'Life');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT InsuranceType FROM InsuranceType;"
    },
    {
        "instruction": "입력 텍스트: 콜롬비아에 있는 ID 7번의 친환경 호텔의 점유율을 85%로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE hotels(id INT, name TEXT, country TEXT, is_eco_friendly BOOLEAN, occupancy_rate DECIMAL(5,2)); INSERT INTO hotels(id, name, country, is_eco_friendly, occupancy_rate) VALUES (7, 'Hotel C', 'Colombia', true, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE hotels SET occupancy_rate = 85 WHERE id = 7 AND country = 'Colombia' AND is_eco_friendly = true;"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 영아 사망률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE InfantMortalityData (Country VARCHAR(50), Population INT, InfantDeaths INT); INSERT INTO InfantMortalityData (Country, Population, InfantDeaths) VALUES ('Canada', 38000000, 2100), ('USA', 331000000, 24500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, (InfantDeaths / (Population / 1000)) AS InfantMortalityRate FROM InfantMortalityData;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 양식장의 모든 어종과 해당 재고 수준을 나열하세요.\n\nDDL statements:\nCREATE TABLE fish_species (id INT, species TEXT); CREATE TABLE stock_levels (id INT, farm_id INT, species TEXT, quantity INT); INSERT INTO fish_species (id, species) VALUES (1, 'Tilapia'), (2, 'Salmon'), (3, 'Catfish'); INSERT INTO stock_levels (id, farm_id, species, quantity) VALUES (1, 1, 'Tilapia', 500), (2, 1, 'Salmon', 800), (3, 2, 'Tilapia', 700), (4, 2, 'Salmon', 600), (5, 3, 'Catfish', 900); INSERT INTO stock_levels (id, farm_id, species, quantity) VALUES (6, 4, 'Tilapia', 400), (7, 4, 'Salmon', 1000), (8, 5, 'Catfish', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT fish_species.species, stock_levels.quantity FROM fish_species JOIN stock_levels ON fish_species.species = stock_levels.species WHERE stock_levels.farm_id IN (SELECT id FROM aquatic_farms WHERE country LIKE 'Asia%' OR country LIKE 'Pacific%');"
    },
    {
        "instruction": "입력 텍스트: 2021년도 \"social_impact_scores\" 테이블의 \"Amazon\" 기록에 대한 \"score\"를 80으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE social_impact_scores (company TEXT, score INTEGER, year INTEGER); INSERT INTO social_impact_scores (company, score, year) VALUES ('Microsoft', 85, 2021); INSERT INTO social_impact_scores (company, score, year) VALUES ('Google', 82, 2021); INSERT INTO social_impact_scores (company, score, year) VALUES ('Amazon', 78, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE social_impact_scores SET score = 80 WHERE company = 'Amazon' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 다양성 및 포용성 훈련 프로그램의 최대 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE TrainingPrograms (Program VARCHAR(20), Type VARCHAR(20), Duration INT); INSERT INTO TrainingPrograms (Program, Type, Duration) VALUES ('Diversity and Inclusion', 'Training', 16); INSERT INTO TrainingPrograms (Program, Type, Duration) VALUES ('Cybersecurity', 'Training', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Duration) FROM TrainingPrograms WHERE Type = 'Training' AND Program LIKE '%Diversity%';"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 지역에서 월별로 판매된 모바일 기기의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, sale_date DATE, quantity INT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM sale_date) AS month, region, SUM(quantity) AS total_sales FROM sales WHERE YEAR(sale_date) = 2021 GROUP BY month, region;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 피싱 공격을 가장 많이 받은 상위 3명의 대상은 누구인가요?\n\nDDL statements:\nCREATE TABLE if not exists phishing_targets (target_id INT, target_name VARCHAR, attack_count INT); INSERT INTO phishing_targets (target_id, target_name, attack_count) VALUES (1, 'Alice', 10), (2, 'Bob', 15), (3, 'Charlie', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT target_id, target_name, SUM(attack_count) as total_attacks FROM phishing_targets WHERE attack_date >= DATEADD(month, -1, GETDATE()) AND target_name IN ('Alice', 'Bob', 'Charlie') GROUP BY target_id, target_name ORDER BY total_attacks DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 오리건 주 포틀랜드에서 공유 자전거의 최대 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE if not exists bike_share (id INT, city VARCHAR(20), bike_type VARCHAR(20), quantity INT);INSERT INTO bike_share (id, city, bike_type, quantity) VALUES (1, 'Portland', 'electric_bike', 350), (2, 'Portland', 'classic_bike', 450), (3, 'Seattle', 'electric_bike', 500), (4, 'Seattle', 'classic_bike', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(quantity) FROM bike_share WHERE city = 'Portland';"
    },
    {
        "instruction": "입력 텍스트: CommunityEngagement 테이블에서 'Country C'의 2021년 커뮤니티 참여 이벤트를 삭제하세요.\n\nDDL statements:\nCREATE TABLE CommunityEngagement (id INT PRIMARY KEY, country VARCHAR(255), year INT, events INT); INSERT INTO CommunityEngagement (id, country, year, events) VALUES (1, 'Country A', 2021, 10), (2, 'Country B', 2021, 7), (3, 'Country A', 2020, 8), (4, 'Country B', 2020, 12), (5, 'Country C', 2021, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM CommunityEngagement WHERE country = 'Country C' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: AU'와 '2021'년에 진행된 계약 협상의 가치를 '6500000'으로 업데이트하시겠습니까?\n\nDDL statements:\nCREATE TABLE Contract_Negotiations (partner VARCHAR(255), year INT, value INT); INSERT INTO Contract_Negotiations (partner, year, value) VALUES ('AU', 2021, 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Contract_Negotiations SET value = 6500000 WHERE partner = 'AU' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 어느 광산이 현지 석탄 매장량의 50% 이상을 고갈시켰나요?\n\nDDL statements:\nCREATE TABLE mining_sites (id INT, name VARCHAR(50), coal_reserve_initial FLOAT); CREATE TABLE coal_reserves (site_id INT, coal_reserve_remaining FLOAT, update_date DATE); INSERT INTO mining_sites (id, name, coal_reserve_initial) VALUES (1, 'Site A', 1000), (2, 'Site B', 1500), (3, 'Site C', 2000); INSERT INTO coal_reserves (site_id, coal_reserve_remaining, update_date) VALUES (1, 500, '2022-01-01'), (1, 300, '2022-02-01'), (2, 1000, '2022-01-01'), (3, 1500, '2022-01-01'), (3, 1000, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ms.name FROM mining_sites ms INNER JOIN coal_reserves cr ON ms.id = cr.site_id WHERE cr.coal_reserve_remaining / ms.coal_reserve_initial < 0.5;"
    },
    {
        "instruction": "입력 텍스트: 인프라 개발 데이터베이스의 모든 프로젝트 중 최소 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE if not exists Projects (id INT, name VARCHAR(50), type VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO Projects (id, name, type, budget) VALUES (1, 'Seawall', 'Resilience', 5000000.00), (2, 'Floodgate', 'Resilience', 3000000.00), (3, 'Bridge', 'Transportation', 8000000.00), (4, 'Highway', 'Transportation', 12000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(budget) FROM Projects;"
    },
    {
        "instruction": "입력 텍스트: 보안 사건에 대한 평균 반응 시간이 가장 긴 사용자는 누구인가요?\n\nDDL statements:\nCREATE TABLE user_reactions (id INT, user_id INT, incident_id INT, reaction_time INT); CREATE TABLE users (id INT, name VARCHAR(50)); INSERT INTO user_reactions (id, user_id, incident_id, reaction_time) VALUES (1, 1, 1, 60), (2, 2, 2, 30), (3, 3, 3, 90), (4, 1, 4, 120), (5, 4, 5, 45), (6, 5, 6, 75), (7, 2, 7, 105); INSERT INTO users (id, name) VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie'), (4, 'David'), (5, 'Eve');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT users.name, AVG(user_reactions.reaction_time) as avg_reaction_time FROM user_reactions INNER JOIN users ON user_reactions.user_id = users.id GROUP BY users.name ORDER BY avg_reaction_time DESC;"
    },
    {
        "instruction": "입력 텍스트: 인도 출신 AI 연구자들이 발표한 논문은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ai_researcher(id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50)); INSERT INTO ai_researcher (id, name, country) VALUES (1, 'Alice', 'USA'), (2, 'Bob', 'India'), (3, 'Charlie', 'Canada'); CREATE TABLE ai_papers(id INT PRIMARY KEY, title VARCHAR(50), researcher_id INT); INSERT INTO ai_papers (id, title, researcher_id) VALUES (1, 'Explainable AI', 2), (2, 'AI Ethics', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.title FROM ai_papers p INNER JOIN ai_researcher r ON p.researcher_id = r.id WHERE r.country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 인도, 뭄바이'에서 온 공급업체에 대한 새로운 기록을 'suppliers' 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, supplier_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO suppliers (supplier_id, supplier_name, city, country) VALUES (1, 'Raj Patel', 'Mumbai', 'India');"
    },
    {
        "instruction": "입력 텍스트: New York'에 위치한 'Asian' 요리 카테고리의 레스토랑이 벌어들인 최소 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE restaurants (restaurant_id INT, name VARCHAR(50), cuisine VARCHAR(50), city VARCHAR(50), revenue INT); INSERT INTO restaurants VALUES (1, 'Asian Fusion', 'Asian', 'New York', 5000), (2, 'Tuscan Bistro', 'Italian', 'Rome', 7000), (3, 'Baja Coast', 'Mexican', 'Mexico City', 4000), (4, 'Sushi House', 'Asian', 'Tokyo', 8000), (5, 'Pizzeria Rustica', 'Italian', 'Paris', 6000), (6, 'Taqueria El Paso', 'Mexican', 'Los Angeles', 4500), (7, 'Mexican Grill', 'Mexican', 'Paris', 5500), (8, 'Vietnamese Garden', 'Asian', 'New York', 4000), (9, 'Thai Delight', 'Asian', 'New York', 3500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, MIN(revenue) FROM restaurants WHERE cuisine = 'Asian' AND city = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 각 북극 지역의 북극곰과 물개의 평균 개체 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE Biodiversity (id INT PRIMARY KEY, species VARCHAR(255), region VARCHAR(255), population INT); INSERT INTO Biodiversity (id, species, region, population) VALUES (1, 'polar bear', 'Arctic Ocean', 5000); INSERT INTO Biodiversity (id, species, region, population) VALUES (2, 'seal', 'Barents Sea', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(CASE WHEN species IN ('polar bear', 'seal') THEN population ELSE 0 END) as avg_population FROM Biodiversity GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 북극 지역의 농업 혁신 지표는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Innovation_Metrics (metric TEXT, year INTEGER, region TEXT); INSERT INTO Innovation_Metrics (metric, year, region) VALUES ('Crop Yield', 2019, 'Arctic'), ('Soil Fertility', 2020, 'Arctic'), ('Irrigation Efficiency', 2021, 'Arctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Innovation_Metrics WHERE region = 'Arctic' AND year BETWEEN 2019 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: 어떤 외계 행성들이 지구와 비슷한 크기를 가지고 있나요?\n\nDDL statements:\nCREATE TABLE Exoplanets (id INT, name VARCHAR(255), discovery_year INT, size FLOAT, distance_light_years FLOAT); INSERT INTO Exoplanets (id, name, discovery_year, size, distance_light_years) VALUES (1, 'Kepler-22b', 2011, 2.4, 622), (2, 'Kepler-186f', 2014, 1.2, 500), (3, 'Proxima Centauri b', 2016, 1.3, 4.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, size, ABS(size - 1.0) as size_difference FROM Exoplanets HAVING size_difference <= 0.2 ORDER BY size_difference ASC;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 '여성 권한 강화' 프로그램에 몇 명의 자원봉사자가 등록했습니까?\n\nDDL statements:\nCREATE TABLE volunteer_signups (id INT, signup_date DATE, program TEXT); INSERT INTO volunteer_signups (id, signup_date, program) VALUES (1, '2021-01-01', 'Women Empowerment'); INSERT INTO volunteer_signups (id, signup_date, program) VALUES (2, '2021-03-12', 'Women Empowerment'); INSERT INTO volunteer_signups (id, signup_date, program) VALUES (3, '2020-05-25', 'Women Empowerment');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM volunteer_signups WHERE program = 'Women Empowerment' AND YEAR(signup_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 북미 각국의 총 국방 지출은 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_spending_3 (country VARCHAR(50), continent VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO defense_spending_3 (country, continent, amount) VALUES ('USA', 'North America', 74000000000), ('Canada', 'North America', 21000000000), ('Mexico', 'North America', 6000000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(amount) as total_defense_spending FROM defense_spending_3 WHERE continent = 'North America' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2020년부터 2021년까지 특정 국가의 국제 방문객 수 변화를 확인하세요.\n\nDDL statements:\nCREATE TABLE visitor_stats (year INT, country TEXT, visitors INT); INSERT INTO visitor_stats (year, country, visitors) VALUES (2020, 'France', 20000000), (2021, 'France', 18000000), (2020, 'Germany', 15000000), (2021, 'Germany', 16000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT t1.country, t1.visitors - t2.visitors as change_in_visitors FROM visitor_stats t1 INNER JOIN visitor_stats t2 ON t1.country = t2.country AND t1.year = 2021 AND t2.year = 2020 WHERE t1.country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 2020년 이전에 프랑스에서 판매된 마이크로플라스틱이 포함된 모든 화장품 제품을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Cosmetics (product_id INT, product_name VARCHAR(255), has_microplastics BOOLEAN, sales_date DATE, country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Cosmetics WHERE has_microplastics = TRUE AND sales_date < '2020-01-01' AND country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 발행된 청구 금액이 $1000 이상인 총 정책 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE policies (id INT, policyholder_id INT, issue_date DATE); CREATE TABLE claims (id INT, policy_id INT, claim_amount FLOAT); INSERT INTO policies (id, policyholder_id, issue_date) VALUES (1, 1, '2020-01-01'); INSERT INTO claims (id, policy_id, claim_amount) VALUES (1, 1, 1200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(policies.id) FROM policies INNER JOIN claims ON policies.id = claims.policy_id WHERE policies.issue_date >= '2020-01-01' AND claims.claim_amount > 1000 AND policies.policyholder_id IN (SELECT id FROM policyholders WHERE state = 'CA');"
    },
    {
        "instruction": "입력 텍스트: 루브르 박물관의 가상 투어를 프랑스 파리에서 20 USD의 가격으로 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE tours (id INT, name TEXT, city TEXT, country TEXT, price FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO tours (id, name, city, country, price) VALUES (1, 'Virtual Tour of the Louvre', 'Paris', 'France', 20);"
    },
    {
        "instruction": "입력 텍스트: 재즈 장르에서 각 레코드 레이블이 지난 3년 동안 발매한 노래는 몇 곡인가요?\n\nDDL statements:\nCREATE TABLE labels (label_id INT, label VARCHAR(100)); CREATE TABLE songs (song_id INT, label_id INT, title VARCHAR(100), release_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT l.label, COUNT(s.song_id) AS song_count FROM labels l JOIN songs s ON l.label_id = s.label_id WHERE s.release_date >= DATEADD(year, -3, GETDATE()) AND l.label IN (SELECT label FROM genres WHERE genre = 'Jazz') GROUP BY l.label;"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 시행된 오염 방지 계획은 무엇인가요?\n\nDDL statements:\nCREATE TABLE pollution_control_initiatives (id INT, initiative_name TEXT, region TEXT); INSERT INTO pollution_control_initiatives (id, initiative_name, region) VALUES (1, 'Project Ocean Clean', 'Pacific Ocean'), (2, 'Marine Life Protection Act', 'California Coast'), (3, 'Clean Seas Campaign', 'Mediterranean Sea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name FROM pollution_control_initiatives WHERE region = 'Pacific Ocean';"
    },
    {
        "instruction": "입력 텍스트: smart_contracts_transactions' 테이블의 각 스마트 계약별로 일일 최대, 최소, 평균 거래 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE smart_contracts_transactions (contract_id INT, transaction_date DATE, transactions INT); INSERT INTO smart_contracts_transactions (contract_id, transaction_date, transactions) VALUES (1, '2021-01-01', 10), (1, '2021-01-02', 15), (1, '2021-01-03', 20), (2, '2021-01-01', 5), (2, '2021-01-02', 8), (2, '2021-01-03', 12), (3, '2021-01-01', 25), (3, '2021-01-02', 30), (3, '2021-01-03', 35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT contract_id, AVG(transactions) AS AverageTransactions, MIN(transactions) AS MinTransactions, MAX(transactions) AS MaxTransactions FROM smart_contracts_transactions GROUP BY contract_id;"
    },
    {
        "instruction": "입력 텍스트: 각 매장에서 제공하는 채식주의자용과 비채식주의자용 요리의 수는 얼마나 되며, 각각의 총 칼로리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Dishes (DishID int, Name varchar(50), Type varchar(10), Calories int, StoreID int); INSERT INTO Dishes (DishID, Name, Type, Calories, StoreID) VALUES (1, 'Veggie Burger', 'Vegetarian', 400, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Stores.Name, SUM(CASE WHEN Dishes.Type = 'Vegetarian' THEN 1 ELSE 0 END) AS VegetarianDishes, SUM(CASE WHEN Dishes.Type = 'Non-Vegetarian' THEN 1 ELSE 0 END) AS NonVegetarianDishes, SUM(Dishes.Calories) AS TotalCalories FROM Dishes INNER JOIN Stores ON Dishes.StoreID = Stores.StoreID GROUP BY Stores.Name;"
    },
    {
        "instruction": "입력 텍스트: 멕시코에서 제공되는 가상 투어의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE virtual_tour_offers(offer_id INT, tour_id INT, country VARCHAR(50), offer_date DATE); CREATE TABLE virtual_tours(tour_id INT, tour_name VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT tour_id) FROM virtual_tour_offers WHERE country = 'Mexico';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 뉴욕 지역에서 사용된 자원봉사 시간의 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE VolunteerHours (HourID INT, VolunteerName TEXT, Region TEXT, HoursSpent DECIMAL, HourDate DATE); INSERT INTO VolunteerHours (HourID, VolunteerName, Region, HoursSpent, HourDate) VALUES (1, 'Olivia Jones', 'New York', 10.00, '2022-01-01'), (2, 'Michael Brown', 'New York', 15.00, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(HoursSpent) FROM VolunteerHours WHERE Region = 'New York' AND YEAR(HourDate) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 2022년 타지마할에서 한 달 동안 방문한 방문객 수의 최대값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE taj_mahal_visitors (id INT, visit_month DATE, visitors INT); INSERT INTO taj_mahal_visitors (id, visit_month, visitors) VALUES (1, '2022-01-01', 15000), (2, '2022-02-01', 18000), (3, '2022-03-01', 20000), (4, '2022-04-01', 22000); CREATE TABLE taj_mahal_info (id INT, country VARCHAR(50), name VARCHAR(50)); INSERT INTO taj_mahal_info (id, country, name) VALUES (1, 'India', 'Taj Mahal');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(visitors) FROM taj_mahal_visitors WHERE visit_month >= '2022-01-01' AND visit_month < '2023-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2020년 태평양 섬나라들에 제공된 기후 적응 프로젝트를 위한 총 기후 재정 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE climate_finance (year INT, country VARCHAR(50), initiative VARCHAR(50), amount FLOAT); INSERT INTO climate_finance (year, country, initiative, amount) VALUES (2020, 'Palau', 'climate adaptation', 125000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM climate_finance WHERE initiative = 'climate adaptation' AND country LIKE '%Pacific Island%' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 스페인에서 어떤 치료를 받은 환자가 참석한 세션의 최대 횟수는 몇 회인가요?\n\nDDL statements:\nCREATE TABLE therapy_attendance (id INT, patient_id INT, session_name TEXT, num_sessions INT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(num_sessions) FROM therapy_attendance WHERE country = 'Spain';"
    },
    {
        "instruction": "입력 텍스트: 중동' 지역의 모든 거래와 고객 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, name VARCHAR(50), region VARCHAR(50)); INSERT INTO customers (customer_id, name, region) VALUES (1, 'Ali Ahmed', 'Middle East'); INSERT INTO customers (customer_id, name, region) VALUES (2, 'Fatima Khan', 'Asia'); CREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_value DECIMAL(10, 2)); INSERT INTO transactions (transaction_id, customer_id, transaction_value) VALUES (1, 1, 100.00); INSERT INTO transactions (transaction_id, customer_id, transaction_value) VALUES (2, 2, 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customers.name, transactions.transaction_id, transactions.transaction_value FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customers.region = 'Middle East';"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 미국에서 프랑스를 방문한 관광객은 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE visitor_stats (id INT PRIMARY KEY, visitor_country VARCHAR(50), year INT, num_visitors INT); INSERT INTO visitor_stats (id, visitor_country, year, num_visitors) VALUES (1, 'USA', 2017, 80000); INSERT INTO visitor_stats (id, visitor_country, year, num_visitors) VALUES (2, 'USA', 2020, 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_visitors) FROM visitor_stats WHERE visitor_country = 'USA' AND year BETWEEN (YEAR(CURRENT_DATE) - 5) AND YEAR(CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: 대서양' 바다를 삭제하고 삭제된 바다의 평균 깊이를 반환하세요.\n\nDDL statements:\nCREATE TABLE oceans (ocean_name VARCHAR(50), avg_depth NUMERIC(10,2)); INSERT INTO oceans VALUES ('Atlantic Ocean', 3646);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH deleted_ocean AS (DELETE FROM oceans WHERE ocean_name = 'Atlantic Ocean' RETURNING avg_depth) SELECT AVG(avg_depth) FROM deleted_ocean;"
    },
    {
        "instruction": "입력 텍스트: 5월에 진행된 캠페인에 사용된 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE campaigns (id INT PRIMARY KEY, budget INT, start_date DATE, end_date DATE, location TEXT); INSERT INTO campaigns (id, budget, start_date, end_date, location) VALUES (1, 5000, '2021-04-01', '2021-04-30', 'New York'); INSERT INTO campaigns (id, budget, start_date, end_date, location) VALUES (2, 7000, '2021-05-01', '2021-05-31', 'Los Angeles'); INSERT INTO campaigns (id, budget, start_date, end_date, location) VALUES (3, 6000, '2021-06-01', '2021-06-30', 'Chicago');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM campaigns WHERE start_date <= '2021-05-31' AND end_date >= '2021-05-01';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 영국에 위치한 계정에서 \"fitness\"라는 단어를 포함한 게시물의 평균 댓글 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE accounts (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE posts (id INT, account_id INT, content TEXT, comments INT, timestamp TIMESTAMP); INSERT INTO accounts (id, name, location) VALUES (1, 'user1', 'UK'); INSERT INTO posts (id, account_id, content, comments, timestamp) VALUES (1, 1, 'post1 with fitness', 20, '2022-05-01 12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(comments) FROM posts JOIN accounts ON posts.account_id = accounts.id WHERE posts.timestamp >= NOW() - INTERVAL '1 week' AND posts.content LIKE '%fitness%' AND accounts.location = 'UK';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 아시아-태평양 지역의 각 도시로 해상 운송을 통해 발송된 화물의 총 비용을 결정합니다.\n\nDDL statements:\nCREATE TABLE Shipments (ShipmentID int, CarrierID int, ShippedCost int, ShippedDate datetime, ShippingMethod varchar(255));CREATE TABLE Carriers (CarrierID int, CarrierName varchar(255), City varchar(255), Region varchar(255)); INSERT INTO Carriers (CarrierID, CarrierName, City, Region) VALUES (1, 'Carrier A', 'City A', 'Asia-Pacific'); INSERT INTO Shipments (ShipmentID, CarrierID, ShippedCost, ShippedDate, ShippingMethod) VALUES (1, 1, 100, '2022-01-01', 'Sea Freight');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.ShippingMethod, c.City, SUM(s.ShippedCost) as TotalCost FROM Shipments s INNER JOIN Carriers c ON s.CarrierID = c.CarrierID WHERE s.ShippingMethod = 'Sea Freight' AND c.Region = 'Asia-Pacific' AND s.ShippedDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY s.ShippingMethod, c.City;"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 각 방위산업체의 군사 장비 판매 총액과 해당 산업체의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE military_equipment_sales (id INT, defense_contractor_id INT, sale_date DATE, sales INT); INSERT INTO military_equipment_sales (id, defense_contractor_id, sale_date, sales) VALUES (1, 1, '2021-01-01', 5000000), (2, 1, '2021-02-01', 7000000), (3, 2, '2021-03-01', 6000000), (4, 3, '2021-04-01', 8000000); CREATE TABLE defense_contractors (id INT, name VARCHAR(255)); INSERT INTO defense_contractors (id, name) VALUES (1, 'Lockheed Martin'), (2, 'Boeing'), (3, 'Raytheon');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, SUM(m.sales) as total_sales FROM military_equipment_sales m JOIN defense_contractors d ON m.defense_contractor_id = d.id WHERE m.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY d.name;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램 유형별 평균 사회적 영향 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Programs (ProgramID INT, ProgramType TEXT, SocialImpactScore DECIMAL); INSERT INTO Programs (ProgramID, ProgramType, SocialImpactScore) VALUES (1, 'Food Security', 85), (2, 'Education', 90), (3, 'Healthcare', 88);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProgramType, AVG(SocialImpactScore) as AverageScore FROM Programs GROUP BY ProgramType;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기 뉴욕에서 소수 민족 건설 노동자의 총 노동 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE labor_cost (cost_id INT, state VARCHAR(50), cost_date DATE, gender VARCHAR(50), race VARCHAR(50), labor_cost FLOAT); INSERT INTO labor_cost (cost_id, state, cost_date, gender, race, labor_cost) VALUES (1, 'New York', '2022-04-01', 'Female', 'African American', 5000.00); INSERT INTO labor_cost (cost_id, state, cost_date, gender, race, labor_cost) VALUES (2, 'New York', '2022-04-10', 'Male', 'Hispanic', 7000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(labor_cost) FROM labor_cost WHERE state = 'New York' AND cost_date BETWEEN '2022-04-01' AND '2022-06-30' AND race IN ('African American', 'Hispanic', 'Asian', 'Native American');"
    },
    {
        "instruction": "입력 텍스트: 2020년에 도쿄와 뉴욕에서 개최된 커뮤니티 이벤트는 총 몇 개였습니까?\n\nDDL statements:\nCREATE TABLE Community_Events (id INT, city VARCHAR(20), year INT, event_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(event_count) FROM Community_Events WHERE city IN ('Tokyo', 'New York') AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역에서 환경 관련 활동에 자원봉사한 총 자원봉사자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE organizations (id INT, name TEXT, country TEXT, region TEXT, cause TEXT, num_volunteers INT); INSERT INTO organizations (id, name, country, region, cause, num_volunteers) VALUES (1, 'Org A', 'Kenya', 'Africa', 'Environment', 120), (2, 'Org B', 'Canada', 'North America', 'Health', 80), (3, 'Org C', 'Mexico', 'Central America', 'Environment', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(num_volunteers) as total_volunteers FROM organizations WHERE region = 'Africa' AND cause = 'Environment' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에 있는 선불 모바일 고객의 평균 데이터 사용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE prepaid_mobile (customer_id INT, data_usage FLOAT, state VARCHAR(20)); INSERT INTO prepaid_mobile (customer_id, data_usage, state) VALUES (1, 2.5, 'California'), (2, 3.2, 'California'), (3, 1.8, 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(data_usage) FROM prepaid_mobile WHERE state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 법원별로 피고인에게 부과된 총 벌금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE defendants (defendant_id INT, court_id INT, fine_amount DECIMAL(10,2)); INSERT INTO defendants (defendant_id, court_id, fine_amount) VALUES (1, 1, 500.00), (2, 2, 750.00), (3, 1, 1000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT defendants.court_id, SUM(defendants.fine_amount) as total_fine_amount FROM defendants WHERE fine_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY defendants.court_id;"
    },
    {
        "instruction": "입력 텍스트: 각 학과의 교수들이 발표한 연구 논문의 평균 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE departments (id INT, name TEXT); CREATE TABLE faculty (id INT, name TEXT, department_id INT); CREATE TABLE publications (id INT, faculty_id INT, year INT, journal TEXT);  INSERT INTO departments (id, name) VALUES (1, 'Mathematics'), (2, 'Computer Science'); INSERT INTO faculty (id, name, department_id) VALUES (1, 'Alice', 1), (2, 'Bob', 2), (3, 'Charlie', 1); INSERT INTO publications (id, faculty_id, year, journal) VALUES (1, 1, 2020, 'JMLR'), (2, 1, 2019, 'NeurIPS'), (3, 2, 2021, 'ICML'), (4, 3, 2020, 'ICLR'), (5, 1, 2021, 'KDD');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, AVG(p.count) as avg_publications FROM departments d JOIN ( SELECT f.department_id, COUNT(p.id) as count FROM faculty f JOIN publications p ON f.id = p.faculty_id GROUP BY f.department_id ) p ON d.id = p.department_id GROUP BY d.name;"
    },
    {
        "instruction": "입력 텍스트: 각 차량 유형별로 가장 이른 그리고 가장 늦은 정비 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE vehicle (vehicle_id INT, type TEXT, model_year INT, last_maintenance_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, MIN(last_maintenance_date) AS earliest, MAX(last_maintenance_date) AS latest FROM vehicle GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 브라질에 있는 수력 발전소의 최대 용량(MW)은 얼마이며, 그 중 500MW를 초과하는 용량을 가진 발전소는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE hydro_plants (name TEXT, country TEXT, capacity_mw REAL); INSERT INTO hydro_plants (name, country, capacity_mw) VALUES ('Hydro Plant X', 'Brazil', 600), ('Hydro Plant Y', 'Brazil', 450);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(capacity_mw) AS max_capacity, COUNT(*) FILTER (WHERE capacity_mw > 500) AS num_plants_over_500 FROM hydro_plants WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기 각 레스토랑에서 가장 많이 팔린 상위 3개 메뉴 아이템으로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(255), City varchar(255)); CREATE TABLE Menu (MenuID int, RestaurantID int, MenuItem varchar(255), Price decimal(5,2)); CREATE TABLE Sales (SaleID int, MenuID int, Quantity int, SaleDate date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT R.RestaurantName, M.MenuItem, SUM(M.Price * S.Quantity) as TotalRevenue FROM (SELECT MenuID, RestaurantID, ROW_NUMBER() OVER (PARTITION BY RestaurantID ORDER BY SUM(Quantity) DESC) as Ranking FROM Sales S INNER JOIN Menu M ON S.MenuID = M.MenuID WHERE YEAR(SaleDate) = 2021 AND QUARTER(SaleDate) = 4 GROUP BY MenuID, RestaurantID) T INNER JOIN Sales S ON T.MenuID = S.MenuID AND T.RestaurantID = S.MenuID INNER JOIN Menu M ON S.MenuID = M.MenuID INNER JOIN Restaurants R ON S.MenuID = R.RestaurantID WHERE T.Ranking <= 3 GROUP BY R.RestaurantName, M.MenuItem;"
    },
    {
        "instruction": "입력 텍스트: Barnett Shale에 있는 우물들의 평균 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Barnett_Shale (well_id INT, well_depth FLOAT); INSERT INTO Barnett_Shale (well_id, well_depth) VALUES (1, 8500), (2, 9000), (3, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(well_depth) FROM Barnett_Shale WHERE well_id IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 각 판사별 기각된 사건의 비율을 가장 높은 비율부터 낮은 비율 순으로 보여주세요.\n\nDDL statements:\nCREATE TABLE judges (judge_id INT, name VARCHAR(50)); INSERT INTO judges (judge_id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Robert Johnson'); CREATE TABLE cases (case_id INT, judge_id INT, case_status VARCHAR(10)); INSERT INTO cases (case_id, judge_id, case_status) VALUES (101, 1, 'open'), (102, 1, 'dismissed'), (103, 2, 'open'), (104, 3, 'open'), (105, 3, 'dismissed'), (106, 3, 'open'), (107, 3, 'dismissed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT judge_id, 100.0 * SUM(CASE WHEN case_status = 'dismissed' THEN 1 ELSE 0 END) / COUNT(*) as dismissed_percentage FROM cases GROUP BY judge_id ORDER BY dismissed_percentage DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 커뮤니티에서 신고된 범죄는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE communities (community_id INT, community_name VARCHAR(50)); CREATE TABLE crimes (crime_id INT, community_id INT, crime_type VARCHAR(50), reported_date DATE); INSERT INTO communities (community_id, community_name) VALUES (1, 'Community A'), (2, 'Community B'), (3, 'Community C'); INSERT INTO crimes (crime_id, community_id, crime_type, reported_date) VALUES (1, 1, 'Theft', '2021-01-01'), (2, 2, 'Vandalism', '2021-02-01'), (3, 3, 'Burglary', '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(crime_id) crime_count, community_name FROM crimes JOIN communities ON crimes.community_id = communities.community_id GROUP BY community_name;"
    },
    {
        "instruction": "입력 텍스트: 각 원인별로 최소 50명의 독특한 기부자로부터 기부를 받은 원인의 최대 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, cause TEXT, donor TEXT, donation_amount DECIMAL(10,2)); INSERT INTO donations (id, cause, donor, donation_amount) VALUES (1, 'Cause A', 'Donor 1', 50.00), (2, 'Cause B', 'Donor 2', 100.00), (3, 'Cause A', 'Donor 3', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cause, MAX(donation_amount) as max_donation FROM donations GROUP BY cause HAVING COUNT(DISTINCT donor) > 50;"
    },
    {
        "instruction": "입력 텍스트: energy_production 테이블에서 각 에너지원별 월 평균 에너지 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_production (id INT, name VARCHAR(50), type VARCHAR(50), production FLOAT, created_at TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, AVG(production) as avg_monthly_production FROM energy_production GROUP BY type ORDER BY avg_monthly_production DESC;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기 해상 화물 운송으로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE shipments (shipment_id INT, shipment_date DATE, shipping_mode VARCHAR(20), revenue DECIMAL(10,2)); INSERT INTO shipments (shipment_id, shipment_date, shipping_mode, revenue) VALUES (1, '2022-04-01', 'Sea Freight', 5000), (2, '2022-06-15', 'Air Freight', 8000), (3, '2022-05-03', 'Sea Freight', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM shipments WHERE shipping_mode = 'Sea Freight' AND shipment_date BETWEEN '2022-04-01' AND '2022-06-30';"
    },
    {
        "instruction": "입력 텍스트: 2022년 아시아 태평양 지역의 장애 지원 프로그램에 할당된 총 예산이 국가별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE DisabilitySupportPrograms (ID INT, ProgramName VARCHAR(255), Budget DECIMAL(10,2), Region VARCHAR(255), Year INT); INSERT INTO DisabilitySupportPrograms (ID, ProgramName, Budget, Region, Year) VALUES (1, 'Asia-Pacific Accommodations Fund', 500000, 'Asia-Pacific', 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, Country, SUM(Budget) as TotalBudget FROM DisabilitySupportPrograms DSP JOIN CountryRegions CR ON DSP.Region = CR.Region GROUP BY Region, Country;"
    },
    {
        "instruction": "입력 텍스트: 특정 제품 카테고리의 판매 비율을 계산하세요.\n\nDDL statements:\nCREATE TABLE sales (id INT, product_id INT, category VARCHAR(255), quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, (SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM sales)) as percentage FROM sales WHERE category = 'category' GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: SchoolB'에서 가장 높은 정신 건강 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE student_mental_health (student_id INT, school VARCHAR(50), mental_health_score INT); INSERT INTO student_mental_health (student_id, school, mental_health_score) VALUES (4, 'SchoolB', 82), (5, 'SchoolB', 78), (6, 'SchoolC', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(mental_health_score) FROM student_mental_health WHERE school = 'SchoolB';"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역의 디지털 자산의 최대 공급량과 최소 공급량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE digital_assets (asset_id INT, asset_name VARCHAR(50), region VARCHAR(50), max_supply INT, min_supply INT); INSERT INTO digital_assets (asset_id, asset_name, region, max_supply, min_supply) VALUES (1, 'Bitcoin', 'Africa', 21000000, 18000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(max_supply) as max_supply, MIN(min_supply) as min_supply FROM digital_assets WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 2021년 3분기에 걸프협력회의(GCC) 국가들에서 대기업에 제공된 샤리아 준수 금융의 총액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE gcc_shariah_financing (id INT, financing_date DATE, business_size VARCHAR(255), financing_amount FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(financing_amount) FROM gcc_shariah_financing WHERE business_size = 'large business' AND financing_date BETWEEN '2021-07-01' AND '2021-09-30';"
    },
    {
        "instruction": "입력 텍스트: 북서쪽' 지역에 있는 터널은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE tunnels (id INT, name TEXT, location TEXT); INSERT INTO tunnels (id, name, location) VALUES (1, 'Tunnel1', 'northwest'), (2, 'Tunnel2', 'northwest'), (3, 'Tunnel3', 'southeast');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM tunnels WHERE location = 'northwest';"
    },
    {
        "instruction": "입력 텍스트: 로스앤젤레스 또는 샌프란시스코에서 열린 전시회에 몇 명의 방문객이 참석했나요?\n\nDDL statements:\nCREATE TABLE Exhibitions (id INT, city VARCHAR(255), visitors INT); INSERT INTO Exhibitions (id, city, visitors) VALUES (1, 'New York', 2500), (2, 'Los Angeles', 1800), (3, 'Chicago', 2200), (4, 'San Francisco', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(visitors) FROM Exhibitions WHERE city IN ('Los Angeles', 'San Francisco');"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 가장 많은 홈런을 기록한 팀을 나열하세요.\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(100), city VARCHAR(50), league VARCHAR(50), division VARCHAR(50), games_played INT, at_bats INT, hits INT, home_runs INT, rbi INT); INSERT INTO teams (team_id, team_name, city, league, division, games_played, at_bats, hits, home_runs, rbi) VALUES (1, 'Red Sox', 'Boston', 'AL', 'East', 120, 450, 120, 25, 75); INSERT INTO teams (team_id, team_name, city, league, division, games_played, at_bats, hits, home_runs, rbi) VALUES (2, 'Yankees', 'New York', 'AL', 'East', 130, 500, 145, 30, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, SUM(home_runs) as total_homeruns  FROM teams  WHERE league = 'AL' AND DATE_PART('year', game_date) >= EXTRACT(YEAR FROM NOW()) - 5  GROUP BY team_name  ORDER BY total_homeruns DESC  LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 호주의 바이오테크 스타트업당 평균 펀딩 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE BiotechStartupFunding (startup_id INT, country VARCHAR(20), funding_amount FLOAT); INSERT INTO BiotechStartupFunding (startup_id, country, funding_amount) VALUES (1, 'Australia', 3000000.00), (2, 'Canada', 2500000.00), (3, 'Australia', 4000000.00), (4, 'United States', 5000000.00), (5, 'Australia', 3500000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(funding_amount) FROM BiotechStartupFunding WHERE country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별 평균 기부금액을 가장 높은 평균부터 낮은 평균 순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, Program TEXT, Amount DECIMAL(10,2)); INSERT INTO Donations (DonationID, DonorID, Program, Amount) VALUES (1, 1, 'ProgramA', 100.00), (2, 1, 'ProgramB', 200.00), (3, 2, 'ProgramA', 50.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Program, AVG(Amount) AS AvgDonation FROM Donations GROUP BY Program ORDER BY AvgDonation DESC;"
    },
    {
        "instruction": "입력 텍스트: autoshow' 테이블에서 전기차의 최소 안전 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE autoshow (vehicle_type VARCHAR(10), safety_rating DECIMAL(3,2)); INSERT INTO autoshow VALUES ('electric', 4.3), ('electric', 4.5), ('gasoline', 3.9), ('gasoline', 4.2), ('hybrid', 4.6), ('electric', 3.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(safety_rating) FROM autoshow WHERE vehicle_type = 'electric';"
    },
    {
        "instruction": "입력 텍스트: 각 어종별로 최소 생물량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_stock (id INT, species VARCHAR, biomass FLOAT); INSERT INTO fish_stock (id, species, biomass) VALUES (1, 'Tilapia', 500.0), (2, 'Salmon', 800.0), (3, 'Trout', 300.0), (4, 'Bass', 700.0), (5, 'Tilapia', 600.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, MIN(biomass) FROM fish_stock GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양' 지역의 모든 블록체인 기술의 이름과 규제 프레임워크는 무엇인가요?\n\nDDL statements:\nCREATE TABLE blockchain_tech (name TEXT, region TEXT, framework TEXT); INSERT INTO blockchain_tech (name, region, framework) VALUES ('Tech1', 'North America', 'Regulation1'), ('Tech2', 'Asia-Pacific', 'Regulation2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, framework FROM blockchain_tech WHERE region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: Dance for All' 행사의 참가자들은 성별에 따라 어떻게 분포되어 있나요?\n\nDDL statements:\nCREATE TABLE GenderDistribution (event_name VARCHAR(50), attendee_gender VARCHAR(10), gender_count INT); INSERT INTO GenderDistribution (event_name, attendee_gender, gender_count) VALUES ('Dance for All', 'Female', 50); INSERT INTO GenderDistribution (event_name, attendee_gender, gender_count) VALUES ('Dance for All', 'Male', 30); INSERT INTO GenderDistribution (event_name, attendee_gender, gender_count) VALUES ('Dance for All', 'Non-binary', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT attendee_gender, gender_count, gender_count * 100.0 / SUM(gender_count) OVER() AS percentage FROM GenderDistribution WHERE event_name = 'Dance for All';"
    },
    {
        "instruction": "입력 텍스트: 모든 유산 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Heritage_Sites (Site_ID INT PRIMARY KEY, Name VARCHAR(100), Country VARCHAR(50), Type VARCHAR(50)); INSERT INTO Heritage_Sites (Site_ID, Name, Country, Type) VALUES (1, 'Angkor Wat', 'Cambodia', 'Cultural'); INSERT INTO Heritage_Sites (Site_ID, Name, Country, Type) VALUES (2, 'Machu Picchu', 'Peru', 'Cultural');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Type FROM Heritage_Sites;"
    },
    {
        "instruction": "입력 텍스트: 각 호텔의 연도별 에너지 소비량 변화율을 계산하세요.\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, country TEXT, energy_consumption FLOAT, year INT); INSERT INTO hotels (hotel_id, hotel_name, city, country, energy_consumption, year) VALUES (1, 'Hotel A', 'Rome', 'Italy', 12000.0, 2021), (1, 'Hotel A', 'Rome', 'Italy', 13000.0, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_name, ((energy_consumption - LAG(energy_consumption) OVER (PARTITION BY hotel_name ORDER BY year))/LAG(energy_consumption) OVER (PARTITION BY hotel_name ORDER BY year))*100 as percentage_change FROM hotels;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 접근성을 위한 기기들의 평균 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE device_accessibility (country VARCHAR(20), device VARCHAR(20), cost FLOAT); INSERT INTO device_accessibility (country, device, cost) VALUES ('South Africa', 'Screen Reader', 90.50), ('Kenya', 'Adaptive Keyboard', 75.20), ('Nigeria', 'Speech Recognition Software', 120.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM device_accessibility WHERE country = 'Africa' AND device = 'Accessibility';"
    },
    {
        "instruction": "입력 텍스트: Al Jazeera'에서 매달 발행된 기사 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE al_jazeera_data (id INT, news_outlet VARCHAR(255), release_month INT, article_type VARCHAR(255)); INSERT INTO al_jazeera_data (id, news_outlet, release_month, article_type) VALUES (1, 'Al Jazeera', 1, 'News'); INSERT INTO al_jazeera_data (id, news_outlet, release_month, article_type) VALUES (2, 'Al Jazeera', 2, 'Opinion'); INSERT INTO al_jazeera_data (id, news_outlet, release_month, article_type) VALUES (3, 'Al Jazeera', 3, 'News'); INSERT INTO al_jazeera_data (id, news_outlet, release_month, article_type) VALUES (4, 'Al Jazeera', 4, 'Opinion'); INSERT INTO al_jazeera_data (id, news_outlet, release_month, article_type) VALUES (5, 'Al Jazeera', 5, 'News');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT release_month, COUNT(*) as count FROM al_jazeera_data WHERE news_outlet = 'Al Jazeera' GROUP BY release_month;"
    },
    {
        "instruction": "입력 텍스트: 의료 제공자의 경력 연수에 따른 정신 건강 점수 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Experience (ExperienceID INT, Experience VARCHAR(50)); CREATE TABLE MentalHealthScores (MH_ID INT, ExperienceID INT, MentalHealthScore INT); INSERT INTO Experience (ExperienceID, Experience) VALUES (1, '0-5 years'), (2, '6-10 years'), (3, '11-20 years'), (4, '20+ years'); INSERT INTO MentalHealthScores (MH_ID, ExperienceID, MentalHealthScore) VALUES (1, 1, 85), (2, 1, 90), (3, 2, 75), (4, 2, 70), (5, 3, 80), (6, 3, 85), (7, 4, 65), (8, 4, 70), (9, 1, 95), (10, 2, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.Experience, AVG(mhs.MentalHealthScore) as Avg_Score FROM MentalHealthScores mhs JOIN Experience e ON mhs.ExperienceID = e.ExperienceID GROUP BY e.Experience;"
    },
    {
        "instruction": "입력 텍스트: 2021년 10월에 필드 C에서 50% 미만의 토양 수분 수준이 기록된 횟수를 결정합니다.\n\nDDL statements:\nCREATE TABLE soil_moisture (field_id VARCHAR(10), moisture INT, reading_date DATE); INSERT INTO soil_moisture (field_id, moisture, reading_date) VALUES ('A', 60, '2021-10-01'), ('C', 40, '2021-10-02'), ('A', 55, '2021-10-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT field_id, COUNT(*) FROM soil_moisture WHERE field_id = 'C' AND moisture < 50 AND reading_date BETWEEN '2021-10-01' AND '2021-10-31';"
    },
    {
        "instruction": "입력 텍스트: 거래 수가 1000회를 초과하는 성공적인 스마트 계약의 총 개수가 각 플랫폼별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE smart_contracts (platform VARCHAR(255), tx_count INT); INSERT INTO smart_contracts (platform, tx_count) VALUES ('Ethereum', 1200), ('Ethereum', 1500), ('Binance', 800), ('Solana', 1800), ('Polkadot', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT platform, COUNT(*) FROM smart_contracts WHERE tx_count > 1000 GROUP BY platform;"
    },
    {
        "instruction": "입력 텍스트: 인구 규모에 따라 농촌 커뮤니티를 순위 매기세요.\n\nDDL statements:\nCREATE TABLE communities (community_id INT, community_name VARCHAR(255), location_id INT, population INT); INSERT INTO communities (community_id, community_name, location_id, population) VALUES (1, 'Rural Community 1', 1, 500), (2, 'Rural Community 2', 1, 700), (3, 'Rural Community 3', 1, 300), (4, 'Rural Community 4', 1, 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT community_name, RANK() OVER (ORDER BY population DESC) AS population_rank FROM communities WHERE location_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 런던에서 전시회당 평균 방문객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ExhibitionDetails (exhibition_id INT, city VARCHAR(50), num_visits INT); INSERT INTO ExhibitionDetails (exhibition_id, city, num_visits) VALUES (1, 'Paris', 1500), (2, 'London', 2000), (3, 'New York', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_visits) FROM ExhibitionDetails WHERE city = 'London';"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 열리는 모든 e스포츠 이벤트를 나열하세요.\n\nDDL statements:\nCREATE TABLE esports_events (event_id INT, event_name VARCHAR(50), location VARCHAR(50)); INSERT INTO esports_events (event_id, event_name, location) VALUES (1, 'DreamHack', 'Sweden'), (2, 'ESL One', 'Germany'), (3, 'PGN', 'Poland'), (4, 'CDL', 'USA'), (5, 'BlizzCon', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT event_name FROM esports_events WHERE location IN ('Sweden', 'Germany', 'Poland');"
    },
    {
        "instruction": "입력 텍스트: \"corporate\" 부서의 각 변호사가 맡은 사건 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Attorneys (id INT, name VARCHAR(50), department VARCHAR(50)); CREATE TABLE CasesAttorneys (attorney_id INT, case_id INT); CREATE TABLE Cases (id INT, case_number INT, opened_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, COUNT(c.id) AS NumberOfCases FROM Attorneys a INNER JOIN CasesAttorneys ca ON a.id = ca.attorney_id INNER JOIN Cases c ON ca.case_id = c.id WHERE a.department = 'corporate' GROUP BY a.name;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월에 각 창고에서 배송된 제품은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Warehouses (WarehouseID int, WarehouseName varchar(255), City varchar(255), Country varchar(255)); CREATE TABLE Shipments (ShipmentID int, WarehouseID int, ProductName varchar(255), Quantity int, ShippedDate date); INSERT INTO Shipments (ShipmentID, WarehouseID, ProductName, Quantity, ShippedDate) VALUES (5, 1, 'Grapes', 40, '2022-01-04'), (6, 2, 'Mangoes', 60, '2022-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT WarehouseID, COUNT(DISTINCT ProductName) AS ProductsShipped FROM Shipments WHERE ShippedDate BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY WarehouseID;"
    },
    {
        "instruction": "입력 텍스트: menu_items 테이블에서 item_id가 123인 항목의 가격을 $15.99로 설정하세요.\n\nDDL statements:\nCREATE TABLE menu_items (menu_id INT, item_id INT, name VARCHAR(50), category VARCHAR(50), description TEXT, price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE menu_items SET price = 15.99 WHERE item_id = 123;"
    },
    {
        "instruction": "입력 텍스트: rural_resources' 테이블에 새로운 자원 배분 기록을 추가합니다.\n\nDDL statements:\nCREATE TABLE rural_resources (id INT PRIMARY KEY, name VARCHAR(50), allocation DECIMAL(5,2), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO rural_resources (id, name, allocation, year) VALUES (1, 'Healthcare Workers', 0.25, 2022);"
    },
    {
        "instruction": "입력 텍스트: 호주와 일본의 팀들이 총 몇 경기를 했나요?\n\nDDL statements:\nCREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(100), Sport VARCHAR(50), Country VARCHAR(50)); INSERT INTO Teams (TeamID, TeamName, Sport, Country) VALUES (1, 'Sydney FC', 'Soccer', 'Australia'); INSERT INTO Teams (TeamID, TeamName, Sport, Country) VALUES (2, 'Tokyo Verdy', 'Soccer', 'Japan'); CREATE TABLE Matches (MatchID INT PRIMARY KEY, HomeTeamID INT, AwayTeamID INT, MatchDate DATETIME); INSERT INTO Matches (MatchID, HomeTeamID, AwayTeamID, MatchDate) VALUES (1, 1, 2, '2022-05-01 15:00:00'); INSERT INTO Matches (MatchID, HomeTeamID, AwayTeamID, MatchDate) VALUES (2, 2, 1, '2022-05-02 16:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as TotalMatches FROM Matches JOIN Teams ON Matches.HomeTeamID = Teams.TeamID OR Matches.AwayTeamID = Teams.TeamID WHERE Teams.Country IN ('Australia', 'Japan');"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에서 지속 가능한 건축 프로젝트의 평균 프로젝트 기간은 도시별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE project (id INT, name VARCHAR(255), city VARCHAR(255), timeline FLOAT);CREATE TABLE sustainable_building (id INT, project_id INT, sustainable_practice VARCHAR(255));CREATE TABLE city (id INT, name VARCHAR(255), state VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(project.timeline), city.name FROM project INNER JOIN sustainable_building ON project.id = sustainable_building.project_id INNER JOIN city ON project.city = city.name WHERE city.state = 'Texas' GROUP BY city.name;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 군사 장비 유지 보수 요청이 가장 많은 상위 3개국을 나열하시오.\n\nDDL statements:\nCREATE TABLE maintenance_requests (request_id INT, equipment_id INT, request_date DATE, country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS num_requests FROM maintenance_requests WHERE request_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY country ORDER BY num_requests DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 제조업' 분류에 속하는 노조의 총 회원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE unions (id INT, name VARCHAR(255), industry VARCHAR(255), member_count INT); INSERT INTO unions (id, name, industry, member_count) VALUES (1, 'Union A', 'manufacturing', 500), (2, 'Union B', 'technology', 300), (3, 'Union C', 'manufacturing', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(member_count) FROM unions WHERE industry = 'manufacturing';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 가장 높은 수익을 올린 문화 유산 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE heritage_sites (site_id INT, site_name TEXT, country TEXT, revenue INT); INSERT INTO heritage_sites (site_id, site_name, country, revenue) VALUES (1, 'Egyptian Pyramids', 'Africa', 500000), (2, 'Roman Colosseum', 'Europe', 700000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_name, MAX(revenue) FROM heritage_sites WHERE country = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: \"instructors\" 테이블에 \"시애틀\"에서 \"데이터 윤리\"를 가르치는 \"Dr. Melissa\"에 대한 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE instructors (id INT PRIMARY KEY, name VARCHAR(50), course VARCHAR(50), location VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO instructors (id, name, course, location) VALUES (1, 'Dr. Melissa', 'Data Ethics', 'Seattle');"
    },
    {
        "instruction": "입력 텍스트: 유럽 연합에서의 군용 항공기 유지 보수 요청 건수를 내림차순으로 알려주세요.\n\nDDL statements:\nCREATE TABLE military_aircraft_maintenance (request_id INT, aircraft_type TEXT, region TEXT, maintenance_date DATE); INSERT INTO military_aircraft_maintenance (request_id, aircraft_type, region, maintenance_date) VALUES (1, 'F-16 Fighting Falcon', 'European Union', '2022-02-14');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM military_aircraft_maintenance WHERE region = 'European Union' ORDER BY COUNT(*) DESC;"
    },
    {
        "instruction": "입력 텍스트: 중동 지역의 각 방위 프로젝트에 대한 지정학적 위험 점수 추이는 월별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Defense_Projects (project_id INT, project_name VARCHAR(255), region VARCHAR(255), risk_score FLOAT, risk_date DATE); INSERT INTO Defense_Projects (project_id, project_name, region, risk_score, risk_date) VALUES (1, 'Project E', 'Middle East', 75, '2020-02-01'), (2, 'Project F', 'Middle East', 80, '2020-03-01'), (3, 'Project G', 'Middle East', 60, '2020-04-01'), (4, 'Project H', 'Middle East', 65, '2020-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT risk_date, AVG(risk_score) AS avg_risk_score, RANK() OVER (ORDER BY AVG(risk_score) DESC) AS risk_rank FROM Defense_Projects WHERE region = 'Middle East' GROUP BY risk_date, MONTH(risk_date);"
    },
    {
        "instruction": "입력 텍스트: 2020년에 1000달러 미만 기부한 소액 기부자들의 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT PRIMARY KEY, donation_amount DECIMAL(10, 2), donation_date DATE); INSERT INTO donors (donor_id, donation_amount, donation_date) VALUES (1, 250, '2020-01-01'), (2, 750, '2020-01-03'), (3, 900, '2020-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE donation_amount < 1000 AND YEAR(donation_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 멕시코에서 관련 행사가 2회 이상 있는 언어 보존 활동을 나열하세요.\n\nDDL statements:\nCREATE TABLE HeritageSites (id INT, name VARCHAR(255), country VARCHAR(255), UNIQUE (id)); CREATE TABLE Languages (id INT, name VARCHAR(255), heritage_site_id INT, UNIQUE (id), FOREIGN KEY (heritage_site_id) REFERENCES HeritageSites(id)); CREATE TABLE Events (id INT, name VARCHAR(255), language_id INT, year INT, UNIQUE (id), FOREIGN KEY (language_id) REFERENCES Languages(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT l.name FROM Languages l JOIN Events e ON l.id = e.language_id WHERE l.country = 'Mexico' GROUP BY l.name HAVING COUNT(DISTINCT e.id) > 2 AND e.year BETWEEN 2017 AND 2022;"
    },
    {
        "instruction": "입력 텍스트: 재난 대비 행사가 총 몇 개 있으며, 각 행사의 해당 위치는 어디인가요?\n\nDDL statements:\nCREATE TABLE events (event_id INT, event_name TEXT, location_id INT); CREATE TABLE locations (location_id INT, district_id INT, location_text TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM events; SELECT e.event_name, l.location_text FROM events e INNER JOIN locations l ON e.location_id = l.location_id;"
    },
    {
        "instruction": "입력 텍스트: 각 주별로 재향 군인 고용 통계를 계산하세요\n\nDDL statements:\nCREATE TABLE veteran_employment (state VARCHAR(2), employed_veterans INT, total_veterans INT, employment_rate FLOAT); INSERT INTO veteran_employment (state, employed_veterans, total_veterans, employment_rate) VALUES ('CA', 15000, 25000, 0.6); INSERT INTO veteran_employment (state, employed_veterans, total_veterans, employment_rate) VALUES ('TX', 12000, 20000, 0.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, employed_veterans, total_veterans, (employed_veterans/total_veterans) as employment_rate FROM veteran_employment;"
    },
    {
        "instruction": "입력 텍스트: Europe' 지역의 가뭄 상황을 반영하여 'drought_impact' 테이블에 새로운 데이터를 삽입하세요.\n\nDDL statements:\nCREATE TABLE drought_impact (id INT PRIMARY KEY, location VARCHAR(20), impact_level VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO drought_impact (id, location, impact_level) VALUES (7, 'Mediterranean', 'severe'), (8, 'Northern Europe', 'moderate'), (9, 'Eastern Europe', 'mild');"
    },
    {
        "instruction": "입력 텍스트: Country B'에 있는 '제조사'로부터 나온 모든 무기를 나열하세요.\n\nDDL statements:\nCREATE TABLE weapons (id INT, name VARCHAR(255), manufacturer VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM weapons WHERE manufacturer IN (SELECT manufacturer FROM companies WHERE country = 'Country B');"
    },
    {
        "instruction": "입력 텍스트: USDA가 지난 1년 동안 남부 지역에서 발행한 식품 안전 위반 건수는 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE USDAViolations (id INT, violationId INT, facilityId INT, region VARCHAR(50), violationDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM USDAViolations WHERE region = 'Southern' AND violationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 2021년 텍사스에서 지급된 총 임금이 가장 높은 상위 5개 건설 노동 통계를 나열하세요.\n\nDDL statements:\nCREATE TABLE Construction_Labor (labor_id INT, job_title VARCHAR(50), hourly_wage DECIMAL(10, 2), yearly_wages DECIMAL(20, 2), state VARCHAR(50)); INSERT INTO Construction_Labor (labor_id, job_title, hourly_wage, yearly_wages, state) VALUES (1, 'Construction manager', 45.00, 93600.00, 'Texas'); INSERT INTO Construction_Labor (labor_id, job_title, hourly_wage, yearly_wages, state) VALUES (2, 'Electrician', 30.00, 62400.00, 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT job_title, SUM(yearly_wages) AS Total_Wages FROM Construction_Labor WHERE state = 'Texas' AND year_issued = 2021 GROUP BY job_title ORDER BY Total_Wages DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 주문이 없었던 날짜의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE orders (id INT, order_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATEDIFF('2022-03-01', LAG(order_date, 1) OVER (ORDER BY order_date)) as num_days FROM orders WHERE order_date BETWEEN '2022-02-01' AND '2022-02-28' HAVING num_days > 1;"
    },
    {
        "instruction": "입력 텍스트: 이슬람 금융 능력 프로그램을 완료한 모든 고객과 그들의 거래 내역을 나열합니다.\n\nDDL statements:\nCREATE TABLE financial_capability_program (client_id INT, program_name VARCHAR(30), program_status VARCHAR(20)); INSERT INTO financial_capability_program (client_id, program_name, program_status) VALUES (301, 'Islamic Financial Capability', 'Completed'), (302, 'Financial Wellbeing', 'Enrolled'), (303, 'Islamic Financial Capability', 'Completed'), (304, 'Financial Capability', 'Dropped Out'); CREATE TABLE client_transactions (client_id INT, transaction_id INT, transaction_amount DECIMAL(10,2)); INSERT INTO client_transactions (client_id, transaction_id, transaction_amount) VALUES (301, 3010, 100.00), (301, 3011, 200.00), (302, 3012, 300.00), (303, 3013, 400.00), (303, 3014, 500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM financial_capability_program INNER JOIN client_transactions ON financial_capability_program.client_id = client_transactions.client_id WHERE program_status = 'Completed';"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 지역별 에너지 저장 용량의 최대값과 최소값의 차이를 계산하세요.\n\nDDL statements:\nCREATE TABLE energy_storage (date DATE, region VARCHAR(255), capacity INT, usage INT); INSERT INTO energy_storage (date, region, capacity, usage) VALUES ('2022-01-01', 'North', 1200, 700), ('2022-01-01', 'South', 1500, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(capacity) - MIN(capacity) FROM energy_storage WHERE EXTRACT(YEAR FROM date) = 2022 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 모든 웰빙 프로그램에 참여한 적이 없는 모든 운동선수를 나열하세요.\n\nDDL statements:\nCREATE TABLE athletes (athlete_id INT, name VARCHAR(30), team VARCHAR(20)); INSERT INTO athletes VALUES (1, 'Durant', 'Nets'); INSERT INTO athletes VALUES (2, 'Curry', 'Warriors'); CREATE TABLE wellbeing_programs (program_id INT, athlete_id INT, program_name VARCHAR(30)); INSERT INTO wellbeing_programs VALUES (1, 1, 'Yoga');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT athletes.name FROM athletes LEFT JOIN wellbeing_programs ON athletes.athlete_id = wellbeing_programs.athlete_id WHERE wellbeing_programs.athlete_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 시각 예술 프로그램당 평균 자금은 얼마이며, 자금액이 10000 미만인 프로그램은 제외하고 계산하시겠습니까?\n\nDDL statements:\nCREATE TABLE VisualArtPrograms (programID INT, fundingAmount DECIMAL(10,2)); INSERT INTO VisualArtPrograms (programID, fundingAmount) VALUES (1, 12000.00), (2, 8000.00), (3, 15000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fundingAmount) FROM VisualArtPrograms WHERE fundingAmount >= 10000;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 고객 수와 각 국가별 평균 주문 가치를 찾으세요.\n\nDDL statements:\nCREATE TABLE customer_orders (customer_id INT, country VARCHAR(255), order_date DATE, order_value DECIMAL(10,2)); INSERT INTO customer_orders VALUES (1, 'USA', '2022-01-01', 100.00), (2, 'Canada', '2022-01-05', 200.00), (3, 'Mexico', '2022-02-01', 300.00), (4, 'USA', '2022-02-03', 400.00), (5, 'Canada', '2022-03-01', 500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as num_customers, AVG(order_value) as avg_order_value FROM customer_orders GROUP BY country ORDER BY num_customers DESC;"
    },
    {
        "instruction": "입력 텍스트: 테이블 'vessels'에 'VesselE'라는 이름, port_id 2, 속도 24.0, 화물 무게 900인 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, port_id INT, speed FLOAT, cargo_weight INT); INSERT INTO vessels (id, name, port_id, speed, cargo_weight) VALUES (1, 'VesselA', 1, 20.5, 400), (2, 'VesselB', 1, 21.3, 600), (3, 'VesselC', 2, 25.0, 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO vessels (name, port_id, speed, cargo_weight) VALUES ('VesselE', 2, 24.0, 900);"
    },
    {
        "instruction": "입력 텍스트: 모든 해산의 평균 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE seamounts (id INT, name TEXT, depth FLOAT); INSERT INTO seamounts (id, name, depth) VALUES (1, 'Atlantis', 2500.5), (2, 'Everest', 3200.2), (3, 'Poseidon', 4100.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(depth) FROM seamounts;"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드별로 생산된 총 폐기물 양은 얼마인가요?\n\nDDL statements:\nCREATE TABLE waste_production (id INT, brand VARCHAR(255), waste_quantity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand, SUM(waste_quantity) FROM waste_production GROUP BY brand;"
    },
    {
        "instruction": "입력 텍스트: \"Government\"에 의해 자금이 지원된 이벤트의 총 참석자 수가 가장 높은 도시와 그 총 참석자 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE events (event_id INT, event_name VARCHAR(50), city VARCHAR(30), funding_source VARCHAR(30), attendance INT); INSERT INTO events (event_id, event_name, city, funding_source, attendance) VALUES (1, 'Theater Play', 'New York', 'Government', 200), (2, 'Art Exhibit', 'Los Angeles', 'Private Donors', 300), (3, 'Music Festival', 'New York', 'Government', 400), (4, 'Dance Performance', 'New York', 'Government', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(attendance) as total_attendance FROM events WHERE funding_source = 'Government' GROUP BY city ORDER BY total_attendance DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 일리노이 주에서 종결된 민사 사건 중 최대 심리 횟수는 몇 회인가요?\n\nDDL statements:\nCREATE TABLE CivilCases (CaseID INT, CaseType TEXT, NumHearings INT, ClosureDate DATE, State TEXT); INSERT INTO CivilCases (CaseID, CaseType, NumHearings, ClosureDate, State) VALUES (1, 'Civil', 5, '2018-01-10', 'Illinois');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(NumHearings) FROM CivilCases WHERE State = 'Illinois' AND YEAR(ClosureDate) BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) AND CaseType = 'Civil';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주의 커뮤니티 보건 근로자들의 평균 문화 역량 점수는 카운티별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE community_health_workers (worker_id INT, name TEXT, county TEXT, cultural_competency_score INT); INSERT INTO community_health_workers (worker_id, name, county, cultural_competency_score) VALUES (1, 'James', 'Los Angeles', 85), (2, 'Sophia', 'San Francisco', 90), (3, 'Carlos', 'San Diego', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT county, AVG(cultural_competency_score) as avg_score  FROM community_health_workers  WHERE county IN ('Los Angeles', 'San Francisco', 'San Diego')  GROUP BY county;"
    },
    {
        "instruction": "입력 텍스트: ID가 3인 독자의 기록을 삭제하세요(해당 기록이 존재한다면).\n\nDDL statements:\nCREATE TABLE readers (id INT, name VARCHAR(50), age INT, preference VARCHAR(50)); INSERT INTO readers (id, name, age, preference) VALUES (1, 'John Doe', 25, 'technology'), (2, 'Jane Smith', 32, 'politics'), (3, 'Bob Johnson', 45, 'sports');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM readers WHERE id = 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 각 국가의 총 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Production (ProductionID INT, WellID INT, ProductionDate DATE, ProductionRate FLOAT, Country VARCHAR(50)); INSERT INTO Production (ProductionID, WellID, ProductionDate, ProductionRate, Country) VALUES (1, 1, '2021-01-01', 500, 'USA'), (2, 2, '2021-01-15', 600, 'Canada'), (3, 3, '2022-02-01', 700, 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, SUM(ProductionRate) AS TotalProduction FROM Production WHERE ProductionDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 경매로 판매된 이탈리아 화가의 그림들의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Auctions (id INT, city VARCHAR(50), price DECIMAL(10,2), art_id INT); CREATE TABLE Paintings (id INT, title VARCHAR(50), artist_nationality VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Auctions.price) FROM Auctions INNER JOIN Paintings ON Auctions.art_id = Paintings.id WHERE Auctions.city = 'New York' AND Paintings.artist_nationality = 'Italian';"
    },
    {
        "instruction": "입력 텍스트: wildlife' 테이블에서 모든 동물과 그들의 서식지를 나열하세요.\n\nDDL statements:\nCREATE TABLE wildlife (id INT, animal VARCHAR(255), habitat VARCHAR(255)); INSERT INTO wildlife (id, animal, habitat) VALUES (1, 'Bear', 'Forest'), (2, 'Wolf', 'Tundra'), (3, 'Eagle', 'Mountains');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animal, habitat FROM wildlife;"
    },
    {
        "instruction": "입력 텍스트: 독일에서 차량 유형별 평균 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Vehicles (Type VARCHAR(20), Country VARCHAR(20), CO2_Emission INT); INSERT INTO Vehicles VALUES ('Car', 'Germany', 120), ('SUV', 'Germany', 150), ('Truck', 'Germany', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Type, AVG(CO2_Emission) AS Avg_Emission FROM Vehicles WHERE Country = 'Germany' GROUP BY Type;"
    },
    {
        "instruction": "입력 텍스트: 호주 농촌 지역에 거주하는 주민들에게 가장 가까운 소아과 의사까지의 평균 거리는 얼마이며, 10만 명당 이용 가능한 소아과 의사는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE pediatricians (pediatrician_id INT, specialty VARCHAR(255), location VARCHAR(255)); INSERT INTO pediatricians (pediatrician_id, specialty, location) VALUES (90, 'pediatrician', 'rural Australia'); CREATE TABLE residents (resident_id INT, location VARCHAR(255), population INT); INSERT INTO residents (resident_id, location, population) VALUES (91, 'rural Australia', 120000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(distance) AS avg_distance, COUNT(pediatricians.pediatrician_id) * 100000.0 / residents.population AS pediatricians_per_100k FROM pediatricians INNER JOIN residents ON pediatricians.location = residents.location JOIN (SELECT location, MIN(distance) AS distance FROM distances GROUP BY location) AS nearest_pediatrician ON pediatricians.location = nearest_pediatrician.location WHERE pediatricians.specialty = 'pediatrician' AND residents.location LIKE 'rural% Australia';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 보고된 알고리즘 공정성 문제의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE issues (id INT, description VARCHAR(200), date DATE); INSERT INTO issues (id, description, date) VALUES (1, 'Algorithm X is biased against certain groups', '2022-01-01'), (2, 'Algorithm Y produces inaccurate results', '2021-12-15'), (3, 'Algorithm Z violates privacy regulations', '2022-03-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM issues WHERE date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 태평양에 있는 해양보호구역 중에서 수심이 150미터보다 깊은 곳의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name TEXT, location TEXT, min_depth INTEGER, max_depth INTEGER); INSERT INTO marine_protected_areas (name, location, min_depth, max_depth) VALUES ('Area A', 'Pacific', 100, 200), ('Area B', 'Pacific', 150, 250), ('Area C', 'Pacific', 50, 120), ('Area D', 'Pacific', 200, 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_protected_areas WHERE location = 'Pacific' AND min_depth > 150;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 국가별 여행 경보의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE travel_advisories (advisory_id INT, country TEXT, year INT, reason TEXT); INSERT INTO travel_advisories (advisory_id, country, year, reason) VALUES (1, 'Canada', 2021, 'Health'), (2, 'Mexico', 2021, 'Political'), (3, 'USA', 2021, 'Safety'), (4, 'Canada', 2022, 'Safety'), (5, 'Mexico', 2022, 'Natural Disaster');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM travel_advisories WHERE year = 2021 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기에 가입했지만 운동에 참석하지 않은 회원을 확인하세요\n\nDDL statements:\nCREATE TABLE member_data (member_id INT, join_date DATE); CREATE TABLE member_workouts (member_id INT, workout_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mdata.member_id FROM member_data mdata LEFT JOIN member_workouts mworkouts ON mdata.member_id = mworkouts.member_id WHERE mdata.join_date BETWEEN '2022-04-01' AND '2022-06-30' AND mworkouts.member_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 동부 지역의 고객들이 주문한 칼로리가 가장 높은 상위 2개의 디저트는 무엇인가요?\n\nDDL statements:\nCREATE TABLE restaurants (restaurant_id INT, name TEXT, region TEXT); INSERT INTO restaurants (restaurant_id, name, region) VALUES (1, 'Big Burger', 'East'), (2, 'Veggies R Us', 'Midwest'), (3, 'Tasty Bites', 'West'); CREATE TABLE orders (order_id INT, dish TEXT, customer_id INT, restaurant_id INT); INSERT INTO orders (order_id, dish, customer_id, restaurant_id) VALUES (1, 'Veggie Delight', 5, 2), (2, 'Cheeseburger', 6, 1), (3, 'Tofu Stir Fry', 7, 2), (4, 'BBQ Ribs', 8, 1), (5, 'Chocolate Mousse', 9, 1); CREATE TABLE menu_items (item_id INT, name TEXT, calories INT, is_dessert BOOLEAN); INSERT INTO menu_items (item_id, name, calories, is_dessert) VALUES (1, 'Grilled Chicken Salad', 350, false), (2, 'Beef Burger', 600, false), (3, 'Veggie Wrap', 500, false), (4, 'Fish Tacos', 400, false), (5, 'Chocolate Mousse', 800, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name, m.calories FROM orders o JOIN restaurants r ON o.restaurant_id = r.restaurant_id JOIN menu_items m ON o.dish = m.name WHERE r.region = 'East' AND m.is_dessert = true GROUP BY m.name ORDER BY SUM(m.calories) DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 2021년 상반기에 페루의 원주민 공동체에서 추출한 은의 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE IndigenousCommunities (CommunityID int, CommunityName varchar(50), Country varchar(50)); INSERT INTO IndigenousCommunities VALUES (1, 'CommunityA', 'Peru'), (2, 'CommunityB', 'Brazil'), (3, 'CommunityC', 'Canada'); CREATE TABLE ExtractionData (CommunityID int, ExtractionDate date, Material varchar(10), Quantity int); INSERT INTO ExtractionData VALUES (1, '2021-01-01', 'Silver', 1000), (1, '2021-01-15', 'Silver', 1500), (2, '2021-01-30', 'Silver', 800), (1, '2021-02-05', 'Silver', 1200), (3, '2021-03-01', 'Silver', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ic.CommunityName, SUM(ed.Quantity) as TotalExtraction FROM ExtractionData ed JOIN IndigenousCommunities ic ON ed.CommunityID = ic.CommunityID WHERE ed.ExtractionDate BETWEEN '2021-01-01' AND '2021-06-30' AND ed.Material = 'Silver' AND ic.Country = 'Peru' GROUP BY ic.CommunityName;"
    },
    {
        "instruction": "입력 텍스트: campaigns_2023'에 id=6, 이름='Mindful Togetherness', 예산=12000, 지역='Southeast'인 새로운 정신 건강 캠페인을 추가하세요.\n\nDDL statements:\nCREATE TABLE campaigns_2023 (campaign_id INT, name VARCHAR(50), budget INT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO campaigns_2023 (campaign_id, name, budget, region) VALUES (6, 'Mindful Togetherness', 12000, 'Southeast');"
    },
    {
        "instruction": "입력 텍스트: Road_Construction' 테이블에서 완료된 프로젝트의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Road_Construction (project_id INT, project_name VARCHAR(100), total_cost FLOAT, status VARCHAR(20)); INSERT INTO Road_Construction (project_id, project_name, total_cost, status) VALUES (1, 'Highway Expansion', 15000000.00, 'in_progress'), (3, 'Bridge Replacement', 7000000.00, 'completed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(total_cost) FROM Road_Construction WHERE status = 'completed';"
    },
    {
        "instruction": "입력 텍스트: ESG 요인 중에서 총 투자 금액이 가장 높은 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE investments_esg (id INT, esg_factor VARCHAR(255), investment_amount INT); INSERT INTO investments_esg (id, esg_factor, investment_amount) VALUES (1, 'E', 1200000), (2, 'S', 550000), (3, 'G', 1050000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT esg_factor, SUM(investment_amount) FROM investments_esg GROUP BY esg_factor ORDER BY SUM(investment_amount) DESC;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에서 절도죄로 인한 평균 형량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE convictions (id INT, state VARCHAR(255), crime VARCHAR(255), sentence_length INT); INSERT INTO convictions (id, state, crime, sentence_length) VALUES (1, 'California', 'Burglary', 5), (2, 'California', 'Burglary', 3), (3, 'California', 'Murder', 25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(sentence_length) FROM convictions WHERE state = 'California' AND crime = 'Burglary';"
    },
    {
        "instruction": "입력 텍스트: 유럽에 있는 AI 기술을 도입한 호텔의 최소 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT, rating FLOAT, ai_adoption BOOLEAN); INSERT INTO hotels (hotel_id, hotel_name, country, rating, ai_adoption) VALUES (1, 'The Eiffel Tower', 'France', 4.5, true), (2, 'The London Eye', 'UK', 4.0, true), (3, 'The Colosseum', 'Italy', 4.8, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(rating) FROM hotels WHERE ai_adoption = true AND country = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 위치한 벤더 회사들과의 모든 방위 계약을 계약 가치가 높은 순으로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE defense_contracts (contract_id INT, contract_value FLOAT, vendor_state VARCHAR(2)); INSERT INTO defense_contracts (contract_id, contract_value, vendor_state) VALUES (1, 1000000, 'TX'), (2, 500000, 'CA'), (3, 750000, 'TX');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM defense_contracts WHERE vendor_state = 'TX' ORDER BY contract_value DESC;"
    },
    {
        "instruction": "입력 텍스트: 변호사 Jane Smith의 승률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE attorneys (attorney_id INT, name VARCHAR(50)); INSERT INTO attorneys (attorney_id, name) VALUES (1, 'Jane Smith'); CREATE TABLE cases (case_id INT, attorney_id INT, outcome VARCHAR(10)); INSERT INTO cases (case_id, attorney_id, outcome) VALUES (1, 1, 'Win'), (2, 1, 'Loss');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM cases WHERE attorney_id = 1) AS win_rate FROM cases WHERE attorney_id = 1 AND outcome = 'Win';"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 기후 변화에 초점을 맞춘 원인에 기부한 기부자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), DonationAmount DECIMAL(10,2), CauseID INT, FirstDonationDate DATE, Country VARCHAR(50));CREATE TABLE Causes (CauseID INT, CauseName VARCHAR(50), Focus VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT D.Country, COUNT(DISTINCT D.DonorID) FROM Donors D JOIN Causes C ON D.CauseID = C.CauseID WHERE C.Focus = 'climate change' GROUP BY D.Country;"
    },
    {
        "instruction": "입력 텍스트: 생산량이 가장 많은 상위 2개 시설에서 사용된 고유 화학 물질의 종류를 나열하세요.\n\nDDL statements:\nCREATE TABLE facility_production (name VARCHAR(50), product VARCHAR(20), quantity INT); INSERT INTO facility_production VALUES ('facility E', 'chemical X', 400); INSERT INTO facility_production VALUES ('facility F', 'chemical Y', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT product FROM (SELECT facility, product, ROW_NUMBER() OVER (PARTITION BY facility ORDER BY quantity DESC) AS rn FROM facility_production) tmp WHERE rn <= 2;"
    },
    {
        "instruction": "입력 텍스트: 2016년부터 2020년 사이에 우간다에서 가장 성공률이 높았던 농업 혁신 프로젝트는 무엇인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, country VARCHAR(50), project_name VARCHAR(100), start_date DATE, end_date DATE, success BOOLEAN); INSERT INTO projects (id, country, project_name, start_date, end_date, success) VALUES (1, 'Uganda', 'Irrigation Systems', '2016-01-01', '2017-12-31', true), (2, 'Uganda', 'Modern Farming Techniques', '2017-01-01', '2018-12-31', false), (3, 'Uganda', 'Organic Farming', '2018-01-01', '2019-12-31', true), (4, 'Uganda', 'Precision Agriculture', '2019-01-01', '2020-12-31', false), (5, 'Uganda', 'Sustainable Agriculture', '2020-01-01', '2021-12-31', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, AVG(success) FROM projects WHERE country = 'Uganda' AND YEAR(start_date) BETWEEN 2016 AND 2020 GROUP BY project_name ORDER BY AVG(success) DESC;"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기 기준으로 항공우주 분야에서 진행된 기간이 12개월에서 24개월 사이인 방위 사업의 총 수익은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE defense_projects (id INT, project_name VARCHAR(50), sector VARCHAR(20), start_date DATE, end_date DATE, revenue FLOAT); INSERT INTO defense_projects (id, project_name, sector, start_date, end_date, revenue) VALUES (1, 'Project A', 'Aerospace', '2021-01-01', '2023-06-30', 12000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM defense_projects WHERE sector = 'Aerospace' AND DATEDIFF(end_date, start_date) BETWEEN 12 AND 24 AND quarter = 'Q1' AND year = 2023;"
    },
    {
        "instruction": "입력 텍스트: 지난 주 '런던'에 있는 각 고객의 총 거래 금액과 거래 횟수를 찾으세요.\n\nDDL statements:\nCREATE TABLE clients (id INT, name TEXT); CREATE TABLE transactions (client_id INT, amount DECIMAL(10,2), transaction_time TIMESTAMP); INSERT INTO clients (id, name) VALUES (1, 'Charlie'), (2, 'Diana'); INSERT INTO transactions (client_id, amount, transaction_time) VALUES (1, 200.00, '2022-01-01 10:00:00'), (1, 300.00, '2022-01-07 14:30:00'), (2, 100.00, '2022-01-03 08:15:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT clients.name, SUM(transactions.amount) AS total_amount, COUNT(transactions.client_id) AS transaction_count FROM clients JOIN transactions ON clients.id = transactions.client_id WHERE clients.name IN ('Charlie', 'Diana') AND transactions.transaction_time >= NOW() - INTERVAL '1 week';"
    },
    {
        "instruction": "입력 텍스트: wells' 테이블에서 전날 대비 가스 생산량의 변화율을 계산하세요.\n\nDDL statements:\nCREATE TABLE wells (well_name VARCHAR(50), date DATE, gas_production NUMERIC(10,2)); INSERT INTO wells (well_name, date, gas_production) VALUES ('Well J', '2022-01-01', 50), ('Well J', '2022-01-02', 52), ('Well J', '2022-01-03', 55), ('Well J', '2022-01-04', 58), ('Well J', '2022-01-05', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT date, gas_production, (gas_production - LAG(gas_production, 1) OVER (ORDER BY date)) / LAG(gas_production, 1) OVER (ORDER BY date) AS percentage_change FROM wells WHERE well_name = 'Well J';"
    },
    {
        "instruction": "입력 텍스트: 2018년 이후 뉴욕에서 정신 건강 단체가 시작한 모든 캠페인을 나열하세요.\n\nDDL statements:\nCREATE TABLE campaigns (campaign_id INT, organization TEXT, location TEXT, launch_date DATE); INSERT INTO campaigns (campaign_id, organization, location, launch_date) VALUES (1, 'MHA', 'New York', '2019-04-01'); INSERT INTO campaigns (campaign_id, organization, location, launch_date) VALUES (2, 'NAMI', 'California', '2018-02-14');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM campaigns WHERE location = 'New York' AND launch_date >= '2018-01-01';"
    },
    {
        "instruction": "입력 텍스트: AI 윤리 이니셔티브에 대한 예산이 가장 높은 상위 2개 지역의 평균 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE AI_Ethics (region VARCHAR(50), budget FLOAT); INSERT INTO AI_Ethics (region, budget) VALUES ('North America', 5000000), ('South America', 3000000), ('Europe', 7000000), ('Asia', 6000000), ('Africa', 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(AI_Ethics.budget) FROM AI_Ethics WHERE AI_Ethics.region IN (SELECT AI_Ethics.region FROM AI_Ethics ORDER BY AI_Ethics.budget DESC LIMIT 2);"
    },
    {
        "instruction": "입력 텍스트: 아프리카 출신 개발자들이 시작한 모든 블록체인 프로젝트의 이름과 시작 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE public.developers (id SERIAL PRIMARY KEY, name VARCHAR(100), age INT, country VARCHAR(50)); INSERT INTO public.developers (name, age, country) VALUES ('Damilola Adebayo', 30, 'Nigeria'); INSERT INTO public.developers (name, age, country) VALUES ('Sarah Kariuki', 28, 'Kenya');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT bp.name, bp.start_date FROM public.blockchain_projects bp INNER JOIN public.developers d ON bp.developer_id = d.id WHERE d.country = 'Nigeria' OR d.country = 'Kenya';"
    },
    {
        "instruction": "입력 텍스트: New York' 지역의 지하철에 대해 요금이 $3.50인 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE subway (id INT, region VARCHAR(20), fare DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO subway (id, region, fare) VALUES (1, 'New York', 3.50);"
    },
    {
        "instruction": "입력 텍스트: 캐나다'에서 설립 연도의 중앙값이 가장 높고 가장 낮은 산업은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name VARCHAR(50), founding_year INT, industry VARCHAR(50), country VARCHAR(50)); INSERT INTO company (id, name, founding_year, industry, country) VALUES (1, 'Acme Inc', 2010, 'Tech', 'USA'); INSERT INTO company (id, name, founding_year, industry, country) VALUES (2, 'Bravo Corp', 2015, 'Biotech', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, MEDIAN(founding_year) as industry_median_founding_year FROM company WHERE country = 'Canada' GROUP BY industry ORDER BY industry_median_founding_year;"
    },
    {
        "instruction": "입력 텍스트: Blue Cars'에서 제조한 전기차의 평균 배터리 범위는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ElectricVehicleStats (ID INT, Manufacturer VARCHAR(255), AvgBatteryRange FLOAT); INSERT INTO ElectricVehicleStats (ID, Manufacturer, AvgBatteryRange) VALUES (1, 'Green Motors', 280.0), (2, 'Blue Cars', 220.0), (3, 'FutureAutomobiles', 380.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AvgBatteryRange FROM ElectricVehicleStats WHERE Manufacturer = 'Blue Cars';"
    },
    {
        "instruction": "입력 텍스트: 호주의 모든 에너지원에 설치된 총 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE total_capacity (country VARCHAR(255), source_type VARCHAR(255), capacity INT); INSERT INTO total_capacity (country, source_type, capacity) VALUES ('Australia', 'Coal', 25000), ('Australia', 'Gas', 18000), ('Australia', 'Wind', 8000), ('Australia', 'Solar', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM total_capacity WHERE country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 각 개인의 재정 복지 점수와 해당 순위를 순위별로 정렬하여 표시합니다.\n\nDDL statements:\nCREATE TABLE financial_wellbeing (individual_id INT, financial_wellbeing_score DECIMAL(5, 2)); INSERT INTO financial_wellbeing (individual_id, financial_wellbeing_score) VALUES (1, 75.50), (2, 80.25), (3, 68.75), (4, 90.00), (5, 72.25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT individual_id, financial_wellbeing_score, ROW_NUMBER() OVER (ORDER BY financial_wellbeing_score DESC) AS rank FROM financial_wellbeing ORDER BY rank;"
    },
    {
        "instruction": "입력 텍스트: player_stats 테이블에서 kills가 10 미만인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE player_stats (player_id INT, game_id INT, kills INT, deaths INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM player_stats WHERE kills < 10;"
    },
    {
        "instruction": "입력 텍스트: 재생 에너지 분야에서 근무하는 직원들에게 지급된 총 급여를 지역별로 나누어 보여주세요.\n\nDDL statements:\nCREATE TABLE regions (id INT, region VARCHAR(50)); CREATE TABLE workers (id INT, name VARCHAR(50), region VARCHAR(50), salary DECIMAL(10,2)); INSERT INTO regions (id, region) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO workers (id, name, region, salary) VALUES (1, 'Sara', 'North', 50000.00), (2, 'Jack', 'South', 45000.00), (3, 'Olivia', 'East', 60000.00), (4, 'Liam', 'West', 55000.00), (5, 'Ava', 'North', 52000.00), (6, 'Noah', 'South', 48000.00), (7, 'Mia', 'East', 62000.00), (8, 'Ethan', 'West', 58000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w.region, SUM(w.salary) as total_salary FROM workers w INNER JOIN regions r ON w.region = r.region WHERE w.industry = 'Renewable Energy' GROUP BY w.region;"
    },
    {
        "instruction": "입력 텍스트: 평생 학습 프로그램 참가자들의 연령대 및 성별 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE lifelong_learning (participant_id INT, age INT, gender TEXT, program_id INT); INSERT INTO lifelong_learning (participant_id, age, gender, program_id) VALUES (1, 25, 'Male', 1), (2, 35, 'Female', 2), (3, 50, 'Non-binary', 1), (4, 60, 'Male', 3), (5, 45, 'Female', 1), (6, 65, 'Male', 2); CREATE TABLE age_groups (age_group_id INT, min_age INT, max_age INT); INSERT INTO age_groups (age_group_id, min_age, max_age) VALUES (1, 18, 34), (2, 35, 54), (3, 55, 64), (4, 65, 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ag.age_group, ll.gender, COUNT(ll.participant_id) AS num_participants FROM lifelong_learning ll JOIN age_groups ag ON ll.age BETWEEN ag.min_age AND ag.max_age GROUP BY ag.age_group, ll.gender;"
    },
    {
        "instruction": "입력 텍스트: games' 테이블에서 10경기 이상을 진행한 팀을 나열하세요.\n\nDDL statements:\nCREATE TABLE games (team TEXT, played BOOLEAN); INSERT INTO games (team, played) VALUES ('Team A', TRUE), ('Team A', TRUE), ('Team A', TRUE), ('Team B', TRUE), ('Team B', TRUE), ('Team C', TRUE), ('Team C', TRUE), ('Team C', TRUE), ('Team C', TRUE), ('Team C', TRUE), ('Team D', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team, COUNT(*) as games_played FROM games WHERE played = TRUE GROUP BY team HAVING games_played > 10;"
    },
    {
        "instruction": "입력 텍스트: 각 창고의 제품 총 수량을 찾으세요?\n\nDDL statements:\nCREATE TABLE products (product_id int, name varchar(255), quantity int, warehouse_id int); CREATE TABLE warehouses (warehouse_id int, location varchar(255)); INSERT INTO products (product_id, name, quantity, warehouse_id) VALUES (1, 'Organic Cotton T-Shirt', 100, 1), (2, 'Regular Cotton T-Shirt', 150, 1), (3, 'Reusable Water Bottle', 200, 2); INSERT INTO warehouses (warehouse_id, location) VALUES (1, 'New York'), (2, 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT warehouses.location, SUM(products.quantity) FROM products INNER JOIN warehouses ON products.warehouse_id = warehouses.warehouse_id GROUP BY warehouses.location;"
    },
    {
        "instruction": "입력 텍스트: Menu' 테이블에 id 4, 이름 'Fish Tacos', 가격 8.99, 채식 여부 거짓인 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE Menu (id INT, name VARCHAR(255), price DECIMAL(5,2), vegetarian BOOLEAN); INSERT INTO Menu (id, name, price, vegetarian) VALUES (1, 'Chicken Burger', 7.99, FALSE), (2, 'Veggie Wrap', 6.49, TRUE), (3, 'Chicken Caesar Salad', 9.99, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Menu (id, name, price, vegetarian) VALUES (4, 'Fish Tacos', 8.99, FALSE);"
    },
    {
        "instruction": "입력 텍스트: ethical_AI 테이블에서 총 비용이 가장 높은 상위 3개 프로젝트의 project_name과 funding_source를 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE ethical_AI (project_id INT, project_name VARCHAR(255), total_cost FLOAT, funding_source VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, funding_source FROM (SELECT project_name, funding_source, total_cost, ROW_NUMBER() OVER (ORDER BY total_cost DESC) as rn FROM ethical_AI) tmp WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2022년 '아메리카' 지역에서 가상 투어의 평균 일일 참여도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE virtual_tour_engagement (id INT, hotel_id INT, region TEXT, calendar DATE, engagement INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(engagement) FROM virtual_tour_engagement WHERE region = 'Americas' AND YEAR(calendar) = 2022 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2021년 11월에 배송된 장기 보존 식품의 총 수량은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE warehouse (warehouse_id VARCHAR(10), warehouse_location VARCHAR(20)); INSERT INTO warehouse (warehouse_id, warehouse_location) VALUES ('A', 'New York'), ('B', 'Tokyo'), ('C', 'London'); CREATE TABLE shipments (shipment_id INT, warehouse_id VARCHAR(10), shipment_date DATE, quantity INT, item_type VARCHAR(20)); INSERT INTO shipments (shipment_id, warehouse_id, shipment_date, quantity, item_type) VALUES (1, 'A', '2021-11-01', 500, 'Perishable'), (2, 'B', '2021-12-05', 300, 'Non-Perishable'), (3, 'C', '2021-11-03', 700, 'Perishable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM shipments JOIN warehouse ON shipments.warehouse_id = warehouse.warehouse_id WHERE item_type = 'Perishable' AND shipment_date BETWEEN '2021-11-01' AND '2021-11-30';"
    },
    {
        "instruction": "입력 텍스트: Inuit' 커뮤니티의 연도별 총 연료 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE IndigenousCommunities (id INT PRIMARY KEY, name VARCHAR(100), population INT, region VARCHAR(50)); INSERT INTO IndigenousCommunities (id, name, population, region) VALUES (4, 'Inuit', 75000, 'Arctic'); CREATE TABLE ResourceManagement (id INT PRIMARY KEY, community_id INT, resource VARCHAR(100), quantity INT, year INT, FOREIGN KEY (community_id) REFERENCES IndigenousCommunities(id)); INSERT INTO ResourceManagement (id, community_id, resource, quantity, year) VALUES (6, 4, 'Fuel', 1200, 2015), (7, 4, 'Fuel', 1300, 2016);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM ResourceManagement INNER JOIN IndigenousCommunities ON ResourceManagement.community_id = IndigenousCommunities.id WHERE IndigenousCommunities.name = 'Inuit';"
    },
    {
        "instruction": "입력 텍스트: 야구 분야에서 올해 각 포지션별로 가장 높은 연봉은 얼마인가요?\n\nDDL statements:\nCREATE TABLE baseball_players (player_id INT, name VARCHAR(50), position VARCHAR(10), team VARCHAR(50), salary INT, year INT); INSERT INTO baseball_players (player_id, name, position, team, salary, year) VALUES (1, 'John Doe', 'Pitcher', 'New York Yankees', 20000000, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT position, MAX(salary) FROM baseball_players WHERE year = YEAR(CURRENT_DATE) GROUP BY position;"
    },
    {
        "instruction": "입력 텍스트: 2020년 2분기에 미국에서 장애 해결 솔루션을 제공하는 회사의 일일 거래 성장률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE company_data (company_id INT, company_name VARCHAR(50), company_region VARCHAR(20)); CREATE TABLE transactions (transaction_id INT, company_id INT, transaction_value FLOAT, transaction_date DATE); INSERT INTO company_data (company_id, company_name, company_region) VALUES (1, 'Disability Solutions Inc.', 'United States'); INSERT INTO transactions (transaction_id, company_id, transaction_value, transaction_date) VALUES (1, 1, 75.00, '2020-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ROW_NUMBER() OVER (ORDER BY transaction_date) as day, (LAG(SUM(transaction_value)) OVER (ORDER BY transaction_date) - SUM(transaction_value)) / ABS(LAG(SUM(transaction_value)) OVER (ORDER BY transaction_date)) as growth_rate FROM transactions INNER JOIN company_data ON transactions.company_id = company_data.company_id WHERE EXTRACT(MONTH FROM transaction_date) BETWEEN 4 AND 6 AND company_region = 'United States' AND company_name LIKE '%Disability%' GROUP BY transaction_date;"
    },
    {
        "instruction": "입력 텍스트: 세라믹 또는 금속 유물이 대부분인 발굴 현장을 확인하세요?\n\nDDL statements:\nCREATE TABLE Sites (SiteID INT, SiteName TEXT); INSERT INTO Sites (SiteID, SiteName) VALUES (1, 'Site-A'), (2, 'Site-B'), (3, 'Site-C'); CREATE TABLE Artifacts (ArtifactID INT, ArtifactName TEXT, SiteID INT, ArtifactType TEXT); INSERT INTO Artifacts (ArtifactID, ArtifactName, SiteID, ArtifactType) VALUES (1, 'Pottery Shard', 1, 'Ceramic'), (2, 'Bronze Arrowhead', 2, 'Metal'), (3, 'Flint Tool', 3, 'Stone'), (4, 'Ancient Coin', 1, 'Metal'), (5, 'Stone Hammer', 2, 'Stone'), (6, 'Clay Pot', 1, 'Ceramic'), (7, 'Bronze Dagger', 2, 'Metal');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Sites.SiteName, (COUNT(CASE WHEN Artifacts.ArtifactType IN ('Ceramic', 'Metal') THEN 1 END) * 100.0 / COUNT(*)) AS MajorityPercentage FROM Sites INNER JOIN Artifacts ON Sites.SiteID = Artifacts.SiteID GROUP BY Sites.SiteName HAVING MajorityPercentage > 50;"
    },
    {
        "instruction": "입력 텍스트: 서식지에서 가장 높은 오염 수준을 가진 상위 3개의 종과 그들의 각각의 오염 수준을 확인하세요.\n\nDDL statements:\nCREATE TABLE species (name VARCHAR(50), habitat VARCHAR(50), pollution_level FLOAT); INSERT INTO species VALUES ('Species 1', 'Habitat 1', 5.6), ('Species 2', 'Habitat 2', 7.8), ('Species 3', 'Habitat 3', 9.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, pollution_level FROM (SELECT name, habitat, pollution_level, RANK() OVER (ORDER BY pollution_level DESC) as rank FROM species) AS subquery WHERE rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2018년 이후 험볼트 카운티에서 발급된 재배 라이선스의 수를 계산하세요?\n\nDDL statements:\nCREATE TABLE licenses (id INT, type TEXT, county TEXT, issue_date DATE); INSERT INTO licenses (id, type, county, issue_date) VALUES (1, 'cultivation', 'Humboldt', '2019-01-01'), (2, 'manufacturing', 'Humboldt', '2017-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM licenses WHERE type = 'cultivation' AND county = 'Humboldt' AND issue_date >= '2019-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 골을 넣은 모든 축구 선수의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE soccer_players (player_id INT, name VARCHAR(100), position VARCHAR(50), team_id INT); INSERT INTO soccer_players (player_id, name, position, team_id) VALUES (1, 'John Doe', 'Forward', 101); CREATE TABLE soccer_goals (goal_id INT, player_id INT, goal_date DATE); INSERT INTO soccer_goals (goal_id, player_id, goal_date) VALUES (1, 1, '2022-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT soccer_players.name FROM soccer_players INNER JOIN soccer_goals ON soccer_players.player_id = soccer_goals.player_id WHERE soccer_goals.goal_date >= '2022-01-01' AND soccer_goals.goal_date < '2023-01-01';"
    },
    {
        "instruction": "입력 텍스트: 남미의 각 문화 유산지에는 얼마나 많은 지역사회 참여 프로그램이 있나요?\n\nDDL statements:\nCREATE TABLE heritage_sites (id INT, name VARCHAR(50), location VARCHAR(50), type VARCHAR(50), PRIMARY KEY(id)); INSERT INTO heritage_sites (id, name, location, type) VALUES (1, 'Machu Picchu', 'Peru, South America', 'Ancient Incan'), (2, 'Iguazu Falls', 'Argentina, South America', 'Natural'), (3, 'Galapagos Islands', 'Ecuador, South America', 'Natural'); CREATE TABLE community_programs (id INT, heritage_site_id INT, program_name VARCHAR(50), PRIMARY KEY(id)); INSERT INTO community_programs (id, heritage_site_id, program_name) VALUES (1, 1, 'Guided Tours'), (2, 1, 'Cultural Workshops'), (3, 2, 'Educational Programs'), (4, 3, 'Restoration Projects');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hs.name, hs.location, hs.type, COUNT(cp.id) AS program_count FROM heritage_sites hs JOIN community_programs cp ON hs.id = cp.heritage_site_id GROUP BY hs.name, hs.location, hs.type;"
    },
    {
        "instruction": "입력 텍스트: 재생 에너지 분야 기업의 최대 ESG 점수를 찾으세요.\n\nDDL statements:\nCREATE TABLE companies (id INT, name VARCHAR(255), sector VARCHAR(255), ESG_score FLOAT); INSERT INTO companies (id, name, sector, ESG_score) VALUES (1, 'SolarCity', 'Renewable Energy', 87.5), (2, 'Vestas Wind Systems', 'Renewable Energy', 90.0), (3, 'Siemens Gamesa Renewable Energy', 'Renewable Energy', 88.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(ESG_score) FROM companies WHERE sector = 'Renewable Energy';"
    },
    {
        "instruction": "입력 텍스트: 모든 안전 애플리케이션보다 높은 창의성 점수를 가진 모든 창의적 AI 애플리케이션의 이름과 창의성 점수를 표시합니다.\n\nDDL statements:\nCREATE TABLE ai_applications (app_id INT, app_name VARCHAR(255), app_type VARCHAR(255), safety_score DECIMAL(3,2), creativity_score DECIMAL(3,2)); INSERT INTO ai_applications (app_id, app_name, app_type, safety_score, creativity_score) VALUES (1, 'App1', 'Safety', 0.95, 0.75), (2, 'App2', 'Creativity', 0.85, 0.92), (3, 'App3', 'Safety', 0.90, 0.65), (4, 'App4', 'Creativity', 0.75, 0.80), (5, 'App5', 'Safety', 0.82, 0.70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT app_name, creativity_score FROM ai_applications WHERE app_type = 'Creativity' AND creativity_score > (SELECT MAX(safety_score) FROM ai_applications WHERE app_type = 'Safety');"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 부문에서의 최대 ESG 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name VARCHAR(255), sector VARCHAR(255), ESG_score FLOAT); INSERT INTO companies (id, name, sector, ESG_score) VALUES (1, 'Pfizer', 'Healthcare', 90.0), (2, 'Johnson & Johnson', 'Healthcare', 92.5), (3, 'Merck', 'Healthcare', 87.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(ESG_score) FROM companies WHERE sector = 'Healthcare';"
    },
    {
        "instruction": "입력 텍스트: 립 제품에 해당하는 안전 기록과 관련 제품을 보여주세요.\n\nDDL statements:\nCREATE TABLE SafetyRecord (ProductID INT, SafetyTestDate DATE, Result VARCHAR(255)); INSERT INTO SafetyRecord (ProductID, SafetyTestDate, Result) VALUES (6, '2022-04-05', 'Pass'), (6, '2022-05-05', 'Pass'), (7, '2022-04-10', 'Pass'); CREATE TABLE Product (ProductID INT, ProductName VARCHAR(255), Price DECIMAL(5,2)); INSERT INTO Product (ProductID, ProductName, Price) VALUES (6, 'Lip Gloss', 14.99), (7, 'Lip Liner', 9.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT P.ProductName, SR.Result FROM SafetyRecord SR INNER JOIN Product P ON SR.ProductID = P.ProductID WHERE P.ProductName LIKE '%Lip%';"
    },
    {
        "instruction": "입력 텍스트: 모든 우주 망원경과 그들의 주 거울의 지름을 나열하세요.\n\nDDL statements:\nCREATE TABLE space_telescopes (id INT, name VARCHAR(255), primary_mirror_diameter INT); INSERT INTO space_telescopes (id, name, primary_mirror_diameter) VALUES (1, 'Hubble', 2400); INSERT INTO space_telescopes (id, name, primary_mirror_diameter) VALUES (2, 'James Webb', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, primary_mirror_diameter FROM space_telescopes;"
    },
    {
        "instruction": "입력 텍스트: mining_company'의 총 근로자 수는 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists mining;CREATE TABLE mining.company (id INT, name STRING, location STRING, num_workers INT);INSERT INTO mining.company (id, name, location, num_workers) VALUES (1, 'mining_company', 'USA', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT num_workers FROM mining.company WHERE name = 'mining_company';"
    },
    {
        "instruction": "입력 텍스트: 소외된 커뮤니티 출신 아티스트들의 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE Artists (id INT, name VARCHAR(255), community VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Artists (id, name, community) VALUES (1, 'Jane Doe', 'Underrepresented Community'), (2, 'Jim Smith', 'Underrepresented Community');"
    },
    {
        "instruction": "입력 텍스트: 2019년에 HPV 백신을 접종받은 환자들의 평균 나이가 무엇인지, 그들의 인종별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE vaccinations (id INT, ethnicity VARCHAR(20), age INT, hpv_vaccine BOOLEAN, vaccine_date DATE); INSERT INTO vaccinations (id, ethnicity, age, hpv_vaccine, vaccine_date) VALUES (1, 'Hispanic', 30, true, '2019-04-01'); INSERT INTO vaccinations (id, ethnicity, age, hpv_vaccine, vaccine_date) VALUES (2, 'African American', 40, false, NULL); INSERT INTO vaccinations (id, ethnicity, age, hpv_vaccine, vaccine_date) VALUES (3, 'Asian', 25, true, '2019-06-18');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) as avg_age, ethnicity FROM vaccinations WHERE hpv_vaccine = true AND YEAR(vaccine_date) = 2019 GROUP BY ethnicity;"
    },
    {
        "instruction": "입력 텍스트: vehicle_data' 테이블에 있는 각 도시별 자율 주행 차량과 수동 주행 차량의 비율은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE vehicle_data (id INT, city VARCHAR(25), vehicle_type VARCHAR(20), is_autonomous BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(is_autonomous::INT) / COUNT(DISTINCT id) FROM vehicle_data GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 인도네시아에서 수행된 적재 작업은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE ports (port_id INT, port_name VARCHAR(50), country VARCHAR(50)); INSERT INTO ports VALUES (1, 'Jakarta', 'Indonesia'); INSERT INTO ports VALUES (2, 'Surabaya', 'Indonesia'); CREATE TABLE cargo_handling (handling_id INT, port_id INT, operation_type VARCHAR(50), operation_date DATE); INSERT INTO cargo_handling VALUES (1, 1, 'loading', '2021-01-01'); INSERT INTO cargo_handling VALUES (2, 1, 'unloading', '2021-01-02'); INSERT INTO cargo_handling VALUES (3, 2, 'loading', '2021-01-03'); INSERT INTO cargo_handling VALUES (4, 2, 'unloading', '2021-01-04');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM cargo_handling WHERE port_id IN (SELECT port_id FROM ports WHERE country = 'Indonesia') AND operation_type = 'loading';"
    },
    {
        "instruction": "입력 텍스트: 호주의 주별 1인당 평균 에너지 소비량은 얼마이며, 주별로 어떻게 나뉘어져 있나요?\n\nDDL statements:\nCREATE TABLE energy_consumption (id INT, state VARCHAR(255), population INT, consumption FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(consumption/population) FROM energy_consumption WHERE country = 'Australia' GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 신발류 중에서 가장 높은 가격을 찾아주세요.\n\nDDL statements:\nCREATE TABLE footwear (id INT, category VARCHAR(50), subcategory VARCHAR(50), is_sustainable BOOLEAN, price DECIMAL(5,2)); INSERT INTO footwear (id, category, subcategory, is_sustainable, price) VALUES (1, 'Footwear', 'Sneakers', TRUE, 120.00), (2, 'Footwear', 'Sneakers', TRUE, 150.00), (3, 'Footwear', 'Sandals', FALSE, 60.00), (4, 'Footwear', 'Boots', TRUE, 200.00), (5, 'Footwear', 'Loafers', FALSE, 90.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM footwear WHERE subcategory = 'Sneakers' AND is_sustainable = TRUE;"
    },
    {
        "instruction": "입력 텍스트: id가 5와 7인 carbon_offset_programs를 삭제하세요\n\nDDL statements:\nCREATE TABLE carbon_offset_programs (id INT, name VARCHAR(100), start_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM carbon_offset_programs WHERE id IN (5, 7);"
    },
    {
        "instruction": "입력 텍스트: 2022년에 치료 세션을 받은 환자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, age INT, therapy_session DATE); INSERT INTO patients (patient_id, age, therapy_session) VALUES (1, 30, '2022-01-01'); INSERT INTO patients (patient_id, age, therapy_session) VALUES (2, 45, '2022-02-15'); INSERT INTO patients (patient_id, age, therapy_session) VALUES (3, 28, '2022-03-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM patients WHERE YEAR(therapy_session) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 프로젝트 2에서 사용된 재료와 해당하는 기준은 무엇인가요?\n\nDDL statements:\nCREATE TABLE material (id INT, name VARCHAR(50), project_id INT, standard_id INT); INSERT INTO material (id, name, project_id, standard_id) VALUES (2, 'Concrete', 2, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name, s.name FROM material m JOIN standard s ON m.standard_id = s.id WHERE m.project_id = 2;"
    },
    {
        "instruction": "입력 텍스트: 모바일과 브로드밴드 서비스에 대한 고객 불만 건수를 서비스 유형과 월별로 구분하여 보여주세요.\n\nDDL statements:\nCREATE TABLE customer_complaints (complaint_id INT, complaint_date DATE, service_type VARCHAR(50)); INSERT INTO customer_complaints (complaint_id, complaint_date, service_type) VALUES (1, '2022-01-01', 'Mobile'), (2, '2022-02-01', 'Broadband'), (3, '2022-01-01', 'Broadband');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM complaint_date) as month, service_type, COUNT(*) as complaints FROM customer_complaints GROUP BY month, service_type;"
    },
    {
        "instruction": "입력 텍스트: 2021-2022 시즌 '태평양 디비전' 팀들의 승패 기록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE GameResults (GameID INT, HomeTeam VARCHAR(20), AwayTeam VARCHAR(20), HomeScore INT, AwayScore INT, SeasonYear INT); INSERT INTO GameResults (GameID, HomeTeam, AwayTeam, HomeScore, AwayScore, SeasonYear) VALUES (1, 'Sharks', 'Kings', 3, 2, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT HomeTeam, COUNT(*) AS Wins, (SELECT COUNT(*) FROM GameResults WHERE SeasonYear = 2021 AND AwayTeam = HomeTeam AND AwayScore < HomeScore) AS Losses FROM GameResults WHERE SeasonYear = 2021 AND HomeTeam IN ('Sharks', 'Kings', 'Ducks', 'Stars', 'Oilers') GROUP BY HomeTeam;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에서 진행된 미술, 음악, 무용 프로그램의 총 참여자 수를 구하세요.\n\nDDL statements:\nCREATE TABLE ArtPrograms (state VARCHAR(50), program VARCHAR(50), attendees INT); INSERT INTO ArtPrograms (state, program, attendees) VALUES ('California', 'Art', 120), ('California', 'Music', 150), ('California', 'Dance', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(attendees) FROM ArtPrograms WHERE program IN ('Art', 'Music', 'Dance') AND state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 각 영업사원의 작년 동월 대비 매출 수익 변화율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales_data (salesperson VARCHAR(50), sale_date DATE, revenue DECIMAL(10,2)); INSERT INTO sales_data (salesperson, sale_date, revenue) VALUES ('Alice', '2021-01-01', 5000), ('Bob', '2021-01-05', 6000), ('Alice', '2021-02-01', 7000), ('Bob', '2021-02-03', 8000), ('Alice', '2021-03-01', 9000), ('Bob', '2021-03-05', 10000); CREATE TABLE sales_data_last_year (salesperson VARCHAR(50), sale_date DATE, revenue DECIMAL(10,2)); INSERT INTO sales_data_last_year (salesperson, sale_date, revenue) VALUES ('Alice', '2020-01-01', 4000), ('Bob', '2020-01-05', 5000), ('Alice', '2020-02-01', 6000), ('Bob', '2020-02-03', 7000), ('Alice', '2020-03-01', 8000), ('Bob', '2020-03-05', 9000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.salesperson, ((s.revenue - sy.revenue) / sy.revenue) * 100 AS revenue_change_percentage FROM sales_data s JOIN sales_data_last_year sy ON s.salesperson = sy.salesperson AND DATE_TRUNC('month', s.sale_date) = DATE_TRUNC('month', sy.sale_date + INTERVAL '1 year') ORDER BY s.salesperson, revenue_change_percentage DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 영업사원의 평균 계약 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE salesperson (id INT, name VARCHAR(255), contract_value INT); INSERT INTO salesperson (id, name, contract_value) VALUES (1, 'John Doe', 500000), (2, 'Jane Smith', 600000), (3, 'Bob Johnson', 400000), (4, 'Alice Williams', 700000), (5, 'Charlie Brown', 800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, AVG(contract_value) FROM salesperson GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 유럽에 있는 윤리적 AI 지침을 도입한 조직의 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE Organization (OrgID INT, OrgName VARCHAR(50), Region VARCHAR(50), EthicalAI BOOLEAN); INSERT INTO Organization VALUES (1, 'Org1', 'Europe', true), (2, 'Org2', 'Europe', false), (3, 'Org3', 'Europe', true), (4, 'Org4', 'Europe', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Organization WHERE Region = 'Europe' AND EthicalAI = true;"
    },
    {
        "instruction": "입력 텍스트: 각 과정에서 정신 건강 자원에 접근한 학생 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE student_courses (student_id INT, course_id INT, mental_health_resource_access INT); INSERT INTO student_courses (student_id, course_id, mental_health_resource_access) VALUES (1, 1, 1), (2, 1, 0), (3, 2, 1), (4, 2, 1), (5, 3, 0), (6, 3, 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT course_id, SUM(mental_health_resource_access) FROM student_courses GROUP BY course_id;"
    },
    {
        "instruction": "입력 텍스트: 2019년 캐나다의 주거 부문 에너지 소비량은 kWh로 얼마였습니까?\n\nDDL statements:\nCREATE TABLE energy_consumption (sector VARCHAR(50), country VARCHAR(50), year INT, consumption_kwh INT); INSERT INTO energy_consumption (sector, country, year, consumption_kwh) VALUES ('Residential', 'Canada', 2017, 600000), ('Residential', 'Canada', 2018, 620000), ('Residential', 'Canada', 2019, 640000), ('Residential', 'Canada', 2020, 660000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT consumption_kwh FROM energy_consumption WHERE sector = 'Residential' AND country = 'Canada' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 각 항구에서 'Vessel1' 선박의 화물 총 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ports (port_id INT, port_name VARCHAR(255)); INSERT INTO ports (port_id, port_name) VALUES (1, 'Auckland'), (2, 'Rotterdam'), (3, 'Singapore'), (4, 'Dubai'); CREATE TABLE cargo (cargo_id INT, port_id INT, vessel_id INT, weight FLOAT); INSERT INTO cargo (cargo_id, port_id, vessel_id, weight) VALUES (1, 1, 1, 3000), (2, 1, 1, 5000), (3, 3, 2, 8000), (4, 2, 2, 7000), (5, 4, 3, 4000), (6, 1, 1, 6000), (7, 2, 4, 9000), (8, 1, 1, 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ports.port_name, SUM(cargo.weight) FROM ports INNER JOIN cargo ON ports.port_id = cargo.port_id WHERE cargo.vessel_id = 1 GROUP BY ports.port_name;"
    },
    {
        "instruction": "입력 텍스트: 유럽 선수권 대회 육상 경기에 참가한 여성 선수들의 비율과 해당 국가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE euro_champs_track_field (athlete_id INT, athlete_name VARCHAR(50), age INT, gender VARCHAR(10), country VARCHAR(50)); INSERT INTO euro_champs_track_field (athlete_id, athlete_name, age, gender, country) VALUES (1, 'Laura Muir', 29, 'Female', 'United Kingdom'), (2, 'Dina Asher-Smith', 26, 'Female', 'United Kingdom'), (3, 'Maria Lasitskene', 28, 'Female', 'Russian Federation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, gender, COUNT(athlete_id) as athlete_count, COUNT(athlete_id)*100.0/SUM(COUNT(athlete_id)) OVER (PARTITION BY gender) as percentage FROM euro_champs_track_field WHERE gender = 'Female' GROUP BY country, gender;"
    },
    {
        "instruction": "입력 텍스트: India'에서 '2023-02-14'에 'social' 네트워크에 가입한 새로운 사용자 'user3'을 추가하세요.\n\nDDL statements:\nCREATE TABLE users (id INT, username VARCHAR(255), network VARCHAR(255), join_date DATE, country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO users (id, username, network, join_date, country) VALUES (3, 'user3', 'social', '2023-02-14', 'India');"
    },
    {
        "instruction": "입력 텍스트: 내셔널 리그에서 총 홈런이 100개 이상인 팀들을 나열하세요.\n\nDDL statements:\nCREATE TABLE teams (id INT, name VARCHAR(100), league VARCHAR(50), home_runs INT); INSERT INTO teams (id, name, league, home_runs) VALUES (1, 'Dodgers', 'National', 120), (2, 'Giants', 'National', 80), (3, 'Cubs', 'National', 110);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM teams WHERE league = 'National' GROUP BY name HAVING SUM(home_runs) > 100;"
    },
    {
        "instruction": "입력 텍스트: 정부와 비정부기구가 기후 적응 프로젝트에 투자한 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE government_funding(project_id INT, project_name TEXT, amount_funded FLOAT);CREATE TABLE ngo_funding(project_id INT, project_name TEXT, amount_funded FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(g.amount_funded) + SUM(ngo.amount_funded) FROM government_funding g JOIN ngo_funding ngo ON g.project_id = ngo.project_id WHERE g.sector = 'climate adaptation' AND ngo.sector = 'climate adaptation';"
    },
    {
        "instruction": "입력 텍스트: 별이 빛나는 밤'의 연도를 1888년으로 수정하세요.\n\nDDL statements:\nCREATE TABLE Artworks (id INT, artist VARCHAR(50), title VARCHAR(100), year INT, medium VARCHAR(50), width FLOAT, height FLOAT); INSERT INTO Artworks (id, artist, title, year, medium, width, height) VALUES (1, 'Vincent van Gogh', 'Starry Night', 1889, 'Oil on canvas', 73.7, 59.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Artworks SET year = 1888 WHERE artist = 'Vincent van Gogh' AND title = 'Starry Night';"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 분야에서의 임팩트 투자 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE impact_investments (id INT, area VARCHAR(50), amount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM impact_investments WHERE area = 'Healthcare';"
    },
    {
        "instruction": "입력 텍스트: 산타 카탈리나' 선박과 관련된 모든 기록을 항해 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE vessels (id INT, name VARCHAR(255), type VARCHAR(255)); CREATE TABLE ports (id INT, name VARCHAR(255)); CREATE TABLE voyages (id INT, vessel_id INT, port_id INT, arrival_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM voyages WHERE vessel_id IN (SELECT id FROM vessels WHERE name = 'Santa Catalina');"
    },
    {
        "instruction": "입력 텍스트: 대서양과 태평양에 있는 해양 생물 연구소의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE atlantic_ocean (id INT, station TEXT); CREATE TABLE pacific_ocean (id INT, station TEXT); INSERT INTO atlantic_ocean (id, station) VALUES (1, 'Research Station A'), (2, 'Research Station B'); INSERT INTO pacific_ocean (id, station) VALUES (1, 'Research Station C'), (2, 'Research Station D');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT * FROM atlantic_ocean UNION ALL SELECT * FROM pacific_ocean) AS ocean_stations;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 어업으로부터 조달된 어류의 총 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE fish_suppliers (supplier_id INT, name VARCHAR(50), sustainable BOOLEAN); CREATE TABLE fish_purchases (purchase_id INT, supplier_id INT, weight DECIMAL(10,2)); INSERT INTO fish_suppliers (supplier_id, name, sustainable) VALUES (1, 'Sea Fresh', true), (2, 'Ocean Bounty', false), (3, 'Fish Direct', true); INSERT INTO fish_purchases (purchase_id, supplier_id, weight) VALUES (1, 1, 120.50), (2, 1, 150.25), (3, 3, 85.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(weight) FROM fish_purchases JOIN fish_suppliers ON fish_purchases.supplier_id = fish_suppliers.supplier_id WHERE fish_suppliers.sustainable = true;"
    },
    {
        "instruction": "입력 텍스트: 북미 지역의 기후 완화 프로젝트에 대한 평균 투자 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_investments (project_name VARCHAR(255), type VARCHAR(255), region VARCHAR(255), investment_amount INT); INSERT INTO climate_investments (project_name, type, region, investment_amount) VALUES ('Hydroelectric Power Plant', 'Mitigation', 'North America', 5000000), ('Carbon Capture', 'Mitigation', 'North America', 4500000), ('Smart Grid', 'Mitigation', 'North America', 3500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(investment_amount) FROM climate_investments WHERE type = 'Mitigation' AND region = 'North America';"
    },
    {
        "instruction": "입력 텍스트: CommunityCourts 테이블의 각 District별 총 사건 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE CommunityCourts (CourtID INT, District VARCHAR(20)); INSERT INTO CommunityCourts (CourtID, District) VALUES (1, 'Downtown'), (2, 'Uptown'), (3, 'Midtown'); CREATE TABLE CommunityCourtCases (CaseID INT, CourtID INT, HearingDate DATE); INSERT INTO CommunityCourtCases (CaseID, CourtID, HearingDate) VALUES (1, 1, '2021-06-15'), (2, 1, '2021-07-20'), (3, 2, '2021-08-12'), (4, 3, '2021-08-15'), (5, 3, '2021-09-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT District, COUNT(*) as TotalCases FROM CommunityCourtCases JOIN CommunityCourts ON CommunityCourtCases.CourtID = CommunityCourts.CourtID GROUP BY District;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 정치 광고와 상호작용한 사용자들의 상위 10개 관심사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE users (user_id INT, name VARCHAR(100), location VARCHAR(100), interests VARCHAR(100)); INSERT INTO users (user_id, name, location, interests) VALUES (1, 'Alice', 'US', 'Politics, Technology'); CREATE TABLE ads (ad_id INT, ad_type VARCHAR(50), location VARCHAR(100)); INSERT INTO ads (ad_id, ad_type, location) VALUES (1, 'Political', 'US'); CREATE TABLE user_ad_interactions (user_id INT, ad_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.interests, COUNT(*) as interaction_count FROM users u JOIN user_ad_interactions ia ON u.user_id = ia.user_id JOIN ads a ON ia.ad_id = a.ad_id WHERE a.location = 'US' AND a.ad_type = 'Political' GROUP BY u.interests ORDER BY interaction_count DESC LIMIT 10;"
    },
    {
        "instruction": "입력 텍스트: 2019년 유럽에서 재활용률이 가장 높은 상위 3개국을 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE recycling_rates (country VARCHAR(50), year INT, recycling_rate FLOAT); INSERT INTO recycling_rates (country, year, recycling_rate) VALUES ('Germany', 2019, 0.62), ('Spain', 2019, 0.58), ('France', 2019, 0.55);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, recycling_rate FROM (SELECT country, recycling_rate, ROW_NUMBER() OVER (ORDER BY recycling_rate DESC) as rn FROM recycling_rates WHERE year = 2019 AND region = 'Europe') sub WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: student_mental_health 테이블에서 보고된 정신 건강 문제 중 가장 흔한 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE student_mental_health (id INT, student_id INT, issue VARCHAR(50), severity VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT issue, COUNT(*) FROM student_mental_health GROUP BY issue ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 생산 단위별 평균 물 소비량은 무엇이며, 재료 유형별로 구분하고 물 소비량이 가장 적은 것부터 순서대로 나열하시오?\n\nDDL statements:\nCREATE TABLE production (production_id INT, material_type VARCHAR(255), water_consumption DECIMAL(10, 2)); INSERT INTO production (production_id, material_type, water_consumption) VALUES (1, 'Hemp', 1000), (2, 'Organic cotton', 2000), (3, 'Recycled polyester', 1500), (4, 'Hemp', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material_type, AVG(water_consumption) as avg_water_consumption, RANK() OVER (ORDER BY AVG(water_consumption)) as water_consumption_rank FROM production GROUP BY material_type ORDER BY avg_water_consumption ASC;"
    },
    {
        "instruction": "입력 텍스트: habitats' 테이블에서 'Europe'라는 이름의 서식지의 크기는 얼마입니까?\n\nDDL statements:\nCREATE TABLE habitats (id INT PRIMARY KEY, name VARCHAR(50), size INT); INSERT INTO habitats (id, name, size) VALUES (1, 'Africa', 100000), (2, 'Asia', 200000), (3, 'Europe', 120000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT size FROM habitats WHERE name = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 교통 산업에서 창업한 창업자가 창업한 스타트업의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, industry TEXT, founding_year INT, founder_gender TEXT, founder_veteran BOOLEAN); INSERT INTO company (id, name, industry, founding_year, founder_gender, founder_veteran) VALUES (1, 'RideEasy', 'Transportation', 2017, 'Male', true); INSERT INTO company (id, name, industry, founding_year, founder_gender, founder_veteran) VALUES (2, 'FlySmart', 'Aerospace', 2019, 'Female', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM company WHERE industry = 'Transportation' AND founder_veteran = true"
    },
    {
        "instruction": "입력 텍스트: 2021년 북극해의 최고 해수면 온도는 얼마였나요?\n\nDDL statements:\nCREATE TABLE ocean_temperatures (year INT, region VARCHAR(20), temperature DECIMAL(5,2)); INSERT INTO ocean_temperatures (year, region, temperature) VALUES (2021, 'Arctic Ocean', 4.5); INSERT INTO ocean_temperatures (year, region, temperature) VALUES (2021, 'Arctic Ocean', 5.1); INSERT INTO ocean_temperatures (year, region, temperature) VALUES (2021, 'Arctic Ocean', 4.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(temperature) FROM ocean_temperatures WHERE year = 2021 AND region = 'Arctic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 2020년도의 모든 방위 계약 목록을 보여주세요.\n\nDDL statements:\nCREATE TABLE defense_contracts (id INT PRIMARY KEY, contract_number VARCHAR(50), title TEXT, agency VARCHAR(50), year INT, value FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM defense_contracts WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: BUS-123'라는 vehicle_id를 가진 버스에 대한 새로운 기록을 'vehicle_maintenance' 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE vehicle_maintenance (vehicle_id VARCHAR(20), maintenance_date DATE, maintenance_type VARCHAR(30)); INSERT INTO vehicle_maintenance (vehicle_id, maintenance_date, maintenance_type) VALUES ('TRAIN-456', '2022-01-01', 'Oil Change'), ('TRAIN-789', '2022-02-15', 'Tire Rotation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO vehicle_maintenance (vehicle_id, maintenance_date, maintenance_type) VALUES ('BUS-123', '2022-03-01', 'Inspection');"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 총 물 소비량이 가장 많은 상위 3개 광산 작업을 확인하세요.\n\nDDL statements:\nCREATE TABLE WaterConsumptionByOperation (OperationID INT, Date DATE, Consumption INT); INSERT INTO WaterConsumptionByOperation (OperationID, Date, Consumption) VALUES (1, '2022-01-01', 2000), (1, '2022-01-02', 2500), (1, '2022-01-03', 3000), (2, '2022-01-01', 1500), (2, '2022-01-02', 2000), (2, '2022-01-03', 2500), (3, '2022-01-01', 3500), (3, '2022-01-02', 4000), (3, '2022-01-03', 4500), (4, '2022-01-01', 1000), (4, '2022-01-02', 1200), (4, '2022-01-03', 1400), (5, '2022-01-01', 5000), (5, '2022-01-02', 5500), (5, '2022-01-03', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT OperationID, SUM(Consumption) as Total_Consumption, RANK() OVER (ORDER BY SUM(Consumption) DESC) as Rank FROM WaterConsumptionByOperation WHERE Date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY OperationID;"
    },
    {
        "instruction": "입력 텍스트: 각 팀의 평균 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(255)); INSERT INTO teams (team_id, team_name) VALUES (1, 'TeamA'), (2, 'TeamB'); CREATE TABLE ticket_sales (team_id INT, price DECIMAL(5,2)); INSERT INTO ticket_sales (team_id, price) VALUES (1, 50), (1, 55), (2, 45), (2, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, AVG(price) as avg_price FROM ticket_sales JOIN teams ON ticket_sales.team_id = teams.team_id GROUP BY team_name;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 발사한 모든 위성을 나열하시오\n\nDDL statements:\nCREATE TABLE satellite_deployment (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), launch_date DATE); INSERT INTO satellite_deployment (id, name, country, launch_date) VALUES (1, 'Sentinel-1A', 'European Union', '2014-04-03'), (2, 'TechSat', 'United States', '2022-09-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM satellite_deployment WHERE country = 'United States';"
    },
    {
        "instruction": "입력 텍스트: urban' 스키마에 있는 건물들의 도시별 총 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE urban.buildings (city VARCHAR(255), energy_consumption INT); INSERT INTO urban.buildings (city, energy_consumption) VALUES ('CityA', 1200), ('CityA', 1500), ('CityB', 1700), ('CityB', 1300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(energy_consumption) FROM urban.buildings GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 특정 연도의 특정 국가들의 군사 지출 기록을 \"military_spending\" 테이블에 입력하세요.\n\nDDL statements:\nCREATE TABLE military_spending (country VARCHAR(255), year INT, amount FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO military_spending (country, year, amount) VALUES ('India', 2017, 51.1), ('Saudi Arabia', 2017, 69.4);"
    },
    {
        "instruction": "입력 텍스트: incident_responses' 테이블에서 고유한 사건 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE incident_responses (id INT, incident_type VARCHAR(50), status VARCHAR(20), responded_by VARCHAR(100)); INSERT INTO incident_responses (id, incident_type, status, responded_by) VALUES (1, 'Phishing', 'Resolved', 'Security Analyst 1'), (2, 'Malware', 'In Progress', 'Security Analyst 2'), (3, 'Ransomware', 'Resolved', 'Security Analyst 1'), (4, 'DDoS', 'Resolved', 'Security Analyst 3');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT incident_type FROM incident_responses;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 'city' 스키마의 월별 커뮤니티 치안 행사는 몇 건이 발생했습니까?\n\nDDL statements:\nCREATE SCHEMA if not exists city; CREATE TABLE if not exists city.community_policing (id INT, event_date DATE); INSERT INTO city.community_policing (id, event_date) VALUES (1, '2022-02-14'), (2, '2022-05-17'), (3, '2022-03-25'), (4, '2022-01-02'), (5, '2022-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MONTH(event_date), COUNT(*) FROM city.community_policing WHERE YEAR(event_date) = 2022 GROUP BY MONTH(event_date);"
    },
    {
        "instruction": "입력 텍스트: territory' 스키마에 있는 인권 관련 공개 데이터 세트 중 'province'에는 없는 모든 데이터를 나열하세요.\n\nDDL statements:\nCREATE SCHEMA territory; CREATE SCHEMA province; CREATE TABLE territory.human_rights_data (id INT, name VARCHAR(255), is_open BOOLEAN); CREATE TABLE province.human_rights_data (id INT, name VARCHAR(255), is_open BOOLEAN); INSERT INTO territory.human_rights_data (id, name, is_open) VALUES (1, 'bill_of_rights', true), (2, 'treaties', true), (3, 'reports', true); INSERT INTO province.human_rights_data (id, name, is_open) VALUES (1, 'bill_of_rights', false), (2, 'treaties', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM ( (SELECT * FROM territory.human_rights_data WHERE is_open = true) EXCEPT (SELECT * FROM province.human_rights_data WHERE is_open = true) ) AS excepted_data;"
    },
    {
        "instruction": "입력 텍스트: ID 1인 공급업체의 이름을 'New Supplier'로 변경하세요.\n\nDDL statements:\nCREATE SCHEMA manufacturing;CREATE TABLE suppliers (id INT PRIMARY KEY, name TEXT, region TEXT);INSERT INTO suppliers (id, name, region) VALUES (1, 'SupplierA', 'East Coast'); INSERT INTO suppliers (id, name, region) VALUES (2, 'SupplierB', 'West Coast');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE suppliers SET name = 'New Supplier' WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: Red' 노선의 'Morning' 시간대 평균 요금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fares (route_name varchar(20), time_of_day varchar(20), fare int); INSERT INTO fares (route_name, time_of_day, fare) VALUES ('Red', 'Morning', 2), ('Blue', 'Morning', 3), ('Red', 'Evening', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fare) FROM fares WHERE route_name = 'Red' AND time_of_day = 'Morning';"
    },
    {
        "instruction": "입력 텍스트: 2021년 뉴욕 주에서 개최된 공공 회의의 총 참가자 수는 얼마였습니까?\n\nDDL statements:\nCREATE TABLE meetings (id INT PRIMARY KEY, state VARCHAR(20), year INT, num_participants INT); INSERT INTO meetings (id, state, year, num_participants) VALUES (1, 'New York', 2021, 35); INSERT INTO meetings (id, state, year, num_participants) VALUES (2, 'New York', 2021, 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_participants) FROM meetings WHERE state = 'New York' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 각 조직의 평균 자원봉사자 수를 찾으세요?\n\nDDL statements:\nCREATE TABLE org_volunteer (org_id INT, vol_id INT); CREATE TABLE organization (org_id INT, org_name TEXT); INSERT INTO org_volunteer (org_id, vol_id) VALUES (1, 1), (1, 2), (2, 3), (3, 4), (3, 5), (4, 6), (4, 7); INSERT INTO organization (org_id, org_name) VALUES (1, 'Habitat for Humanity'), (2, 'Red Cross'), (3, 'Doctors Without Borders'), (4, 'World Food Programme');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT org_id, AVG(vol_id) as avg_volunteers FROM org_volunteer GROUP BY org_id;"
    },
    {
        "instruction": "입력 텍스트: 모든 고위험도 취약점의 이름과 심각도 수준은 무엇인가요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, name VARCHAR, severity VARCHAR); INSERT INTO vulnerabilities (id, name, severity) VALUES (1, 'SQL Injection', 'High'), (2, 'Cross-site Scripting', 'Medium'), (3, 'Broken Authentication', 'High');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, severity FROM vulnerabilities WHERE severity = 'High';"
    },
    {
        "instruction": "입력 텍스트: 미국에 기반을 둔 회사들의 펀딩 라운드별 총 펀딩 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Funding_Records (company_name VARCHAR(50), funding_round VARCHAR(20), funding_amount INT, country VARCHAR(50)); INSERT INTO Funding_Records (company_name, funding_round, funding_amount, country) VALUES ('Waystar Royco', 'Series A', 20000000, 'United States'); INSERT INTO Funding_Records (company_name, funding_round, funding_amount, country) VALUES ('Pied Piper', 'Seed', 500000, 'United States'); INSERT INTO Funding_Records (company_name, funding_round, funding_amount, country) VALUES ('Austin Biotech', 'Series B', 3000000, 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT funding_round, SUM(funding_amount) FROM Funding_Records WHERE country = 'United States' GROUP BY funding_round;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 DACH 지역(독일, 오스트리아, 스위스)에서 진행된 가상 투어의 총 참여 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, region TEXT, engagement INT, date DATE); INSERT INTO virtual_tours (tour_id, region, engagement, date) VALUES (1, 'Germany', 25, '2022-01-01'), (2, 'Switzerland', 32, '2022-01-05'), (3, 'Austria', 18, '2022-01-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(engagement) FROM virtual_tours WHERE region IN ('Germany', 'Austria', 'Switzerland') AND date BETWEEN '2022-01-01' AND '2022-03-31';"
    },
    {
        "instruction": "입력 텍스트: 기술 산업에 종사하는 사용자들의 일일 평균 신규 팔로워 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE user_stats (user_id INT, stat_type VARCHAR(50), stat_date DATE, value INT);  INSERT INTO user_stats (user_id, stat_type, stat_date, value) VALUES (1, 'new_followers', '2022-01-01', 50), (2, 'new_followers', '2022-01-01', 75), (1, 'new_followers', '2022-01-02', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(value) FROM user_stats WHERE stat_type = 'new_followers' AND stat_date >= DATEADD(day, -30, GETDATE()) AND stat_date < DATEADD(day, -29, GETDATE()) AND user_stats.user_id IN (SELECT user_id FROM user_stats JOIN users ON user_stats.user_id = users.id WHERE users.industry = 'technology');"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 계획된 비용보다 50% 이상 초과된 인프라 프로젝트는 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE projects (project_id INT, project_name VARCHAR(100), state CHAR(2), planned_cost FLOAT, actual_cost FLOAT); INSERT INTO projects VALUES (1, 'Texas Bullet Train', 'TX', 15000000000, 25000000000), (2, 'Dallas-Fort Worth Airport Expansion', 'TX', 3000000000, 4500000000), (3, 'Houston Ship Channel Expansion', 'TX', 1000000000, 1200000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM projects WHERE state = 'TX' AND actual_cost > planned_cost * 1.5;"
    },
    {
        "instruction": "입력 텍스트: UEFA 챔피언스 리그와 UEFA 유로파 리그의 상위 10명 득점자들이 기록한 총 골 수의 차이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ucl_top10 (player TEXT, goals INT); CREATE TABLE uel_top10 (player TEXT, goals INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(ucl_top10.goals) - SUM(uel_top10.goals) as difference FROM ucl_top10, uel_top10 LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 하루 동안 한 출처에서 발행된 기사의 최대 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(100), source VARCHAR(50), date DATE); INSERT INTO articles (id, title, source, date) VALUES (1, 'Article 1', 'Source A', '2021-02-01'); INSERT INTO articles (id, title, source, date) VALUES (2, 'Article 2', 'Source B', '2021-02-02'); INSERT INTO articles (id, title, source, date) VALUES (3, 'Article 3', 'Source A', '2021-02-03'); INSERT INTO articles (id, title, source, date) VALUES (4, 'Article 4', 'Source C', '2021-01-31'); INSERT INTO articles (id, title, source, date) VALUES (5, 'Article 5', 'Source A', '2021-02-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT source, MAX(COUNT(*)) as max_articles FROM articles GROUP BY source;"
    },
    {
        "instruction": "입력 텍스트: 청구를 한 번도 하지 않은 보험 가입자를 찾으세요.\n\nDDL statements:\nCREATE TABLE policyholders (policyholder_id INT, name VARCHAR(50)); INSERT INTO policyholders (policyholder_id, name) VALUES (1, 'John Smith'), (2, 'Jane Doe'); CREATE TABLE policies (policy_id INT, policyholder_id INT, category VARCHAR(10)); INSERT INTO policies (policy_id, policyholder_id, category) VALUES (1, 1, 'auto'), (2, 1, 'auto'), (3, 2, 'home'), (4, 2, 'auto'); CREATE TABLE claims (claim_id INT, policy_id INT, amount DECIMAL(10, 2)); INSERT INTO claims (claim_id, policy_id, amount) VALUES (1, 1, 500), (2, 1, 700), (3, 2, 300), (4, 3, 800), (5, 3, 900), (6, 4, 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policyholders.name FROM policyholders LEFT JOIN claims ON policies.policy_id = claims.policy_id WHERE claims.claim_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 특정 키워드('vacation')를 포함하는 게시물의 좋아요 수와 댓글 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE posts (post_id INT, content VARCHAR(500), likes INT, comments INT); INSERT INTO posts (post_id, content, likes, comments) VALUES (1, 'I am on a vacation!', 100, 25), (2, 'I love my job', 50, 10), (3, 'I need a vacation', 75, 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(likes) AS total_likes, SUM(comments) AS total_comments FROM posts WHERE content LIKE '%vacation%';"
    },
    {
        "instruction": "입력 텍스트: 언더라이팅 데이터베이스에서 각 주별 보험 가입자 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE policyholders (policyholder_id INT, state VARCHAR(2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM policyholders GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 지역과 연도별 목재 판매 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE TimberSales (region VARCHAR(255), year INT, sales FLOAT); INSERT INTO TimberSales (region, year, sales) VALUES ('North', 2018, 50000), ('North', 2019, 55000), ('South', 2018, 40000), ('South', 2019, 43000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, year, SUM(sales) as total_revenue FROM TimberSales GROUP BY region, year;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 온 방문자들 중 커뮤니티 참여 프로그램에 참여한 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Countries (CountryID INT, Country VARCHAR(50)); INSERT INTO Countries (CountryID, Country) VALUES (1, 'United States'), (2, 'Canada'); CREATE TABLE CommunityEngagements (EngagementID INT, VisitorID INT, CountryID INT); INSERT INTO CommunityEngagements (EngagementID, VisitorID, CountryID) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, COUNT(VisitorID) * 100.0 / (SELECT COUNT(DISTINCT VisitorID) FROM CommunityEngagements) AS EngagementPercentage FROM CommunityEngagements JOIN Countries ON CommunityEngagements.CountryID = Countries.CountryID GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 선박별로 보고된 사고 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Vessels (VesselID INT, VesselName VARCHAR(255)); INSERT INTO Vessels (VesselID, VesselName) VALUES (1, 'VesselA'), (2, 'VesselB'), (3, 'VesselC'); CREATE TABLE Incidents (IncidentID INT, VesselID INT, IncidentType VARCHAR(255), IncidentTime TIMESTAMP); INSERT INTO Incidents (IncidentID, VesselID, IncidentType, IncidentTime) VALUES (1, 1, 'Collision', '2021-02-15 12:30:00'), (2, 2, 'Fire', '2021-06-20 06:00:00'), (3, 1, 'Grounding', '2021-11-05 20:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT V.VesselName, COUNT(I.IncidentID) FROM Vessels V LEFT JOIN Incidents I ON V.VesselID = I.VesselID AND I.IncidentTime BETWEEN DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 YEAR) AND CURRENT_TIMESTAMP GROUP BY V.VesselName;"
    },
    {
        "instruction": "입력 텍스트: 다양한 연령대에 걸쳐 사용자 성별의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE user_data (user_id INT, age INT, gender VARCHAR(255)); INSERT INTO user_data (user_id, age, gender) VALUES (1, 25, 'Female'), (2, 45, 'Male'), (3, 35, 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CASE WHEN age BETWEEN 18 AND 30 THEN '18-30' WHEN age BETWEEN 31 AND 50 THEN '31-50' ELSE '51+' END AS age_group, gender, COUNT(*) as count FROM user_data GROUP BY age_group, gender;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에 있는 호텔들의 사용자당 평균 가상 투어 참여 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, virtual_tour_views INT, virtual_tour_engagement_time INT); INSERT INTO hotels (hotel_id, hotel_name, city, virtual_tour_views, virtual_tour_engagement_time) VALUES (1, 'The Park Hotel', 'Tokyo', 500, 15000), (2, 'The Grand Hotel', 'Tokyo', 400, 12000), (3, 'The Shangri-La Hotel', 'Tokyo', 600, 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(virtual_tour_engagement_time/virtual_tour_views) as avg_engagement_time FROM hotels WHERE city = 'Tokyo' GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 인증 레벨별로 각 도시의 그린 빌딩 평균 크기는 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_buildings (id INT, building_name VARCHAR(255), city VARCHAR(255), certification_level VARCHAR(255), sqft FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, certification_level, AVG(sqft) as avg_sqft FROM green_buildings GROUP BY city, certification_level;"
    },
    {
        "instruction": "입력 텍스트: 방위 산업에서 지난 12개월 동안 보고된 사이버 보안 사건 수가 가장 많은 상위 3개국을 나열하세요.\n\nDDL statements:\nCREATE TABLE cybersecurity_incidents(id INT, industry VARCHAR(30), country VARCHAR(30), incident_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS incidents FROM cybersecurity_incidents WHERE industry = 'defense' AND incident_date >= DATE(NOW()) - INTERVAL 12 MONTH GROUP BY country ORDER BY incidents DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 '음악' 관심 그룹의 일일 평균 활성 사용자 수는 얼마였습니까?\n\nDDL statements:\nCREATE SCHEMA userdata; CREATE TABLE user_interests(user_id INT, interest_group VARCHAR(255), daily_active_users INT); INSERT INTO user_interests (user_id, interest_group, daily_active_users) VALUES (1, 'music', 800); INSERT INTO user_interests (user_id, interest_group, daily_active_users) VALUES (2, 'music', 1100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(daily_active_users) FROM userdata.user_interests WHERE interest_group = 'music' AND daily_active_users >= (SELECT AVG(daily_active_users) FROM userdata.user_interests WHERE interest_group = 'music') AND post_date >= (SELECT CURDATE() - INTERVAL 30 DAY);"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 2010년 이후에 건설된 건물들의 평균 탄소 상쇄량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE buildings (id INT, name VARCHAR(255), state VARCHAR(255), construction_date DATE, carbon_offset FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(carbon_offset) AS avg_carbon_offset FROM buildings WHERE state = 'New York' AND YEAR(construction_date) > 2010;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 감지된 고위험 취약점의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, severity TEXT, detected_at TIMESTAMP); INSERT INTO vulnerabilities (id, severity, detected_at) VALUES (1, 'high', '2022-01-01 10:00:00'), (2, 'medium', '2022-01-02 11:00:00'), (3, 'high', '2022-01-15 12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'high' AND detected_at >= NOW() - INTERVAL '30 days';"
    },
    {
        "instruction": "입력 텍스트: 재고 내에서 윤리적인 의류 브랜드의 고유한 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Inventory (id INT, product_name VARCHAR(255), brand VARCHAR(255), is_ethical BOOLEAN); INSERT INTO Inventory (id, product_name, brand, is_ethical) VALUES (1, 'Organic Cotton T-Shirt', 'Green Values', true), (2, 'Recycled Polyester Hoodie', 'EcoWear', true), (3, 'Regular T-Shirt', 'Fashion First', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT brand) FROM Inventory WHERE is_ethical = true;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후 중동에서 수행된 정보 작전은 무엇인가요?\n\nDDL statements:\nCREATE TABLE IntelligenceOperations (id INT, operation_name VARCHAR(255), location VARCHAR(255), year INT); INSERT INTO IntelligenceOperations (id, operation_name, location, year) VALUES (1, 'Operation Red Wing', 'Middle East', 2010), (2, 'Operation Neptune Spear', 'Pakistan', 2011), (3, 'Operation Inherent Resolve', 'Iraq', 2014);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT operation_name, location, year FROM IntelligenceOperations WHERE year >= 2010 AND location LIKE '%Middle East%';"
    },
    {
        "instruction": "입력 텍스트: 대서양에 있는 모든 해저 케이블의 총 길이 중 북동항로에 위치한 케이블의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE UNDERWATER_CABLES (NAME TEXT, LENGTH NUMERIC, REGION TEXT); INSERT INTO UNDERWATER_CABLES (NAME, LENGTH, REGION) VALUES ('TAT-14', 14000, 'Atlantic Ocean'), ('AC-1', 6000, 'Atlantic Ocean'), ('SeaMeWe-3', 39000, 'Atlantic Ocean'), ('SeaMeWe-4', 37000, 'Atlantic Ocean'), ('SeaMeWe-5', 17000, 'Atlantic Ocean'), ('NorSeaCom 1', 2400, 'Northeast Passage');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(LENGTH) FILTER (WHERE REGION = 'Northeast Passage') * 100.0 / SUM(LENGTH)) AS PERCENTAGE FROM UNDERWATER_CABLES WHERE REGION IN ('Atlantic Ocean', 'Northeast Passage');"
    },
    {
        "instruction": "입력 텍스트: Victoria and Albert Museum'에서 판매된 'Rococo' 운동의 모든 작품들의 평균 판매 가격은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Artworks (artwork_id INT, movement VARCHAR(255), sale_price DECIMAL(10, 2), museum_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(sale_price) FROM Artworks WHERE movement = 'Rococo' AND museum_name = 'Victoria and Albert Museum';"
    },
    {
        "instruction": "입력 텍스트: top_ethics_training 뷰에서 모든 기록을 보여주세요.\n\nDDL statements:\nCREATE TABLE workforce_training (id INT PRIMARY KEY, employee_name VARCHAR(255), training_topic VARCHAR(255), training_hours INT, training_completion_date DATE); CREATE VIEW top_ethics_training AS WITH cte AS (SELECT * FROM workforce_training WHERE training_topic = 'ethics') SELECT * FROM cte WHERE training_hours > 5;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM top_ethics_training;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 가입한 모든 자원봉사자와 그들의 소속 기관을 나열하세요.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, VolunteerJoinDate DATE, OrgID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT VolunteerName, OrgID FROM Volunteers WHERE YEAR(VolunteerJoinDate) = 2020;"
    },
    {
        "instruction": "입력 텍스트: Chicago Bulls' 경기의 평균 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(255)); INSERT INTO teams (team_id, team_name) VALUES (1, 'Golden State Warriors'), (2, 'Chicago Bulls'); CREATE TABLE ticket_sales (game_id INT, team_id INT, ticket_price DECIMAL(5,2)); INSERT INTO ticket_sales (game_id, team_id, ticket_price) VALUES (1, 1, 150.00), (2, 1, 200.00), (3, 2, 100.00), (4, 2, 120.00), (5, 2, 130.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(ts.ticket_price) as avg_ticket_price FROM ticket_sales ts WHERE ts.team_id = 2;"
    },
    {
        "instruction": "입력 텍스트: 모든 레스토랑에서 판매량이 가장 높은 지속 가능한 메뉴 아이템 상위 3개를 나열하세요.\n\nDDL statements:\nCREATE TABLE Sustainable_Menu_Items (MenuItemID INT, MenuItemName VARCHAR(255), IsSustainable BIT); INSERT INTO Sustainable_Menu_Items VALUES (1,'Burger',1),(2,'Pizza',0),(3,'Pasta',1),(4,'Salad',1); INSERT INTO Sales VALUES (1,1,500),(1,2,600),(2,1,400),(2,2,450),(3,1,350),(3,2,400),(4,1,250),(4,2,300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Sustainable_Menu_Items.MenuItemName, SUM(Sales.Sales) AS Total_Sales FROM Sustainable_Menu_Items INNER JOIN Sales ON Sustainable_Menu_Items.MenuItemID = Sales.MenuItemID WHERE Sustainable_Menu_Items.IsSustainable = 1 GROUP BY Sustainable_Menu_Items.MenuItemName ORDER BY Total_Sales DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 위치한 모든 광산의 총 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE EnvironmentalImpact (ImpactID INT, MineSite VARCHAR(50), Country VARCHAR(50), CO2Emissions INT); INSERT INTO EnvironmentalImpact (ImpactID, MineSite, Country, CO2Emissions) VALUES (1, 'Site A', 'Canada', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CO2Emissions) FROM EnvironmentalImpact WHERE Country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 교통 부문에서 완료된 공공사업 프로젝트의 평균 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE public_works_projects (id INT, name VARCHAR(255), category VARCHAR(255), cost FLOAT); INSERT INTO public_works_projects (id, name, category, cost) VALUES (1, 'Road Reconstruction', 'Transportation', 500000.0), (2, 'Bridge Construction', 'Transportation', 2000000.0), (3, 'Traffic Signal Installation', 'Transportation', 150000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM public_works_projects WHERE category = 'Transportation' AND status = 'Completed';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 기록된 감염병 중에서 100건 이상의 사례가 있는 질병은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Diseases (ID INT, Year INT, Name TEXT, Cases INT); INSERT INTO Diseases (ID, Year, Name, Cases) VALUES (1, 2019, 'Measles', 150); INSERT INTO Diseases (ID, Year, Name, Cases) VALUES (2, 2018, 'Mumps', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, Cases FROM Diseases WHERE Year = 2019 AND Cases > 100;"
    },
    {
        "instruction": "입력 텍스트: 노래를 발매하지 않은 모든 아티스트를 삭제하세요.\n\nDDL statements:\nCREATE SCHEMA if not exists music_schema;CREATE TABLE if not exists artists (id INT, name VARCHAR, num_songs INT);INSERT INTO artists (id, name, num_songs) VALUES (1, 'Artist A', 5), (2, 'Artist B', 0), (3, 'Artist C', 3), (4, 'Artist D', 2), (5, 'Artist E', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM music_schema.artists WHERE num_songs = 0;"
    },
    {
        "instruction": "입력 텍스트: 영국이 지난 3년 동안 완료한 군사 혁신 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE military_innovation (project_id INT, country TEXT, completion_date DATE); INSERT INTO military_innovation (project_id, country, completion_date) VALUES (1, 'UK', '2020-01-01'), (2, 'UK', '2019-06-15'), (3, 'UK', '2021-03-27');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM military_innovation WHERE country = 'UK' AND completion_date >= DATEADD(year, -3, GETDATE())"
    },
    {
        "instruction": "입력 텍스트: 현재 연도에 중동 지역에서 이루어지고 있는 군사 장비 판매 계약 협상은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE contract_negotiations (id INT, equipment_type VARCHAR(255), country VARCHAR(255), year INT, negotiation_status VARCHAR(255)); INSERT INTO contract_negotiations (id, equipment_type, country, year, negotiation_status) VALUES (1, 'Aircraft', 'Saudi Arabia', 2022, 'In Progress'), (2, 'Ground Vehicle', 'UAE', 2022, 'Completed'), (3, 'Naval Vessel', 'Iran', 2022, 'Postponed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_type, country, negotiation_status FROM contract_negotiations WHERE year = YEAR(CURRENT_DATE) AND country IN ('Saudi Arabia', 'UAE', 'Iran');"
    },
    {
        "instruction": "입력 텍스트: athletes_performance 데이터셋에서 개인 최고 기록을 달성한 운동선수들의 이름을 최고 기록 날짜 기준으로 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE athletes_performance (athlete VARCHAR(50), performance FLOAT, best_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT athlete FROM athletes_performance WHERE performance = (SELECT MAX(performance) FROM athletes_performance GROUP BY athlete) ORDER BY best_date DESC;"
    },
    {
        "instruction": "입력 텍스트: 서부 지역의 풍력 발전소에서 생산된 에너지 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE production (id INT, region VARCHAR(20), type VARCHAR(20), production INT); INSERT INTO production (id, region, type, production) VALUES (1, 'Western', 'Wind Farm', 12000); INSERT INTO production (id, region, type, production) VALUES (2, 'Central', 'Solar Farm', 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production) FROM production WHERE region = 'Western' AND type = 'Wind Farm';"
    },
    {
        "instruction": "입력 텍스트: 2010년 이후 라틴 아메리카에서 완료된 농촌 인프라 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE InfrastructureProjects (id INT, project_name TEXT, location TEXT, start_date DATE, end_date DATE); INSERT INTO InfrastructureProjects (id, project_name, location, start_date, end_date) VALUES (1, 'Road Construction', 'Latin America', '2015-01-01', '2017-12-31'); INSERT INTO InfrastructureProjects (id, project_name, location, start_date, end_date) VALUES (2, 'Bridge Building', 'Latin America', '2016-04-01', '2018-06-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM InfrastructureProjects WHERE location LIKE '%Latin America%' AND end_date >= '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 도시에 있는 건물 수와 그들의 총 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE buildings (id INT, name TEXT, city TEXT, co2_emissions FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, COUNT(*), SUM(co2_emissions) FROM buildings GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 평균 예산보다 높은 예산을 가진 부서를 나열하시오.\n\nDDL statements:\nCREATE TABLE Departments (Department TEXT, Budget DECIMAL); INSERT INTO Departments VALUES ('Health', 20000.00), ('Education', 15000.00), ('Operations', 10000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, Budget FROM Departments WHERE Budget > (SELECT AVG(Budget) FROM Departments);"
    },
    {
        "instruction": "입력 텍스트: 오레곤 프로젝트에서 구현된 지속 가능한 건축 관행은 무엇인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, project_name VARCHAR(50), location VARCHAR(50), sustainable_practices TEXT); INSERT INTO projects (id, project_name, location, sustainable_practices) VALUES (1, 'GreenVille', 'Oregon', 'Solar panels, Rainwater harvesting'); INSERT INTO projects (id, project_name, location, sustainable_practices) VALUES (2, 'EcoHaven', 'Oregon', 'Geothermal energy, Green roof');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sustainable_practices FROM projects WHERE location = 'Oregon';"
    },
    {
        "instruction": "입력 텍스트: 양식 농장의 각 어종별 평균 용존 산소 농도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Farm (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE Species (id INT, name VARCHAR(50), scientific_name VARCHAR(50)); CREATE TABLE Measurement (id INT, farm_id INT, species_id INT, dissolved_oxygen FLOAT, timestamp TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name, AVG(m.dissolved_oxygen) FROM Species s JOIN Measurement m ON s.id = m.species_id GROUP BY s.name;"
    },
    {
        "instruction": "입력 텍스트: 빈곤 감소 분야를 지원한 고유 투자자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE investor_activities (investor VARCHAR(20), sector VARCHAR(30)); INSERT INTO investor_activities (investor, sector) VALUES ('XYZ', 'climate change'), ('ABC', 'climate change'), ('DEF', 'poverty reduction');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT investor) FROM investor_activities WHERE sector = 'poverty reduction';"
    },
    {
        "instruction": "입력 텍스트: Los Angeles'에 위치한 프로그램들에 대해 프로그램 위치별로 그룹화된 자원봉사자 수와 총 봉사 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Programs (ProgramID INT, ProgramName VARCHAR(50), Location VARCHAR(50), Budget DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.Location, COUNT(v.VolunteerID) as TotalVolunteers, SUM(v.Hours) as TotalHours FROM Volunteers v INNER JOIN Programs p ON v.ProgramID = p.ProgramID WHERE p.Location = 'Los Angeles' GROUP BY p.Location;"
    },
    {
        "instruction": "입력 텍스트: 각 종의 개체 수 성장률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE animal_population (species VARCHAR(50), population INT, year INT); INSERT INTO animal_population (species, population, year) VALUES ('Tiger', 300, 2020), ('Tiger', 310, 2021), ('Lion', 250, 2020), ('Lion', 260, 2021), ('Elephant', 500, 2020), ('Elephant', 520, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, (LAG(population) OVER (PARTITION BY species ORDER BY year) - population) * 100.0 / population as growth_rate FROM animal_population ORDER BY species, year;"
    },
    {
        "instruction": "입력 텍스트: soccer_teams' 테이블의 각 팀이 득점한 골 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE soccer_teams (team_id INT, team_name VARCHAR(50), goals INT); INSERT INTO soccer_teams (team_id, team_name, goals) VALUES (1, 'Barcelona', 75); INSERT INTO soccer_teams (team_id, team_name, goals) VALUES (2, 'Real Madrid', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, SUM(goals) FROM soccer_teams GROUP BY team_name;"
    },
    {
        "instruction": "입력 텍스트: 하루에 5번 이상 거래를 한 고객을 확인하세요.\n\nDDL statements:\nCREATE TABLE transactions (customer_id INT, transaction_date DATE); CREATE TABLE daily_transactions (customer_id INT, transaction_date DATE, num_transactions INT); INSERT INTO transactions (customer_id, transaction_date) VALUES (1, '2022-01-01'), (1, '2022-01-01'), (1, '2022-01-02'), (2, '2022-01-01'), (2, '2022-01-02'), (2, '2022-01-02'), (2, '2022-01-02'), (3, '2022-01-03'); INSERT INTO daily_transactions (customer_id, transaction_date, num_transactions) SELECT customer_id, transaction_date, COUNT(*) FROM transactions GROUP BY customer_id, transaction_date;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customer_id, transaction_date FROM daily_transactions WHERE num_transactions > 5;"
    },
    {
        "instruction": "입력 텍스트: 태평양 지역의 군사 기술 프로젝트에 할당된 최대 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE military_technology_projects (id INT, project_name VARCHAR(255), budget DECIMAL(10,2), region VARCHAR(255)); INSERT INTO military_technology_projects (id, project_name, budget, region) VALUES (1, 'Project 1', 1500000, 'Pacific'), (2, 'Project 2', 2000000, 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(budget) FROM military_technology_projects WHERE region = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 북극의 연도별 평균 기온 이상치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE TemperatureAnomalies(year INT, anomaly FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, AVG(anomaly) FROM TemperatureAnomalies GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 1일 기준으로 도쿄에서 운행 중인 전기 택시는 몇 대인가요?\n\nDDL statements:\nCREATE TABLE electric_taxis (taxi_id INT, registration_date TIMESTAMP, is_operational BOOLEAN); INSERT INTO electric_taxis (taxi_id, registration_date, is_operational) VALUES (1, '2021-01-01 00:00:00', TRUE), (2, '2021-01-02 00:00:00', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM electric_taxis WHERE registration_date <= '2022-01-01' AND is_operational = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 충전 레벨에 따른 공공 충전소는 몇 개가 있나요?\n\nDDL statements:\nCREATE TABLE ChargingStations (station_id INT, charging_level TEXT, country TEXT); CREATE TABLE PublicChargingStations (station_id INT, is_public BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, charging_level, COUNT(*) AS station_count FROM ChargingStations cs INNER JOIN PublicChargingStations pcs ON cs.station_id = pcs.station_id WHERE is_public = TRUE GROUP BY 1, 2;"
    },
    {
        "instruction": "입력 텍스트: 2021년 5월 마지막 주에 버스 3001번의 총 요금은 얼마였습니까?\n\nDDL statements:\nCREATE SCHEMA trans schemas.trans; CREATE TABLE bus_fares (bus_number INT, fare FLOAT, fare_date DATE); INSERT INTO bus_fares (bus_number, fare, fare_date) VALUES (3001, 1.50, '2021-05-25'), (3001, 1.50, '2021-05-26'), (3001, 1.50, '2021-05-27'), (3001, 1.50, '2021-05-28'), (3001, 1.50, '2021-05-29'), (3001, 1.50, '2021-05-30'), (3001, 1.50, '2021-05-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(fare) FROM bus_fares WHERE bus_number = 3001 AND fare_date BETWEEN '2021-05-25' AND '2021-05-31';"
    },
    {
        "instruction": "입력 텍스트: 농촌개발' 스키마의 'projects' 테이블에 있는 농촌 인프라 프로젝트가 지난 5년 동안 얼마나 완료되었는지, 프로젝트 유형별로 구분하여 알려주세요.\n\nDDL statements:\nCREATE TABLE projects (project_id INT, project_type VARCHAR(255), completion_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, COUNT(*) FROM projects WHERE completion_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY project_type;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 캐나다 출신 기부자들이 기부한 총액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Donors (id INT, name TEXT, country TEXT, donation_amount DECIMAL(10, 2), donation_date DATE); INSERT INTO Donors (id, name, country, donation_amount, donation_date) VALUES (1, 'John Doe', 'Canada', 50.00, '2020-01-01'); INSERT INTO Donors (id, name, country, donation_amount, donation_date) VALUES (2, 'Jane Smith', 'Canada', 100.00, '2020-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM Donors WHERE country = 'Canada' AND YEAR(donation_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 일본에 대해 발표된 여행 경보는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE travel_advisories (advisory_id INT, country TEXT, issue_date DATE); INSERT INTO travel_advisories (advisory_id, country, issue_date) VALUES (1, 'Japan', '2017-01-01'), (2, 'Japan', '2018-03-15'), (3, 'Japan', '2019-07-28'), (4, 'Japan', '2020-12-22'), (5, 'Japan', '2021-03-04');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM travel_advisories WHERE country = 'Japan' AND issue_date >= DATE('now', '-5 year');"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기 샤리아 준수 금융의 평균 대출 금액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE shariah_compliant_finance (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), approval_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(loan_amount) FROM shariah_compliant_finance WHERE approval_date BETWEEN '2021-10-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 생산에 사용되는 친환경 재료의 평균 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE eco_materials (material_id INT, material_name VARCHAR(50), unit_price DECIMAL(5,2)); INSERT INTO eco_materials (material_id, material_name, unit_price) VALUES (1, 'Organic Cotton', 3.50), (2, 'Recycled Polyester', 4.25), (3, 'Hemp', 2.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(unit_price) FROM eco_materials;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 출신 팀들이 e스포츠 이벤트에 평균적으로 소요한 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE EsportsTeamsAfrica (TeamID INT, TeamName VARCHAR(100), Country VARCHAR(50), HoursSpent DECIMAL(10,2)); INSERT INTO EsportsTeamsAfrica (TeamID, TeamName, Country, HoursSpent) VALUES (1, 'Team Africa', 'Egypt', 100.00), (2, 'Team Morocco', 'Morocco', 120.00), (3, 'Team Kenya', 'Kenya', 150.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(HoursSpent) FROM EsportsTeamsAfrica WHERE Country = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 가장 칼로리가 낮은 음식을 찾아주세요\n\nDDL statements:\nCREATE TABLE dishes (id INT, name TEXT, vegan BOOLEAN, calories INT); INSERT INTO dishes (id, name, vegan, calories) VALUES (1, 'Quinoa Salad', TRUE, 350), (2, 'Pizza Margherita', FALSE, 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM dishes ORDER BY calories LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 2018년부터 2021년까지 프라세오디뮴과 이트륨의 연간 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production (year INT, element VARCHAR(10), quantity INT); INSERT INTO production (year, element, quantity) VALUES (2018, 'Praseodymium', 7000), (2019, 'Praseodymium', 7500), (2020, 'Praseodymium', 8000), (2021, 'Praseodymium', 8500), (2018, 'Yttrium', 4000), (2019, 'Yttrium', 4200), (2020, 'Yttrium', 4400), (2021, 'Yttrium', 4600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, SUM(quantity) FROM production WHERE element IN ('Praseodymium', 'Yttrium') GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 어떤 서식지 유형의 동물 총 개체 수가 가장 높은가요?\n\nDDL statements:\nCREATE TABLE animal_population (id INT, type VARCHAR(50), animals INT); INSERT INTO animal_population (id, type, animals) VALUES (1, 'Forest', 500), (2, 'Savannah', 750), (3, 'Wetlands', 450);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, MAX(animals) FROM animal_population;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 아시아에서 유엔이 수행한 평화유지 임무의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE PeacekeepingMissions(Year INT, Location NVARCHAR(50), Mission VARCHAR(50));INSERT INTO PeacekeepingMissions(Year, Location, Mission) VALUES (2015, 'Asia', 'UNAMI'), (2016, 'Asia', 'MINURSO'), (2017, 'Asia', 'UNFICYP'), (2018, 'Asia', 'UNMOGIP');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT Mission) AS Total_Missions FROM PeacekeepingMissions WHERE Location = 'Asia' AND Year >= 2015;"
    },
    {
        "instruction": "입력 텍스트: 각 어종별 총 생물량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE fish_stock (id INT, species VARCHAR, biomass FLOAT); INSERT INTO fish_stock (id, species, biomass) VALUES (1, 'Tilapia', 500.0), (2, 'Salmon', 800.0), (3, 'Trout', 300.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, SUM(biomass) FROM fish_stock GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 플로리다 주에서 시행된 고객 ID가 5000보다 큰 물 보존 계획은 무엇인가요?\n\nDDL statements:\nCREATE TABLE florida_conservation_initiatives (initiative_id INT, state VARCHAR(20), customer_id INT); INSERT INTO florida_conservation_initiatives (initiative_id, state, customer_id) VALUES (1, 'Florida', 5001), (2, 'California', 6000), (3, 'Florida', 5500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_id FROM florida_conservation_initiatives WHERE state = 'Florida' AND customer_id > 5000;"
    },
    {
        "instruction": "입력 텍스트: 각 에너지원별로 가장 높은 에너지 용량을 가진 재생 에너지 프로젝트를 윈도우 함수를 사용한 SQL 쿼리로 나열하세요.\n\nDDL statements:\nCREATE TABLE renewable_energy_projects (project_id INT, green_building_id INT, energy_source VARCHAR(50), capacity FLOAT, start_date DATE, end_date DATE);CREATE VIEW top_capacity_projects AS SELECT energy_source, project_id, capacity, RANK() OVER (PARTITION BY energy_source ORDER BY capacity DESC) AS project_rank FROM renewable_energy_projects;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT energy_source, project_id, capacity FROM top_capacity_projects WHERE project_rank = 1;"
    },
    {
        "instruction": "입력 텍스트: 메뉴에는 'Veg' 요리가 몇 개 있나요?\n\nDDL statements:\nCREATE TABLE menu (item_id INT, item_name TEXT, category TEXT); INSERT INTO menu (item_id, item_name, category) VALUES (1, 'Spicy Quinoa', 'Vegan'), (2, 'Tofu Stir Fry', 'Vegan'), (3, 'Chickpea Curry', 'Vegan'), (4, 'Beef Burrito', 'Non-Veg'), (5, 'Chicken Alfredo', 'Non-Veg'), (6, 'Fish and Chips', 'Non-Veg'), (7, 'Veggie Pizza', 'Veg'), (8, 'Spicy Veggie Pizza', 'Veg');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, COUNT(*) FROM menu WHERE category = 'Veg' GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 노동력 개발 분야에서 평균 급여보다 높은 급여를 받는 직원은 누구인가요?\n\nDDL statements:\nCREATE TABLE workers (id INT, name VARCHAR(50), sector VARCHAR(50), salary DECIMAL(10,2)); INSERT INTO workers (id, name, sector, salary) VALUES (1, 'John Doe', 'Workforce Development', 60000.00), (2, 'Jane Smith', 'Workforce Development', 65000.00), (3, 'Mike Johnson', 'Workforce Development', 55000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM workers WHERE sector = 'Workforce Development' AND salary > (SELECT AVG(salary) FROM workers WHERE sector = 'Workforce Development');"
    },
    {
        "instruction": "입력 텍스트: 응급실에서 환자를 치료한 적이 없는 의료 전문가의 이름과 전문 분야를 찾으세요.\n\nDDL statements:\nCREATE TABLE treatments (id INT, medical_professional_id INT, patient_name VARCHAR(50), treatment_type VARCHAR(50)); INSERT INTO treatments (id, medical_professional_id, patient_name, treatment_type) VALUES (1, 1, 'John Doe', 'Emergency Room'); INSERT INTO treatments (id, medical_professional_id, patient_name, treatment_type) VALUES (2, 2, 'Jane Smith', 'Checkup'); INSERT INTO treatments (id, medical_professional_id, patient_name, treatment_type) VALUES (3, 1, 'Janet Black', 'Emergency Room'); INSERT INTO treatments (id, medical_professional_id, patient_name, treatment_type) VALUES (4, 3, 'Jim Brown', 'Checkup'); CREATE TABLE medical_professionals (id INT, name VARCHAR(50), specialty VARCHAR(50)); INSERT INTO medical_professionals (id, name, specialty) VALUES (1, 'John Doe', 'Doctor'); INSERT INTO medical_professionals (id, name, specialty) VALUES (2, 'Jane Smith', 'Nurse'); INSERT INTO medical_professionals (id, name, specialty) VALUES (3, 'Jim Brown', 'Physician Assistant');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name, m.specialty FROM medical_professionals m LEFT JOIN treatments t ON m.id = t.medical_professional_id WHERE t.treatment_type IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 에너지 부문에 속한 회사들의 최소 ESG 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name VARCHAR(255), sector VARCHAR(255), ESG_score FLOAT); INSERT INTO companies (id, name, sector, ESG_score) VALUES (1, 'ExxonMobil', 'Energy', 60.0), (2, 'Chevron', 'Energy', 62.5), (3, 'Shell', 'Energy', 65.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(ESG_score) FROM companies WHERE sector = 'Energy';"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월의 메뉴 아이템과 그들의 총 매출을 sales_fact 테이블에서 총 매출 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE time_dim (time_id INT, time_year INT, time_month INT, time_day INT, time_hour INT, time_minute INT, time_second INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.menu_item_name, SUM(sf.sale_quantity * sf.sale_price) as total_sales FROM sales_fact sf JOIN menu_item_dim m ON sf.menu_item_id = m.menu_item_id JOIN time_dim t ON sf.sale_date = t.time_date WHERE t.time_month = 1 AND t.time_year = 2022 GROUP BY m.menu_item_name ORDER BY total_sales DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 보전 이니셔티브의 성공률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE conservation_initiatives (region TEXT, initiative TEXT, success BOOLEAN); INSERT INTO conservation_initiatives (region, initiative, success) VALUES ('North', 'Rainwater harvesting', true), ('North', 'Low-flow appliances', false), ('South', 'Smart irrigation', true), ('East', 'Leak detection', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(success) as success_rate FROM conservation_initiatives GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: energy_storage' 스키마에 있는 배터리를 사용하는 모든 에너지 저장 프로젝트를 나열하세요\n\nDDL statements:\nCREATE SCHEMA energy_storage; CREATE TABLE battery_projects (name VARCHAR(50), capacity INT); INSERT INTO energy_storage.battery_projects (name, capacity) VALUES ('Project1', 50), ('Project2', 75); CREATE TABLE pumped_hydro_projects (name VARCHAR(50), capacity INT); INSERT INTO energy_storage.pumped_hydro_projects (name, capacity) VALUES ('Project1', 200), ('Project2', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM energy_storage.battery_projects;"
    },
    {
        "instruction": "입력 텍스트: V2' 선박이 운송하는 화물의 총 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Port (id INT, name TEXT); INSERT INTO Port (id, name) VALUES (1, 'A'), (2, 'B'); CREATE TABLE Vessel (id INT, name TEXT, cargo_weight INT, port_id INT); INSERT INTO Vessel (id, name, cargo_weight, port_id) VALUES (1, 'V1', 100, 1), (2, 'V2', 150, 1), (3, 'V3', 120, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cargo_weight) FROM Vessel WHERE name = 'V2';"
    },
    {
        "instruction": "입력 텍스트: 사용자 테이블에서 지역별로 그룹화된 사용자당 평균 팔로워 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (id INT, name VARCHAR(50), region VARCHAR(50), followers INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(followers) FROM users GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 구역별 학교에 할당된 총 예산을 내림차순으로 얼마인가요?\n\nDDL statements:\nCREATE TABLE district_schools (school_id INT, district_id INT, budget_allocation INT); INSERT INTO district_schools VALUES (1, 4, 6000000), (2, 5, 7000000), (3, 4, 5000000), (4, 6, 8000000), (5, 5, 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district_id, SUM(budget_allocation) as total_budget FROM district_schools GROUP BY district_id ORDER BY total_budget DESC;"
    },
    {
        "instruction": "입력 텍스트: 싱가포르 택시의 평균 주행 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE taxi_data (id INT, city VARCHAR(50), distance FLOAT); INSERT INTO taxi_data (id, city, distance) VALUES (1, 'Singapore', 12.5), (2, 'NYC', 10.0), (3, 'London', 15.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(distance) FROM taxi_data WHERE city = 'Singapore';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 1인당 평균 수도 사용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE water_consumption(country VARCHAR(50), year INT, population INT, volume FLOAT); INSERT INTO water_consumption(country, year, population, volume) VALUES ('Canada', 2020, 37963240, 65.28), ('Canada', 2019, 37742300, 64.13), ('Canada', 2018, 37410001, 62.98);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(volume/population) FROM water_consumption WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 블루스 장르에서 곡 길이가 200초 미만인 song_id는 무엇인가요?\n\nDDL statements:\nCREATE TABLE genres (genre VARCHAR(10), song_id INT, song_length FLOAT);   INSERT INTO genres (genre, song_id, song_length) VALUES ('blues', 19, 230.4), ('blues', 20, 185.2), ('blues', 21, 215.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT song_id FROM genres WHERE genre = 'blues' AND song_length < 200;"
    },
    {
        "instruction": "입력 텍스트: 의료 시스템 내 소아과 전문의와 노인과 전문의의 총 인원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE healthcare_providers (id INT, name VARCHAR(50), specialty VARCHAR(50)); INSERT INTO healthcare_providers (id, name, specialty) VALUES (1, 'Dr. Lee', 'Pediatrician'), (2, 'Dr. Patel', 'Geriatrician'), (3, 'Dr. Kim', 'Pediatrician');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM healthcare_providers WHERE specialty = 'Pediatrician' UNION ALL SELECT COUNT(*) FROM healthcare_providers WHERE specialty = 'Geriatrician';"
    },
    {
        "instruction": "입력 텍스트: 피닉스 대중교통 시스템에서 경전철 노선 3을 삭제하세요\n\nDDL statements:\nCREATE TABLE light_rail_lines (id INT PRIMARY KEY, line_number INT, line_name VARCHAR(255), city VARCHAR(255), num_stations INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM light_rail_lines WHERE line_number = 3 AND city = 'Phoenix';"
    },
    {
        "instruction": "입력 텍스트: ports' 테이블에 있는 항구들의 최대 크레인 용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ports (port_id INT, port_name VARCHAR(50), crane_capacity INT); INSERT INTO ports (port_id, port_name, crane_capacity) VALUES (1, 'Port of Long Beach', 200), (2, 'Port of Los Angeles', 120), (3, 'Port of Oakland', 175);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(crane_capacity) FROM ports;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 위치한 매장에서 판매되는 유기농 제품의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(100), price DECIMAL(5,2), is_organic BOOLEAN); CREATE TABLE stores (store_id INT, store_name VARCHAR(100), state VARCHAR(2)); INSERT INTO products (product_id, product_name, price, is_organic) VALUES (1, 'Apple', 0.99, true), (2, 'Banana', 0.59, false); INSERT INTO stores (store_id, store_name, state) VALUES (1, 'Whole Foods CA', 'CA'), (2, 'Whole Foods NY', 'NY');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(p.price) FROM products p JOIN stores s ON p.product_id = s.store_id WHERE p.is_organic = true AND s.state = 'CA';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 담수 지느러미어 양식장의 수를 나열하고, 양식장 수가 많은 순으로 내림차순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE freshwaterfinfish (country VARCHAR(20), quantity INT); INSERT INTO freshwaterfinfish (country, quantity) VALUES ('Canada', 500), ('US', 400), ('Mexico', 300), ('China', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(quantity) FROM freshwaterfinfish GROUP BY country ORDER BY SUM(quantity) DESC;"
    },
    {
        "instruction": "입력 텍스트: worker_id가 7인 근로자를 삭제하세요.\n\nDDL statements:\nCREATE TABLE workers (worker_id INT, factory_id INT, wage DECIMAL(5,2)); INSERT INTO workers VALUES (1, 1, 45000.00), (2, 1, 46000.00), (3, 2, 50000.00), (4, 2, 51000.00), (5, 3, 44000.00), (6, 3, 43000.00), (7, 4, 55000.00), (8, 4, 56000.00), (9, 5, 48000.00), (10, 5, 49000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM workers WHERE worker_id = 7;"
    },
    {
        "instruction": "입력 텍스트: 정치' 섹션에서 가장 높은 평점을 받은 뉴스 기사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE news_articles (id INT, title VARCHAR(100), section VARCHAR(50), rating INT); INSERT INTO news_articles (id, title, section, rating) VALUES (1, 'Article 1', 'technology', 4), (2, 'Article 2', 'politics', 5), (3, 'Article 3', 'sports', 3); CREATE TABLE news_ratings (article_id INT, rating INT); INSERT INTO news_ratings (article_id, rating) VALUES (1, 4), (2, 5), (3, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT title FROM news_articles WHERE id = (SELECT article_id FROM news_ratings WHERE rating = (SELECT MAX(rating) FROM news_ratings));"
    },
    {
        "instruction": "입력 텍스트: 2020년 아르헨티나의 탄소 가격(USD/톤)은 얼마였나요?\n\nDDL statements:\nCREATE TABLE carbon_prices (country VARCHAR(50), year INT, price_usd FLOAT); INSERT INTO carbon_prices (country, year, price_usd) VALUES ('Argentina', 2020, 5), ('Argentina', 2020, 6), ('Argentina', 2020, 7), ('Brazil', 2020, 8), ('Brazil', 2020, 9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT price_usd FROM carbon_prices WHERE country = 'Argentina' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 병원들의 평균 의료 장비 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hospital_equipment (hospital_id INT, region VARCHAR(10), num_of_equipment INT); INSERT INTO hospital_equipment (hospital_id, region, num_of_equipment) VALUES (1, 'Africa', 15), (2, 'Europe', 25), (3, 'Africa', 20), (4, 'Asia', 22);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(num_of_equipment) FROM hospital_equipment WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 운송' 부서에 있는 회원들의 평균 근속 연수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE union_membership (id INT, name VARCHAR(50), department VARCHAR(50), tenure INT); INSERT INTO union_membership (id, name, department, tenure) VALUES (1, 'Alice', 'technology', 5); INSERT INTO union_membership (id, name, department, tenure) VALUES (2, 'Bob', 'transportation', 7); INSERT INTO union_membership (id, name, department, tenure) VALUES (3, 'Charlie', 'manufacturing', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(tenure) FROM union_membership WHERE department = 'transportation';"
    },
    {
        "instruction": "입력 텍스트: 스페인에 있는 평점이 4.5보다 높은 모든 박물관의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE museums (museum_id INT, name VARCHAR(255), country VARCHAR(255), rating FLOAT); INSERT INTO museums (museum_id, name, country, rating) VALUES (1, 'Prado Museum', 'Spain', 4.7), (2, 'Reina Sofia Museum', 'Spain', 4.6), (3, 'Louvre Museum', 'France', 4.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM museums WHERE country = 'Spain' AND rating > 4.5;"
    },
    {
        "instruction": "입력 텍스트: type'이 'Tram'인 'vehicles' 테이블의 모든 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE vehicles (id INT, license_plate TEXT, model_year INT, type TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM vehicles WHERE type = 'Tram';"
    },
    {
        "instruction": "입력 텍스트: fish_stock 테이블의 각 위치별 최대 용존 산소 농도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_stock (location VARCHAR(50), dissolved_oxygen FLOAT); INSERT INTO fish_stock (location, dissolved_oxygen) VALUES ('Lake Victoria', 6.5), ('Lake Tanganyika', 7.0), ('Pacific Ocean', 8.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, MAX(dissolved_oxygen) FROM fish_stock GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 연합 소속 국가들에 대한 군사 장비 판매 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE african_union_countries (id INT, country VARCHAR(50)); CREATE TABLE military_sales (id INT, sale_date DATE, country VARCHAR(50), equipment_type VARCHAR(30), revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) as total_value FROM military_sales m INNER JOIN african_union_countries c ON m.country = c.country;"
    },
    {
        "instruction": "입력 텍스트: 남미 지역 식량 정의 이니셔티브에 가장 많은 기여를 한 상위 3명의 기부자는 누구인가요?\n\nDDL statements:\nCREATE TABLE food_justice_contributors (id INT, name TEXT, contributions FLOAT, country TEXT); INSERT INTO food_justice_contributors (id, name, contributions, country) VALUES (1, 'Contributor 1', 40000.0, 'South America'), (2, 'Contributor 2', 50000.0, 'South America'), (3, 'Contributor 3', 35000.0, 'South America'), (4, 'Contributor 4', 25000.0, 'South America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, contributions FROM (SELECT name, contributions, ROW_NUMBER() OVER (ORDER BY contributions DESC) as rank FROM food_justice_contributors WHERE country = 'South America') as ranked_contributors WHERE rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 각 제공업체별로 제공되는 식사의 평균 및 총 칼로리 수치는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Meals (MealID INT, MealName VARCHAR(50), Vendor VARCHAR(50), Calories INT); INSERT INTO Meals (MealID, MealName, Vendor, Calories) VALUES (1, 'Spaghetti Bolognese', 'Pasta Palace', 650), (2, 'Chicken Tikka Masala', 'Curry House', 850);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Vendor, AVG(Calories) as AvgCalories, SUM(Calories) as TotalCalories FROM Meals GROUP BY Vendor;"
    },
    {
        "instruction": "입력 텍스트: 가장 인기 있는 게임 장르는 무엇인가요?\n\nDDL statements:\nGame_Design\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, COUNT(*) AS Count FROM Game_Design GROUP BY Genre ORDER BY Count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 특정 우편번호에 위치한 커뮤니티 보건 근로자는 누구인가요?\n\nDDL statements:\nCREATE TABLE CommunityHealthWorkers (ID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Race VARCHAR(20), Gender VARCHAR(10), LanguageSpoken VARCHAR(20), ZipCode VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM CommunityHealthWorkers WHERE ZipCode = '12345';"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역 환자들의 치료 결과에서 가장 큰 개선을 보인 치료 방법과 관련 질환을 확인하세요.\n\nDDL statements:\nCREATE TABLE treatments (id INT, condition TEXT, approach TEXT, region TEXT, improvement FLOAT); INSERT INTO treatments (id, condition, approach, region, improvement) VALUES (1, 'Depression', 'CBT', 'Asia', 0.7), (2, 'Anxiety', 'DBT', 'Asia', 0.6), (3, 'PTSD', 'EMDR', 'Asia', 0.8), (4, 'Depression', 'Medication', 'Asia', 0.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT approach, condition, MAX(improvement) as max_improvement FROM treatments WHERE region = 'Asia' GROUP BY approach, condition;"
    },
    {
        "instruction": "입력 텍스트: 호주의 여성 개인에 대한 최대 재정 복지 점수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE if not exists aus_wellbeing (id INT, individual_id INT, gender VARCHAR(10), score DECIMAL(3,1), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(score) FROM aus_wellbeing WHERE gender = 'female' AND country = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 어느 나라가 평균 화물 무게가 가장 높은가요?\n\nDDL statements:\nCREATE TABLE countries (country_code CHAR(2), country_name VARCHAR(50)); INSERT INTO countries VALUES ('US', 'United States'), ('CA', 'Canada'), ('MX', 'Mexico'); CREATE TABLE freight (id INT, country_code CHAR(2), weight INT); INSERT INTO freight VALUES (1, 'US', 500), (2, 'CA', 400), (3, 'MX', 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country_name, AVG(f.weight) as avg_weight FROM freight f INNER JOIN countries c ON f.country_code = c.country_code GROUP BY c.country_name ORDER BY avg_weight DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: Canada'에서 원재료를 조달한 모든 제품 중 2019-01-01 이전에 안전 기록이 있는 제품을 찾으세요.\n\nDDL statements:\nCREATE TABLE ingredient (product_id INT, ingredient TEXT, origin TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT product_id FROM ingredient WHERE origin = 'Canada' INTERSECT SELECT DISTINCT product_id FROM safety_record WHERE report_date < '2019-01-01';"
    },
    {
        "instruction": "입력 텍스트: 리그 X의 총 경기 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE League_X (match_id INT); INSERT INTO League_X (match_id) VALUES (1), (2), (3), (4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM League_X;"
    },
    {
        "instruction": "입력 텍스트: 2021년 캘리포니아에서 환경 서비스에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE service_budget (state VARCHAR(50), service VARCHAR(50), budget INT, budget_year INT); INSERT INTO service_budget (state, service, budget, budget_year) VALUES ('California', 'Environment', 3000000, 2021), ('California', 'Transportation', 4000000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM service_budget WHERE state = 'California' AND service = 'Environment' AND budget_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아의 주거용 건물에서의 평균 수도 사용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE residential_buildings (id INT, state VARCHAR(20), water_usage FLOAT); INSERT INTO residential_buildings (id, state, water_usage) VALUES (1, 'California', 150), (2, 'California', 120), (3, 'California', 180);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(water_usage) FROM residential_buildings WHERE state = 'California';"
    },
    {
        "instruction": "입력 텍스트: VR 게임을 플레이한 플레이어들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE players (player_id int, age int, gender varchar(10), country varchar(20)); INSERT INTO players (player_id, age, gender, country) VALUES (1, 25, 'Male', 'USA'), (2, 30, 'Female', 'Canada'), (3, 22, 'Male', 'Mexico'); CREATE TABLE game_sessions (session_id int, player_id int, game_name varchar(20), game_type varchar(10), duration int); INSERT INTO game_sessions (session_id, player_id, game_name, game_type, duration) VALUES (1, 1, 'Racing Game', 'Non-VR', 60), (2, 1, 'Shooter Game', 'VR', 90), (3, 2, 'Strategy Game', 'Non-VR', 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(players.age) FROM players INNER JOIN game_sessions ON players.player_id = game_sessions.player_id WHERE game_sessions.game_type = 'VR';"
    },
    {
        "instruction": "입력 텍스트: 총 몇 개의 열린 시민 기술 프로젝트가 있나요?\n\nDDL statements:\nCREATE TABLE project (id INT PRIMARY KEY, name TEXT, status TEXT, city_id INT, FOREIGN KEY (city_id) REFERENCES city(id)); INSERT INTO project (id, name, status, city_id) VALUES (1, 'ProjectA', 'Open', 1), (2, 'ProjectB', 'Closed', 1), (3, 'ProjectC', 'Open', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM project WHERE status = 'Open';"
    },
    {
        "instruction": "입력 텍스트: Resilience_Infrastructure 프로젝트의 평균 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Resilience_Infrastructure (id INT, project_name VARCHAR(50), location VARCHAR(50), cost FLOAT); INSERT INTO Resilience_Infrastructure (id, project_name, location, cost) VALUES (1, 'Sea Wall Construction', 'City E', 8000000); INSERT INTO Resilience_Infrastructure (id, project_name, location, cost) VALUES (2, 'Levee Raising', 'City F', 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM Resilience_Infrastructure;"
    },
    {
        "instruction": "입력 텍스트: 2010년대에 유럽 우주국(ESA)에서 발사한 모든 우주 미션의 총 예산은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE esa_missions(id INT, agency VARCHAR(255), mission_name VARCHAR(255), launch_date DATE, budget DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM esa_missions WHERE agency = 'ESA' AND YEAR(launch_date) BETWEEN 2010 AND 2019;"
    },
    {
        "instruction": "입력 텍스트: 메뉴 테이블에서 평균 칼로리 수치가 가장 높은 식당은 어디인가요?\n\nDDL statements:\nCREATE TABLE menu (restaurant TEXT, dish_name TEXT, calories INTEGER); INSERT INTO menu (restaurant, dish_name, calories) VALUES ('Health Food', 'Quinoa Salad', 350), ('Health Food', 'Tofu Stir Fry', 450), ('Fast Food', 'Cheeseburger', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT restaurant, AVG(calories) FROM menu GROUP BY restaurant ORDER BY AVG(calories) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 도쿄 시에서 사용자 평점이 가장 높은 상위 5개 호텔을 가져오세요.\n\nDDL statements:\nCREATE TABLE hotel_ratings (rating_id INT, hotel_id INT, city TEXT, user_rating FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT hotel_id, AVG(user_rating) as avg_rating FROM hotel_ratings WHERE city = 'Tokyo' GROUP BY hotel_id ORDER BY avg_rating DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2021년 미시간에서 판매된 대마초 농축액의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (product VARCHAR(20), quantity INT, state VARCHAR(20), year INT); INSERT INTO sales (product, quantity, state, year) VALUES ('Concentrate', 5000, 'Michigan', 2021), ('Flower', 7000, 'Michigan', 2021), ('Edibles', 6000, 'Michigan', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) as total_quantity FROM sales WHERE product = 'Concentrate' AND state = 'Michigan' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 문화 유산 투어의 평균 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE heritage_tours(id INT, name TEXT, city TEXT, type TEXT, revenue FLOAT); INSERT INTO heritage_tours(id, name, city, type, revenue) VALUES (1, 'Rome Colosseum Tour', 'Rome', 'cultural heritage', 3000.0), (2, 'Paris Louvre Tour', 'Paris', 'cultural heritage', 4000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(revenue) FROM heritage_tours WHERE type = 'cultural heritage';"
    },
    {
        "instruction": "입력 텍스트: 마케팅 부서에서 일하는 여성 직원은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Gender VARCHAR(10), Department VARCHAR(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department) VALUES (1, 'John Doe', 'Male', 'IT'), (2, 'Jane Smith', 'Female', 'Marketing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Employees WHERE Department = 'Marketing' AND Gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코에 있는 휠체어 접근 가능한 부동산의 최대 매물 가격을 찾아주세요.\n\nDDL statements:\nCREATE TABLE properties (id INT, city VARCHAR(20), listing_price INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, listing_price, wheelchair_accessible) VALUES (1, 'San Francisco', 900000, true); INSERT INTO properties (id, city, listing_price, wheelchair_accessible) VALUES (2, 'San Francisco', 800000, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(listing_price) FROM properties WHERE city = 'San Francisco' AND wheelchair_accessible = true;"
    },
    {
        "instruction": "입력 텍스트: 각 지역사회 건강 근로자의 총 건강 형평성 지표 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists community_health_workers (worker_id INT, health_equity_metric_1 INT, health_equity_metric_2 INT, health_equity_metric_3 INT); INSERT INTO community_health_workers (worker_id, health_equity_metric_1, health_equity_metric_2, health_equity_metric_3) VALUES (1, 90, 85, 95), (2, 70, 75, 80), (3, 85, 90, 95), (4, 80, 85, 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT worker_id, (health_equity_metric_1 + health_equity_metric_2 + health_equity_metric_3) as total_score FROM community_health_workers;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 전통 예술에 기여한 상위 3명의 기여자는 누구인가요?\n\nDDL statements:\nCREATE TABLE ArtContributors (ContributorID int, ContributorName varchar(100), ArtForm varchar(50), Contributions int, Country varchar(50)); INSERT INTO ArtContributors (ContributorID, ContributorName, ArtForm, Contributions, Country) VALUES (1, 'Amina Ahmed', 'Henna', 30, 'Somalia'), (2, 'Babatunde Olatunji', 'Drumming', 40, 'Nigeria'), (3, 'Fanta Keita', 'Bolon', 25, 'Guinea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ContributorName FROM (SELECT ContributorName, ROW_NUMBER() OVER (PARTITION BY Country ORDER BY Contributions DESC) as rn FROM ArtContributors WHERE Country IN ('Somalia', 'Nigeria', 'Guinea')) t WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2021년 오클랜드 항구에 정박한 컨테이너 선박의 평균 총톤수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ships(id INT, name VARCHAR(100), type VARCHAR(50), gross_tonnage INT);INSERT INTO ships(id, name, type, gross_tonnage) VALUES (1, 'Ever Given', 'Container', 200000); INSERT INTO ships(id, name, type, gross_tonnage) VALUES (2, 'Cosco Shipping Universe', 'Container', 197000); CREATE TABLE docking(ship_id INT, port VARCHAR(50), year INT); INSERT INTO docking(ship_id, port, year) VALUES (1, 'Oakland', 2021); INSERT INTO docking(ship_id, port, year) VALUES (2, 'Oakland', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(gross_tonnage) FROM ships JOIN docking ON ships.id = docking.ship_id WHERE docking.port = 'Oakland' AND docking.year = 2021 AND ships.type = 'Container';"
    },
    {
        "instruction": "입력 텍스트: California' 주의 모든 복원력 프로젝트에 대한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Infrastructure(id INT, state VARCHAR(20), project VARCHAR(30), budget DECIMAL(10,2)); INSERT INTO Infrastructure(id, state, project, budget) VALUES (1, 'California', 'Seismic Retrofit', 500000.00), (2, 'Texas', 'Flood Control', 750000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM Infrastructure WHERE state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 각 분기별로 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donation (id INT, amount DECIMAL(10, 2), donation_date DATE); INSERT INTO donation (id, amount, donation_date) VALUES (1, 50.00, '2022-01-01'), (2, 100.00, '2022-04-01'), (3, 25.00, '2022-07-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(donation_date, '%Y-%m') as quarter, SUM(amount) as total_donations FROM donation GROUP BY quarter;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 프랑스에 위치한 계정의 게시물 중 해시태그 #feminism을 포함한 게시물이 받은 좋아요 수의 최솟값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE accounts (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE posts (id INT, account_id INT, content TEXT, likes INT, timestamp TIMESTAMP); INSERT INTO accounts (id, name, location) VALUES (1, 'feminist_voice', 'France'); INSERT INTO posts (id, account_id, content, likes, timestamp) VALUES (1, 1, 'post1 #feminism', 10, '2022-05-01 12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(likes) FROM posts JOIN accounts ON posts.account_id = accounts.id WHERE posts.timestamp >= NOW() - INTERVAL '1 month' AND posts.content LIKE '%#feminism%' AND accounts.location = 'France';"
    },
    {
        "instruction": "입력 텍스트: 소매 및 고위험 부문에 모두 계좌를 가진 고객의 자산 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Retail (customer_id INT, account_balance DECIMAL(10,2)); INSERT INTO Retail (customer_id, account_balance) VALUES (1, 5000.00), (2, 7000.00), (3, 9000.00); CREATE TABLE High_Risk (customer_id INT, account_balance DECIMAL(10,2)); INSERT INTO High_Risk (customer_id, account_balance) VALUES (1, 6000.00), (2, 8000.00), (4, 10000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.customer_id, SUM(r.account_balance + hr.account_balance) AS total_value FROM Retail r INNER JOIN High_Risk hr ON r.customer_id = hr.customer_id WHERE r.customer_id IN (SELECT customer_id FROM High_Risk);"
    },
    {
        "instruction": "입력 텍스트: 지속 가능성 평가 4.8을 가진 새로운 친환경 의류 브랜드 'RecycledThreads'를 추가하세요?\n\nDDL statements:\nCREATE TABLE clothing_brands (brand_id INT PRIMARY KEY, brand_name VARCHAR(100), sustainability_rating FLOAT); INSERT INTO clothing_brands (brand_id, brand_name, sustainability_rating) VALUES (1, 'EcoFriendlyBrand', 4.2), (2, 'GreenFashion', 4.6), (3, 'SustainableTextiles', 4.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO clothing_brands (brand_name, sustainability_rating) VALUES ('RecycledThreads', 4.8);"
    },
    {
        "instruction": "입력 텍스트: 미국 출신 기부자의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, country TEXT); INSERT INTO donors (id, name, country) VALUES (1, 'John Doe', 'Canada'), (2, 'Jane Smith', 'USA'), (3, 'Bob Johnson', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(CASE WHEN country = 'USA' THEN 1 END) * 100.0 / COUNT(*)) FROM donors;"
    },
    {
        "instruction": "입력 텍스트: threat_intelligence' 테이블에서 가장 높은 위협 수준을 가진 위협의 이름과 IP 주소는 무엇인가요?\n\nDDL statements:\nCREATE TABLE threat_intelligence (id INT, name VARCHAR(255), ip_address VARCHAR(50), threat_level VARCHAR(10)); INSERT INTO threat_intelligence (id, name, ip_address, threat_level) VALUES (1, 'APT28', '192.168.1.1', 'High'), (2, 'APT33', '10.0.0.1', 'Medium'), (3, 'APT34', '172.16.0.1', 'High');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, ip_address FROM threat_intelligence WHERE threat_level = (SELECT MAX(threat_level) FROM threat_intelligence);"
    },
    {
        "instruction": "입력 텍스트: 지중해 지역에서 용존 산소 농도가 7 이상인 곳에 어떤 물고기 종에 사료가 공급되었나요?\n\nDDL statements:\nCREATE TABLE Feed (FeedID INT, StockID INT, FeedType VARCHAR(50), Quantity INT, FeedDate DATE, Location VARCHAR(50), DissolvedOxygen FLOAT); INSERT INTO Feed (FeedID, StockID, FeedType, Quantity, FeedDate, Location, DissolvedOxygen) VALUES (4, 5, 'Organic', 100, '2021-06-01', 'Mediterranean', 7.5); INSERT INTO Feed (FeedID, StockID, FeedType, Quantity, FeedDate, Location, DissolvedOxygen) VALUES (5, 6, 'Commercial', 80, '2021-07-15', 'Mediterranean', 6.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT Species) FROM FishStock fs JOIN Feed f ON fs.StockID = f.StockID WHERE f.Location = 'Mediterranean' AND f.DissolvedOxygen > 7;"
    },
    {
        "instruction": "입력 텍스트: \"작물\" 테이블에서 각 작물 품종별 평균 기온과 강수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE crops (id INT, crop_name VARCHAR(50), avg_temp FLOAT, avg_precip FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crop_name, AVG(avg_temp) AS avg_temp, AVG(avg_precip) AS avg_precip FROM crops GROUP BY crop_name;"
    },
    {
        "instruction": "입력 텍스트: 캐나다 출신 기부자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, DonationAmount DECIMAL(10,2), Country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Donors WHERE Country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 각 해양 보호 구역의 평균 수심을 구하세요.\n\nDDL statements:\nCREATE TABLE marine_protected_areas (area_id INT, name VARCHAR(255), depth FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, AVG(depth) AS avg_depth    FROM marine_protected_areas    GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 대륙의 AI 애플리케이션들의 평균 알고리즘 공정성 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ai_applications (app_id INT, app_name TEXT, algorithmic_fairness_score DECIMAL(3,2), app_country TEXT); INSERT INTO ai_applications (app_id, app_name, algorithmic_fairness_score, app_country) VALUES (1, 'AI Diagnostics', 8.2, 'Egypt'), (2, 'AI Fraud Detection', 9.1, 'South Africa'), (3, 'AI HR Analytics', 6.8, 'Nigeria');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT app_country, AVG(algorithmic_fairness_score) as avg_score FROM ai_applications WHERE app_country IN ('Egypt', 'South Africa', 'Nigeria') GROUP BY app_country;"
    },
    {
        "instruction": "입력 텍스트: Graduate_Students' 테이블에서 'Student_ID'가 (101, 105, 112)인 학생들의 'Gender'를 'Prefer not to say'로 변경하세요.\n\nDDL statements:\nCREATE TABLE Graduate_Students (Student_ID INT, First_Name VARCHAR(50), Last_Name VARCHAR(50), Gender VARCHAR(20), Enrollment_Status VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Graduate_Students SET Gender = 'Prefer not to say' WHERE Student_ID IN (101, 105, 112);"
    },
    {
        "instruction": "입력 텍스트: 중동 지역의 한 부대에서 가장 많은 군인 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE military_personnel (id INT, unit_name VARCHAR(255), region VARCHAR(255), num_personnel INT); INSERT INTO military_personnel (id, unit_name, region, num_personnel) VALUES (1, 'Unit A', 'Middle East', 500), (2, 'Unit B', 'Middle East', 750), (3, 'Unit C', 'Africa', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(num_personnel) FROM military_personnel WHERE region = 'Middle East';"
    },
    {
        "instruction": "입력 텍스트: 각 항구의 총 화물 용량(무게 기준)과 해당 항구에 정박해 있는 배의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE port (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), capacity INT); INSERT INTO port VALUES (1, 'New York', 'USA', 5000); INSERT INTO port VALUES (2, 'Los Angeles', 'USA', 4000); CREATE TABLE ship (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), length INT, port_id INT, FOREIGN KEY (port_id) REFERENCES port(id)); INSERT INTO ship VALUES (1, 'Sea Giant', 'Container', 300, 1); INSERT INTO ship VALUES (2, 'Ocean Titan', 'Tanker', 400, 2); CREATE TABLE cargo (id INT PRIMARY KEY, ship_id INT, weight INT, FOREIGN KEY (ship_id) REFERENCES ship(id)); INSERT INTO cargo VALUES (1, 1, 1000); INSERT INTO cargo VALUES (2, 2, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.name as port_name, s.name as ship_name, SUM(c.weight) as total_weight FROM cargo c JOIN ship s ON c.ship_id = s.id JOIN port p ON s.port_id = p.id GROUP BY p.name, s.name;"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 지원 평가가 가장 낮은 과정은 무엇인가요?\n\nDDL statements:\nCREATE TABLE courses (course_id INT, name TEXT, mental_health_rating FLOAT); INSERT INTO courses (course_id, name, mental_health_rating) VALUES (1, 'Intro to Psychology', 4.5), (2, 'Yoga for Wellness', 3.8), (3, 'Mindfulness Meditation', 4.7), (4, 'Stress Management', 2.5), (5, 'Critical Thinking', 5.0), (6, 'Lifelong Learning', 4.0), (7, 'Abnormal Psychology', 3.0), (8, 'Cognitive Behavioral Therapy', 4.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT course_id, name, mental_health_rating FROM courses ORDER BY mental_health_rating ASC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: \"Quantum Rush\" 게임에 추가 콘텐츠를 구매한 북미 지역 플레이어들이 플레이한 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerRegion VARCHAR(20), GameName VARCHAR(20), Playtime INT); INSERT INTO Players (PlayerID, PlayerRegion, GameName, Playtime) VALUES (1, 'North America', 'Quantum Rush', 30), (2, 'South America', 'Quantum Rush', 40), (3, 'North America', 'Quantum Rush', 50); CREATE TABLE Purchases (PlayerID INT, Content VARCHAR(20)); INSERT INTO Purchases (PlayerID, Content) VALUES (1, 'Additional Content'), (2, 'Standard'), (3, 'Additional Content');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Playtime) FROM Players JOIN Purchases ON Players.PlayerID = Purchases.PlayerID WHERE Players.PlayerRegion = 'North America' AND Content = 'Additional Content';"
    },
    {
        "instruction": "입력 텍스트: 65세 이상 방문객의 참여가 가장 많았던 문화 행사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Events (EventID INT, EventName VARCHAR(255), EventType VARCHAR(255)); INSERT INTO Events (EventID, EventName, EventType) VALUES (1, 'Art Exhibit', 'Cultural'); INSERT INTO Events (EventID, EventName, EventType) VALUES (2, 'Music Concert', 'Cultural'); INSERT INTO Events (EventID, EventName, EventType) VALUES (3, 'Dance Performance', 'Cultural'); CREATE TABLE Visitors (VisitorID INT, Age INT, EventID INT); INSERT INTO Visitors (VisitorID, Age, EventID) VALUES (1, 70, 1); INSERT INTO Visitors (VisitorID, Age, EventID) VALUES (2, 68, 2); INSERT INTO Visitors (VisitorID, Age, EventID) VALUES (3, 35, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT E.EventName, COUNT(V.VisitorID) as Attendance FROM Visitors V INNER JOIN Events E ON V.EventID = E.EventID WHERE V.Age >= 65 GROUP BY E.EventName ORDER BY Attendance DESC;"
    },
    {
        "instruction": "입력 텍스트: 남미에서 가장 높은 커뮤니티 참여도를 가진 문화 유산지는 어디인가요?\n\nDDL statements:\nCREATE TABLE HeritageSites (id INT, name VARCHAR(255), location VARCHAR(255), community_engagement INT); INSERT INTO HeritageSites (id, name, location, community_engagement) VALUES (1, 'Machu Picchu', 'Peru', 5000), (2, 'Iguazu Falls', 'Argentina', 3500), (3, 'Galápagos Islands', 'Ecuador', 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, community_engagement FROM HeritageSites WHERE location = 'South America' ORDER BY community_engagement DESC;"
    },
    {
        "instruction": "입력 텍스트: 2021년 도쿄 모터쇼에서 가장 마력이 높은 차량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE tokyo_motor_show (year INT, make VARCHAR(50), model VARCHAR(50), horsepower INT); INSERT INTO tokyo_motor_show (year, make, model, horsepower) VALUES (2021, 'Toyota', 'GR Yaris', 268), (2021, 'Honda', 'Civic Type R', 315), (2021, 'Subaru', 'BRZ', 228), (2021, 'Nissan', '370Z', 332);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT make, model, MAX(horsepower) FROM tokyo_motor_show WHERE year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 탄소 가격 메커니즘을 가진 각 국가의 탄소 가격을 미국 달러로 환산해 주세요.\n\nDDL statements:\nCREATE TABLE Carbon_Pricing (Country VARCHAR(20), Currency VARCHAR(20), Price DECIMAL(10,2)); INSERT INTO Carbon_Pricing VALUES ('Canada', 'CAD', 20), ('Sweden', 'SEK', 40), ('UK', 'GBP', 35), ('Norway', 'NOK', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, Price * (SELECT AVG(Exchange_Rate) FROM Exchange_Rates WHERE Currency_Code = Carbon_Pricing.Currency) AS Price_In_USD FROM Carbon_Pricing;"
    },
    {
        "instruction": "입력 텍스트: John' 또는 'Jane'이라는 이름을 가진 기부자들의 평균 기부 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donation_amount DECIMAL(10,2), country TEXT); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (1, 'John Doe', 500.00, 'United States'); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (2, 'Jane Smith', 300.00, 'Canada'); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (3, 'Jose Garcia', 250.00, 'Brazil'); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (4, 'Raj Patel', 400.00, 'India'); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (5, 'Emma Jones', 600.00, 'Australia'); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (6, 'Naledi Ndlovu', 100.00, 'South Africa'); INSERT INTO donors (donor_id, donor_name, donation_amount, country) VALUES (7, 'John Lee', 800.00, 'China');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(donation_amount) FROM donors WHERE donor_name LIKE 'John%' OR donor_name LIKE 'Jane%';"
    },
    {
        "instruction": "입력 텍스트: 학교별 학생들의 평균 정신 건강 점수를 평균 점수가 높은 순으로 정렬하여 알려주세요.\n\nDDL statements:\nCREATE TABLE student_mental_health (student_id INT, school_id INT, mental_health_score INT); INSERT INTO student_mental_health (student_id, school_id, mental_health_score) VALUES (1, 100, 80), (2, 100, 85), (3, 200, 70), (4, 200, 75), (5, 300, 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT school_id, AVG(mental_health_score) as avg_mental_health_score FROM student_mental_health GROUP BY school_id ORDER BY avg_mental_health_score DESC;"
    },
    {
        "instruction": "입력 텍스트: \"nursing_homes\" 테이블에서 \"state\"가 \"IL\"이고 \"total_beds\"가 50개 미만인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE nursing_homes (id INT PRIMARY KEY, name TEXT, state TEXT, total_beds INT); INSERT INTO nursing_homes (id, name, state, total_beds) VALUES (1, 'Homes 1', 'IL', 60), (2, 'Homes 2', 'IL', 30), (3, 'Homes 3', 'CA', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM nursing_homes WHERE state = 'IL' AND total_beds < 50;"
    },
    {
        "instruction": "입력 텍스트: 특정 국가의 모든 발굴 현장을 나열합니다\n\nDDL statements:\nCREATE TABLE Excavation_Sites (id INT PRIMARY KEY, name VARCHAR(255), location TEXT, country VARCHAR(255)); INSERT INTO Excavation_Sites (id, name, location, country) VALUES (1, 'Pompeii', 'Near Naples, Italy', 'Italy'), (2, 'Machu Picchu', 'Andes Mountains, Peru', 'Peru'), (3, 'Chichen Itza', 'Yucatan Peninsula, Mexico', 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Excavation_Sites WHERE country = 'Mexico';"
    },
    {
        "instruction": "입력 텍스트: animals' 테이블에서 'Amur Leopard' 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(255), species VARCHAR(255), population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM animals WHERE name = 'Amur Leopard';"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2018년 사이에 캘리포니아에서 시행된 회복적 사법 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE restorative_justice (id INT, program_name VARCHAR(50), start_date DATE, end_date DATE, state VARCHAR(50)); INSERT INTO restorative_justice (id, program_name, start_date, end_date, state) VALUES (1, 'Restorative CA', '2015-01-01', '2018-12-31', 'California'), (2, 'Justice Heals', '2016-01-01', '2017-12-31', 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM restorative_justice WHERE state = 'California' AND start_date >= '2015-01-01' AND end_date <= '2018-12-31';"
    },
    {
        "instruction": "입력 텍스트: 남미에서 접근 가능한 기술 이니셔티브에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE initiatives (id INT, name VARCHAR(50), region VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO initiatives (id, name, region, budget) VALUES (1, 'AccessibleTechSA', 'South America', 200000.00), (2, 'EqualAccessSA', 'South America', 300000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM initiatives WHERE region = 'South America' AND name LIKE '%accessible%';"
    },
    {
        "instruction": "입력 텍스트: 2021년 'Artistic Explorers' 프로그램의 총 수익은 얼마였습니까?\n\nDDL statements:\nCREATE SCHEMA if not exists arts_culture;CREATE TABLE if not exists arts_culture.programs (program_id INT, program_name VARCHAR(50), start_date DATE, end_date DATE, revenue INT); INSERT INTO arts_culture.programs (program_id, program_name, start_date, end_date, revenue) VALUES (1, 'Artistic Explorers', '2021-01-01', '2021-12-31', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH total_revenue AS (UPDATE arts_culture.programs SET revenue = (SELECT SUM(ticket_price) FROM arts_culture.events WHERE events.program_id = programs.program_id) WHERE programs.program_name = 'Artistic Explorers' AND programs.start_date <= '2021-12-31' AND programs.end_date >= '2021-01-01' RETURNING revenue) SELECT * FROM total_revenue;"
    },
    {
        "instruction": "입력 텍스트: 대표되지 않은 커뮤니티의 저자들이 매년 발표한 설명 가능한 AI 논문은 몇 편입니까?\n\nDDL statements:\nCREATE TABLE paper_data (paper_id INT, publication_year INT, author_community VARCHAR(50)); INSERT INTO paper_data (paper_id, publication_year, author_community) VALUES (1, 2020, 'Underrepresented'), (2, 2019, 'Represented'), (3, 2018, 'Underrepresented');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT publication_year, COUNT(*) as num_papers FROM paper_data WHERE author_community = 'Underrepresented' GROUP BY publication_year;"
    },
    {
        "instruction": "입력 텍스트: MilitaryBases' 테이블에서 예산이 1000만 달러를 초과하는 군사 기지를 나열하세요.\n\nDDL statements:\nCREATE TABLE MilitaryBases (Base_ID INT, Base_Name VARCHAR(255), Base_Location VARCHAR(255), Budget INT); INSERT INTO MilitaryBases (Base_ID, Base_Name, Base_Location, Budget) VALUES (1, 'Fort Hood', 'Texas', 9000000); INSERT INTO MilitaryBases (Base_ID, Base_Name, Base_Location, Budget) VALUES (2, 'Peterson AFB', 'Colorado', 12000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM MilitaryBases WHERE Budget > 10000000;"
    },
    {
        "instruction": "입력 텍스트: 각 운송 방법별로 연도별 총 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transportation (id INT, year INT, transportation_method VARCHAR(255), CO2_emissions INT); INSERT INTO transportation (id, year, transportation_method, CO2_emissions) VALUES (1, 2020, 'Sea', 200), (2, 2021, 'Sea', 220), (3, 2020, 'Air', 300), (4, 2021, 'Air', 320), (5, 2020, 'Road', 100), (6, 2021, 'Road', 110);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT transportation_method, year, SUM(CO2_emissions) FROM transportation GROUP BY transportation_method, year;"
    },
    {
        "instruction": "입력 텍스트: 요가도 하는 회원들이 달리기에서 평균적으로 얼마나 달렸습니까?\n\nDDL statements:\nCREATE TABLE Members (ID INT, Activity VARCHAR(20)); CREATE TABLE Runs (MemberID INT, Distance FLOAT); CREATE TABLE Yoga (MemberID INT); INSERT INTO Members (ID) VALUES (1); INSERT INTO Runs (MemberID, Distance) VALUES (1, 5.6); INSERT INTO Yoga (MemberID) VALUES (1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Distance) FROM Runs WHERE MemberID IN (SELECT MemberID FROM Members JOIN Yoga ON Members.ID = Yoga.MemberID);"
    },
    {
        "instruction": "입력 텍스트: 경력이 5년 미만인 리크루터를 제외하고, 추천한 후보자 수를 기준으로 상위 3명의 리크루터는 누구인가요?\n\nDDL statements:\nCREATE TABLE Recruiters (RecruiterID INT, RecruiterName VARCHAR(20), YearsOfExperience INT, CandidateID INT); INSERT INTO Recruiters (RecruiterID, RecruiterName, YearsOfExperience, CandidateID) VALUES (1, 'Anna Green', 7, 10), (2, 'Bella Johnson', 3, 11), (3, 'Carl Davis', 6, 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT RecruiterName FROM (SELECT RecruiterName, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Recruiters r JOIN Candidates c ON r.CandidateID = c.CandidateID WHERE YearsOfExperience >= 5 GROUP BY RecruiterName) AS Subquery WHERE Rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 어떤 프로그램에도 기부하지 않은 자원봉사자들의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_id INT, donation_amount DECIMAL, donation_date DATE, donor_program VARCHAR); INSERT INTO donations (id, donor_id, donation_amount, donation_date, donor_program) VALUES (1, 101, '500', '2021-01-01', 'Arts & Culture'), (2, 102, '300', '2021-02-01', 'Sports'), (3, 103, '800', '2021-03-01', 'Arts & Culture'); CREATE TABLE volunteers (id INT, name VARCHAR, program VARCHAR); INSERT INTO volunteers (id, name, program) VALUES (101, 'Jamila Davis', 'Arts & Culture'), (102, 'Ricardo Silva', 'Sports'), (103, 'Xiao Liu', 'Arts & Culture'), (104, 'Kim Lee', 'Education');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.name FROM volunteers v LEFT JOIN donations d ON v.id = d.donor_id AND YEAR(d.donation_date) = 2021 WHERE d.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 멀티플레이어 매치에서 각 플레이어의 승률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Matches (MatchID int, PlayerID int, Game varchar(255), MatchResult varchar(255)); INSERT INTO Matches VALUES (1, 1, 'CS:GO', 'Win'), (2, 2, 'CS:GO', 'Loss'), (3, 1, 'Dota 2', 'Win'), (4, 3, 'Dota 2', 'Win');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT PlayerID, COUNT(*) * 100.0 / SUM(CASE WHEN MatchResult = 'Win' THEN 1 ELSE 0 END) OVER (PARTITION BY PlayerID) as WinRate FROM Matches GROUP BY PlayerID;"
    },
    {
        "instruction": "입력 텍스트: 지역별 문화 유산의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE heritage_sites_3 (id INT, type VARCHAR(50), name VARCHAR(100), region VARCHAR(50)); INSERT INTO heritage_sites_3 (id, type, name, region) VALUES (1, 'Historic Site', 'Anasazi Ruins', 'Southwest'), (2, 'Museum', 'Metropolitan Museum of Art', 'Northeast'), (3, 'Historic Site', 'Alamo', 'South');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM heritage_sites_3 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: rural_infrastructure' 테이블에서 완료된 농촌 인프라 프로젝트의 총 예산이 프로젝트 유형별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE rural_infrastructure (project_name VARCHAR(255), project_type VARCHAR(255), budget INT, completion_year INT); INSERT INTO rural_infrastructure (project_name, project_type, budget, completion_year) VALUES ('Greenhouse Project', 'Agricultural Innovation', 50000, 2018), ('Drip Irrigation System', 'Agricultural Innovation', 30000, 2019), ('Rural Road Construction', 'Infrastructure', 80000, 2020), ('Water Treatment Plant', 'Infrastructure', 120000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, SUM(budget) FROM rural_infrastructure WHERE completion_year IS NOT NULL GROUP BY project_type;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에 있는 고액 자산가 고객들의 평균 계좌 잔액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE customers (id INT, name VARCHAR(255), account_balance DECIMAL(10, 2), region VARCHAR(50)); INSERT INTO customers (id, name, account_balance, region) VALUES (1, 'Li Wei', 2000000.00, 'Asia-Pacific'), (2, 'Kim Park', 500000.00, 'Asia-Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(account_balance) FROM customers WHERE region = 'Asia-Pacific' AND account_balance > 1000000.00;"
    },
    {
        "instruction": "입력 텍스트: 마이크로 모빌리티 테이블에서 전기 자전거의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE micro_mobility (id INT, vehicle_type VARCHAR(20), quantity INT); INSERT INTO micro_mobility (id, vehicle_type, quantity) VALUES (1, 'ebike', 300), (2, 'escooter', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM micro_mobility WHERE vehicle_type = 'ebike';"
    },
    {
        "instruction": "입력 텍스트: 각 도시의 식당에서 발견된 위반 사항의 수를 위반 유형별로 그룹화하여 보여주세요. 5개 이상의 식당이 있는 도시에 대한 결과만 포함합니다.\n\nDDL statements:\nCREATE TABLE Restaurants (id INT, name VARCHAR(255), city VARCHAR(255), revenue FLOAT); CREATE TABLE Menu (id INT, rest_id INT, item VARCHAR(255), price FLOAT); CREATE TABLE Vendors (id INT, name VARCHAR(255), sustainability_score INT); CREATE TABLE Menu_Vendors (menu_id INT, vendor_id INT); CREATE TABLE Inspections (id INT, rest_id INT, date DATE, violation_type VARCHAR(255), violation_found BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT R.city, I.violation_type, COUNT(I.id) as number_of_violations FROM Restaurants R JOIN Inspections I ON R.id = I.rest_id GROUP BY R.city, I.violation_type HAVING COUNT(R.id) > 5;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 시작된 웰빙 프로그램에 참여한 모든 운동선수들을 나열하세요.\n\nDDL statements:\nCREATE TABLE athletes (athlete_id INT, name VARCHAR(50), state VARCHAR(2)); INSERT INTO athletes (athlete_id, name, state) VALUES (1, 'Alex', 'CA'), (2, 'Beth', 'NY'), (3, 'Charlie', 'CA'); CREATE TABLE wellbeing_programs (program_id INT, athlete_id INT, start_date DATE); INSERT INTO wellbeing_programs (program_id, athlete_id, start_date) VALUES (1, 1, '2021-01-01'), (2, 3, '2020-12-31'), (3, 1, '2022-02-01'), (4, 2, '2021-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT athletes.name FROM athletes INNER JOIN wellbeing_programs ON athletes.athlete_id = wellbeing_programs.athlete_id WHERE start_date >= '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 고유 vehicle_id에 대한 평균 거리와 총 정류장 수를 계산하고, 2개의 vehicle_id에 대한 롤링 윈도우로 이동 평균 거리를 구하세요.\n\nDDL statements:\nCREATE TABLE vehicles (vehicle_id INT, route_id INT, distance FLOAT, num_stops INT, last_maintenance DATE); INSERT INTO vehicles (vehicle_id, route_id, distance, num_stops, last_maintenance) VALUES (1, 1, 12.5, 5, '2021-06-01'), (2, 2, 10.0, 3, '2021-07-01'), (3, 1, 21.5, 7, '2021-08-01'), (4, 3, 18.0, 4, '2021-09-01'), (5, 1, 30.0, 9, '2021-10-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vehicle_id, AVG(distance) OVER (ORDER BY vehicle_id ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) as moving_avg_distance FROM (SELECT DISTINCT vehicle_id, distance FROM vehicles) as unique_vehicles;"
    },
    {
        "instruction": "입력 텍스트: 영국 방위 산업 분야에서 베테랑 직원들의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE VeteranEmployees (id INT, company VARCHAR(50), country VARCHAR(50), salary FLOAT); INSERT INTO VeteranEmployees (id, company, country, salary) VALUES (1, 'BAE Systems', 'UK', 60000), (2, 'Rolls-Royce', 'UK', 70000), (3, 'QinetiQ', 'UK', 80000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM VeteranEmployees WHERE country = 'UK';"
    },
    {
        "instruction": "입력 텍스트: 각 브랜드의 리넨 의류 평균 소매 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE brands (brand_id INT, brand_name TEXT); INSERT INTO brands (brand_id, brand_name) VALUES (1, 'Zara'), (2, 'Esprit'), (3, 'Stella McCartney'); CREATE TABLE products (product_id INT, product_name TEXT, brand_id INT, retail_price DECIMAL(5,2)); INSERT INTO products (product_id, product_name, brand_id, retail_price) VALUES (1, 'Linen Shirt', 1, 75.00), (2, 'Linen Dress', 2, 120.00), (3, 'Linen Pants', 3, 150.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brands.brand_name, AVG(products.retail_price) FROM brands JOIN products ON brands.brand_id = products.brand_id WHERE product_name LIKE '%Linen%' GROUP BY brands.brand_id;"
    },
    {
        "instruction": "입력 텍스트: PlatformStats' 테이블에서 플랫폼 ID가 201인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE PlatformStats (PlatformID INT PRIMARY KEY, MonthlyActiveUsers INT); CREATE TABLE Platforms (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(100)); INSERT INTO Platforms (PlatformID, PlatformName) VALUES (101, 'Apple Music'), (201, 'Spotify'), (301, 'Amazon Music'), (401, 'Google Play Music'), (501, 'TuneIn'); INSERT INTO PlatformStats (PlatformID, MonthlyActiveUsers) VALUES (101, 60000000), (201, 120000000), (301, 55000000), (401, 25000000), (501, 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM PlatformStats WHERE PlatformID = 201;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 뉴욕 주에서 얼마나 많은 물이 절약되었나요?\n\nDDL statements:\nCREATE TABLE water_conservation(state VARCHAR(20), year INT, amount_conserved INT); INSERT INTO water_conservation(state, year, amount_conserved) VALUES ('New York', 2015, 2000), ('New York', 2016, 2500), ('New York', 2017, 3000), ('New York', 2018, 3500), ('New York', 2019, 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount_conserved) FROM water_conservation WHERE state = 'New York' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 판매량이 2000개 이상인 패션 트렌드를 나열하세요.\n\nDDL statements:\nCREATE TABLE trends_2022 (id INT, product VARCHAR(20), sales INT); INSERT INTO trends_2022 (id, product, sales) VALUES (1, 'Jumpsuit', 1500); INSERT INTO trends_2022 (id, product, sales) VALUES (2, 'Tunic', 2200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product FROM trends_2022 WHERE sales > 2000;"
    },
    {
        "instruction": "입력 텍스트: 극장' 카테고리에 해당하는 이벤트의 총 판매된 티켓 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (id INT, name TEXT, category TEXT, tickets_sold INT); INSERT INTO events (id, name, category, tickets_sold) VALUES (1, 'Concert', 'music', 200), (2, 'Play', 'theater', 150), (3, 'Festival', 'music', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tickets_sold) FROM events WHERE category = 'theater';"
    },
    {
        "instruction": "입력 텍스트: 위험 점수가 800보다 높은 보험 정책의 보험 번호, 보장 유형, 그리고 효력 발생일은 무엇인가요?\n\nDDL statements:\nCREATE TABLE policy (policy_number INT, coverage_type VARCHAR(20), effective_date DATE, risk_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_number, coverage_type, effective_date FROM policy WHERE risk_score > 800;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램에 등록된 운동선수 수와 '웰빙' 프로그램에 있는 운동선수들의 최소 나이를 나열하세요.\n\nDDL statements:\nCREATE TABLE athletes (athlete_id INT, name VARCHAR(255), age INT, program VARCHAR(255)); INSERT INTO athletes (athlete_id, name, age, program) VALUES (1, 'John Doe', 25, 'Wellbeing'), (2, 'Jane Smith', 30, 'Fitness'), (3, 'Alice Johnson', 35, 'Wellbeing'), (4, 'Bob Brown', 40, 'Fitness'), (5, 'Charlie Davis', 45, 'Fitness');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, COUNT(*), MIN(age) FROM athletes WHERE program = 'Wellbeing' GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: player_demographics' 테이블에서 가장 어린 선수는 누구인가요?\n\nDDL statements:\nCREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 22), (4, 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT age as youngest_player_age FROM player_demographics ORDER BY age ASC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 남극 해양에서의 최대 해양 산성화 수준은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ocean_acidification_antarctic (id INT, location VARCHAR(255), level FLOAT); INSERT INTO ocean_acidification_antarctic (id, location, level) VALUES (1, 'Ross Sea', 8.1); INSERT INTO ocean_acidification_antarctic (id, location, level) VALUES (2, 'Amundsen Sea', 8.05);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(level) FROM ocean_acidification_antarctic;"
    },
    {
        "instruction": "입력 텍스트: 음악 스트리밍 서비스를 위한 분기별 마케팅 비용 총액은?\n\nDDL statements:\nCREATE TABLE Marketing (id INT, campaign VARCHAR(50), start_date DATE, end_date DATE, spend DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(start_date, '%Y-%m') as quarter, SUM(spend) FROM Marketing WHERE campaign LIKE '%music%' GROUP BY quarter;"
    },
    {
        "instruction": "입력 텍스트: 각 장르별 총 플레이 시간과 평균 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE PlayerScores (PlayerID int, GameName varchar(50), PlayTime int, Score int); INSERT INTO PlayerScores (PlayerID, GameName, PlayTime, Score) VALUES (1, 'GameA', 200, 80); INSERT INTO PlayerScores (PlayerID, GameName, PlayTime, Score) VALUES (2, 'GameB', 250, 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, SUM(PlayTime) as TotalPlayTime, AVG(Score) as AvgScore FROM PlayerScores ps JOIN Games g ON ps.GameName = g.GameName GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 농업' 분야에 대한 총 투자 금액을 찾으세요.\n\nDDL statements:\nCREATE TABLE investments (investment_id INT, sector VARCHAR(20), investment_amount FLOAT); INSERT INTO investments (investment_id, sector, investment_amount) VALUES (101, 'renewable_energy', 50000), (102, 'sustainable_agriculture', 75000), (103, 'green_transportation', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment_amount) FROM investments WHERE sector = 'sustainable_agriculture';"
    },
    {
        "instruction": "입력 텍스트: 2022년 남미 국가별 재활용률은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE RecyclingRatesSouthAmerica (country VARCHAR(50), year INT, recycling_rate DECIMAL(5,2)); INSERT INTO RecyclingRatesSouthAmerica (country, year, recycling_rate) VALUES ('Brazil', 2022, 0.55), ('Argentina', 2022, 0.60), ('Colombia', 2022, 0.45), ('Peru', 2022, 0.48), ('Chile', 2022, 0.52);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(recycling_rate) FROM RecyclingRatesSouthAmerica WHERE year = 2022 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: employees' 테이블에 있는 직원 중 이름이 'F'로 시작하는 노조에 소속된 직원의 union_name과 position을 표시합니다.\n\nDDL statements:\nCREATE TABLE labor_unions (id INT, union_name VARCHAR(50), members INT); CREATE TABLE employees (id INT, union_id INT, name VARCHAR(50), position VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.name, e.position, l.union_name FROM employees e JOIN labor_unions l ON e.union_id = l.id WHERE l.union_name LIKE 'F%';"
    },
    {
        "instruction": "입력 텍스트: Education' 산업 분야에 있고 단체 교섭 협약이 있는 노조에 속한 근로자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE unions (id INT, industry VARCHAR(255), has_cba BOOLEAN); CREATE TABLE workers (id INT, union_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM workers JOIN unions ON workers.union_id = unions.id WHERE unions.industry = 'Education' AND unions.has_cba = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 범죄' 분류에 속하는 사건의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Cases (CaseID INT, Category VARCHAR(50), BillingAmount DECIMAL(10,2)); INSERT INTO Cases (CaseID, Category, BillingAmount) VALUES (1, 'Criminal', 2000.00), (2, 'Civil', 3000.00), (3, 'Criminal', 4000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Category, COUNT(*) FROM Cases WHERE Category = 'Criminal' GROUP BY Category;"
    },
    {
        "instruction": "입력 텍스트: 호주 시골 지역에 있는 병원의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE hospitals (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO hospitals (id, name, location) VALUES (1, 'Royal Melbourne Hospital', 'Rural Australia'); INSERT INTO hospitals (id, name, location) VALUES (2, 'New York Presbyterian', 'Urban New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hospitals WHERE location = 'Rural Australia';"
    },
    {
        "instruction": "입력 텍스트: 특정 힘의 이정표를 달성한 사용자들이 들어올린 최대 무게는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Strength (id INT, user_id INT, milestone TEXT, weight INT); INSERT INTO Strength (id, user_id, milestone, weight) VALUES (1, 1, 'squat 100kg', 105), (2, 2, 'deadlift 150kg', 160);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(weight) FROM Strength WHERE milestone = 'squat 100kg';"
    },
    {
        "instruction": "입력 텍스트: 2022년 독일에서 월별로 판매된 유기농 스킨케어 제품의 평균 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (product VARCHAR(255), sale_date DATE, quantity INT, product_type VARCHAR(255), country VARCHAR(255)); INSERT INTO sales (product, sale_date, quantity, product_type, country) VALUES ('Cleanser', '2022-01-01', 20, 'Organic Skincare', 'Germany'), ('Toner', '2022-02-03', 30, 'Organic Skincare', 'Germany'), ('Moisturizer', '2022-03-05', 15, 'Organic Skincare', 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(quantity) as avg_quantity FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31' AND product_type = 'Organic Skincare' AND country = 'Germany' GROUP BY EXTRACT(YEAR FROM sale_date), EXTRACT(MONTH FROM sale_date);"
    },
    {
        "instruction": "입력 텍스트: 각 부서별 인도주의적 지원에 지출된 최대 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE HumanitarianAssistance (id INT, department VARCHAR(50), budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, MAX(budget) FROM HumanitarianAssistance GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: \"National Art Museum\"에서 가장 많은 작품이 판매된 상위 3명의 예술가는 누구인가요?\n\nDDL statements:\nCREATE TABLE ArtistSales (MuseumName TEXT, ArtistName TEXT, NumPieces INTEGER); INSERT INTO ArtistSales (MuseumName, ArtistName, NumPieces) VALUES ('National Art Museum', 'Picasso', 25), ('National Art Museum', 'Van Gogh', 22), ('National Art Museum', 'Dali', 18);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistName, SUM(NumPieces) AS TotalSales FROM ArtistSales WHERE MuseumName = 'National Art Museum' GROUP BY ArtistName ORDER BY TotalSales DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 여성 기부자들이 보건 분야에 기부한 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName text, Gender text); INSERT INTO Donors (DonorID, DonorName, Gender) VALUES (1, 'John Doe', 'Male'); INSERT INTO Donors (DonorID, DonorName, Gender) VALUES (2, 'Jane Smith', 'Female'); INSERT INTO Donors (DonorID, DonorName, Gender) VALUES (3, 'Mike Johnson', 'Male'); CREATE TABLE Donations (DonationID int, DonorID int, Amount decimal, Sector text); INSERT INTO Donations (DonationID, DonorID, Amount, Sector) VALUES (1, 1, 5000, 'Health'); INSERT INTO Donations (DonationID, DonorID, Amount, Sector) VALUES (2, 1, 7000, 'Environment'); INSERT INTO Donations (DonationID, DonorID, Amount, Sector) VALUES (3, 2, 3000, 'Health'); INSERT INTO Donations (DonationID, DonorID, Amount, Sector) VALUES (4, 2, 2000, 'Education'); INSERT INTO Donations (DonationID, DonorID, Amount, Sector) VALUES (5, 3, 8000, 'Health');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Amount) FROM Donations JOIN Donors ON Donations.DonorID = Donors.DonorID WHERE Gender = 'Female' AND Sector = 'Health';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 작물 유형별로 최대 온도와 최소 온도를 찾으세요.\n\nDDL statements:\nCREATE TABLE crop_temperature (crop_type VARCHAR(255), field_id INT, temperature DECIMAL(5,2), record_date DATE); INSERT INTO crop_temperature (crop_type, field_id, temperature, record_date) VALUES ('corn', 12345, 25.0, '2022-01-01'), ('soybeans', 12345, 30.0, '2022-01-02'), ('corn', 67890, 22.0, '2022-01-03'), ('soybeans', 67890, 28.0, '2022-01-04');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.crop_type, MAX(temperature) AS max_temperature, MIN(temperature) AS min_temperature FROM crop_temperature c JOIN (SELECT CURDATE() - INTERVAL 30 DAY AS start_date) d ON c.record_date >= d.start_date GROUP BY c.crop_type;"
    },
    {
        "instruction": "입력 텍스트: 도쿄'에 있는 농부는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE farmers (id INT PRIMARY KEY, name VARCHAR(50), age INT, gender VARCHAR(10), location VARCHAR(50)); INSERT INTO farmers (id, name, age, gender, location) VALUES (3, 'Hiroshi Tanaka', 50, 'Male', 'Tokyo');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM farmers WHERE location = 'Tokyo';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 각 대출 기관에서 발행한 사회적 책임 대출의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE lenders (lender_id INT, lender_name TEXT); CREATE TABLE loans (loan_id INT, lender_id INT, issue_date DATE, amount INT); INSERT INTO lenders VALUES (1, 'ABC Bank'); INSERT INTO lenders VALUES (2, 'XYZ Finance'); INSERT INTO loans VALUES (1, 1, '2021-01-15', 5000); INSERT INTO loans VALUES (2, 1, '2021-04-10', 8000); INSERT INTO loans VALUES (3, 2, '2021-03-01', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT lender_name, SUM(amount) as total_loans FROM loans JOIN lenders ON loans.lender_id = lenders.lender_id WHERE issue_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY lender_name ORDER BY total_loans DESC;"
    },
    {
        "instruction": "입력 텍스트: australia' 스키마에 있는 군사 기지의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists australia; USE australia; CREATE TABLE if not exists military_bases (id INT, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO military_bases (id, name, type, location) VALUES (1, 'RAAF Base Amberley', 'Air Force Base', 'Australia'), (2, 'HMAS Stirling', 'Navy Base', 'Australia'), (3, 'Lavarack Barracks', 'Army Base', 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM australia.military_bases;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 평균 기부금액이 가장 높았던 재난 구호 캠페인은 무엇인가요?\n\nDDL statements:\nCREATE TABLE causes (id INT, name TEXT); INSERT INTO causes (id, name) VALUES (1, 'Disaster relief in Africa'), (2, 'Disaster relief in Asia'), (3, 'Disaster relief in Europe'); CREATE TABLE donations (id INT, cause_id INT, amount INT, donation_year INT); INSERT INTO donations (id, cause_id, amount, donation_year) VALUES (1, 1, 1000, 2019), (2, 1, 750, 2019), (3, 2, 800, 2019), (4, 2, 900, 2019), (5, 3, 500, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT causes.name, AVG(donations.amount) AS avg_donation FROM causes INNER JOIN donations ON causes.id = donations.cause_id WHERE donation_year = 2019 GROUP BY causes.name ORDER BY avg_donation DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 새로운 항공기 제조 공장을 추가하세요.\n\nDDL statements:\nCREATE TABLE plants (plant_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO plants (plant_id, name, city, country) VALUES (4, 'Mirage Manufacturing', 'Toronto', 'Canada');"
    },
    {
        "instruction": "입력 텍스트: 각 항공사의 총 비행 횟수와 그 비행들의 평균 비행 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Flights (FlightID INT, Airline VARCHAR(50), FlightDate DATE, Duration DECIMAL(10,2)); INSERT INTO Flights (FlightID, Airline, FlightDate, Duration) VALUES (1, 'Delta', '2022-01-01', 3.50), (2, 'United', '2022-01-02', 4.25), (3, 'Delta', '2022-01-01', 2.75), (4, 'American', '2022-01-03', 3.00), (5, 'United', '2022-01-02', 4.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Airline, COUNT(*) AS Total_Flights, AVG(Duration) AS Avg_Duration FROM Flights GROUP BY Airline;"
    },
    {
        "instruction": "입력 텍스트: 각 광산의 월별 이산화탄소 총 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE mine (mine_id INT, mine_name TEXT, location TEXT, daily_co2_emission INT); INSERT INTO mine VALUES (1, 'ABC Mine', 'Wyoming, USA', 500), (2, 'DEF Mine', 'West Virginia, USA', 700), (3, 'GHI Mine', 'Kentucky, USA', 400), (4, 'JKL Mine', 'Colorado, USA', 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mine_name, DATE_TRUNC('month', CURRENT_DATE - (daily_co2_emission * 7)) as month, SUM(daily_co2_emission) as total_co2_emission FROM mine GROUP BY mine_name, month ORDER BY total_co2_emission DESC;"
    },
    {
        "instruction": "입력 텍스트: 농장 ID 333의 이름을 업데이트합니다\n\nDDL statements:\nCREATE TABLE farms (id INT, name VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE farms SET name = 'Sunny Hill Farms' WHERE id = 333;"
    },
    {
        "instruction": "입력 텍스트: adaptation_projects' 테이블에 다음과 같은 세부 정보를 가진 새로운 레코드를 추가하세요: (1, 'India', 'Agriculture', 'Community-based', 50000)\n\nDDL statements:\nCREATE TABLE adaptation_projects (id INT, country VARCHAR(255), sector VARCHAR(255), funding_source VARCHAR(255), amount FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO adaptation_projects (id, country, sector, funding_source, amount) VALUES (1, 'India', 'Agriculture', 'Community-based', 50000);"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 광산 작업에 종사하는 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE num_employees (site VARCHAR(20), state VARCHAR(20), num_employees INT); INSERT INTO num_employees (site, state, num_employees) VALUES ('SiteA', 'QLD', 50), ('SiteB', 'NSW', 60), ('SiteC', 'WA', 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(num_employees) FROM num_employees GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: ORGANIC_PRODUCTS 테이블에 있는 유기농 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ORGANIC_PRODUCTS (id INT, name VARCHAR(50), category VARCHAR(50), quantity INT); INSERT INTO ORGANIC_PRODUCTS (id, name, category, quantity) VALUES (1, 'Quinoa', 'Grains', 50), (2, 'Tofu', 'Proteins', 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM ORGANIC_PRODUCTS;"
    },
    {
        "instruction": "입력 텍스트: donations' 테이블에서 기부 금액이 5000보다 큰 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE donations (donation_id INT, donor_id INT, donation_amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM donations WHERE donation_amount > 5000;"
    },
    {
        "instruction": "입력 텍스트: 중동 지역의 경제 다양화를 위한 연간 평균 투자액을 계산하세요.\n\nDDL statements:\nCREATE TABLE eco_diversification_investment (year INT, region VARCHAR(20), investment INT); INSERT INTO eco_diversification_investment (year, region, investment) VALUES (2019, 'Middle East', 120000), (2020, 'Middle East', 130000), (2021, 'Middle East', 140000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(investment) FROM eco_diversification_investment WHERE region = 'Middle East';"
    },
    {
        "instruction": "입력 텍스트: 2020년 1분기에 교육 목적으로 기부된 총 금액이 기부자 국가별로 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10,2), cause TEXT, donation_date DATE); INSERT INTO donations (donor_id, donation_amount, cause, donation_date) VALUES (1, 5000, 'education', '2020-01-15'); CREATE TABLE donors (donor_id INT, donor_country TEXT); INSERT INTO donors (donor_id, donor_country) VALUES (1, 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT donor_country, SUM(donation_amount) FROM donations JOIN donors ON donations.donor_id = donors.donor_id WHERE donation_date BETWEEN '2020-01-01' AND '2020-03-31' AND cause = 'education' GROUP BY donor_country;"
    },
    {
        "instruction": "입력 텍스트: 최근 3년간 캐나다 도시에서의 스마트 시티 기술 도입 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE canada_tech (id INT, city VARCHAR(20), country VARCHAR(20), adoption_year INT, adoption_rate FLOAT); INSERT INTO canada_tech (id, city, country, adoption_year, adoption_rate) VALUES (1, 'Toronto', 'Canada', 2018, 0.75), (2, 'Montreal', 'Canada', 2019, 0.82), (3, 'Vancouver', 'Canada', 2020, 0.88);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM canada_tech WHERE country = 'Canada' AND adoption_year BETWEEN 2018 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역의 교육 부문에 할당된 예산의 평균은 얼마입니까?\n\nDDL statements:\nCREATE TABLE BudgetAllocations (CountryName VARCHAR(50), Region VARCHAR(50), Sector VARCHAR(50), Allocation FLOAT); INSERT INTO BudgetAllocations (CountryName, Region, Sector, Allocation) VALUES ('Country1', 'Africa', 'Education', 12000000), ('Country2', 'Africa', 'Education', 15000000), ('Country3', 'Asia', 'Education', 20000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Allocation) FROM BudgetAllocations WHERE Region = 'Africa' AND Sector = 'Education';"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월의 메뉴 아이템과 그들의 총 매출을 sales_fact 테이블에서 총 매출 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE time_dim (time_id INT, time_year INT, time_month INT, time_day INT, time_hour INT, time_minute INT, time_second INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.menu_item_name, SUM(sf.sale_quantity * sf.sale_price) as total_sales FROM sales_fact sf JOIN menu_item_dim m ON sf.menu_item_id = m.menu_item_id JOIN time_dim t ON sf.sale_date = t.time_date WHERE t.time_month = 2 AND t.time_year = 2022 GROUP BY m.menu_item_name ORDER BY total_sales DESC;"
    },
    {
        "instruction": "입력 텍스트: 모든 광산의 추출량과 환경 영향 점수를 나열하세요.\n\nDDL statements:\nCREATE TABLE mining_sites (id INT, name VARCHAR(20), extraction_volume INT, environmental_impact_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM mining_sites;"
    },
    {
        "instruction": "입력 텍스트: 풍력 및 수력 발전 프로젝트의 총 개수와 평균 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE projects (id INT, name VARCHAR(255), type VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO projects (id, name, type, start_date, end_date) VALUES (1, 'Wind Farm', 'Renewable Energy', '2019-01-01', '2020-12-31'), (2, 'Hydro Plant', 'Renewable Energy', '2020-01-01', '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) as total, AVG(DATEDIFF(end_date, start_date)) as avg_duration FROM projects WHERE type IN ('Wind Farm', 'Hydro Plant') GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: Location1에서 각 메뉴 카테고리의 평균 매출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menu_engineering(menu_item VARCHAR(255), category VARCHAR(255), location VARCHAR(255), revenue INT); INSERT INTO menu_engineering(menu_item, category, location, revenue) VALUES ('Burger', 'Meat', 'Location1', 5000), ('Fries', 'Sides', 'Location1', 1000), ('Salad', 'Vegetables', 'Location1', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, AVG(revenue) FROM menu_engineering WHERE location = 'Location1' GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 이탈리아의 첫 번째와 마지막 지속 가능한 숙박 시설 간의 가상 투어 횟수 차이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE TourDifferences (id INT, country VARCHAR(20), tour_diff INT); INSERT INTO TourDifferences (id, country, tour_diff) VALUES (1, 'Italy', 5), (2, 'Spain', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, tour_diff FROM TourDifferences WHERE country = 'Italy' ORDER BY id DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: Region X' 지역의 각 사이트에서 발굴된 유물은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Site (SiteID VARCHAR(10), SiteName VARCHAR(20), Region VARCHAR(20)); INSERT INTO Site (SiteID, SiteName, Region) VALUES ('A', 'Site A', 'Region X'), ('B', 'Site B', 'Region X'), ('C', 'Site C', 'Region Y'), ('D', 'Site D', 'Region X'); CREATE TABLE Excavation (ExcavationID VARCHAR(10), SiteID VARCHAR(10)); INSERT INTO Excavation (ExcavationID, SiteID) VALUES ('1', 'A'), ('2', 'A'), ('3', 'B'), ('4', 'C'), ('5', 'D');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Site.SiteName, COUNT(Excavation.ExcavationID) FROM Site JOIN Excavation ON Site.SiteID = Excavation.SiteID WHERE Site.Region = 'Region X' GROUP BY Site.SiteName;"
    },
    {
        "instruction": "입력 텍스트: 기술 분야에서 ESG 등급이 8 이상인 회사는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE companies (id INT, sector VARCHAR(255), employees INT, esg_rating FLOAT); INSERT INTO companies (id, sector, employees, esg_rating) VALUES (1, 'technology', 4500, 8.5), (2, 'technology', 5500, 7.2), (3, 'technology', 6000, 8.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies WHERE sector = 'technology' AND esg_rating > 8;"
    },
    {
        "instruction": "입력 텍스트: 각 지역('community_development')의 학교들의 총 수용 능력은 얼마입니까?\n\nDDL statements:\nCREATE TABLE community_development.schools (id INT, name VARCHAR(50), capacity INT, region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(capacity) FROM community_development.schools GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 새로 출시된 가상 투어를 추가하세요.\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, tour_name TEXT, location TEXT, price DECIMAL(5,2)); INSERT INTO virtual_tours (tour_id, tour_name, location, price) VALUES (1, 'Louvre VR Experience', 'Paris', 24.99), (2, 'Gondola Tour in Venice', 'Venice', 19.99), (3, 'Great Wall of China Virtual Walk', 'China', 29.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO virtual_tours (tour_id, tour_name, location, price) VALUES (4, 'Petra Virtual Tour', 'Jordan', 22.99), (5, 'Galapagos Islands Virtual Experience', 'Ecuador', 34.99), (6, 'Angkor Wat Virtual Reality Tour', 'Cambodia', 27.99);"
    },
    {
        "instruction": "입력 텍스트: 여성 회원 수와 해당하는 노조 이름을 표시하세요.\n\nDDL statements:\nCREATE TABLE union_members_demographics (id INT, union_name VARCHAR(255), gender VARCHAR(10), member_count INT); INSERT INTO union_members_demographics (id, union_name, gender, member_count) VALUES (1, 'American Federation of State, County and Municipal Employees', 'Female', 900000); INSERT INTO union_members_demographics (id, union_name, gender, member_count) VALUES (2, 'International Brotherhood of Teamsters', 'Female', 600000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT union_name, SUM(member_count) FROM union_members_demographics WHERE gender = 'Female' GROUP BY union_name;"
    },
    {
        "instruction": "입력 텍스트: 방위 계약이 가장 많은 상위 3개 주를 확인하세요.\n\nDDL statements:\nCREATE TABLE state_contracts (state TEXT, contract_count INT); INSERT INTO state_contracts (state, contract_count) VALUES ('California', 500), ('Texas', 400), ('Virginia', 300), ('New York', 200), ('Florida', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, contract_count FROM state_contracts ORDER BY contract_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 페름 분지에 있는 Company Z가 소유한 우물의 평균 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Permian_Basin (well_id INT, company VARCHAR(255), well_depth FLOAT); INSERT INTO Permian_Basin (well_id, company, well_depth) VALUES (1, 'Company Z', 9000), (2, 'Company X', 8500), (3, 'Company Z', 7500), (4, 'Company Y', 10000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(well_depth) FROM Permian_Basin WHERE company = 'Company Z';"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기 장르별 콘서트 평균 수익은 얼마였나요?\n\nDDL statements:\nCREATE TABLE Concerts (date DATE, genre VARCHAR(255), revenue FLOAT); INSERT INTO Concerts (date, genre, revenue) VALUES ('2022-01-01', 'Pop', 50000), ('2022-01-02', 'Rock', 75000), ('2022-01-03', 'Jazz', 30000), ('2022-02-01', 'Pop', 60000), ('2022-02-02', 'Rock', 80000), ('2022-02-03', 'Jazz', 35000), ('2022-03-01', 'Pop', 55000), ('2022-03-02', 'Rock', 70000), ('2022-03-03', 'Jazz', 40000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT genre, AVG(revenue) FROM Concerts WHERE date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY genre;"
    },
    {
        "instruction": "입력 텍스트: 7월에 미국 뉴욕에서 진행된 가상 투어로 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE virtual_tours_usa (id INT, city VARCHAR(20), country VARCHAR(20), date DATE, revenue DECIMAL(10, 2)); INSERT INTO virtual_tours_usa (id, city, country, date, revenue) VALUES (1, 'New York', 'USA', '2022-07-01', 800.00), (2, 'New York', 'USA', '2022-07-05', 900.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM virtual_tours_usa WHERE city = 'New York' AND country = 'USA' AND EXTRACT(MONTH FROM date) = 7;"
    },
    {
        "instruction": "입력 텍스트: 자율 주행 연구 논문이 출판된 연도별 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE autonomous_research (research_id INT, title VARCHAR(100), publication_year INT, publication VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT publication_year, AVG(adoption_rate) FROM autonomous_research GROUP BY publication_year;"
    },
    {
        "instruction": "입력 텍스트: habitat_preservation'이라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE habitat_preservation (id INT, project_name VARCHAR(50), location VARCHAR(50), size_acres DECIMAL(10,2), budget_USD DECIMAL(10,2), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE habitat_preservation (id INT, project_name VARCHAR(50), location VARCHAR(50), size_acres DECIMAL(10,2), budget_USD DECIMAL(10,2), start_date DATE, end_date DATE);"
    },
    {
        "instruction": "입력 텍스트: renewables' 스키마 내에서 프로젝트 유형과 위치한 대륙별로 그룹화된 재생 가능 에너지 프로젝트는 몇 개이며, 개수에 따라 내림차순으로 정렬된 순서대로 나열해주세요?\n\nDDL statements:\nCREATE SCHEMA renewables; CREATE TABLE renewable_projects (id INT, type VARCHAR(50), location VARCHAR(50)); INSERT INTO renewable_projects (id, type, location) VALUES (1, 'Solar', 'North America'), (2, 'Wind', 'Europe'), (3, 'Hydro', 'South America'), (4, 'Geothermal', 'Africa'), (5, 'Biomass', 'Asia'), (6, 'Solar', 'Australia'), (7, 'Wind', 'Antarctica');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, location, COUNT(*) as count FROM renewables.renewable_projects GROUP BY type, location ORDER BY count DESC;"
    },
    {
        "instruction": "입력 텍스트: forest' 테이블에 각 종(species)별로 몇 그루의 나무가 있나요?\n\nDDL statements:\nCREATE TABLE forest (id INT, species VARCHAR(255), diameter FLOAT, height INT); INSERT INTO forest (id, species, diameter, height) VALUES (1, 'Oak', 2.5, 20), (2, 'Maple', 1.8, 15), (3, 'Pine', 1.2, 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, COUNT(*) FROM forest GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 각 선박 유형별로 해상 사고에 얼마나 많이 관련되었는지 내림차순으로 알려주세요.\n\nDDL statements:\nCREATE TABLE vessel_types (id INT, type VARCHAR(255)); CREATE TABLE incidents (id INT, vessel_id INT, incident_type VARCHAR(255)); INSERT INTO vessel_types (id, type) VALUES (1, 'Tanker'), (2, 'Cargo'); INSERT INTO incidents (id, vessel_id, incident_type) VALUES (1, 1, 'Collision'), (2, 2, 'Grounding');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vt.type, COUNT(*) as incidents_count FROM incidents i JOIN vessel_types vt ON i.vessel_id = vt.id GROUP BY vt.type ORDER BY incidents_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 발사된 우주 임무의 최대 기간은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE SpaceMissions (id INT, name VARCHAR(255), launch_date DATE, duration INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(duration) FROM SpaceMissions WHERE launch_date < '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주에서 지난 1년 동안 유방촬영술을 받은 여성 환자의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE screenings (screening_id INT, patient_id INT, screening VARCHAR(20), date DATE, gender VARCHAR(10)); INSERT INTO screenings (screening_id, patient_id, screening, date, gender) VALUES (1, 5, 'Mammogram', '2021-03-15', 'Female'); INSERT INTO screenings (screening_id, patient_id, screening, date, gender) VALUES (2, 6, 'Colonoscopy', '2021-06-01', 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) / (SELECT COUNT(*) FROM screenings WHERE date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE AND gender = 'Female')) * 100 FROM screenings WHERE date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE AND screening = 'Mammogram' AND gender = 'Female'"
    },
    {
        "instruction": "입력 텍스트: 공정성 평가를 받은 AI 알고리즘 중에서 누락된 데이터가 없는 알고리즘의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE Algorithm_Fairness (algorithm_name TEXT, evaluated_for_fairness BOOLEAN, missing_data BOOLEAN); INSERT INTO Algorithm_Fairness (algorithm_name, evaluated_for_fairness, missing_data) VALUES ('Algorithm A', TRUE, FALSE), ('Algorithm B', FALSE, TRUE), ('Algorithm C', TRUE, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(algorithm_name) FROM Algorithm_Fairness WHERE evaluated_for_fairness = TRUE AND missing_data = FALSE;"
    },
    {
        "instruction": "입력 텍스트: 북미에서 출시된 멀티플레이어 레이싱 게임의 총 개수는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Games (GameID INT, GameType VARCHAR(255), Multiplayer INT, ReleaseCountry VARCHAR(255)); INSERT INTO Games (GameID, GameType, Multiplayer, ReleaseCountry) VALUES (1, 'Racing', 1, 'USA'); INSERT INTO Games (GameID, GameType, Multiplayer, ReleaseCountry) VALUES (2, 'Shooter', 0, 'Canada'); INSERT INTO Games (GameID, GameType, Multiplayer, ReleaseCountry) VALUES (3, 'Racing', 1, 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(GameID) FROM Games WHERE GameType = 'Racing' AND Multiplayer = 1 AND ReleaseCountry LIKE '%North%';"
    },
    {
        "instruction": "입력 텍스트: 지난 90일 동안 각 위협 인텔리전스 소스와 관련된 고유 IOC의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE threat_intelligence (source VARCHAR(50), ioc_count INT, source_date DATE); INSERT INTO threat_intelligence (source, ioc_count, source_date) VALUES ('Source 1', 50, '2023-01-01'), ('Source 2', 40, '2023-01-02'), ('Source 3', 30, '2023-01-03'), ('Source 4', 20, '2023-01-04'), ('Source 5', 10, '2023-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT source, COUNT(DISTINCT ioc_id) as unique_iocs FROM threat_intelligence_iocs WHERE source_date >= DATEADD(day, -90, GETDATE()) AND source = threat_intelligence.source GROUP BY source;"
    },
    {
        "instruction": "입력 텍스트: ID가 2인 이니셔티브의 이름을 'Juvenile Justice Dialogues'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE initiatives_3 (id INT, name TEXT, location TEXT); INSERT INTO initiatives_3 (id, name, location) VALUES (1, 'Safe Streets', 'Manhattan'), (2, 'Youth and Police Dialogues', 'Brooklyn'), (3, 'Cops and Clergy', 'Queens');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE initiatives_3 SET name = 'Juvenile Justice Dialogues' WHERE id = 2;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 미국으로 배송된 헤어케어 제품의 총 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE shipment_data (shipment_id INT, product_id INT, shipped_date DATE, shipped_to VARCHAR(50), CO2_emissions FLOAT); INSERT INTO shipment_data (shipment_id, product_id, shipped_date, shipped_to, CO2_emissions) VALUES (1, 2001, '2022-02-15', 'USA', 2.1), (2, 2002, '2022-03-20', 'Canada', 1.9), (3, 2003, '2022-07-01', 'USA', 3.5), (4, 2004, '2022-10-10', 'Mexico', 2.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CO2_emissions) FROM shipment_data WHERE shipped_to = 'USA' AND EXTRACT(YEAR FROM shipped_date) = 2022 AND product_id IN (SELECT product_id FROM product_details WHERE product_category = 'haircare');"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 월별로 고용된 직원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Hires (HireID int, HireDate date); INSERT INTO Hires (HireID, HireDate) VALUES (1, '2022-01-01'), (2, '2022-04-01'), (3, '2022-07-01'), (4, '2022-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(HireDate, '%Y-%m') AS Month, COUNT(*) FROM Hires GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: 조각 작품을 만든 모든 아티스트의 이름과 프랑스 출신지를 나열하세요.\n\nDDL statements:\nCREATE TABLE artists (artist_id INT, name VARCHAR(50), genre VARCHAR(50), birth_place VARCHAR(50)); INSERT INTO artists (artist_id, name, genre, birth_place) VALUES (1, 'Auguste Rodin', 'Sculpture', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, a.birth_place FROM artists a WHERE a.genre = 'Sculpture' AND a.birth_place = 'France';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 카리브 지역에서 도착한 선박의 평균 속도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, speed DECIMAL(5,2), region TEXT, arrival_date DATE); INSERT INTO vessels (id, name, speed, region, arrival_date) VALUES (1, 'Caribbean Queen', 20.5, 'Caribbean', '2022-05-15'), (2, 'Atlantic Prince', 25.3, 'Atlantic', '2022-05-18');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(speed) FROM vessels WHERE region = 'Caribbean' AND arrival_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 기후 변화에 관한 뉴스 기사의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE news_articles (id INT, title VARCHAR(100), publication_date DATE, climate_change_topic BOOLEAN); INSERT INTO news_articles (id, title, publication_date, climate_change_topic) VALUES (1, 'Article1', '2022-01-01', TRUE), (2, 'Article2', '2022-01-05', FALSE), (3, 'Article3', '2022-01-10', TRUE), (4, 'Article4', '2022-01-15', FALSE), (5, 'Article5', '2022-01-20', TRUE), (6, 'Article6', '2022-01-25', TRUE), (7, 'Article7', '2022-01-30', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(climate_change_topic) * 100 / (SELECT COUNT(*) FROM news_articles WHERE publication_date >= DATEADD(day, -30, GETDATE()))) AS percentage FROM news_articles WHERE publication_date >= DATEADD(day, -30, GETDATE()) AND climate_change_topic = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 지중해에서 가장 많이 잡히는 상위 3종의 어류의 연간 바이오매스 추세는 어떻습니까?\n\nDDL statements:\nCREATE TABLE fish_biomass (id INT, species TEXT, location TEXT, year INT, biomass INT); INSERT INTO fish_biomass (id, species, location, year, biomass) VALUES (1, 'Tuna', 'Mediterranean', 2018, 22000), (2, 'Sardine', 'Mediterranean', 2018, 15000), (3, 'Shrimp', 'Mediterranean', 2018, 10000), (4, 'Tuna', 'Mediterranean', 2019, 23000), (5, 'Sardine', 'Mediterranean', 2019, 16000), (6, 'Shrimp', 'Mediterranean', 2019, 10500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, YEAR(year) year, AVG(biomass) biomass FROM fish_biomass WHERE species IN ('Tuna', 'Sardine', 'Shrimp') AND location = 'Mediterranean' GROUP BY species, YEAR(year) ORDER BY year;"
    },
    {
        "instruction": "입력 텍스트: 각 의류 종류별 미판매 재고의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE inventory (inventory_id INT, garment_type VARCHAR(50), quantity INT); INSERT INTO inventory VALUES (1001, 'Dress', 300), (1002, 'Shirt', 250), (1003, 'Pant', 400), (1004, 'Jacket', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT garment_type, SUM(quantity) AS total_unsold_inventory FROM inventory WHERE quantity > 0 GROUP BY garment_type;"
    },
    {
        "instruction": "입력 텍스트: ethical_suppliers'라는 이름의 뷰를 윤리 인증을 받은 공급업체의 레코드로 생성하세요.\n\nDDL statements:\nCREATE TABLE suppliers (id INT PRIMARY KEY, company_name VARCHAR(255), location VARCHAR(255), ethical_certification VARCHAR(255), last_audit_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW ethical_suppliers AS SELECT * FROM suppliers WHERE ethical_certification IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: recycling_rates 테이블에서 location이 'Paris'인 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE recycling_rates (location VARCHAR(50), rate DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM recycling_rates WHERE location = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 지역에 배정된 인프라 예산의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE InfrastructureBudget (Year INT, Region VARCHAR(255), Amount DECIMAL(10,2)); INSERT INTO InfrastructureBudget (Year, Region, Amount) VALUES (2020, 'North', 2000000.00), (2020, 'South', 2500000.00), (2020, 'East', 3000000.00), (2020, 'West', 1500000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, SUM(Amount) FROM InfrastructureBudget WHERE Year = 2020 GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 10경기 미만을 진행한 팀을 제외하고, football_teams 테이블과 baseball_teams 테이블에서 가장 많은 승리를 기록한 팀을 나열하세요.\n\nDDL statements:\nCREATE TABLE football_teams (team_id INT, team_name VARCHAR(50), wins INT, games_played INT); CREATE TABLE baseball_teams (team_id INT, team_name VARCHAR(50), wins INT, games_played INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name FROM (SELECT team_name, ROW_NUMBER() OVER (ORDER BY wins DESC) as rn FROM (SELECT team_name, wins FROM football_teams WHERE games_played >= 10 GROUP BY team_name UNION ALL SELECT team_name, wins FROM baseball_teams WHERE games_played >= 10 GROUP BY team_name)) t WHERE rn = 1;"
    },
    {
        "instruction": "입력 텍스트: 라틴계 창업자가 설립한 스타트업이 받은 최대 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE startups(id INT, name TEXT, founder_ethnicity TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'StartupE', 'Latinx', 15000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(funding) FROM startups WHERE founder_ethnicity = 'Latinx';"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년 톤당 희토류의 평균 가격과 표준 편차를 구하세요.\n\nDDL statements:\nCREATE TABLE price_data (year INT, price DECIMAL(5,2)); INSERT INTO price_data (year, price) VALUES (2017, 30.5), (2017, 33.2), (2018, 35.1), (2018, 32.9), (2019, 38.5), (2019, 40.3), (2020, 42.8), (2020, 44.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) AS avg_price, STDDEV(price) AS stddev_price FROM price_data WHERE year IN (2019, 2020) GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 재생 에너지' 분야의 모든 공장을 나열하시오.\n\nDDL statements:\nCREATE TABLE factory (id INT, name TEXT, sector TEXT, country TEXT); INSERT INTO factory (id, name, sector, country) VALUES (1, 'FactoryA', 'automotive', 'France'), (2, 'FactoryB', 'renewable energy', 'Spain'), (3, 'FactoryC', 'electronics', 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM factory WHERE sector = 'renewable energy';"
    },
    {
        "instruction": "입력 텍스트: 에너지_소비 테이블에서 제품 단위별 평균 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE energy_consumption (product VARCHAR(255), energy_consumption FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT product, AVG(energy_consumption) FROM energy_consumption GROUP BY product;"
    },
    {
        "instruction": "입력 텍스트: Education for All' 프로그램에 가장 많은 기부를 한 연령대는 어떤 것입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorAge INT, TotalDonation DECIMAL(10,2)); CREATE TABLE DonationPrograms (DonationID INT, ProgramName TEXT, DonationAmount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 'Education for All' AS ProgramName, AVG(DonorAge) AS AverageAge, SUM(DonationAmount) AS TotalDonation FROM Donors INNER JOIN DonationPrograms ON Donors.DonorID = DonationPrograms.DonationID WHERE DonationPrograms.ProgramName = 'Education for All' GROUP BY Donors.DonorID ORDER BY TotalDonation DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 모든 해양 분지의 최소 온도를 찾으세요.\n\nDDL statements:\nCREATE TABLE ocean_basin (id INT, name VARCHAR(255), min_temp FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(min_temp) FROM ocean_basin;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 판매된 군사 장비의 총 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE equipment_sales (id INT, equipment_name VARCHAR, quantity INT, country VARCHAR, sale_price DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity * sale_price) FROM equipment_sales WHERE country = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기에 새로운 기부자들의 총 기부금액을 찾아라\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donation_date DATE, donation_amount DECIMAL(10, 2)); INSERT INTO donors VALUES (4, '2022-04-01', 75.00), (5, '2022-06-15', 120.00), (6, '2022-07-05', 225.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE donor_id IN (SELECT donor_id FROM donors WHERE donation_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY donor_id HAVING COUNT(*) = 1);"
    },
    {
        "instruction": "입력 텍스트: 800,000달러 이상 예산을 가진 모든 유전 연구 프로젝트를 나열하세요.\n\nDDL statements:\nCREATE SCHEMA GeneticResearch; CREATE TABLE project_budgets (project_name VARCHAR(50), budget DECIMAL(10, 2)); INSERT INTO project_budgets VALUES ('Project1', 600000), ('Project2', 900000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM GeneticResearch.project_budgets WHERE budget > 800000;"
    },
    {
        "instruction": "입력 텍스트: 타결'된 결과를 가진 모든 사건과 관련 변호사의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE Cases (CaseID INT, ClientID INT, Outcome TEXT); CREATE TABLE CaseAttorneys (CaseID INT, AttorneyID INT); CREATE TABLE Attorneys (AttorneyID INT, Name TEXT); INSERT INTO Cases (CaseID, ClientID, Outcome) VALUES (1, 1, 'Settled'); INSERT INTO CaseAttorneys (CaseID, AttorneyID) VALUES (1, 1); INSERT INTO Attorneys (AttorneyID, Name) VALUES (1, 'Jane Doe'); INSERT INTO Cases (CaseID, ClientID, Outcome) VALUES (2, 2, 'Dismissed'); INSERT INTO CaseAttorneys (CaseID, AttorneyID) VALUES (2, 2); INSERT INTO Attorneys (AttorneyID, Name) VALUES (2, 'John Smith');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Attorneys.Name, Cases.Outcome FROM Cases INNER JOIN CaseAttorneys ON Cases.CaseID = CaseAttorneys.CaseID INNER JOIN Attorneys ON CaseAttorneys.AttorneyID = Attorneys.AttorneyID WHERE Cases.Outcome = 'Settled';"
    },
    {
        "instruction": "입력 텍스트: 2019년 캘리포니아에서 인종별 정신 건강 전문가의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE mental_health_professionals_2 (id INT, race TEXT, state TEXT, year INT, profession TEXT); INSERT INTO mental_health_professionals_2 (id, race, state, year, profession) VALUES (1, 'Asian', 'California', 2019, 'Psychologist');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT race, COUNT(*) as num_professionals FROM mental_health_professionals_2 WHERE state = 'California' AND year = 2019 GROUP BY race;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 환자들에게 진단된 정신 건강 상태는 각각 몇 건씩 발생했는지, 발생 횟수에 따라 내림차순으로 정렬하여 보여주세요.\n\nDDL statements:\nCREATE TABLE conditions (id INT, patient_id INT, condition VARCHAR(50)); INSERT INTO conditions (id, patient_id, condition) VALUES (1, 1, 'Depression'), (2, 1, 'Anxiety'), (3, 2, 'Bipolar Disorder'), (4, 3, 'PTSD'), (5, 3, 'Depression');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT condition, COUNT(*) AS count FROM conditions GROUP BY condition ORDER BY count DESC;"
    },
    {
        "instruction": "입력 텍스트: SpaceX 우주선이 수행한 모든 우주 임무의 총 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE SpaceMissions (MissionId INT, Name VARCHAR(50), Manufacturer VARCHAR(20), Duration INT); INSERT INTO SpaceMissions (MissionId, Name, Manufacturer, Duration) VALUES (1, 'DM-1', 'SpaceX', 97), (2, 'Crew Dragon Demo-1', 'SpaceX', 164), (3, 'Crew Dragon In-Flight Abort Test', 'SpaceX', 1), (4, 'Crew Dragon Demo-2', 'SpaceX', 193), (5, 'SpaceX CRS-21', 'SpaceX', 334);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Duration) as TotalDuration FROM SpaceMissions WHERE Manufacturer = 'SpaceX';"
    },
    {
        "instruction": "입력 텍스트: 최근 5년간 캐나다에서 접근성 향상을 위한 법률 기술 자금 중 어느 정도의 비율이 할당되었나요?\n\nDDL statements:\nCREATE TABLE legal_technology_funding (id INT, year INT, allocation_type VARCHAR(50), amount FLOAT); INSERT INTO legal_technology_funding (id, year, allocation_type, amount) VALUES (1, 2018, 'access to justice', 100000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(CASE WHEN allocation_type = 'access to justice' THEN amount ELSE 0 END) / SUM(amount)) * 100.0 AS percentage FROM legal_technology_funding WHERE year BETWEEN YEAR(CURRENT_DATE()) - 5 AND YEAR(CURRENT_DATE());"
    },
    {
        "instruction": "입력 텍스트: 화학 공정 테이블에서 각 공정별로 기록된 최대 압력은 무엇인가요?\n\nDDL statements:\nCREATE TABLE chemical_processes (process_id INTEGER, pressure FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT process_id, MAX(pressure) FROM chemical_processes GROUP BY process_id;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능성 정보를 저장하기 위한 'sustainability_metrics'라는 이름의 테이블을 생성합니다.\n\nDDL statements:\nCREATE TABLE sustainability_metrics (id INT PRIMARY KEY, metric VARCHAR(100), value FLOAT, year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE sustainability_metrics (id INT PRIMARY KEY, metric VARCHAR(100), value FLOAT, year INT);"
    },
    {
        "instruction": "입력 텍스트: sales' 스키마의 각 지역에서 판매된 게임은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE sales.games (id INT, title VARCHAR(50), region VARCHAR(20), units_sold INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(units_sold) AS total_units_sold FROM sales.games GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 군인 수가 가장 적은 나라는 얼마인가요?\n\nDDL statements:\nCREATE TABLE military_personnel_africa (country VARCHAR(255), num_personnel INT); INSERT INTO military_personnel_africa (country, num_personnel) VALUES ('Nigeria', 120000), ('Egypt', 450000), ('South Africa', 76000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(num_personnel) FROM military_personnel_africa;"
    },
    {
        "instruction": "입력 텍스트: 어떤 나라에서 비건 화장품 제품을 위한 재료를 공급하고, 그 나라들과 연관된 브랜드는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ingredient_sourcing (ingredient_id INT, product_id INT, country_name VARCHAR(50), vegan_sourced BOOLEAN); INSERT INTO ingredient_sourcing (ingredient_id, product_id, country_name, vegan_sourced) VALUES (1, 1, 'France', true), (2, 1, 'Italy', false), (3, 2, 'USA', true), (4, 2, 'Mexico', true), (5, 3, 'Canada', false), (6, 3, 'UK', true), (7, 4, 'Brazil', true), (8, 4, 'Argentina', true), (9, 5, 'Australia', false), (10, 5, 'New Zealand', true), (11, 6, 'Spain', true), (12, 6, 'Germany', true); CREATE TABLE brand_info (brand_name VARCHAR(50), country_of_origin VARCHAR(50)); INSERT INTO brand_info (brand_name, country_of_origin) VALUES ('Loreal', 'France'), ('Maybelline', 'USA'), ('Estee Lauder', 'USA'), ('Urban Decay', 'USA'), ('MAC', 'Canada'), ('Clinique', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.country_name, b.brand_name FROM ingredient_sourcing i INNER JOIN brand_info b ON i.country_name = b.country_of_origin WHERE i.vegan_sourced = true GROUP BY i.country_name, b.brand_name HAVING COUNT(i.ingredient_id) >= 2;"
    },
    {
        "instruction": "입력 텍스트: 마케팅 부서에서 일하며 라틴계로 식별되는 직원의 최대 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Ethnicity VARCHAR(20), Department VARCHAR(20), Salary DECIMAL(10,2)); INSERT INTO Employees (EmployeeID, Ethnicity, Department, Salary) VALUES (1, 'Latinx', 'Marketing', 95000.00), (2, 'Asian', 'Marketing', 90000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Salary) FROM Employees WHERE Ethnicity = 'Latinx' AND Department = 'Marketing';"
    },
    {
        "instruction": "입력 텍스트: 개인전을 개최하지 않은 예술가들에 대한 기록을 artist_demographics 테이블에서 삭제하세요.\n\nDDL statements:\nCREATE TABLE museum_artists (artist_id INT, artist_name TEXT, num_solo_exhibitions INT); CREATE TABLE artist_demographics (artist_id INT, artist_name TEXT, artist_gender TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM artist_demographics WHERE artist_id NOT IN (SELECT artist_id FROM museum_artists);"
    },
    {
        "instruction": "입력 텍스트: 가장 최근의 피싱 시도에 대한 세부 사항은 무엇인가요?\n\nDDL statements:\nCREATE TABLE phishing_attempts (id INT, ip VARCHAR(255), timestamp TIMESTAMP, target VARCHAR(255), success BOOLEAN); INSERT INTO phishing_attempts (id, ip, timestamp, target, success) VALUES (1, '10.0.0.1', '2021-01-01 10:00:00', 'CEO', false), (2, '10.0.0.2', '2021-01-01 11:00:00', 'CFO', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM phishing_attempts WHERE timestamp = (SELECT MAX(timestamp) FROM phishing_attempts);"
    },
    {
        "instruction": "입력 텍스트: 2020년 캘리포니아 지역의 가뭄 영향 평가를 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE drought_impact (id INT PRIMARY KEY, year INT, location VARCHAR(50), assessment TEXT); INSERT INTO drought_impact (id, year, location, assessment) VALUES (1, 2020, 'California', 'Severe drought conditions'), (2, 2020, 'Texas', 'Moderate drought conditions'), (3, 2020, 'Florida', 'Mild drought conditions'), (4, 2020, 'Georgia', 'No drought conditions'), (5, 2020, 'North Carolina', 'Severe drought conditions');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM drought_impact WHERE year = 2020 AND location = 'California';"
    },
    {
        "instruction": "입력 텍스트: 모든 우주선의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Spacecraft (ID INT, Name VARCHAR(50), Cost FLOAT); INSERT INTO Spacecraft VALUES (1, 'Ares', 5000000), (2, 'Orion', 7000000), (3, 'Artemis', 8000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Cost) FROM Spacecraft;"
    },
    {
        "instruction": "입력 텍스트: 1인분 크기가 1보다 큰 제품의 평균 칼로리 수치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE NutritionFacts (product_id INT, calories INT, serving_size DECIMAL(3,1)); INSERT INTO NutritionFacts (product_id, calories, serving_size) VALUES (1, 250, 1.0), (2, 100, 0.5), (3, 300, 2.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(calories) FROM NutritionFacts WHERE serving_size > 1;"
    },
    {
        "instruction": "입력 텍스트: 특정 도시에서 아티스트의 공연에 대한 수익을 백분율 증가분에 따라 업데이트하세요.\n\nDDL statements:\nCREATE TABLE concert_revenue (concert_id INT, artist_id INT, revenue DECIMAL(10,2), city VARCHAR(50)); CREATE TABLE artist_changes (artist_id INT, percentage_change DECIMAL(10,2), change_date DATE, city VARCHAR(50)); INSERT INTO concert_revenue (concert_id, artist_id, revenue, city) VALUES (1, 101, 50000.00, 'New York'), (2, 102, 60000.00, 'New York'), (3, 101, 70000.00, 'Los Angeles'); INSERT INTO artist_changes (artist_id, percentage_change, change_date, city) VALUES (101, 0.10, '2022-01-01', 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE concert_revenue SET revenue = revenue * (1 + (SELECT percentage_change FROM artist_changes WHERE artist_id = concert_revenue.artist_id AND city = concert_revenue.city AND ROW_NUMBER() OVER (PARTITION BY artist_id, city ORDER BY change_date DESC) = 1)) WHERE artist_id IN (SELECT artist_id FROM artist_changes);"
    },
    {
        "instruction": "입력 텍스트: 2021년 1분기에 EU에 기반을 둔 회사들이 개발한 설명 가능한 AI 모델은 국가별로 그룹화하여 몇 개입니까?\n\nDDL statements:\nCREATE TABLE ExplainableAI (ID INT, Company VARCHAR(255), Country VARCHAR(255), Date DATE); INSERT INTO ExplainableAI (ID, Company, Country, Date) VALUES (1, 'Boston Dynamics', 'US', '2021-04-15'), (2, 'IBM', 'US', '2021-06-12'), (3, 'Microsoft', 'US', '2021-05-27'), (4, 'Google', 'US', '2021-04-01'), (5, 'Amazon', 'US', '2021-05-18'), (6, 'Siemens', 'Germany', '2021-01-20'), (7, 'Volkswagen', 'Germany', '2021-01-25'), (8, 'Airbus', 'France', '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, COUNT(*) as Q1_Count FROM ExplainableAI WHERE Date BETWEEN '2021-01-01' AND '2021-03-31' AND Country IN ('Germany', 'France') GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 'South' 지구에서 보고된 범죄는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE district (did INT, district_name VARCHAR(255)); INSERT INTO district (did, district_name) VALUES (1, 'Central'), (2, 'North'), (3, 'South'); CREATE TABLE crimes (crime_id INT, did INT, crime_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM crimes WHERE did = 3 AND crime_date >= DATEADD(month, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: weapons' 테이블에서 'origin'이 'Russia'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia'), (3, 'Mig-29', 'Russia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM weapons WHERE origin = 'Russia';"
    },
    {
        "instruction": "입력 텍스트: 특정 자산 클래스의 관리하에 있는 총 자산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE investment_strategies (strategy_id INT, strategy_name VARCHAR(50), asset_class VARCHAR(50)); INSERT INTO investment_strategies (strategy_id, strategy_name, asset_class) VALUES (1, 'Conservative', 'Bonds'), (2, 'Aggressive', 'Stocks'), (3, 'Balanced', 'Bonds and Stocks'); CREATE TABLE investment_accounts (account_id INT, strategy_id INT, balance DECIMAL(10, 2)); INSERT INTO investment_accounts (account_id, strategy_id, balance) VALUES (1, 1, 15000.00), (2, 1, 5000.00), (3, 2, 20000.00), (4, 3, 12000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(balance) FROM investment_accounts JOIN investment_strategies ON investment_accounts.strategy_id = investment_strategies.strategy_id WHERE investment_strategies.asset_class = 'Bonds';"
    },
    {
        "instruction": "입력 텍스트: 최근 3년간 공과대학 전기공학과에 수여된 연구 보조금은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE department (id INT, name VARCHAR(255), college VARCHAR(255));CREATE TABLE grant (id INT, department_id INT, title VARCHAR(255), amount DECIMAL(10,2), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM grant g JOIN department d ON g.department_id = d.id WHERE d.name = 'Department of Electrical Engineering' AND d.college = 'College of Engineering' AND g.year >= YEAR(CURDATE()) - 3;"
    },
    {
        "instruction": "입력 텍스트: 2021년도 미술 워크숍의 연령별 참가자 수를 찾아주세요.\n\nDDL statements:\nCREATE TABLE art_workshops (id INT, attendee_age INT, visit_year INT);INSERT INTO art_workshops (id, attendee_age, visit_year) VALUES (1, 23, 2021), (2, 31, 2021), (3, 19, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT attendee_age, COUNT(*) OVER (PARTITION BY attendee_age) AS attendees_by_age  FROM art_workshops WHERE visit_year = 2021 ORDER BY attendee_age;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 피고인의 최대 및 최소 법정 출석 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE defendants (defendant_id INT, country_id INT, court_appearances INT); INSERT INTO defendants (defendant_id, country_id, court_appearances) VALUES (1, 1, 3), (2, 1, 1), (3, 2, 5), (4, 2, 2), (5, 3, 4), (6, 3, 6); CREATE TABLE countries (country_id INT, country VARCHAR(50)); INSERT INTO countries (country_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.country_id, MAX(d.court_appearances) AS max_appearances, MIN(d.court_appearances) AS min_appearances FROM defendants d GROUP BY d.country_id;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이전에 건설된 터널의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE tunnels (id INT, name TEXT, build_year INT, location TEXT); INSERT INTO tunnels (id, name, build_year, location) VALUES (1, 'Tunnel A', 1990, 'California'), (2, 'Tunnel B', 2005, 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM tunnels WHERE build_year < 2000;"
    },
    {
        "instruction": "입력 텍스트: 2023년 상반기 중 위험 평가 부서에서 각 청구 유형별 총 청구 금액과 평균 청구 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Claims (ClaimID INT, ClaimType VARCHAR(20), ProcessingDepartment VARCHAR(20), ProcessingDate DATE, ClaimAmount INT); INSERT INTO Claims (ClaimID, ClaimType, ProcessingDepartment, ProcessingDate, ClaimAmount) VALUES (1, 'Theft', 'Underwriting', '2023-01-10', 5000), (2, 'Fire', 'Risk Assessment', '2023-02-15', 20000), (3, 'Accident', 'Claims', '2023-03-20', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ClaimType, SUM(ClaimAmount) as TotalClaimAmount, AVG(ClaimAmount) as AverageClaimAmount FROM Claims WHERE ProcessingDepartment = 'Risk Assessment' AND ProcessingDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY ClaimType;"
    },
    {
        "instruction": "입력 텍스트: 2016년부터 2021년까지 UnitedDefense가 러시아 정부에 판매한 군사 장비의 총 매출액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE UnitedDefense.EquipmentSales (id INT, manufacturer VARCHAR(255), equipment_type VARCHAR(255), quantity INT, price DECIMAL(10,2), buyer_country VARCHAR(255), sale_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity * price) FROM UnitedDefense.EquipmentSales WHERE buyer_country = 'Russia' AND sale_date BETWEEN '2016-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 열린 푸드 저스티스 이벤트와 참석자 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE food_justice (event_name VARCHAR(255), location VARCHAR(255), attendees INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, event_name, SUM(attendees) as total_attendees FROM food_justice WHERE location = 'California' GROUP BY event_name;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 테르븀, 디스프로슘, 홀뮴의 총 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production (year INT, element TEXT, quantity INT); INSERT INTO production (year, element, quantity) VALUES (2021, 'Terbium', 100), (2021, 'Dysprosium', 200), (2021, 'Holmium', 300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM production WHERE element IN ('Terbium', 'Dysprosium', 'Holmium') AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2020년 사이에 프랑스 또는 독일에서 제작된 다큐멘터리의 장르별 평균 평점을 찾아주세요.\n\nDDL statements:\nCREATE TABLE media_content (id INT, title VARCHAR(255), release_year INT, rating FLOAT, genre VARCHAR(255), country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT genre, AVG(rating) as avg_rating FROM media_content WHERE country IN ('France', 'Germany') AND category = 'documentary' AND release_year BETWEEN 2015 AND 2020 GROUP BY genre;"
    },
    {
        "instruction": "입력 텍스트: 아시아 각국의 하루 최대 폐수 처리 용량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE wastewater_treatment (country VARCHAR(255), location VARCHAR(255), capacity INT); INSERT INTO wastewater_treatment (country, location, capacity) VALUES ('China', 'Beijing', 5000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(capacity) FROM wastewater_treatment WHERE country IN ('China', 'India', 'Indonesia', 'Japan', 'Pakistan') GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 전시회에 참석하고 온라인 활동에 참여한 방문객의 총 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE ExhibitionAttendance (VisitorID INT, ExhibitionID INT); CREATE TABLE OnlineEngagement (EventID INT, EventName VARCHAR(50), TotalParticipants INT, AvgDuration FLOAT); CREATE VIEW ExhibitionAttendees AS SELECT VisitorID FROM ExhibitionAttendance; CREATE VIEW OnlineParticipants AS SELECT DISTINCT VisitorID FROM OnlineEngagement;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ExhibitionAttendees.VisitorID) FROM ExhibitionAttendees INNER JOIN OnlineParticipants ON ExhibitionAttendees.VisitorID = OnlineParticipants.VisitorID;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아에서 관람객 수가 가장 많은 상위 3개의 문화 행사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE CulturalEvents (id INT, event VARCHAR(255), location VARCHAR(255), attendance INT); INSERT INTO CulturalEvents (id, event, location, attendance) VALUES (1, 'Aboriginal Australian Art Exhibition', 'Sydney', 5000), (2, 'Pasifika Festival', 'Auckland', 60000), (3, 'Hawaii International Film Festival', 'Honolulu', 30000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT event, attendance FROM CulturalEvents ORDER BY attendance DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: \"zip_codes\" 테이블에 새로운 레코드를 삽입하세요\n\nDDL statements:\nCREATE TABLE zip_codes (zip_code VARCHAR(10), city VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO zip_codes (zip_code, city) VALUES ('45678', 'Newcity'), ('56789', 'Anothercity');"
    },
    {
        "instruction": "입력 텍스트: \"Virtual VRoom\"에서 캐나다 출신 플레이어들이 플레이한 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerName TEXT, Age INT, Country TEXT); CREATE TABLE GameSessions (SessionID INT, PlayerID INT, Game TEXT, Duration INT, SessionDate DATE); INSERT INTO Players (PlayerID, PlayerName, Age, Country) VALUES (1, 'John Doe', 25, 'Canada'), (2, 'Jane Smith', 30, 'USA'), (3, 'Alice Johnson', 22, 'Canada'); INSERT INTO GameSessions (SessionID, PlayerID, Game, Duration, SessionDate) VALUES (1, 1, 'Virtual VRoom', 60, '2022-01-01'), (2, 2, 'Virtual VRoom', 45, '2022-01-05'), (3, 3, 'Virtual VRoom', 70, '2022-01-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Duration) FROM Players INNER JOIN GameSessions ON Players.PlayerID = GameSessions.PlayerID WHERE Game = 'Virtual VRoom' AND Country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 프랑스에 있는 공장들의 윤리 인증 개수를 세어보세요.\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, factory_name TEXT, location TEXT, ethical_certifications INT); INSERT INTO factories (factory_id, factory_name, location, ethical_certifications) VALUES (1, 'Paris Fashion Factory', 'France', 3), (2, 'Milan Apparel Studio', 'Italy', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(ethical_certifications) FROM factories WHERE location = 'France';"
    },
    {
        "instruction": "입력 텍스트: 아메리카 지역에서 가장 높은 재활용률을 가진 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE RecyclingRates (id INT, country VARCHAR(50), region VARCHAR(50), recycling_rate FLOAT); INSERT INTO RecyclingRates (id, country, region, recycling_rate) VALUES (1, 'USA', 'Americas', 35.1), (2, 'Canada', 'Americas', 37.6), (3, 'Brazil', 'Americas', 42.3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(recycling_rate) FROM RecyclingRates WHERE region = 'Americas';"
    },
    {
        "instruction": "입력 텍스트: 텍사스의 각 창고에 하루 평균 몇 개의 팔레트가 배송되었나요?\n\nDDL statements:\nCREATE TABLE deliveries (id INT, warehouse_state VARCHAR(20), pallets INT, delivery_date DATE); INSERT INTO deliveries (id, warehouse_state, pallets, delivery_date) VALUES (1, 'Texas', 25, '2022-01-03'), (2, 'Texas', 32, '2022-01-07');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT warehouse_state, AVG(pallets) FROM deliveries WHERE warehouse_state = 'Texas' GROUP BY warehouse_state;"
    },
    {
        "instruction": "입력 텍스트: 브라질에 도착하는 국제 항공편의 평균 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE flight_emissions (flight_number VARCHAR(255), origin VARCHAR(255), destination VARCHAR(255), year INT, co2_emission INT); INSERT INTO flight_emissions (flight_number, origin, destination, year, co2_emission) VALUES ('LA21', 'Los Angeles, USA', 'Rio de Janeiro, Brazil', 2018, 120000), ('LH456', 'Frankfurt, Germany', 'São Paulo, Brazil', 2019, 135000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(co2_emission) FROM flight_emissions WHERE destination = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 해당 연도의 각 월별로 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, sale_date DATE, sale_revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM sale_date) as month, SUM(sale_revenue) as total_revenue FROM sales GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 북해'와 '멕시코만'에 모두 드릴링 리그를 보유한 회사는 어디인가요?\n\nDDL statements:\nCREATE TABLE drilling_rigs (rig_id INT, rig_name VARCHAR(50), company VARCHAR(50), region VARCHAR(50)); INSERT INTO drilling_rigs VALUES (1, 'Rig A', 'Company A', 'North Sea'); INSERT INTO drilling_rigs VALUES (2, 'Rig B', 'Company B', 'Alberta'); INSERT INTO drilling_rigs VALUES (3, 'Rig C', 'Company A', 'Gulf of Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company FROM drilling_rigs WHERE region IN ('North Sea', 'Gulf of Mexico') GROUP BY company HAVING COUNT(DISTINCT region) = 2;"
    },
    {
        "instruction": "입력 텍스트: 러시아 출신 우주비행사들의 우주 임무 평균 지속 시간을 찾으세요.\n\nDDL statements:\nCREATE TABLE Astronauts (AstronautID INT, Name VARCHAR(50), Nationality VARCHAR(50));CREATE TABLE SpaceMissions (MissionID INT, AstronautID INT, Name VARCHAR(50), Duration INT); INSERT INTO Astronauts (AstronautID, Name, Nationality) VALUES (1, 'Alexei Leonov', 'Russia'), (2, 'Yuri Malenchenko', 'Russia'); INSERT INTO SpaceMissions (MissionID, AstronautID, Name, Duration) VALUES (1, 1, 'Voskhod 2', 26), (2, 2, 'Mir EO-14', 197);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(sm.Duration) FROM SpaceMissions sm INNER JOIN Astronauts a ON sm.AstronautID = a.AstronautID WHERE a.Nationality = 'Russia';"
    },
    {
        "instruction": "입력 텍스트: 범죄' 사건 유형에 해당하는 사건 중 '벌금'으로 해결된 사건을 제외한 총 청구 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE CriminalCases (CaseID INT, CaseType VARCHAR(20), Resolution VARCHAR(20), BillingAmount DECIMAL(10,2)); INSERT INTO CriminalCases (CaseID, CaseType, Resolution, BillingAmount) VALUES (1, 'Criminal', 'Fine', 2000.00), (2, 'Criminal', 'Probation', 4000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(BillingAmount) FROM CriminalCases WHERE CaseType = 'Criminal' AND Resolution != 'Fine';"
    },
    {
        "instruction": "입력 텍스트: 제품 테이블에 새로운 동물 실험을 하지 않은 파운데이션을 추가하세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), is_cruelty_free BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO products (product_id, product_name, category, price, is_cruelty_free) VALUES (4, 'Liquid Foundation', 'Makeup', 24.99, true);"
    },
    {
        "instruction": "입력 텍스트: 제품 가격을 퍼센트로 증가시키세요\n\nDDL statements:\nCREATE TABLE products(product_id INT, price INT); INSERT INTO products(product_id, price) VALUES (1, 100), (2, 150), (3, 200), (4, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE products SET price = price * 1.05 WHERE price < 200;"
    },
    {
        "instruction": "입력 텍스트: animal_population' 테이블에서 'Serengeti' 지역의 'lions'의 개체 수를 300으로 설정하세요.\n\nDDL statements:\nCREATE TABLE animal_population (id INT, animal_type VARCHAR(20), habitat_name VARCHAR(30), population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE animal_population SET population = 300 WHERE animal_type = 'lions' AND habitat_name = 'Serengeti';"
    },
    {
        "instruction": "입력 텍스트: 각 항공기 모델의 연도별 평균 비행 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE aircraft_flights (id INT, model VARCHAR(50), flight_hours DECIMAL(5,2), year INT); INSERT INTO aircraft_flights (id, model, flight_hours, year) VALUES (1, 'Boeing 737', 3500.5, 2019), (2, 'Airbus A320', 3200.2, 2019), (3, 'Boeing 787', 3800.8, 2018), (4, 'SpaceX Starship', 5000, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT model, year, AVG(flight_hours) as avg_flight_time FROM aircraft_flights GROUP BY model, year;"
    },
    {
        "instruction": "입력 텍스트: 각 규제 프레임워크별 거래 횟수와 각 프레임워크에 연관된 디지털 자산의 총 개수를 표시합니다. 연관된 디지털 자산이 없는 경우 '0'을 표시하세요.\n\nDDL statements:\nCREATE TABLE regulatory_frameworks (framework_id INT, framework_name VARCHAR(255)); CREATE TABLE assets_frameworks (asset_id INT, framework_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT rf.framework_name, COUNT(rf.framework_id) as num_frameworks, SUM(CASE WHEN af.asset_id IS NOT NULL THEN 1 ELSE 0 END) as num_assets FROM regulatory_frameworks rf LEFT JOIN assets_frameworks af ON rf.framework_id = af.framework_id GROUP BY rf.framework_name;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 금광의 평균 노동 생산성은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Mines (MineID INT, MineName VARCHAR(255), Country VARCHAR(255), Material VARCHAR(255)); INSERT INTO Mines (MineID, MineName, Country, Material) VALUES (1, 'Golden Ridge', 'Canada', 'Gold'); INSERT INTO Mines (MineID, MineName, Country, Material) VALUES (2, 'Silver Peak', 'USA', 'Silver'); INSERT INTO Mines (MineID, MineName, Country, Material) VALUES (3, 'Bronze Basin', 'Australia', 'Bronze'); CREATE TABLE Productivity (MineID INT, Year INT, LaborProductivity FLOAT); INSERT INTO Productivity (MineID, Year, LaborProductivity) VALUES (1, 2020, 1200); INSERT INTO Productivity (MineID, Year, LaborProductivity) VALUES (1, 2019, 1100); INSERT INTO Productivity (MineID, Year, LaborProductivity) VALUES (2, 2020, 1500); INSERT INTO Productivity (MineID, Year, LaborProductivity) VALUES (2, 2019, 1400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(p.LaborProductivity) as AvgLaborProductivity FROM Mines m INNER JOIN Productivity p ON m.MineID = p.MineID WHERE m.Country = 'Canada' AND m.Material = 'Gold';"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 미국으로의 화물 운송 평균 배송 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE FreightForwarding (id INT, customer VARCHAR(255), delivery_time FLOAT, country VARCHAR(255), quarter INT, year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(delivery_time) FROM FreightForwarding WHERE country = 'United States' AND quarter = 1 AND year = 2022;"
    },
    {
        "instruction": "입력 텍스트: 2021년 첫 분기에 각 지역으로 이루어진 배송 건수와 이 기간 동안 각 지역에서 발생한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS logistics;CREATE TABLE IF NOT EXISTS shipments (shipment_id INT,region VARCHAR(20),shipment_date DATE,revenue DECIMAL(10,2));INSERT INTO shipments (shipment_id, region, shipment_date, revenue) VALUES (1, 'Midwest', '2021-01-01', 500.00), (2, 'Northeast', '2021-01-01', 700.00), (3, 'Southeast', '2021-02-01', 800.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) AS num_shipments, SUM(revenue) AS total_revenue FROM logistics.shipments WHERE QUARTER(shipment_date) = 1 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 국제 우주 정거장에 첫 번째 유인 미션에 참여한 우주인은 누구였나요?\n\nDDL statements:\nCREATE TABLE astronauts (astronaut_id INT, astronaut_name VARCHAR(100), mission_id INT); INSERT INTO astronauts (astronaut_id, astronaut_name, mission_id) VALUES (1, 'William Shepherd', 1); INSERT INTO astronauts (astronaut_id, astronaut_name, mission_id) VALUES (2, 'Yuri Gidzenko', 2); CREATE TABLE space_missions (mission_id INT, mission_name VARCHAR(100), country VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO space_missions (mission_id, mission_name, country, start_date, end_date) VALUES (1, 'STS-88', 'United States', '1998-12-04', '1998-12-15'); INSERT INTO space_missions (mission_id, mission_name, country, start_date, end_date) VALUES (2, 'Soyuz TM-29', 'Russia', '1999-02-20', '1999-08-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT astronaut_name FROM astronauts JOIN space_missions ON astronauts.mission_id = space_missions.mission_id WHERE mission_name = 'STS-88';"
    },
    {
        "instruction": "입력 텍스트: 유럽 우주선을 사용한 우주 임무 중 최소 기간(일 단위)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE space_missions (id INT, mission_name VARCHAR(50), launch_date DATE, duration INT, spacecraft_nationality VARCHAR(50)); INSERT INTO space_missions (id, mission_name, launch_date, duration, spacecraft_nationality) VALUES (5, 'Juno', '2011-08-05', 2038, 'Europe'); INSERT INTO space_missions (id, mission_name, launch_date, duration, spacecraft_nationality) VALUES (6, 'Cassini', '1997-10-15', 6918, 'American');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(duration) FROM space_missions WHERE spacecraft_nationality = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: marine_life_sightings' 테이블에 각 월별로 기록된 해양 포유류 목격 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_life_sightings (sighting_id INTEGER, species TEXT, sighting_date DATE); INSERT INTO marine_life_sightings (sighting_id, species, sighting_date) VALUES (1, 'Blue Whale', '2022-01-01'), (2, 'Humpback Whale', '2022-01-02'), (3, 'Seal', '2022-02-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM sighting_date) AS month, COUNT(*) FROM marine_life_sightings GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 아프리카'에서 바이오테크 스타트업이 받은 자금 중 최소 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE startups (id INT, name VARCHAR(100), location VARCHAR(100), funding FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(funding) FROM startups WHERE location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 관광 관행 테이블에서 ID가 2보다 큰 레코드를 삭제합니다\n\nDDL statements:\nCREATE TABLE sustainable_practices (id INT PRIMARY KEY, country VARCHAR(50), practice VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH cte AS (DELETE FROM sustainable_practices WHERE id > 2 RETURNING *) SELECT * FROM cte;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 위치한 모든 풍력 터빈의 이름과 연간 에너지 절감량을 가져와라.\n\nDDL statements:\nCREATE TABLE wind_turbines (id INT, name VARCHAR(255), location VARCHAR(255), annual_energy_savings FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, annual_energy_savings FROM wind_turbines WHERE location = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 라운드 유형별 펀딩 금액의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE funding_rounds (company_id INT, round_amount DECIMAL(10,2), round_type VARCHAR(20), year INT); INSERT INTO funding_rounds (company_id, round_amount, round_type, year) VALUES (1, 2000000, 'Seed', 2016), (2, 5000000, 'Series A', 2017), (3, 3000000, 'Seed', 2018), (4, 6000000, 'Series B', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.round_type, AVG(f.round_amount), STDDEV(f.round_amount), MIN(f.round_amount), MAX(f.round_amount) FROM funding_rounds f GROUP BY f.round_type;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 월별 평균 청구 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE claims (id INT, policyholder_id INT, amount DECIMAL(10, 2), filed_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(claims.amount), EXTRACT(MONTH FROM claims.filed_date) as month FROM claims JOIN policyholders ON claims.policyholder_id = policyholders.id WHERE policyholders.state = 'CA' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 방수 기능이 있는 마스카라의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Mascaras (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), waterproof BOOLEAN); INSERT INTO Mascaras (product_id, product_name, category, price, waterproof) VALUES (1, 'Mascara 1', 'Mascaras', 12.99, TRUE), (2, 'Mascara 2', 'Mascaras', 14.99, FALSE), (3, 'Mascara 3', 'Mascaras', 16.99, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM Mascaras WHERE waterproof = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 지난 해 각 제조사에서 출시된 새 화학 제품은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE ChemicalProducts (ProductID INT, Chemical TEXT, ManufacturerID INT, ProductLaunchDate DATE); INSERT INTO ChemicalProducts (ProductID, Chemical, ManufacturerID, ProductLaunchDate) VALUES (1, 'Acetone', 1, '2020-01-01'), (2, 'Ethanol', 1, '2021-01-01'), (3, 'Methanol', 2, '2020-02-01'), (4, 'Propanol', 2, '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT M.ManufacturerName, YEAR(CP.ProductLaunchDate) AS ProductLaunchYear, COUNT(DISTINCT CP.ProductID) AS NewProductCount FROM ChemicalProducts CP INNER JOIN Manufacturers M ON CP.ManufacturerID = M.ManufacturerID WHERE YEAR(CP.ProductLaunchDate) = YEAR(CURDATE()) - 1 GROUP BY M.ManufacturerName, ProductLaunchYear;"
    },
    {
        "instruction": "입력 텍스트: construction_projects 뷰에 없는 허가 ID를 가진 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE VIEW construction_projects AS SELECT permit_id FROM building_permits;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM building_permits WHERE permit_id NOT IN (SELECT permit_id FROM construction_projects);"
    },
    {
        "instruction": "입력 텍스트: 여러 차례의 퇴사 이벤트가 있었던 회사들의 이전과 현재 퇴사 가치 차이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE exit (id INT, company_id INT, exit_type VARCHAR(50), exit_value INT, exit_date DATE); INSERT INTO exit (id, company_id, exit_type, exit_value, exit_date) VALUES (1, 1, 'Acquisition', 50000000, '2018-02-03'); INSERT INTO exit (id, company_id, exit_type, exit_value, exit_date) VALUES (2, 1, 'Acquisition', 60000000, '2019-05-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.company_id, LAG(exit_value, 1) OVER (PARTITION BY company_id ORDER BY exit_date) as previous_exit_value, exit_value, exit_date FROM exit e WHERE company_id IN (SELECT company_id FROM exit GROUP BY company_id HAVING COUNT(*) > 1);"
    },
    {
        "instruction": "입력 텍스트: 각 지구별로 발생한 긴급 전화의 총 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE districts (name VARCHAR(255), zip_code VARCHAR(10)); INSERT INTO districts (name, zip_code) VALUES ('Mission', '94110'), ('Back Bay', '02116'), ('Financial District', '02109'); CREATE TABLE emergency_calls (id INT, district VARCHAR(255), call_time TIMESTAMP); INSERT INTO emergency_calls (id, district, call_time) VALUES (1, 'Mission', '2022-03-21 12:00:00'), (2, 'Back Bay', '2022-03-22 13:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT district, COUNT(*) as total_calls FROM emergency_calls GROUP BY district;"
    },
    {
        "instruction": "입력 텍스트: 시뮬레이션' 장르의 각 게임의 총 판매량과 평균 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Games (GameID int, GameName varchar(50), Genre varchar(20), Sales int, AvgPlayTime int); INSERT INTO Games (GameID, GameName, Genre, Sales, AvgPlayTime) VALUES (3, 'GameE', 'Simulation', 6000, 180); INSERT INTO Games (GameID, GameName, Genre, Sales, AvgPlayTime) VALUES (4, 'GameF', 'Simulation', 8000, 220);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, SUM(Sales) as TotalSales, AVG(AvgPlayTime) as AvgPlayTime FROM Games WHERE Genre = 'Simulation' GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: 평생교육 프로그램에 참여하지 않은 모든 학생들을 나열하시오.\n\nDDL statements:\nCREATE TABLE student_records (student_id INT, involved_in_lifelong_learning BOOLEAN); INSERT INTO student_records (student_id, involved_in_lifelong_learning) VALUES (1, true), (2, false), (3, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM student_records WHERE involved_in_lifelong_learning = false;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 콘서트 티켓 판매 수익이 가장 높은 상위 5개 국가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ConcertTicketSalesByCountry (id INT, year INT, country VARCHAR(50), revenue FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(revenue) as total_revenue FROM ConcertTicketSalesByCountry WHERE year = 2020 GROUP BY country ORDER BY total_revenue DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 지난 세 달 동안 완료된 녹색 건축 프로젝트의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_projects (project_id INT, completion_date DATE, state TEXT); INSERT INTO green_projects (project_id, completion_date, state) VALUES (1, '2022-03-15', 'California'), (2, '2022-02-28', 'California'), (3, '2022-01-01', 'California'), (4, '2022-03-25', 'New York'), (5, '2022-02-22', 'New York'), (6, '2022-01-10', 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) OVER (PARTITION BY state ORDER BY EXTRACT(MONTH FROM completion_date) RANGE BETWEEN INTERVAL '2 month' PRECEDING AND CURRENT ROW) FROM green_projects WHERE EXTRACT(MONTH FROM completion_date) IN (3, 2, 1);"
    },
    {
        "instruction": "입력 텍스트: 모든 시대의 유물이 발견된 발굴 현장의 위치와 역사적 맥락은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ExcavationSites (SiteID int, SiteName varchar(50), Location varchar(50)); CREATE TABLE Artifacts (ArtifactID int, SiteID int, Age varchar(20), Description varchar(100)); CREATE TABLE HistoricalContexts (ContextID int, ArtifactID int, Era varchar(20), Culture varchar(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ExcavationSites.Location, HistoricalContexts.Era FROM ExcavationSites INNER JOIN Artifacts ON ExcavationSites.SiteID = Artifacts.SiteID INNER JOIN HistoricalContexts ON Artifacts.ArtifactID = HistoricalContexts.ArtifactID GROUP BY ExcavationSites.Location, HistoricalContexts.Era HAVING COUNT(DISTINCT HistoricalContexts.Era) > 1;"
    },
    {
        "instruction": "입력 텍스트: dispensary_sales 테이블에서 product_name이 'White Widow'이고 quantity_sold가 0인 레코드를 삭제합니다.\n\nDDL statements:\nCREATE TABLE dispensary_sales (dispensary_name VARCHAR(255), sale_date DATE, product_name VARCHAR(255), quantity_sold INT, total_sales DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH cte1 AS (DELETE FROM dispensary_sales WHERE product_name = 'White Widow' AND quantity_sold = 0) SELECT * FROM cte1;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월 14일에 각 워크샵에서 서비스된 차량은 몇 대인가요?\n\nDDL statements:\nCREATE TABLE workshops (workshop_id INT, workshop_name TEXT);CREATE TABLE vehicle_maintenance (maintenance_id INT, workshop_id INT, vehicle_id INT, maintenance_date DATE); INSERT INTO workshops (workshop_id, workshop_name) VALUES (1, 'Workshop A'), (2, 'Workshop B'); INSERT INTO vehicle_maintenance (maintenance_id, workshop_id, vehicle_id, maintenance_date) VALUES (1, 1, 1001, '2022-02-14'), (2, 1, 1002, '2022-02-14'), (3, 2, 2001, '2022-02-14');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w.workshop_name, COUNT(vm.vehicle_id) as vehicles_serviced FROM workshops w JOIN vehicle_maintenance vm ON w.workshop_id = vm.workshop_id WHERE vm.maintenance_date = '2022-02-14' GROUP BY w.workshop_name;"
    },
    {
        "instruction": "입력 텍스트: fan_demographics' 테이블에 'Latin America'라는 새로운 팬 인구 통계 그룹을 추가하세요. 이 그룹은 총 200명의 팬과 평균 티켓 가격이 $50입니다.\n\nDDL statements:\nCREATE TABLE fan_demographics (fan_id INT, group_name VARCHAR(255), location VARCHAR(255), age INT, ticket_price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fan_demographics (group_name, location, ticket_price, total_fans) VALUES ('Latin America', 'Latin America', 50, 200);"
    },
    {
        "instruction": "입력 텍스트: 각 국가로 배송된 제품의 수를 구하세요.\n\nDDL statements:\nCREATE TABLE supply_chain (id INTEGER, product_id VARCHAR(10), shipped_date DATE, shipped_to VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT shipped_to, COUNT(DISTINCT product_id) FROM supply_chain GROUP BY shipped_to;"
    },
    {
        "instruction": "입력 텍스트: 각 공급업체가 제공하는 지역 제품의 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, local BOOLEAN, supplier_id INT); INSERT INTO products (product_id, product_name, local, supplier_id) VALUES (1, 'Carrots', true, 1), (2, 'Broccoli', false, 1), (3, 'Apples', true, 2), (4, 'Eggs', true, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_id, COUNT(*) as local_count FROM products WHERE local = true GROUP BY supplier_id;"
    },
    {
        "instruction": "입력 텍스트: tech_volunteers' 테이블에 있는 자원봉사자들의 모든 기술을 나열하세요.\n\nDDL statements:\nCREATE TABLE tech_volunteers (volunteer_id INT, volunteer_name VARCHAR(20), skill VARCHAR(20)); INSERT INTO tech_volunteers (volunteer_id, volunteer_name, skill) VALUES ('1', 'Jane Smith', 'Programming'); INSERT INTO tech_volunteers (volunteer_id, volunteer_name, skill) VALUES ('2', 'Alice Johnson', 'Data Analysis');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT skill FROM tech_volunteers;"
    },
    {
        "instruction": "입력 텍스트: 예술 및 문화 활동을 위한 주별 평균 자원봉사자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE volunteers (id INT, state VARCHAR(255), cause VARCHAR(255)); INSERT INTO volunteers (id, state, cause) VALUES (1, 'California', 'arts and culture'), (2, 'New York', 'animals'), (3, 'California', 'arts and culture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(COUNT(*)) FROM volunteers WHERE cause = 'arts and culture' GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 인도에 기반을 둔 스튜디오에서 제작된 영화의 평균 등급을 제작 연도별로 오름차순으로 정렬하여 알려주세요.\n\nDDL statements:\nCREATE TABLE movies (title VARCHAR(255), studio VARCHAR(255), production_year INT, rating FLOAT); INSERT INTO movies (title, studio, production_year, rating) VALUES ('Movie13', 'India Studio1', 2018, 7.5), ('Movie14', 'India Studio2', 2019, 8.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating) FROM movies WHERE studio LIKE '%India%' GROUP BY production_year ORDER BY production_year ASC;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 윤리적 AI 프로젝트의 평균 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ai_projects (id INT, name VARCHAR(255), location VARCHAR(255), budget DECIMAL(10,2)); INSERT INTO ai_projects (id, name, location, budget) VALUES (1, 'Ethical AI for Education', 'Africa', 250000.00); INSERT INTO ai_projects (id, name, location, budget) VALUES (2, 'AI for Social Good', 'Asia', 300000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM ai_projects WHERE location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: labor_practices' 테이블에 레코드를 삽입하세요\n\nDDL statements:\nCREATE TABLE labor_practices (practice_id INT, supplier_id INT, fair_trade BOOLEAN, living_wage BOOLEAN); INSERT INTO labor_practices (practice_id, supplier_id, fair_trade, living_wage) VALUES (1, 1, true, true); INSERT INTO labor_practices (practice_id, supplier_id, fair_trade, living_wage) VALUES (2, 2, false, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO labor_practices (practice_id, supplier_id, fair_trade, living_wage) VALUES (1, 1, true, true); INSERT INTO labor_practices (practice_id, supplier_id, fair_trade, living_wage) VALUES (2, 2, false, true);"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 위치한 커뮤니티 보건 센터에서 치료사 5에 의해 치료받은 환자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE community_health_center (center_id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO community_health_center (center_id, name, state) VALUES (1, 'Community Health Center 1', 'California'), (2, 'Community Health Center 2', 'New York'); CREATE TABLE patient (patient_id INT, center_id INT); CREATE TABLE therapy_session (session_id INT, patient_id INT, therapist_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT patient.patient_id) FROM patient JOIN therapy_session ON patient.patient_id = therapy_session.patient_id JOIN community_health_center ON patient.center_id = community_health_center.center_id WHERE community_health_center.state = 'California' AND therapy_session.therapist_id = 5;"
    },
    {
        "instruction": "입력 텍스트: 선박 \"Sea Breeze\"의 ID 103에 해당하는 안전 기록을 4.5로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE safety_records (vessel_id INT, safety_score REAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE safety_records SET safety_score = 4.5 WHERE vessel_id = 103 AND name = 'Sea Breeze';"
    },
    {
        "instruction": "입력 텍스트: 각 질병을 치료받은 환자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, age INT, gender TEXT, condition TEXT, treatment TEXT); INSERT INTO patients (patient_id, age, gender, condition, treatment) VALUES (1, 35, 'Female', 'Depression', 'CBT'), (2, 40, 'Male', 'Anxiety', 'Medication');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT condition, COUNT(*) as count FROM patients GROUP BY condition;"
    },
    {
        "instruction": "입력 텍스트: 독일에서 판매되는 가격이 20유로 이상인 동물 실험을 하지 않은 스킨케어 제품을 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE SkincareProducts (productID INT, productName VARCHAR(50), category VARCHAR(50), country VARCHAR(50), isCrueltyFree BOOLEAN, price DECIMAL(5,2)); INSERT INTO SkincareProducts (productID, productName, category, country, isCrueltyFree, price) VALUES (1, 'Vitamin C Serum', 'Skincare', 'Germany', TRUE, 25.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM SkincareProducts WHERE country = 'Germany' AND isCrueltyFree = TRUE AND price > 20;"
    },
    {
        "instruction": "입력 텍스트: Troll' 유전의 2018년과 2019년 생산량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE field_production (field VARCHAR(50), year INT, oil_production FLOAT, gas_production FLOAT); INSERT INTO field_production (field, year, oil_production, gas_production) VALUES ('Troll', 2018, 1234.5, 678.9); INSERT INTO field_production (field, year, oil_production, gas_production) VALUES ('Troll', 2019, 2345.6, 789.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, oil_production, gas_production FROM field_production WHERE field = 'Troll';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 제작된 코미디 쇼의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE IF NOT EXISTS show (id INT PRIMARY KEY, title VARCHAR(100), genre VARCHAR(50), release_year INT, country VARCHAR(50)); CREATE TABLE IF NOT EXISTS rating (id INT PRIMARY KEY, value DECIMAL(2,1), show_id INT, FOREIGN KEY (show_id) REFERENCES show(id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(rating.value) as average_rating FROM rating JOIN show ON rating.show_id = show.id WHERE show.genre = 'comedy' AND show.country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 디지털 격차 분야에서 아프리카 지역에 월드뱅크로부터 자금을 지원받은 기관의 이름과 직원 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE organizations (organization_id INT, name VARCHAR(50), employees INT, sector VARCHAR(50)); CREATE TABLE funding (funding_id INT, organization_id INT, funder VARCHAR(50), funded_country VARCHAR(50)); INSERT INTO organizations (organization_id, name, employees, sector) VALUES (1, 'OrgA', 1000, 'digital divide'), (2, 'OrgB', 2000, 'healthcare'), (3, 'OrgC', 1500, 'digital divide'), (4, 'OrgD', 2500, 'education'); INSERT INTO funding (funding_id, organization_id, funder, funded_country) VALUES (1, 1, 'World Bank', 'Africa'), (2, 2, 'Gates Foundation', 'Asia'), (3, 3, 'World Bank', 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT o.name, COUNT(f.organization_id) FROM organizations o JOIN funding f ON o.organization_id = f.organization_id WHERE o.sector = 'digital divide' AND f.funder = 'World Bank' AND f.funded_country = 'Africa' GROUP BY o.name;"
    },
    {
        "instruction": "입력 텍스트: 독일에 설치된 풍력 터빈의 평균 에너지 효율은 무엇이며, id를 기준으로 오름차순으로 정렬된 결과는 무엇인가요?\n\nDDL statements:\nCREATE TABLE wind_turbines (id INT, country VARCHAR(50), energy_efficiency FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(energy_efficiency) AS avg_efficiency FROM wind_turbines WHERE country = 'Germany' GROUP BY country ORDER BY id ASC;"
    },
    {
        "instruction": "입력 텍스트: 전략 테이블에서 지난 5년 동안 구현된 사이버 보안 전략은 무엇인가요?\n\nDDL statements:\nCREATE TABLE strategies (name TEXT, description TEXT, implementation_date DATE); INSERT INTO strategies (name, description, implementation_date) VALUES ('Incident Response Plan', 'Plan to respond to cybersecurity incidents.', '2018-01-01'), ('Security Awareness Training', 'Training for employees about cybersecurity threats.', '2020-03-15'), ('Penetration Testing', 'Simulated cyber attacks to identify vulnerabilities.', '2021-12-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM strategies WHERE implementation_date >= DATE('now','-5 year');"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 미국에서 발생한 보안 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE SecurityIncidents (id INT, incident_name VARCHAR(255), country VARCHAR(255), date DATE); INSERT INTO SecurityIncidents (id, incident_name, country, date) VALUES (1, 'Data Breach', 'United States', '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM SecurityIncidents WHERE country = 'United States' AND date >= '2022-01-01' AND date < '2022-04-01';"
    },
    {
        "instruction": "입력 텍스트: 미국과 캐나다에서 비건 화장품의 시장 점유율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (product_id INT, sale_quantity INT, sale_country TEXT); CREATE TABLE products (product_id INT, is_vegan BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sale_country, SUM(sale_quantity) * 100.0 / (SELECT SUM(sale_quantity) FROM sales) AS market_share FROM sales INNER JOIN products ON sales.product_id = products.product_id WHERE sale_country IN ('United States', 'Canada') AND is_vegan = TRUE GROUP BY sale_country;"
    },
    {
        "instruction": "입력 텍스트: infrastructure_development' 테이블에서 국가가 'Brazil'이고 연도가 2015년인 레코드의 'investment_value'를 1500000000으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE infrastructure_development (id INT, country VARCHAR(50), year INT, investment_value FLOAT); INSERT INTO infrastructure_development (id, country, year, investment_value) VALUES (1, 'Nigeria', 2014, 123000000); INSERT INTO infrastructure_development (id, country, year, investment_value) VALUES (2, 'Brazil', 2015, 180000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE infrastructure_development SET investment_value = 1500000000 WHERE country = 'Brazil' AND year = 2015;"
    },
    {
        "instruction": "입력 텍스트: 컴퓨터 과학 학과에 있는 여성 교수진의 이름과 연구 관심사는 무엇인가요?\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50), research_interest TEXT); INSERT INTO faculty (id, name, department, research_interest) VALUES (1, 'Alice', 'Computer Science', 'Machine Learning'); INSERT INTO faculty (id, name, department, research_interest) VALUES (2, 'Bob', 'Electrical Engineering', 'Power Systems');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, research_interest FROM faculty WHERE department = 'Computer Science' AND gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 2020년과 2021년 4분기에 개발된 AI 모델의 평균 안전 점수는?\n\nDDL statements:\nCREATE TABLE ai_safety (model_name TEXT, safety_score INTEGER, quarter TEXT); INSERT INTO ai_safety (model_name, safety_score, quarter) VALUES ('ModelA', 88, 'Q3 2020'), ('ModelB', 92, 'Q2 2020'), ('ModelC', 75, 'Q3 2021'), ('ModelD', 95, 'Q4 2020'), ('ModelE', 84, 'Q4 2021');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(safety_score) FROM ai_safety WHERE quarter IN ('Q4 2020', 'Q4 2021');"
    },
    {
        "instruction": "입력 텍스트: Director1'이 감독한 영화들의 총 상영 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(255), runtime INT, genre VARCHAR(50), release_year INT, director_id INT); INSERT INTO movies (id, title, runtime, genre, release_year, director_id) VALUES (1, 'Movie1', 120, 'Horror', 2015, 1), (2, 'Movie2', 150, 'Action', 2018, 2), (3, 'Movie3', 90, 'Comedy', 2012, 3), (4, 'Movie4', 105, 'Drama', 2010, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(runtime) FROM movies WHERE director_id = (SELECT id FROM directors WHERE name = 'Director1');"
    },
    {
        "instruction": "입력 텍스트: building_data' 테이블에서 2021년에 건설된 주거용 건물의 총 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE building_data (building_id INT, building_type VARCHAR(255), square_footage INT, construction_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: select sum(square_footage) as total_square_footage from building_data where building_type = 'residential' and construction_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 오세아니아에서 문화 보존에 참여하는 커뮤니티 리더는 누구인가요?\n\nDDL statements:\nCREATE TABLE community_leaders (id INT, name TEXT, role TEXT, site TEXT, region TEXT); INSERT INTO community_leaders (id, name, role, site, region) VALUES (1, 'Rosanna Raymond', 'Artist', 'Auckland', 'Oceania');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM community_leaders WHERE region = 'Oceania';"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 현재 인력과 그들의 문화적 역량 점수를 기반으로 건강 형평성 지표를 충족시키기 위해 필요한 커뮤니티 보건 근로자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE HealthEquityMetrics (ID INT, State VARCHAR(50), RequiredWorkforce INT); CREATE TABLE CommunityHealthWorkers (ID INT, State VARCHAR(50), CulturalCompetencyScore INT); INSERT INTO HealthEquityMetrics (ID, State, RequiredWorkforce) VALUES (1, 'California', 1000); INSERT INTO CommunityHealthWorkers (ID, State, CulturalCompetencyScore) VALUES (1, 'California', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT HEM.State, (HEM.RequiredWorkforce / CHW.CulturalCompetencyScore) as NeededWorkforce FROM HealthEquityMetrics AS HEM INNER JOIN CommunityHealthWorkers AS CHW ON HEM.State = CHW.State;"
    },
    {
        "instruction": "입력 텍스트: 상위 3명의 기부자가 기부한 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(100), country VARCHAR(50), donation DECIMAL(10,2)); INSERT INTO donors (id, name, country, donation) VALUES (1, 'John Doe', 'USA', 500.00), (2, 'Jane Smith', 'USA', 1000.00), (3, 'Alice Johnson', 'Canada', 750.00), (4, 'Bob Brown', 'Africa', 250.00), (5, 'Charlie Green', 'Africa', 1000.00), (6, 'Oliver White', 'England', 300.00), (7, 'Sophia Black', 'France', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation) FROM (SELECT donation FROM donors ORDER BY donation DESC LIMIT 3) subquery;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 뭄바이 시에서 5G로 업그레이드한 모바일 구독자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE subscribers (subscriber_id INT, subscriber_type VARCHAR(50), subscriber_city VARCHAR(50), upgrade_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(subscriber_id) FROM subscribers WHERE subscriber_type = 'Mobile' AND subscriber_city = 'Mumbai' AND upgrade_date >= CURDATE() - INTERVAL 1 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 각 투자자별로 지난 5년간 재생 에너지 사업에 대한 총 투자액(달러 기준)을 표시하세요.\n\nDDL statements:\nCREATE TABLE renewable_energy_investments (id INT, investor VARCHAR(100), initiative VARCHAR(100), investment_usd FLOAT, investment_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT investment_year, investor, SUM(investment_usd) as total_investment FROM renewable_energy_investments WHERE investment_year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY investment_year, investor;"
    },
    {
        "instruction": "입력 텍스트: \"disease_prevalence\" 테이블에 'Rural County A' 지역의 '심장 질환' 진단과 10%의 유병률을 가진 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE disease_prevalence (county VARCHAR(50), diagnosis VARCHAR(50), prevalence DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO disease_prevalence (county, diagnosis, prevalence) VALUES ('Rural County A', 'Heart Disease', 0.10);"
    },
    {
        "instruction": "입력 텍스트: 교육대학의 교수진에게 지난 3년간 수여된 총 연구비 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists FACULTY(id INT, name TEXT, department TEXT, position TEXT, salary INT);CREATE TABLE if not exists GRANTS(id INT, faculty_id INT, grant_name TEXT, grant_amount INT, grant_date DATE, college TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(grant_amount) FROM GRANTS WHERE college = 'College of Education' AND grant_date >= DATE('now','-3 year');"
    },
    {
        "instruction": "입력 텍스트: 각 조직에서 개발한 안전하지 않은 모델의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE models_safety (model_id INT, org_id INT, is_safe BOOLEAN); INSERT INTO models_safety (model_id, org_id, is_safe) VALUES (101, 1, true), (102, 1, false), (103, 2, true), (104, 2, true), (105, 3, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT org_id, SUM(CASE WHEN is_safe THEN 0 ELSE 1 END) as unsafe_models FROM models_safety GROUP BY org_id;"
    },
    {
        "instruction": "입력 텍스트: 2021년의 탄소 흡수량을 800으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE carbon_sequestration (id INT, year INT, amount FLOAT); INSERT INTO carbon_sequestration (id, year, amount) VALUES (1, 2020, 500.3), (2, 2021, 700.5), (3, 2022, 800.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE carbon_sequestration SET amount = 800 WHERE year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 런던, 파리, 뉴욕에서 이루어진 대중교통 여행 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Trips (Quarter INT, City TEXT, Trips INT); INSERT INTO Trips (Quarter, City, Trips) VALUES (1, 'London', 1500000), (1, 'Paris', 1200000), (1, 'New York', 2000000), (2, 'London', 1600000), (2, 'Paris', 1300000), (2, 'New York', 2200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Trips) as TotalTrips, City FROM Trips WHERE Quarter = 1 GROUP BY City;"
    },
    {
        "instruction": "입력 텍스트: 월별로 접수되고 해결된 정신 건강 동등성 불만 사항의 총 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE MentalHealthParity (ComplaintID INT, FilingDate DATE, ResolutionDate DATE); INSERT INTO MentalHealthParity (ComplaintID, FilingDate, ResolutionDate) VALUES (1, '2021-01-05', '2021-02-10'), (2, '2021-03-12', '2021-04-15'), (3, '2021-06-20', '2021-07-25'), (4, '2021-09-01', '2021-10-05'), (5, '2021-12-27', '2022-01-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(FilingDate, '%Y-%m') as FilingMonth, COUNT(*) as FiledCount, DATE_FORMAT(ResolutionDate, '%Y-%m') as ResolutionMonth, COUNT(*) as ResolvedCount FROM MentalHealthParity GROUP BY FilingMonth, ResolutionMonth;"
    },
    {
        "instruction": "입력 텍스트: 남부 지역의 댐 프로젝트 최대 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE InfrastructureProjects (id INT, name VARCHAR(100), region VARCHAR(50), project_type VARCHAR(50), cost FLOAT); INSERT INTO InfrastructureProjects (id, name, region, project_type, cost) VALUES (1, 'Miami Dam', 'Southern', 'dam', 60000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(cost) FROM InfrastructureProjects WHERE region = 'Southern' AND project_type = 'dam';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 발사한 위성의 가장 이른 발사 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE SatelliteData (SatelliteID INT, Country VARCHAR(50), LaunchDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SatelliteData.Country, MIN(SatelliteData.LaunchDate) as EarliestLaunchDate FROM SatelliteData GROUP BY SatelliteData.Country;"
    },
    {
        "instruction": "입력 텍스트: pH 수준이 7.2와 7.5 사이인 농장의 평균 수온은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Farm (FarmID int, FarmName varchar(50), WaterTemperature numeric, pH numeric); INSERT INTO Farm (FarmID, FarmName, WaterTemperature, pH) VALUES (1, 'Farm A', 15, 7.3); INSERT INTO Farm (FarmID, FarmName, WaterTemperature, pH) VALUES (2, 'Farm B', 18, 7.8); INSERT INTO Farm (FarmID, FarmName, WaterTemperature, pH) VALUES (3, 'Farm C', 14, 7.1); INSERT INTO Farm (FarmID, FarmName, WaterTemperature, pH) VALUES (4, 'Farm D', 20, 6.9); INSERT INTO Farm (FarmID, FarmName, WaterTemperature, pH) VALUES (5, 'Farm E', 12, 7.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(WaterTemperature) FROM Farm WHERE pH BETWEEN 7.2 AND 7.5;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 여성 기부자들이 기부한 금액의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donations_gender_us (donation_id INT, donor_id INT, amount DECIMAL(10,2), donor_gender VARCHAR(10), country VARCHAR(255)); INSERT INTO donations_gender_us (donation_id, donor_id, amount, donor_gender, country) VALUES (18, 1005, 600.00, 'Female', 'United States'), (19, 1006, 250.00, 'Male', 'United States'), (20, 1007, 700.00, 'Female', 'United States');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.00 * SUM(CASE WHEN donor_gender = 'Female' THEN amount ELSE 0 END) / SUM(amount) as female_percentage FROM donations_gender_us WHERE country = 'United States';"
    },
    {
        "instruction": "입력 텍스트: 오션릭 라인즈 소속으로 2010년 이전에 건조된 선박은 몇 척입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name VARCHAR(50), company VARCHAR(50), build_year INT); INSERT INTO vessels (id, name, company, build_year) VALUES (1, 'MV Orion', 'Oceanic Lines', 2005), (2, 'MV Pegasus', 'Oceanic Lines', 2012), (3, 'MV Neptune', 'Oceanic Lines', 2008);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vessels WHERE company = 'Oceanic Lines' AND build_year < 2010;"
    },
    {
        "instruction": "입력 텍스트: 재생 가능 에너지 분야에 대한 고객들의 총 투자액을 나열하시오.\n\nDDL statements:\nCREATE TABLE sectors (sector_id INT, sector VARCHAR(20)); INSERT INTO sectors (sector_id, sector) VALUES (1, 'Renewable Energy'), (2, 'Oil & Gas'), (3, 'Technology'); CREATE TABLE investments (investment_id INT, client_id INT, sector_id INT); INSERT INTO investments (investment_id, client_id, sector_id) VALUES (1, 1, 1), (2, 1, 2), (3, 2, 1), (4, 2, 3), (5, 3, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT clients.client_id, SUM(value) AS total_investment FROM clients JOIN assets ON clients.client_id = assets.client_id JOIN investments ON clients.client_id = investments.client_id JOIN sectors ON investments.sector_id = sectors.sector_id WHERE sectors.sector = 'Renewable Energy' GROUP BY clients.client_id;"
    },
    {
        "instruction": "입력 텍스트: 총 판매 수량이 가장 높은 상위 5개 매장의 판매 수량을 표시합니다.\n\nDDL statements:\nCREATE TABLE stores (store_id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), opened_date DATE); CREATE TABLE sales (sale_id INT PRIMARY KEY, store_id INT, quantity INT, sale_date DATE, FOREIGN KEY (store_id) REFERENCES stores(store_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT stores.name, SUM(sales.quantity) AS total_sales FROM stores JOIN sales ON stores.store_id = sales.store_id GROUP BY stores.name ORDER BY total_sales DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 안전 사고가 발생한 비행의 최대 비행 시간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE flight_safety ( id INT, flight_number VARCHAR(255), duration INT, incidents BOOLEAN );\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(duration) FROM flight_safety WHERE incidents = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 커뮤니티 개발 프로젝트의 평균 비용을 계산하고 오름차순으로 순위를 매기세요.\n\nDDL statements:\nCREATE TABLE community_development_projects (id INT, project_name VARCHAR(255), location VARCHAR(255), sector VARCHAR(255), cost FLOAT); INSERT INTO community_development_projects (id, project_name, location, sector, cost) VALUES (1, 'Community Center', 'Village A', 'Community', 18000.00), (2, 'Community Health Center', 'Village B', 'Community', 35000.00), (3, 'Sports Facility', 'Village C', 'Community', 12000.00), (4, 'Public Library', 'Village D', 'Community', 24000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, AVG(cost) AS avg_cost, RANK() OVER (ORDER BY AVG(cost)) AS location_rank FROM community_development_projects GROUP BY location ORDER BY avg_cost ASC;"
    },
    {
        "instruction": "입력 텍스트: VR 게임을 하는 플레이어들의 평균 나이를 찾으세요.\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, GamePreference VARCHAR(20)); INSERT INTO Players (PlayerID, Age, GamePreference) VALUES (1, 25, 'VR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Players WHERE GamePreference = 'VR';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 문화적 역량을 갖춘 지역 보건 요원은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE CulturalCompetency (CHW_ID INT, Region VARCHAR(50), Competency_Level VARCHAR(50)); INSERT INTO CulturalCompetency (CHW_ID, Region, Competency_Level) VALUES (1, 'North', 'Expert'), (2, 'South', 'Intermediate'), (3, 'East', 'Expert'), (4, 'West', 'Beginner');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.Region, COUNT(*) as Competent_CHWs FROM CulturalCompetency c WHERE Competency_Level = 'Expert' GROUP BY c.Region;"
    },
    {
        "instruction": "입력 텍스트: orders' 테이블에 있는 주문들 중 'sustainable_warehouses' 테이블에서 발송된 주문들의 평균 배송 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE orders (order_id INT, warehouse_id INT, delivery_time INT);CREATE TABLE sustainable_warehouses (warehouse_id INT, name VARCHAR(255), location VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(delivery_time) FROM orders o JOIN sustainable_warehouses sw ON o.warehouse_id = sw.warehouse_id;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이전에 설립된 회사들의 diversity_metrics 테이블 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, founding_year INT); INSERT INTO company (id, name, founding_year) VALUES (1, 'FutureEnergy', 2014), (2, 'SmartCities', 2017), (3, 'GreenChem', 2012); CREATE TABLE diversity_metrics (id INT, company_id INT, diversity_score DECIMAL); INSERT INTO diversity_metrics (id, company_id, diversity_score) VALUES (1, 1, 0.7), (2, 2, 0.8), (3, 3, 0.6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH cte_company AS (DELETE FROM company WHERE founding_year < 2015 RETURNING id) DELETE FROM diversity_metrics WHERE company_id IN (SELECT id FROM cte_company);"
    },
    {
        "instruction": "입력 텍스트: 2020년에 고용된 남성 직원들의 부서별 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE employees (id INT, gender VARCHAR(10), salary FLOAT, department VARCHAR(20), hire_date DATE); INSERT INTO employees (id, gender, salary, department, hire_date) VALUES (1, 'Male', 60000, 'Marketing', '2020-01-01'); INSERT INTO employees (id, gender, salary, department, hire_date) VALUES (2, 'Female', 65000, 'Marketing', '2019-01-01'); INSERT INTO employees (id, gender, salary, department, hire_date) VALUES (3, 'Male', 70000, 'IT', '2020-01-01'); INSERT INTO employees (id, gender, salary, department, hire_date) VALUES (4, 'Female', 75000, 'IT', '2019-01-01'); INSERT INTO employees (id, gender, salary, department, hire_date) VALUES (5, 'Male', 80000, 'HR', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, AVG(salary) as avg_salary FROM employees WHERE gender = 'Male' AND YEAR(hire_date) = 2020 GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 럭셔리 부문에서 마스카라의 평균 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Cosmetics (product_id INT, name VARCHAR(50), price DECIMAL(5,2), is_luxury BOOLEAN, type VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM Cosmetics WHERE type = 'Mascara' AND is_luxury = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 시 각 지역의 의료 시설 평균 대기 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE medical_facilities_nyc (neighborhood VARCHAR(20), wait_time INT); INSERT INTO medical_facilities_nyc (neighborhood, wait_time) VALUES ('Manhattan', 30), ('Brooklyn', 45), ('Queens', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT neighborhood, AVG(wait_time) avg_wait_time FROM medical_facilities_nyc GROUP BY neighborhood;"
    },
    {
        "instruction": "입력 텍스트: 나이지리아 출신으로 50경기 이상 뛴 선수들 중 최고령은 몇 살인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Age INT, Country VARCHAR(50), GamesPlayed INT); INSERT INTO Players (PlayerID, PlayerName, Age, Country, GamesPlayed) VALUES (1, 'John Doe', 25, 'USA', 100); INSERT INTO Players (PlayerID, PlayerName, Age, Country, GamesPlayed) VALUES (2, 'Jane Smith', 30, 'Canada', 200); INSERT INTO Players (PlayerID, PlayerName, Age, Country, GamesPlayed) VALUES (3, 'Ndidi Mbachu', 24, 'Nigeria', 75); INSERT INTO Players (PlayerID, PlayerName, Age, Country, GamesPlayed) VALUES (4, 'Ijeoma Udo', 28, 'Nigeria', 150);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Age) FROM Players WHERE Country = 'Nigeria' AND GamesPlayed > 50;"
    },
    {
        "instruction": "입력 텍스트: \"taxi_occupancy\" 테이블에서 시간당 자율 주행 택시의 평균 탑승률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE taxi_occupancy (id INT, timestamp TIMESTAMP, vehicle_type VARCHAR(255), is_autonomous BOOLEAN, occupancy INT); INSERT INTO taxi_occupancy (id, timestamp, vehicle_type, is_autonomous, occupancy) VALUES (1, '2022-01-01 12:00:00', 'Taxi', true, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT HOUR(timestamp), AVG(occupancy) FROM taxi_occupancy WHERE vehicle_type = 'Taxi' AND is_autonomous = true GROUP BY HOUR(timestamp);"
    },
    {
        "instruction": "입력 텍스트: Jamie Miller' 기부자에 대한 새로운 기록을 '정신 건강'이라는 목적으로 7000달러를 기부한 것으로 입력하세요.\n\nDDL statements:\nCREATE TABLE causes_insert_2 (cause_id INT, cause_name VARCHAR(255)); INSERT INTO causes_insert_2 (cause_id, cause_name) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'), (4, 'Human Rights'), (5, 'Mental Health'); CREATE TABLE donations_insert_2 (donor_id INT, donor_name VARCHAR(255), cause_id INT, donation_amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO donations_insert_2 (donor_id, donor_name, cause_id, donation_amount) VALUES (8, 'Jamie Miller', (SELECT cause_id FROM causes_insert_2 WHERE cause_name = 'Mental Health'), 7000);"
    },
    {
        "instruction": "입력 텍스트: forestry_practices 테이블에서 'Sustainable Harvesting'에 대한 지역을 'Africa'로 설정하세요.\n\nDDL statements:\nCREATE TABLE forestry_practices (id INT PRIMARY KEY, practice TEXT, region TEXT); INSERT INTO forestry_practices (id, practice, region) VALUES (1, 'Sustainable Harvesting', 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE forestry_practices SET region = 'Africa' WHERE practice = 'Sustainable Harvesting';"
    },
    {
        "instruction": "입력 텍스트: 미국 내 AI 기술을 도입한 호텔 수가 가장 많은 상위 5개 도시를 나열하세요.\n\nDDL statements:\nCREATE TABLE hotel_tech_adoptions (id INT, hotel_id INT, tech_type TEXT, installed_date DATE); CREATE TABLE hotels (id INT, name TEXT, city TEXT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.city, COUNT(hta.hotel_id) as num_adoptions FROM hotels h INNER JOIN hotel_tech_adoptions hta ON h.id = hta.hotel_id WHERE h.country = 'USA' GROUP BY h.city ORDER BY num_adoptions DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 어떤 유럽 국가들이 자율 주행 차량보다 전기 자동차의 시장 점유율이 더 높은가요?\n\nDDL statements:\nCREATE TABLE if not exists EuroAvEv(country CHAR(10), av_market_share FLOAT, ev_market_share FLOAT); INSERT INTO EuroAvEv(country, av_market_share, ev_market_share) VALUES ('France', 0.10, 0.15), ('France', 0.10, 0.16), ('France', 0.11, 0.15), ('France', 0.11, 0.16), ('Italy', 0.08, 0.19), ('Italy', 0.08, 0.20), ('Italy', 0.09, 0.19), ('Italy', 0.09, 0.20), ('Spain', 0.12, 0.13), ('Spain', 0.12, 0.14), ('Spain', 0.13, 0.13), ('Spain', 0.13, 0.14);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM EuroAvEv WHERE ev_market_share > av_market_share AND country IN ('France', 'Italy', 'Spain');"
    },
    {
        "instruction": "입력 텍스트: 레스토랑 K의 비건이 아닌 모든 메뉴 항목을 삭제하세요.\n\nDDL statements:\nCREATE TABLE menu (restaurant_id INT, item_name TEXT, item_type TEXT, diet TEXT); INSERT INTO menu (restaurant_id, item_name, item_type, diet) VALUES (1, 'Spaghetti', 'Entree', 'Vegetarian'), (1, 'Quinoa Salad', 'Entree', 'Vegan'), (1, 'Garden Burger', 'Entree', 'Vegan'), (2, 'Tofu Stir Fry', 'Entree', 'Vegan'), (2, 'Vegetable Curry', 'Entree', 'Vegetarian'), (3, 'Eggplant Parmesan', 'Entree', 'Vegetarian'), (3, 'Vegetable Lasagna', 'Entree', 'Vegetarian'), (3, 'Lentil Soup', 'Entree', 'Vegan'), (4, 'Chickpea Salad', 'Entree', 'Vegan'), (4, 'Mushroom Risotto', 'Entree', 'Vegetarian'), (4, 'Spinach Stuffed Shells', 'Entree', 'Vegetarian'), (5, 'Beef Stew', 'Entree', 'Carnivore'), (5, 'Chicken Parmesan', 'Entree', 'Carnivore'), (5, 'Fish Tacos', 'Entree', 'Seafood'), (6, 'Veggie Burger', 'Entree', 'Vegan'), (6, 'Cheese Pizza', 'Entree', 'Vegetarian'), (6, 'Garden Salad', 'Entree', 'Vegan'), (7, 'Pork Chops', 'Entree', 'Carnivore'), (7, 'Shrimp Scampi', 'Entree', 'Seafood'), (7, 'Grilled Chicken', 'Entree', 'Carnivore');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM menu WHERE restaurant_id = 9 AND diet NOT IN ('Vegan');"
    },
    {
        "instruction": "입력 텍스트: calibration_data2' 테이블에 'algorithm' = 'Random Forest', 'precision' = 0.85, 'recall' = 0.82인 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE calibration_data2 (id INT, algorithm VARCHAR(20), precision DECIMAL(3,2), recall DECIMAL(3,2)); INSERT INTO calibration_data2 (id, algorithm, precision, recall) VALUES (1, 'Random Forest', 0.85, 0.82);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO calibration_data2 (algorithm, precision, recall) VALUES ('Random Forest', 0.85, 0.82);"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 조달된 친환경 재료의 평균 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE sourcing (id INT, region TEXT, quantity INT); INSERT INTO sourcing (id, region, quantity) VALUES (1, 'Asia', 1200), (2, 'Europe', 800), (3, 'Africa', 700), (4, 'South America', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(quantity) FROM sourcing WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 윤리적인 공급업체의 비율을 계산하세요?\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, supplier_name TEXT, country TEXT, labor_practice TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, (COUNT(CASE WHEN labor_practice = 'Ethical' THEN 1 END) / COUNT(*)) * 100 AS percentage FROM suppliers GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: athlete_wellbeing' 테이블에서 'wellbeing_score'가 50 미만인 레코드를 삭제하세요\n\nDDL statements:\nCREATE TABLE athlete_wellbeing (athlete_id INT, wellbeing_score INT); INSERT INTO athlete_wellbeing (athlete_id, wellbeing_score) VALUES (1, 75), (2, 60), (3, 45), (4, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM athlete_wellbeing WHERE wellbeing_score < 50;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 의료 종사자가 없는 병원과 클리닉을 포함하여 총 몇 개의 병원과 클리닉이 있습니까?\n\nDDL statements:\nCREATE TABLE healthcare_facilities (id INT, name TEXT, state TEXT, workers INT); INSERT INTO healthcare_facilities (id, name, state, workers) VALUES (1, 'Hospital A', 'NY', 50), (2, 'Hospital B', 'NY', 75), (3, 'Clinic C', 'NY', NULL), (4, 'Hospital D', 'CA', 60), (5, 'Clinic E', 'CA', NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM healthcare_facilities GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 라틴계 창업자가 설립한 회사들의 펀딩 라운드별 최대 및 최소 투자자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, founder_race TEXT); CREATE TABLE funding_rounds (id INT, company_id INT, investors INT, size INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(funding_rounds.investors), MIN(funding_rounds.investors) FROM companies INNER JOIN funding_rounds ON companies.id = funding_rounds.company_id WHERE companies.founder_race = 'Latinx';"
    },
    {
        "instruction": "입력 텍스트: 동물 실험을 하지 않는 제품 중에서 평점이 4.5 이상인 제품에 사용된 고유한 성분의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE ingredient (product_id INT, ingredient TEXT, origin TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ingredient) FROM ingredient INNER JOIN product ON ingredient.product_id = product.id WHERE cruelty_free = TRUE AND rating > 4.5;"
    },
    {
        "instruction": "입력 텍스트: 카리브해 지역의 사회 영향 투자 채권에 대한 총 투자액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE social_impact_bonds (id INT, region VARCHAR(50), investment FLOAT); INSERT INTO social_impact_bonds (id, region, investment) VALUES (1, 'Caribbean', 250000); INSERT INTO social_impact_bonds (id, region, investment) VALUES (2, 'Caribbean', 300000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment) FROM social_impact_bonds WHERE region = 'Caribbean';"
    },
    {
        "instruction": "입력 텍스트: 영향 점수가 60보다 큰 모든 화학 물질의 이름과 안전 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE chemical_safety (chemical VARCHAR(30), safety_rating INT); INSERT INTO chemical_safety (chemical, safety_rating) VALUES ('Ethanol', 8), ('Propanol', 6), ('Butanol', 5); CREATE TABLE environmental_impact (chemical VARCHAR(30), impact_score INT); INSERT INTO environmental_impact (chemical, impact_score) VALUES ('Ethanol', 40), ('Propanol', 50), ('Butanol', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cs.chemical, cs.safety_rating FROM chemical_safety cs JOIN environmental_impact ei ON cs.chemical = ei.chemical WHERE ei.impact_score > 60;"
    },
    {
        "instruction": "입력 텍스트: 지난해 각 주에서 복원적 사법 사건 처리에 걸린 시간의 중앙값은 얼마였나요?\n\nDDL statements:\nCREATE TABLE restorative_justice_3 (case_id INT, state VARCHAR(20), year INT, time_taken INT); INSERT INTO restorative_justice_3 (case_id, state, year, time_taken) VALUES (1, 'California', 2021, 30), (2, 'California', 2021, 45), (3, 'Texas', 2021, 50), (4, 'Texas', 2021, 60), (5, 'New York', 2021, 40), (6, 'New York', 2021, 55), (7, 'Florida', 2021, 50), (8, 'Florida', 2021, 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MEDIAN(time_taken) as med_time FROM restorative_justice_3 WHERE year = 2021 GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 보안 사고에 연루된 고유 사용자 계정 수를 확인하세요\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, user_account VARCHAR(50), incident_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT user_account) as num_unique_accounts FROM security_incidents WHERE incident_date >= DATEADD(week, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 아프리카' 지역의 프로젝트별 탄소 상쇄량을 보여주세요.\n\nDDL statements:\nCREATE TABLE carbon_offset_projects (id INT, project_name VARCHAR(100), region VARCHAR(50), carbon_offset FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, carbon_offset FROM carbon_offset_projects WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 베를린 S-Bahn 네트워크에서 유지 보수가 필요한 기차의 수는 몇 대입니까?\n\nDDL statements:\nCREATE TABLE train_maintenance (train_id INT, network VARCHAR(50), needs_maintenance BOOLEAN); INSERT INTO train_maintenance (train_id, network, needs_maintenance) VALUES (1, 'S-Bahn', true), (2, 'S-Bahn', false), (3, 'U-Bahn', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM train_maintenance WHERE network = 'S-Bahn' AND needs_maintenance = true;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 새로운 기부자들이 한 기부 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Donor (DonorID INT, FirstDonationDate DATE); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as NumDonations FROM Donations INNER JOIN Donor ON Donations.DonorID = Donor.DonorID WHERE Donor.FirstDonationDate >= DATEADD(month, -1, CURRENT_TIMESTAMP);"
    },
    {
        "instruction": "입력 텍스트: 목성 주변 궤도에 현재 있는 모든 우주선에 탑재된 과학 기기의 총 개수와 그 우주선의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE jupiter_spacecraft(id INT, spacecraft_name VARCHAR(255), in_orbit BOOLEAN, number_of_instruments INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT spacecraft_name, number_of_instruments FROM jupiter_spacecraft WHERE in_orbit = TRUE; SELECT SUM(number_of_instruments) FROM jupiter_spacecraft WHERE in_orbit = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 시작된 방위 프로젝트가 지정학적 지역별로 몇 개인지?\n\nDDL statements:\nCREATE TABLE Defense_Projects(id INT, project_name VARCHAR(255), start_year INT, end_year INT, geopolitical_region VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT geopolitical_region, COUNT(*) as Number_Of_Projects FROM Defense_Projects WHERE start_year = 2019 GROUP BY geopolitical_region;"
    },
    {
        "instruction": "입력 텍스트: 각 창고에 보관된 팔레트의 수와 그 팔레트들의 총 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Pallets (id INT, warehouse_id INT, quantity INT, value FLOAT); INSERT INTO Pallets (id, warehouse_id, quantity, value) VALUES (1, 1, 1000, 50000), (2, 1, 500, 25000), (3, 2, 700, 35000), (4, 2, 800, 40000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w.name, SUM(p.quantity), SUM(p.value) FROM Pallets p JOIN Warehouses w ON p.warehouse_id = w.id GROUP BY w.id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 1분기 대중교통에 대한 시민 만족도 평균 점수는 얼마였나요?\n\nDDL statements:\nCREATE TABLE Satisfaction(Quarter VARCHAR(10), Category VARCHAR(20), Score INT); INSERT INTO Satisfaction VALUES ('Q1 2018', 'Public Transportation', 70), ('Q1 2018', 'Education', 80), ('Q1 2019', 'Public Transportation', 72), ('Q1 2019', 'Education', 82), ('Q1 2020', 'Public Transportation', 75), ('Q1 2020', 'Education', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Score) FROM Satisfaction WHERE Quarter = 'Q1 2020' AND Category = 'Public Transportation';"
    },
    {
        "instruction": "입력 텍스트: 친환경 커뮤니티와 일반 커뮤니티의 평균 부동산 가격 차이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE property_community ( id INT PRIMARY KEY, price FLOAT, community_type VARCHAR(255) ); INSERT INTO property_community (id, price, community_type) VALUES (1, 600000, 'eco-friendly'), (2, 400000, 'standard'), (3, 550000, 'eco-friendly');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price_eco) - AVG(price_standard) FROM (SELECT price FROM property_community WHERE community_type = 'eco-friendly') AS price_eco JOIN (SELECT price FROM property_community WHERE community_type = 'standard') AS price_standard ON 1=1;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 시작된 '헬스케어' 분야의 모든 프로젝트의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sector (id INT, name VARCHAR(255)); CREATE TABLE project (id INT, sector_id INT, budget DECIMAL(10, 2), start_date DATE); INSERT INTO sector (id, name) VALUES (1, 'healthcare'), (2, 'housing'); INSERT INTO project (id, sector_id, budget, start_date) VALUES (1, 1, 5000, '2021-01-01'), (2, 2, 7000, '2022-01-01'), (3, 2, 3000, '2021-06-01'), (4, 1, 10000, '2022-03-01'), (5, 1, 8000, '2022-06-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sector_id, AVG(budget) as avg_budget FROM project WHERE sector_id = (SELECT id FROM sector WHERE name = 'healthcare') AND YEAR(start_date) = 2022 GROUP BY sector_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 4분기에 싱가포르 항구를 방문한 선박들과 그들의 최소 화물 중량을 확인하세요.\n\nDDL statements:\nCREATE TABLE vessels (vessel_id INT, vessel_name TEXT, max_cargo_weight INT); INSERT INTO vessels VALUES (1, 'Vessel A', 15000), (2, 'Vessel B', 20000), (4, 'Vessel D', 10000); CREATE TABLE port_visits (visit_id INT, vessel_id INT, port_id INT, visit_date DATE); INSERT INTO port_visits VALUES (1, 1, 9, '2020-10-15'), (2, 2, 9, '2020-11-15'), (3, 4, 9, '2020-12-15'); CREATE TABLE ports (port_id INT, port_name TEXT, country TEXT); INSERT INTO ports VALUES (9, 'Port of Singapore', 'Singapore');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessels.vessel_name, MIN(vessels.max_cargo_weight) FROM vessels JOIN port_visits ON vessels.vessel_id = port_visits.vessel_id JOIN ports ON port_visits.port_id = ports.port_id WHERE ports.port_name = 'Port of Singapore' AND YEAR(port_visits.visit_date) = 2020 AND QUARTER(port_visits.visit_date) = 4 GROUP BY vessels.vessel_id;"
    },
    {
        "instruction": "입력 텍스트: 방위 사업 프로젝트 중에서 총 장비 판매 가격이 가장 높은 프로젝트와 그들의 총 판매 가격은 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS defense_projects_sales;CREATE TABLE IF NOT EXISTS defense_projects_sales (project_id INT, project_name VARCHAR(255), sale_price DECIMAL(10, 2), sale_date DATE);INSERT INTO defense_projects_sales (project_id, project_name, sale_price, sale_date) VALUES (1, 'Project_A', 2500000, '2021-01-01'), (2, 'Project_B', 3000000, '2021-02-01'), (3, 'Project_C', 1500000, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, SUM(sale_price) AS total_sale_price FROM defense_projects_sales GROUP BY project_name ORDER BY total_sale_price DESC;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 정신 건강 시설의 최소 문화 역량 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mental_health_facilities (id INT, name VARCHAR, state VARCHAR, cultural_competency_score INT); INSERT INTO mental_health_facilities (id, name, state, cultural_competency_score) VALUES (1, 'Facility One', 'New York', 85); INSERT INTO mental_health_facilities (id, name, state, cultural_competency_score) VALUES (2, 'Facility Two', 'New York', 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MIN(cultural_competency_score) as min_score FROM mental_health_facilities WHERE state = 'New York' GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: LGBTQ+ 커뮤니티 출신의 개인이 설립한 교통 분야 기업 중 2021년에 자금을 받은 기업의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founding_year INT, founder_identity TEXT); INSERT INTO companies (id, name, industry, founding_year, founder_identity) VALUES (1, 'TranspoLGBTQ', 'Transportation', 2016, 'LGBTQ+'); INSERT INTO companies (id, name, industry, founding_year, founder_identity) VALUES (2, 'Tech Innovate', 'Technology', 2018, 'Straight'); CREATE TABLE funding_records (company_id INT, funding_amount INT, funding_year INT); INSERT INTO funding_records (company_id, funding_amount, funding_year) VALUES (1, 10000000); INSERT INTO funding_records (company_id, funding_amount, funding_year) VALUES (2, 8000000, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies JOIN funding_records ON companies.id = funding_records.company_id WHERE companies.founder_identity = 'LGBTQ+' AND companies.industry = 'Transportation' AND funding_records.funding_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 도시 정신 건강 클리닉에서 근무하는 여성 치료사로부터 치료를 받은 환자들의 평균 나이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE mental_health_clinics (clinic_id INT, clinic_type VARCHAR(255), address VARCHAR(255)); CREATE TABLE therapists (therapist_id INT, name VARCHAR(255), age INT, gender VARCHAR(10), clinic_id INT); CREATE TABLE patients (patient_id INT, name VARCHAR(255), age INT, gender VARCHAR(10)); CREATE TABLE therapy_sessions (session_id INT, patient_id INT, therapist_id INT, session_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(patients.age) FROM patients JOIN therapy_sessions ON patients.patient_id = therapy_sessions.patient_id JOIN therapists ON therapy_sessions.therapist_id = therapists.therapist_id JOIN mental_health_clinics ON therapists.clinic_id = mental_health_clinics.clinic_id WHERE mental_health_clinics.clinic_type = 'urban' AND therapists.gender = 'female';"
    },
    {
        "instruction": "입력 텍스트: 가장 오래 지속된 상위 5개의 우주 임무는 무엇인가요?\n\nDDL statements:\nCREATE TABLE SpaceMissions (MissionID INT, Duration FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM (SELECT MissionID, Duration FROM SpaceMissions ORDER BY Duration DESC) subquery LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: customer' 테이블에 고객 ID가 123이고, 이름은 'Alex', 성은 'Smith', 이메일은 'alex.smith@example.com'인 새로운 행을 삽입하세요.\n\nDDL statements:\nCREATE TABLE customer (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO customer (customer_id, first_name, last_name, email) VALUES (123, 'Alex', 'Smith', 'alex.smith@example.com');"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 사회적 책임 점수가 70점을 초과하는 차용자에게 각 대출 기관이 발행한 총 대출 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE lenders (lender_id INT, lender_name VARCHAR(255));CREATE TABLE loans (loan_id INT, lender_id INT, issue_date DATE, loan_amount DECIMAL(10,2), borrower_social_responsibility_score INT);INSERT INTO lenders (lender_id, lender_name) VALUES (1, 'Lender A'), (2, 'Lender B'), (3, 'Lender C');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT l.lender_name, SUM(l.loan_amount) as total_loan_amount FROM loans l INNER JOIN lenders le ON l.lender_id = le.lender_id WHERE l.issue_date BETWEEN (CURRENT_DATE - INTERVAL '6 months') AND CURRENT_DATE AND l.borrower_social_responsibility_score > 70 GROUP BY l.lender_id;"
    },
    {
        "instruction": "입력 텍스트: investors' 테이블에 'New Biofund'라는 이름을 가진 새로운 레코드를 삽입하세요.\n\nDDL statements:\nCREATE TABLE investors (id INT PRIMARY KEY, name TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO investors (name) VALUES ('New Biofund');"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 각 국가가 완화 분야에 투자한 기후 금융의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE climate_finance (country VARCHAR(255), sector VARCHAR(255), investment_amount NUMERIC, quarter VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(investment_amount) FROM climate_finance WHERE sector = 'mitigation' AND quarter = 'Q3 2022' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 부서별 직원들의 최대 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Salary DECIMAL(10,2)); INSERT INTO Employees (EmployeeID, Department, Salary) VALUES (1, 'IT', 70000.00), (2, 'Marketing', 55000.00), (3, 'Marketing', 58000.00), (4, 'HR', 60000.00), (5, 'HR', 62000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, MAX(Salary) FROM Employees GROUP BY Department;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 공급원으로부터의 어류 주문 총 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE orders (id INT, customer_id INT, order_date DATE, supplier_id INT, weight INT); CREATE TABLE suppliers (id INT, name VARCHAR(255), country VARCHAR(255), is_sustainable BOOLEAN); INSERT INTO orders (id, customer_id, order_date, supplier_id, weight) VALUES (1, 1001, '2022-01-01', 1, 1000), (2, 1002, '2022-01-02', 3, 1500); INSERT INTO suppliers (id, name, country, is_sustainable) VALUES (1, 'Sea2Table', 'USA', true), (2, 'FishCo', 'Canada', false), (3, 'SustainableFish', 'USA', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(orders.weight) FROM orders INNER JOIN suppliers ON orders.supplier_id = suppliers.id WHERE suppliers.is_sustainable = true AND orders.order_date >= '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: youth_fan_participation 테이블의 이벤트에 참여한 10-19세, 20-29세, 30-39세 팬은 각각 몇 명입니까?\n\nDDL statements:\nCREATE TABLE youth_fan_participation (event_id INT, fan_age INT, num_fans INT); INSERT INTO youth_fan_participation (event_id, fan_age, num_fans) VALUES (1, 15, 1500), (1, 22, 2000), (2, 18, 1200), (2, 27, 1800), (3, 13, 2500), (3, 31, 1000), (4, 29, 1500), (4, 39, 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN fan_age BETWEEN 10 AND 19 THEN num_fans ELSE 0 END) AS num_10_19, SUM(CASE WHEN fan_age BETWEEN 20 AND 29 THEN num_fans ELSE 0 END) AS num_20_29, SUM(CASE WHEN fan_age BETWEEN 30 AND 39 THEN num_fans ELSE 0 END) AS num_30_39 FROM youth_fan_participation;"
    },
    {
        "instruction": "입력 텍스트: 배터리 범위가 가장 넓은 상위 3개의 전기차 모델은 무엇인가요?\n\nDDL statements:\nCREATE TABLE ElectricVehicleAdoption (ID INT, Model VARCHAR(255), Manufacturer VARCHAR(255), BatteryRange INT); INSERT INTO ElectricVehicleAdoption (ID, Model, Manufacturer, BatteryRange) VALUES (1, 'EcoCar', 'Green Motors', 300), (2, 'HyperHybrid', 'Blue Cars', 250), (3, 'SolarSedan', 'FutureAutomobiles', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Model, BatteryRange FROM ElectricVehicleAdoption ORDER BY BatteryRange DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 뉴욕과 보스턴에서 열린 축구 경기에 참석한 팬들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE fans (fan_id INT, age INT, city VARCHAR(20)); INSERT INTO fans (fan_id, age, city) VALUES (1, 25, 'New York'), (2, 30, 'Boston'); CREATE TABLE games (game_id INT, city VARCHAR(20), game_date DATE); INSERT INTO games (game_id, city, game_date) VALUES (1, 'New York', '2021-09-01'), (2, 'Boston', '2021-10-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(fans.age) FROM fans INNER JOIN games ON fans.city = games.city WHERE games.game_date >= DATEADD(year, -1, GETDATE()) AND (fans.city = 'New York' OR fans.city = 'Boston');"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리의 가격 중 75번째 백분위수 이상인 메뉴 항목을 확인하세요.\n\nDDL statements:\nCREATE TABLE Menu (MenuID INT, MenuItem VARCHAR(50), Category VARCHAR(50), Price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MenuItem, Category, Price FROM (SELECT MenuItem, Category, Price, NTILE(4) OVER (PARTITION BY Category ORDER BY Price DESC) AS PriceQuantile FROM Menu) AS Subquery WHERE PriceQuantile = 1;"
    },
    {
        "instruction": "입력 텍스트: healthcare' 분야 회사의 최소 ESG 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, sector VARCHAR(20), ESG_rating FLOAT)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(ESG_rating) FROM companies WHERE sector = 'healthcare'"
    },
    {
        "instruction": "입력 텍스트: 2019년에 프로젝트에 사용된 건설 노동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE labor_hours (labor_hour_id INT, project_id INT, city VARCHAR(20), hours INT, year INT); INSERT INTO labor_hours (labor_hour_id, project_id, city, hours, year) VALUES (1, 201, 'Dallas', 100, 2020), (2, 201, 'Dallas', 200, 2019), (3, 202, 'Houston', 150, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(hours) FROM labor_hours WHERE year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 미국 전체에서 총 몇 명의 참전 용사가 있습니까?\n\nDDL statements:\nCREATE TABLE veteran_stats (id INT, state VARCHAR(255), employed INT, unemployed INT); INSERT INTO veteran_stats (id, state, employed, unemployed) VALUES (1, 'California', 5000, 1000), (2, 'New York', 3000, 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(employed + unemployed) FROM veteran_stats;"
    },
    {
        "instruction": "입력 텍스트: 아프리카의 프로젝트에 할당된 기후 재정의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_finance (id INT, country VARCHAR(50), amount FLOAT); CREATE TABLE africa_projects (id INT, project_name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cf.amount) FROM climate_finance cf INNER JOIN africa_projects ap ON cf.id = ap.id WHERE cf.country = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 철도의 총 길이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE regional_railways (id INT, name VARCHAR(50), region VARCHAR(50), length FLOAT); INSERT INTO regional_railways VALUES (1, 'Eurostar', 'Europe', 876), (2, 'Shinkansen', 'Asia', 2764), (3, 'Amtrak', 'North America', 5077);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(length) FROM regional_railways GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 선박 안전 테이블에서 last_inspection_grade가 NULL인 레코드의 last_inspection_grade를 'C'로 설정하세요.\n\nDDL statements:\nCREATE TABLE vessel_safety (  vessel_name VARCHAR(255),  last_inspection_date DATE,  last_inspection_grade CHAR(1));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE vessel_safety  SET last_inspection_grade = 'C'  WHERE last_inspection_grade IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코에서 현재 운영 중인 자율주행 택시는 몇 대인가요?\n\nDDL statements:\nCREATE TABLE autonomous_taxis (taxi_id INT, taxi_model VARCHAR(50), in_service BOOLEAN, city VARCHAR(50)); INSERT INTO autonomous_taxis (taxi_id, taxi_model, in_service, city) VALUES (1, 'Tesla Model X', true, 'San Francisco');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM autonomous_taxis WHERE in_service = true AND city = 'San Francisco';"
    },
    {
        "instruction": "입력 텍스트: organic_meals 테이블에서 카테고리별 유기농 식사의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE organic_meals (meal_id INT, meal_name VARCHAR(50), category VARCHAR(20), calories INT); INSERT INTO organic_meals (meal_id, meal_name, category, calories) VALUES (1, 'Quinoa Salad', 'Vegan', 350), (2, 'Lentil Soup', 'Vegan', 280), (3, 'Chickpea Curry', 'Vegan', 420), (4, 'Tofu Stir Fry', 'Vegan', 380), (5, 'Grilled Chicken Salad', 'Chicken', 450), (6, 'Beef Tacos', 'Beef', 520);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, SUM(calories) FROM organic_meals GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 매출이 50000 미만인 레스토랑을 제외한 각 요리 종류별 총 매출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (id INT, name TEXT, cuisine TEXT, revenue INT); INSERT INTO Restaurants (id, name, cuisine, revenue) VALUES (1, 'Asian Fusion', 'Asian', 50000), (2, 'Bistro Bella Vita', 'Italian', 70000), (3, 'Taqueria Tsunami', 'Mexican', 45000), (4, 'Sushi Bar', 'Asian', 30000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, SUM(revenue) as total_revenue FROM Restaurants WHERE revenue >= 50000 GROUP BY cuisine;"
    },
    {
        "instruction": "입력 텍스트: \"survey_data\" 테이블에서 평균 급여가 가장 높은 상위 3개 주를 나열하세요.\n\nDDL statements:\nCREATE TABLE survey_data (id INT, state VARCHAR(2), salary DECIMAL(10,2)); INSERT INTO survey_data (id, state, salary) VALUES (1, 'CA', 60000.00), (2, 'WY', 75000.00), (3, 'NV', 80000.00), (4, 'CA', 65000.00), (5, 'WY', 80000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(salary) as avg_salary FROM survey_data GROUP BY state ORDER BY avg_salary DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 브라질 사용자의 일일 최대 게시물 수는 얼마였나요?\n\nDDL statements:\nCREATE SCHEMA postsdata; CREATE TABLE posts_per_day(post_date DATE, user_id INT, posts_per_day INT, country VARCHAR(255)); INSERT INTO postsdata.posts_per_day (post_date, user_id, posts_per_day, country) VALUES ('2022-01-01', 1, 5, 'Brazil'); INSERT INTO postsdata.posts_per_day (post_date, user_id, posts_per_day, country) VALUES ('2022-01-01', 2, 3, 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT post_date, MAX(posts_per_day) FROM postsdata.posts_per_day WHERE country = 'Brazil' GROUP BY post_date;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 출처로부터 수신된 실행 가능한 위협 인텔리전스 지표의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE threat_intelligence_data(id INT, source VARCHAR(50), indicator_type VARCHAR(50), indicator_value VARCHAR(50), actionable BOOLEAN, received_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT source, SUM(CASE WHEN actionable = true THEN 1 ELSE 0 END) as total_actionable_indicators FROM threat_intelligence_data WHERE received_date > DATE(NOW()) - INTERVAL 30 DAY GROUP BY source;"
    },
    {
        "instruction": "입력 텍스트: 컨테이너선 카테고리에 속한 선박은 몇 척입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), length FLOAT, year_built INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vessels WHERE type = 'Container Ship';"
    },
    {
        "instruction": "입력 텍스트: 알래스카 지역에서 암 진단을 받은 환자들의 평균 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, patient_name TEXT, age INT, diagnosis TEXT, state TEXT); INSERT INTO patients (patient_id, patient_name, age, diagnosis, state) VALUES (5, 'Alaskan Cancer Patient', 50, 'Cancer', 'Alaska');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM patients WHERE diagnosis = 'Cancer' AND state = 'Alaska';"
    },
    {
        "instruction": "입력 텍스트: 1백만 달러 이상 예산을 가진 모든 법안과 해당 부서 및 상태를 나열합니다.\n\nDDL statements:\nCREATE TABLE Bills (BillID INT, Department VARCHAR(50), Amount FLOAT); CREATE TABLE BillStatus (BillID INT, Status VARCHAR(50)); INSERT INTO Bills VALUES (1, 'Education', 2000000), (2, 'Health', 1500000), (3, 'Transportation', 500000); INSERT INTO BillStatus VALUES (1, 'Approved'), (2, 'Denied'), (3, 'Pending');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Bills.BillID, Bills.Department, Bills.Amount, BillStatus.Status FROM Bills INNER JOIN BillStatus ON Bills.BillID = BillStatus.BillID WHERE Bills.Amount > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 기후 적응에 중점을 둔 기관의 이름과 국가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE organizations (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), focus VARCHAR(20)); INSERT INTO organizations (id, name, country, focus) VALUES (1, 'Climate Action Fund', 'UK', 'Adaptation'); INSERT INTO organizations (id, name, country, focus) VALUES (2, 'Green Roofs Initiative', 'US', 'Adaptation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, country FROM organizations WHERE focus = 'Adaptation';"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 이니셔티브에 대한 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_id INT, initiative_type TEXT, amount_donated INT); INSERT INTO donations (id, donor_id, initiative_type, amount_donated) VALUES (1, 1, 'healthcare', 10000), (2, 1, 'healthcare', 15000), (3, 2, 'healthcare', 7500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount_donated) FROM donations WHERE initiative_type = 'healthcare';"
    },
    {
        "instruction": "입력 텍스트: 운동 기록 테이블에 회원 ID 102, 운동 종류 '요가', 운동 시간 60분, 소모 칼로리 300인 새로운 운동 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE workouts (member_id INT, workout_type VARCHAR(50), duration INT, calories_burned INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO workouts (member_id, workout_type, duration, calories_burned) VALUES (102, 'Yoga', 60, 300);"
    },
    {
        "instruction": "입력 텍스트: 멕시코 만에 있는 우물들의 평균 생산율을 계산하세요.\n\nDDL statements:\nCREATE TABLE wells (id INT, region VARCHAR(20), production_rate INT); INSERT INTO wells (id, region, production_rate) VALUES (1, 'North Sea', 500), (2, 'Gulf of Mexico', 1000), (3, 'Gulf of Mexico', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_rate) FROM wells WHERE region = 'Gulf of Mexico';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에서 회복적 사법 프로그램에 참여한 범죄자들의 최소 형량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE restorative_justice_sentences (sentence_id INT, program_id INT, sentence_length INT, state VARCHAR(2)); INSERT INTO restorative_justice_sentences (sentence_id, program_id, sentence_length, state) VALUES (1, 1001, 18, 'CA'), (2, 1002, 24, 'CA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(sentence_length) FROM restorative_justice_sentences WHERE state = 'CA';"
    },
    {
        "instruction": "입력 텍스트: 가장 인기 있는 전시회는 몇 번 방문되었나요?\n\nDDL statements:\nCREATE TABLE Exhibition_Visits (id INT, exhibition_id INT, visitor_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(visitor_count) FROM Exhibition_Visits;"
    },
    {
        "instruction": "입력 텍스트: \"축산\" 테이블에서 품종이 '앵거스'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE Livestock (id INT PRIMARY KEY, breed VARCHAR(255), age INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Livestock WHERE breed = 'Angus';"
    },
    {
        "instruction": "입력 텍스트: 일본에서 예약이 가장 많은 가상 투어는 무엇인가요?\n\nDDL statements:\nCREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, bookings INT); INSERT INTO virtual_tours (id, name, country, bookings) VALUES (1, 'Virtual Tokyo Tour', 'Japan', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, MAX(bookings) FROM virtual_tours WHERE country = 'Japan' GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 최대 속도가 20노트를 초과하는 선박들의 평균 속도를 계산하세요.\n\nDDL statements:\nCREATE TABLE Vessels (Id INT, Name VARCHAR(50), MaxSpeed FLOAT); INSERT INTO Vessels (Id, Name, MaxSpeed) VALUES (1, 'Vessel1', 25.5), (2, 'Vessel2', 18.3), (3, 'Vessel3', 22.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(MaxSpeed) FROM Vessels WHERE MaxSpeed > 20;"
    },
    {
        "instruction": "입력 텍스트: 모든 해양 트렌치의 총 부피를 구하시오.\n\nDDL statements:\nCREATE TABLE marine_trenches (name TEXT, location TEXT, max_depth INTEGER, avg_depth INTEGER);INSERT INTO marine_trenches (name, location, max_depth, avg_depth) VALUES ('Mariana Trench', 'Pacific Ocean', 10994, 5000), ('Southern Antiltic Trench', 'Southern Ocean', 7235, 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(pi() * (max_depth * avg_depth * avg_depth) / 3) FROM marine_trenches;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 지속 가능한 관광 이니셔티브로 혜택을 받은 지역 기업은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE sustainable_tourism(business_id INT, business_name VARCHAR(50), country VARCHAR(50), benefited BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sustainable_tourism WHERE country = 'India' AND benefited = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 성공적인 출구 전략(인수 또는 IPO)을 가진 스타트업의 총 펀딩 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE startup (id INT, name TEXT, exit_type TEXT, exit_date DATE); INSERT INTO startup (id, name, exit_type, exit_date) VALUES (1, 'Nauto', 'Acquisition', '2021-06-01'), (2, 'Uber', 'IPO', '2019-05-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding_amount) FROM startup JOIN investment ON startup.id = investment.startup_id WHERE startup.exit_type IN ('Acquisition', 'IPO') AND startup.exit_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 2020년에 프로그램에 참여한 자원봉사자들의 평균 나이와 그 시기에 참여한 자원봉사자의 총 인원 수를 자원봉사자의 성별로 구분하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, Name TEXT, Age INT, ProgramID INT, VolunteerDate DATE, Gender TEXT); INSERT INTO Volunteers VALUES (1, 'Nia White', 25, 1, '2020-07-01', 'Female'), (2, 'Jamal Brown', 30, 1, '2020-12-31', 'Male'), (3, 'Fatima Davis', 22, 2, '2020-08-01', 'Female'), (4, 'Kareem Johnson', 28, 2, '2020-11-01', 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Gender, AVG(Age) as AvgAge, COUNT(*) as NumVolunteers FROM Volunteers WHERE YEAR(VolunteerDate) = 2020 GROUP BY Gender;"
    },
    {
        "instruction": "입력 텍스트: 2021년 첫 분기에 생산된 XS 사이즈와 XXL 사이즈의 고유 의류 품목은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE ClothingItems (ItemID INT, ItemName TEXT, Size TEXT, ProductionDate DATE); INSERT INTO ClothingItems (ItemID, ItemName, Size, ProductionDate) VALUES (1, 'Organic Cotton T-Shirt', 'XS', '2021-01-05'), (2, 'Bamboo Viscose Blouse', 'XXL', '2021-01-10'), (3, 'Recycled Polyester Pants', 'XS', '2021-02-15'), (4, 'Tencel Jacket', 'XXL', '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ItemID) as UniqueItems FROM ClothingItems WHERE Size IN ('XS', 'XXL') AND ProductionDate BETWEEN '2021-01-01' AND '2021-03-31';"
    },
    {
        "instruction": "입력 텍스트: 오클랜드 항구에 입항한 모든 선박과 해당 화물 유형을 화물 유형별로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE port (port_id INT, port_name VARCHAR(50)); INSERT INTO port (port_id, port_name) VALUES (1, 'Oakland'), (2, 'Seattle'); CREATE TABLE vessels (vessel_id INT, port_id INT, quantity_containers INT); INSERT INTO vessels (vessel_id, port_id, quantity_containers) VALUES (101, 1, 500), (102, 1, 700), (103, 2, 800); CREATE TABLE cargo (cargo_id INT, cargo_type VARCHAR(50), vessel_id INT); INSERT INTO cargo (cargo_id, cargo_type, vessel_id) VALUES (201, 'Containers', 101), (202, 'Vehicles', 102), (203, 'Bulk', 103);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessels.vessel_id, cargo.cargo_type FROM vessels JOIN port ON vessels.port_id = port.port_id JOIN cargo ON vessels.vessel_id = cargo.vessel_id WHERE port.port_name = 'Oakland' ORDER BY cargo.cargo_type;"
    },
    {
        "instruction": "입력 텍스트: 2021년 2분기에 미국의 각 주로 배송된 패키지의 총 중량(kg)은 얼마인가요?\n\nDDL statements:\nCREATE TABLE shipments (shipment_id INT, warehouse_id INT, state TEXT, weight FLOAT); INSERT INTO shipments (shipment_id, warehouse_id, state, weight) VALUES (1, 1, 'California', 10.5), (2, 2, 'Texas', 15.3), (3, 3, 'Florida', 8.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(weight) as total_weight FROM shipments WHERE shipped_date BETWEEN '2021-04-01' AND '2021-06-30' AND country = 'USA' GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 2020년 동안 'BuildingPermits' 테이블에서 매월 발급된 건축 허가증의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE BuildingPermits (permitID INT, permitDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(permitDate, '%Y-%m') AS Month, COUNT(permitID) AS PermitsIssued FROM BuildingPermits WHERE permitDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: 숲이 있는 땅이 5000만 헥타르 이상인 나라를 찾으세요.\n\nDDL statements:\nCREATE TABLE forests (id INT, country VARCHAR(50), area FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM forests WHERE area > 50000000 GROUP BY country HAVING COUNT(*) > 1;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 월에 업데이트된 식품 안전 기록은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE FoodSafetyRecords (RecordID INT, UpdateDate DATE); INSERT INTO FoodSafetyRecords (RecordID, UpdateDate) VALUES (1, '2022-01-01'), (2, '2022-01-05'), (3, '2022-02-10'), (4, '2022-03-20'), (5, '2022-03-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM UpdateDate) AS Month, COUNT(*) FROM FoodSafetyRecords WHERE UpdateDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY EXTRACT(MONTH FROM UpdateDate);"
    },
    {
        "instruction": "입력 텍스트: 위성이 발사된 가장 이른 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE satellite_launches (id INT, name VARCHAR(50), launch_date DATE); INSERT INTO satellite_launches (id, name, launch_date) VALUES (1, 'Sat1', '2005-01-01'), (2, 'Sat2', '2012-03-04'), (3, 'Sat3', '2008-07-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(launch_date) FROM satellite_launches;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 지역에서 보고된 정신 건강 동등 위반 사례는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE mental_health_parity (region VARCHAR(10), violation_date DATE, violation_description VARCHAR(100)); INSERT INTO mental_health_parity (region, violation_date, violation_description) VALUES ('Northeast', '2022-01-01', 'Description 1'), ('Southeast', '2022-02-01', 'Description 2'), ('Midwest', '2022-03-01', 'Description 3'), ('Southwest', '2022-04-01', 'Description 4'), ('West', '2022-05-01', 'Description 5');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM mental_health_parity WHERE violation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 건강 근로자들의 문화 역량 수준별 평균 연령은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE CommunityHealthWorkers (CHW_ID INT, Age INT, CulturalCompetency VARCHAR(20)); INSERT INTO CommunityHealthWorkers (CHW_ID, Age, CulturalCompetency) VALUES (1, 35, 'High'), (2, 40, 'Medium'), (3, 50, 'Low');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CulturalCompetency, AVG(Age) as AvgAge FROM CommunityHealthWorkers GROUP BY CulturalCompetency;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 교통수단별 총 이산화탄소 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Transport (id INT, mode VARCHAR(20), co2_emission FLOAT, year INT); INSERT INTO Transport (id, mode, co2_emission, year) VALUES (1, 'Plane', 120.0, 2022), (2, 'Train', 15.0, 2022), (3, 'Bus', 40.0, 2022), (4, 'Car', 60.0, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mode, SUM(co2_emission) as total_emission FROM Transport WHERE year = 2022 GROUP BY mode;"
    },
    {
        "instruction": "입력 텍스트: 2000년대에 발사된 우주 미션은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE missions (id INT, name VARCHAR(255), launch_date DATE); INSERT INTO missions (id, name, launch_date) VALUES (1, 'Cassini-Huygens', '1997-10-15'), (2, 'Stardust', '1999-02-07');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM missions WHERE YEAR(launch_date) >= 2000 AND YEAR(launch_date) < 2010;"
    },
    {
        "instruction": "입력 텍스트: 전략' 게임을 플레이한 플레이어 중에서 이스포츠 이벤트에 참가하지 않은 플레이어의 총 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE PlayerGameData (PlayerID INT, Age INT, Game VARCHAR(20), Playtime INT); CREATE TABLE EsportsEvents (EventID INT, PlayerID INT); INSERT INTO PlayerGameData (PlayerID, Age, Game, Playtime) VALUES (1, 22, 'Shooter', 30), (2, 25, 'Shooter', 50), (3, 28, 'Racing', 70), (4, 21, 'Strategy', 80); INSERT INTO EsportsEvents (EventID, PlayerID) VALUES (1, 1), (2, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT PlayerID) FROM PlayerGameData WHERE Game = 'Strategy' AND PlayerID NOT IN (SELECT PlayerID FROM EsportsEvents);"
    },
    {
        "instruction": "입력 텍스트: Aerospace Inc.'에서 제조한 우주선의 평균 질량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SpacecraftManufacturing (id INT, company VARCHAR(255), mass FLOAT); INSERT INTO SpacecraftManufacturing (id, company, mass) VALUES (1, 'Aerospace Inc.', 5000.0), (2, 'Galactic Corp.', 7000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(mass) FROM SpacecraftManufacturing WHERE company = 'Aerospace Inc.';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주의 물 절약 이니셔티브를 통해 절약된 총 물의 양은 리터로 얼마인가요?\n\nDDL statements:\nCREATE TABLE WaterConservationInitiatives (initiative_id INT, state VARCHAR(20), water_saved_liters INT); INSERT INTO WaterConservationInitiatives (initiative_id, state, water_saved_liters) VALUES (1, 'New York', 1200000), (2, 'New York', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(water_saved_liters) FROM WaterConservationInitiatives WHERE state = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 선박 테이블에서 'VesselA'의 평균 속도를 25로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Vessel (ID INT, Name TEXT, AverageSpeed DECIMAL); INSERT INTO Vessel (ID, Name, AverageSpeed) VALUES (1, 'VesselA', 20.5), (2, 'VesselB', 14.3), (3, 'VesselC', 19.8), (4, 'VesselD', 12.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Vessel SET AverageSpeed = 25 WHERE Name = 'VesselA';"
    },
    {
        "instruction": "입력 텍스트: 아마존 숲에서 '카사바'의 최소 수확량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE farm (id INT, region VARCHAR(20), crop VARCHAR(20), yield INT); INSERT INTO farm (id, region, crop, yield) VALUES (1, 'Amazonian forests', 'cassava', 8), (2, 'Amazonian forests', 'banana', 11);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(yield) FROM farm WHERE region = 'Amazonian forests' AND crop = 'cassava';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 '아시아' 지역에서 발생한 AI 안전 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE ai_safety_incidents (region TEXT, year INTEGER, incidents INTEGER); INSERT INTO ai_safety_incidents (region, year, incidents) VALUES ('europe', 2020, 10), ('africa', 2020, 5), ('asia', 2020, 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(incidents) FROM ai_safety_incidents WHERE region = 'asia' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 오클랜드에 있는 약국에서 판매하는 사티바 종류의 그램당 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE dispensaries (id INT, name TEXT, city TEXT, state TEXT); INSERT INTO dispensaries (id, name, city, state) VALUES (1, 'Harborside', 'Oakland', 'CA'); CREATE TABLE strains (id INT, name TEXT, type TEXT, price_per_gram DECIMAL); INSERT INTO strains (id, name, type, price_per_gram) VALUES (1, 'Super Lemon Haze', 'sativa', 15.0), (2, 'Blue Dream', 'sativa', 12.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price_per_gram) FROM strains JOIN dispensaries ON FALSE WHERE strains.type = 'sativa' AND dispensaries.city = 'Oakland';"
    },
    {
        "instruction": "입력 텍스트: 2022년 패션 산업에서 지역별로 판매된 의류의 총 수량과 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE global_sales_2022 (sale_date DATE, region VARCHAR(50), quantity INT, sales DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(quantity) AS total_quantity, SUM(sales) AS total_revenue FROM global_sales_2022 WHERE sale_date >= '2022-01-01' AND sale_date < '2023-01-01' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에서 조달한 화장품 제품의 천연 성분 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ingredients (product_id INT, ingredient_name VARCHAR(50), natural BOOLEAN); INSERT INTO ingredients VALUES (1, 'Water', true), (1, 'Paraben', false), (2, 'Aloe Vera', true), (2, 'Fragrance', false); CREATE TABLE sourcing (product_id INT, country VARCHAR(20)); INSERT INTO sourcing VALUES (1, 'France'), (2, 'Germany');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * AVG(natural) AS percentage FROM ingredients JOIN sourcing ON ingredients.product_id = sourcing.product_id WHERE country = 'France';"
    },
    {
        "instruction": "입력 텍스트: 북극 지역에서 각 연도별 최저 기온을 찾으세요.\n\nDDL statements:\nCREATE TABLE climate_data (id INT, region VARCHAR, year INT, temperature DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, MIN(temperature) as min_temp FROM climate_data WHERE region = 'Arctic' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 취소된 이벤트에 대한 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE Events (id INT, name VARCHAR(255), date DATE, is_canceled BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Events WHERE is_canceled = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 국가별 콩 작물의 최대 수확량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Country (id INT, name VARCHAR(255)); INSERT INTO Country (id, name) VALUES (1, 'Canada'), (2, 'Mexico'), (3, 'Brazil'); CREATE TABLE Crop (id INT, name VARCHAR(255), country_id INT, yield INT); INSERT INTO Crop (id, name, country_id, yield) VALUES (1, 'Soybean', 1, 35), (2, 'Cotton', 2, 25), (3, 'Soybean', 3, 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Crop.yield) FROM Crop INNER JOIN Country ON Crop.country_id = Country.id WHERE Crop.name = 'Soybean';"
    },
    {
        "instruction": "입력 텍스트: HR' 부서의 모든 직원들의 기본 급여를 8% 인상하세요.\n\nDDL statements:\nCREATE TABLE employees (id INT, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), hire_date DATE, gender VARCHAR(10), salary DECIMAL(10,2)); INSERT INTO employees (id, first_name, last_name, department, hire_date, gender, salary) VALUES (1, 'John', 'Doe', 'Marketing', '2021-04-01', 'Male', 50000); INSERT INTO employees (id, first_name, last_name, department, hire_date, gender, salary) VALUES (2, 'Jane', 'Smith', 'IT', '2021-05-15', 'Female', 55000); INSERT INTO employees (id, first_name, last_name, department, hire_date, gender, salary) VALUES (5, 'Sana', 'Ahmed', 'HR', '2021-02-01', 'Female', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE employees SET salary = salary * 1.08 WHERE department = 'HR';"
    },
    {
        "instruction": "입력 텍스트: 2019년에 인도가 발사한 모든 위성을 나열하시오.\n\nDDL statements:\nCREATE TABLE satellite_launches (id INT, satellite VARCHAR(255), country VARCHAR(255), year INT, launches INT); INSERT INTO satellite_launches (id, satellite, country, year, launches) VALUES (1, 'GSAT-30', 'India', 2019, 1), (2, 'Cartosat-3', 'India', 2019, 1), (3, 'RISAT-2BR2', 'India', 2019, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT satellite FROM satellite_launches WHERE country = 'India' AND year = 2019;"
    },
    {
        "instruction": "입력 텍스트: nonprofits' 테이블에 'Example Organization'이라는 이름과 'example.org'라는 웹사이트를 가진 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE nonprofits (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255), website VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO nonprofits (name, website) VALUES ('Example Organization', 'example.org');"
    },
    {
        "instruction": "입력 텍스트: 공정 노동 관행을 가진 공급업체가 가장 많은 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE SuppliersFairLabor (id INT, country VARCHAR, fair_labor BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as supplier_count FROM SuppliersFairLabor WHERE fair_labor = TRUE GROUP BY country ORDER BY supplier_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후에 시작되어 정부 및 비정부 기구가 모두 관여한 아시아의 기후 금융 이니셔티브는 무엇인가요?\n\nDDL statements:\nCREATE TABLE climate_finance_asia (initiative VARCHAR(50), funding_source VARCHAR(50), year INT); INSERT INTO climate_finance_asia (initiative, funding_source, year) VALUES ('Green Energy Transition', 'Government-NGO', 2016), ('Climate Resilient Infrastructure', 'Government-NGO', 2017), ('Sustainable Agriculture Program', 'Government-NGO', 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative FROM climate_finance_asia WHERE year > 2015 AND funding_source = 'Government-NGO';"
    },
    {
        "instruction": "입력 텍스트: 고객 불만이 가장 많은 상위 5개 주를 찾으세요.\n\nDDL statements:\nCREATE TABLE complaints (id INT, state VARCHAR(20), complaint_count INT); INSERT INTO complaints (id, state, complaint_count) VALUES (1, 'NY', 1000); INSERT INTO complaints (id, state, complaint_count) VALUES (2, 'CA', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, complaint_count FROM complaints ORDER BY complaint_count DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 복원적 사법 테이블에서 커뮤니티 회의와 배상 세션의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE restorative_justice (case_id INT, case_type VARCHAR(20), location VARCHAR(20), facilitator VARCHAR(20)); INSERT INTO restorative_justice (case_id, case_type, location, facilitator) VALUES (5, 'community_conference', 'NY', 'John'), (6, 'restitution_session', 'CA', 'Sarah'), (7, 'community_conference', 'NY', 'Lisa'), (8, 'community_conference', 'TX', 'Mark'), (9, 'restitution_session', 'FL', 'Emily');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT case_type FROM restorative_justice WHERE case_type = 'community_conference' UNION SELECT case_type FROM restorative_justice WHERE case_type = 'restitution_session') AS total_sessions;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 홍역의 예방 접종률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Immunization (Disease VARCHAR(50), Continent VARCHAR(50), Immunization_Rate FLOAT); INSERT INTO Immunization (Disease, Continent, Immunization_Rate) VALUES ('Measles', 'Africa', 75.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Immunization_Rate FROM Immunization WHERE Disease = 'Measles' AND Continent = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 엔터테인먼트 비디오 시청에 소요된 전체 시청 시간의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (id INT, country VARCHAR(50)); INSERT INTO users (id, country) VALUES (1, 'India'), (2, 'China'), (3, 'United States'); CREATE TABLE videos (id INT, type VARCHAR(50)); INSERT INTO videos (id, type) VALUES (1, 'Sports'), (2, 'Entertainment'); CREATE TABLE user_video_view (user_id INT, video_id INT, watch_time INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.country, 100.0 * SUM(CASE WHEN v.type = 'Entertainment' THEN uvv.watch_time ELSE 0 END) / SUM(uvv.watch_time) as pct FROM user_video_view uvv JOIN users u ON uvv.user_id = u.id JOIN videos v ON uvv.video_id = v.id GROUP BY u.country;"
    },
    {
        "instruction": "입력 텍스트: 은행의 모바일 앱을 사용한 고객과 사용하지 않은 고객의 계좌 잔액 차이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Customers (CustomerID INT, Name VARCHAR(50), AccountBalance DECIMAL(18,2), UsedMobileApp BOOLEAN);INSERT INTO Customers VALUES (1,'John Doe',25000.00,TRUE),(2,'Jane Smith',30000.00,FALSE),(3,'Bob Johnson',40000.00,TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN UsedMobileApp THEN AccountBalance ELSE 0 END) - SUM(CASE WHEN UsedMobileApp = FALSE THEN AccountBalance ELSE 0 END) FROM Customers;"
    },
    {
        "instruction": "입력 텍스트: North Sea' 지역에 있는 우물들의 평균 생산율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE wells (well_id INT, well_name VARCHAR(50), region VARCHAR(50), production_rate FLOAT); INSERT INTO wells (well_id, well_name, region, production_rate) VALUES (1, 'Well A', 'North Sea', 5000), (2, 'Well B', 'North Sea', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_rate) FROM wells WHERE region = 'North Sea';"
    },
    {
        "instruction": "입력 텍스트: 총 단어 수로 본 상위 3명의 작가는 누구인가요?\n\nDDL statements:\nCREATE TABLE articles (id INT, author VARCHAR(255), word_count INT); INSERT INTO articles (id, author, word_count) VALUES\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT author, SUM(word_count) as total_word_count FROM articles GROUP BY author ORDER BY total_word_count DESC LIMIT 3"
    },
    {
        "instruction": "입력 텍스트: Middle School' 학교의 학생들의 평균 정신 건강 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Schools (id INT, name VARCHAR(20)); INSERT INTO Schools (id, name) VALUES (1, 'Elementary'), (2, 'High School'), (3, 'Middle School'); CREATE TABLE StudentMentalHealth (student_id INT, school_id INT, score INT); INSERT INTO StudentMentalHealth (student_id, school_id, score) VALUES (1, 1, 80), (2, 1, 90), (3, 2, 70), (4, 3, 85), (5, 3, 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(smh.score) FROM StudentMentalHealth smh JOIN Schools s ON smh.school_id = s.id WHERE s.name = 'Middle School';"
    },
    {
        "instruction": "입력 텍스트: order_fact 테이블과 sales_fact 테이블에서 공급업체와 그들의 총 판매액을 총 판매액 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE sustainability_fact (sustainability_id INT, menu_item_id INT, sustainability_rating DECIMAL, sustainability_certified BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.supplier_name, SUM(sf.sale_quantity * sf.sale_price) as total_sales FROM sales_fact sf JOIN order_fact o ON sf.sale_id = o.sale_id JOIN supplier_dim s ON o.supplier_id = s.supplier_id GROUP BY s.supplier_name ORDER BY total_sales DESC;"
    },
    {
        "instruction": "입력 텍스트: AI 윤리에 초점을 맞춘 프로젝트의 연도별 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE project_budget (project_id INT, project_name VARCHAR(255), budget DECIMAL(10,2), year INT); INSERT INTO project_budget (project_id, project_name, budget, year) VALUES (1, 'Ethical AI Research', 500000, 2020), (2, 'AI Ethics Guidelines Development', 750000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) as avg_budget, year FROM project_budget WHERE project_name LIKE '%AI ethics%' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 시드니의 대중교통 평균 이동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE public_transportation_sydney (trip_id INT, trip_duration FLOAT, start_speed FLOAT, end_speed FLOAT, start_time TIMESTAMP, end_time TIMESTAMP, city VARCHAR(50)); INSERT INTO public_transportation_sydney (trip_id, trip_duration, start_speed, end_speed, start_time, end_time, city) VALUES (1, 45.0, 0.0, 20.0, '2021-01-01 00:00:00', '2021-01-01 00:45:00', 'Sydney'), (2, 60.0, 0.0, 25.0, '2021-01-02 08:00:00', '2021-01-02 08:60:00', 'Sydney');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(trip_duration) FROM public_transportation_sydney WHERE city = 'Sydney';"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 월에 기부한 고유 기부자 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), DonationDate date); INSERT INTO Donors (DonorID, DonorName, DonationDate) VALUES (1, 'John Doe', '2021-01-15'); INSERT INTO Donors (DonorID, DonorName, DonationDate) VALUES (2, 'Jane Smith', '2021-02-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT DonorID), DATEPART(month, DonationDate) FROM Donors WHERE DonationDate >= '2021-01-01' AND DonationDate < '2022-01-01' GROUP BY DATEPART(month, DonationDate);"
    },
    {
        "instruction": "입력 텍스트: 물리학과 소속 교수 중에서 받은 연구비 지원금액이 가장 높은 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Faculty(Id INT, Name VARCHAR(100), Department VARCHAR(50), Gender VARCHAR(10), GrantAmount DECIMAL(10,2)); INSERT INTO Faculty(Id, Name, Department, Gender, GrantAmount) VALUES (1, 'Uma', 'Physics', 'Female', 90000.00), (2, 'Victor', 'Physics', 'Male', 80000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(GrantAmount) FROM Faculty WHERE Department = 'Physics';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 발매된 Kanye West의 새 음악 앨범 'Donda'를 추가합니다\n\nDDL statements:\nCREATE TABLE albums (id INT, title TEXT, artist TEXT, release_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO albums (id, title, artist, release_year) VALUES (1, 'Donda', 'Kanye West', 2021);"
    },
    {
        "instruction": "입력 텍스트: Cybersecurity' 스키마에서 'Incident Response'와 관련된 사이버보안 전략은 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS Cybersecurity; CREATE TABLE IF NOT EXISTS Cybersecurity.Strategies (strat_id INT, strat_name VARCHAR(255), description TEXT); INSERT INTO Cybersecurity.Strategies (strat_id, strat_name, description) VALUES (1, 'NIST Cybersecurity Framework', 'Provides guidelines for managing cybersecurity risks'), (2, 'CIS Critical Security Controls', 'Set of 20 actions to stop the most common cyber attacks'), (3, 'Incident Response Plan', 'Plan to detect, respond and recover from cybersecurity incidents');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Cybersecurity.Strategies WHERE description LIKE '%Incident Response%';"
    },
    {
        "instruction": "입력 텍스트: Impossible Burger'가 총 몇 개 팔렸나요?\n\nDDL statements:\nCREATE TABLE sales (id INT, menu_id INT, sale_date DATETIME, quantity INT); CREATE TABLE menu_items (id INT, name VARCHAR(255), description TEXT, category VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales.quantity) FROM sales INNER JOIN menu_items ON sales.menu_id = menu_items.id WHERE menu_items.name = 'Impossible Burger';"
    },
    {
        "instruction": "입력 텍스트: 자율 주행 차량의 월별 사고 비율을 제조사별로 나누어서 알려주세요.\n\nDDL statements:\nCREATE TABLE AutonomousVehicleAccidents (id INT, accident_date DATE, make VARCHAR(20), model VARCHAR(20)); INSERT INTO AutonomousVehicleAccidents (id, accident_date, make, model) VALUES (1, '2021-01-01', 'Tesla', 'Model S'), (2, '2021-02-01', 'Waymo', 'Chrysler Pacifica'), (3, '2021-02-01', 'Tesla', 'Model 3'), (4, '2021-03-01', 'NVIDIA', 'Cruise AV'), (5, '2021-04-01', 'Tesla', 'Model S');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM accident_date) AS month, make, COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY EXTRACT(MONTH FROM accident_date)) AS pct_of_accidents  FROM AutonomousVehicleAccidents GROUP BY month, make;"
    },
    {
        "instruction": "입력 텍스트: 정밀 농업 이미지 테이블에 'Farm 1' 농장의 새로운 위성 이미지 기록을 삽입하세요.\n\nDDL statements:\nCREATE TABLE precision_farming_imagery (id INT, farm_id INT, image_data BLOB, time_stamp DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO precision_farming_imagery (id, farm_id, image_data, time_stamp) VALUES (1, (SELECT id FROM farm_locations WHERE farm_name = 'Farm 1'), 'Image Data 1', '2022-03-14 12:00:00'), (2, (SELECT id FROM farm_locations WHERE farm_name = 'Farm 1'), 'Image Data 2', '2022-03-14 13:00:00');"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 악의적 활동과 관련된 고유 IP 주소는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE malicious_activity (id INT, ip VARCHAR(50), timestamp DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ip) as num_ips FROM malicious_activity WHERE timestamp > DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);"
    },
    {
        "instruction": "입력 텍스트: 베이 지역에서 공동 소유 부동산의 평방 피트당 평균 가격은 무엇이며, 부동산 유형별로 구분하고 가격이 높은 순으로 정렬된 순서대로 나타내세요?\n\nDDL statements:\nCREATE TABLE bay_area_properties (property_id INT, price DECIMAL(10,2), size INT, co_ownership BOOLEAN, property_type VARCHAR(20)); INSERT INTO bay_area_properties (property_id, price, size, co_ownership, property_type) VALUES (1, 1000000, 2000, TRUE, 'Condo'), (2, 1500000, 3000, TRUE, 'House'), (3, 800000, 1500, FALSE, 'Condo'), (4, 1200000, 2500, FALSE, 'House');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT property_type, AVG(price/size) AS avg_price_per_sqft, ROW_NUMBER() OVER (ORDER BY AVG(price/size) DESC) AS rank FROM bay_area_properties WHERE co_ownership = TRUE GROUP BY property_type ORDER BY avg_price_per_sqft DESC;"
    },
    {
        "instruction": "입력 텍스트: California'와 'Texas'에서 온 팬들 중 'NFL' 경기에 참석한 팬은 몇 명인가요?\n\nDDL statements:\nCREATE TABLE Fans (fan_id INT, fan_name VARCHAR(255), state VARCHAR(255)); CREATE TABLE GameAttendance (fan_id INT, event_id INT); CREATE TABLE Events (event_id INT, event_name VARCHAR(255), team VARCHAR(255)); INSERT INTO Fans VALUES (1, 'John Doe', 'California'), (2, 'Jane Doe', 'Texas'); INSERT INTO GameAttendance VALUES (1, 1), (1, 2), (2, 1); INSERT INTO Events VALUES (1, 'Game 1', 'NFL'), (2, 'Game 2', 'NFL');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(Fans.fan_id) FROM Fans INNER JOIN GameAttendance ON Fans.fan_id = GameAttendance.fan_id INNER JOIN Events ON GameAttendance.event_id = Events.event_id WHERE Fans.state IN ('California', 'Texas') AND Events.team = 'NFL';"
    },
    {
        "instruction": "입력 텍스트: 지난 10년간 군사 지출이 가장 많은 상위 3개국은 무엇인가요?\n\nDDL statements:\nCREATE TABLE military_expenditure (id INT, country VARCHAR(255), year INT, spending INT); INSERT INTO military_expenditure (id, country, year, spending) VALUES (1, 'USA', 2012, 682), (2, 'China', 2012, 166), (3, 'Russia', 2012, 91);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT me.country, SUM(me.spending) as total_spending FROM military_expenditure AS me WHERE me.year BETWEEN 2012 AND 2021 GROUP BY me.country ORDER BY total_spending DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아와 텍사스에 있는 모든 에너지 효율 프로젝트의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_efficiency_projects (project_name VARCHAR(50), state VARCHAR(20), budget DECIMAL(10,2)); INSERT INTO energy_efficiency_projects (project_name, state, budget) VALUES ('Project A', 'California', 50000.00), ('Project B', 'California', 75000.00), ('Project C', 'New York', 60000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM energy_efficiency_projects eep WHERE eep.state IN ('California', 'Texas');"
    },
    {
        "instruction": "입력 텍스트: 각 장르에서 가장 긴 노래의 평균 발매 연도는 무엇인가요?\n\nDDL statements:\nCREATE TABLE genre_songs (genre VARCHAR(50), song_id INT, release_year INT); INSERT INTO genre_songs (genre, song_id, release_year) VALUES ('Pop', 1, 1985), ('Pop', 2, 1986), ('Jazz', 3, 1987), ('Jazz', 4, 1988), ('Rock', 5, 1989); CREATE TABLE songs_length (song_id INT, length FLOAT); INSERT INTO songs_length (song_id, length) VALUES (1, 450.0), (2, 350.0), (3, 500.0), (4, 450.0), (5, 300.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(release_year) FROM (SELECT genre, MAX(release_year) as release_year FROM genre_songs gs JOIN songs_length sl ON gs.song_id = sl.song_id GROUP BY genre) as t;"
    },
    {
        "instruction": "입력 텍스트: 유기농 제품 중 어떤 것들이 유럽에서 팔렸나요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(50), is_organic BOOLEAN); INSERT INTO products VALUES (1, 'Lipstick 101', true), (2, 'Eye Shadow 202', false); CREATE TABLE sales (sale_id INT, product_id INT, sale_date DATE, region VARCHAR(50)); INSERT INTO sales VALUES (1, 1, '2022-01-05', 'Europe'), (2, 2, '2022-02-10', 'Asia'), (3, 1, '2022-03-20', 'Europe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT products.product_name FROM products INNER JOIN sales ON products.product_id = sales.product_id WHERE products.is_organic = true AND sales.region = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 각 교수님들은 몇 편의 출판물을 가지고 있나요?\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO faculty VALUES (1, 'John Doe', 'Physics'); INSERT INTO faculty VALUES (2, 'Jane Smith', 'Mathematics'); CREATE TABLE publications (id INT, faculty_id INT, title VARCHAR(100)); INSERT INTO publications VALUES (1, 1, 'The Laws of Physics'); INSERT INTO publications VALUES (2, 1, 'The Fundamentals of Physics'); INSERT INTO publications VALUES (3, 2, 'Calculus: A Complete Course');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, COUNT(p.id) FROM faculty f JOIN publications p ON f.id = p.faculty_id GROUP BY f.name;"
    },
    {
        "instruction": "입력 텍스트: 4.0 이상의 평점을 받은 영화들의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE movie_financials (id INT, title VARCHAR(255), rating DECIMAL(3,2), revenue INT); INSERT INTO movie_financials (id, title, rating, revenue) VALUES (1, 'Inside Out', 4.5, 856000000), (2, 'Up', 4.3, 731000000), (3, 'Finding Dory', 4.2, 1029000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM movie_financials WHERE rating > 4.0;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아와 매사추세츠에서 저소득 가구 사람들이 참석한 이벤트는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE Events (id INT, state VARCHAR(2), city VARCHAR(20), attendees INT, event_date DATE); INSERT INTO Events (id, state, city, attendees, event_date) VALUES (1, 'CA', 'Los Angeles', 500, '2022-01-01'), (2, 'MA', 'Boston', 300, '2022-02-01'), (3, 'CA', 'San Diego', 400, '2022-03-01'); CREATE TABLE Demographics (id INT, state VARCHAR(2), zip INT, income FLOAT); INSERT INTO Demographics (id, state, zip, income) VALUES (1, 'CA', 90000, 30000.00), (2, 'MA', 22000, 40000.00), (3, 'CA', 92000, 25000.00); CREATE TABLE Zipcodes (zip INT, city VARCHAR(20)); INSERT INTO Zipcodes (zip, city) VALUES (90000, 'Los Angeles'), (22000, 'Boston'), (92000, 'San Diego');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(attendees) FROM Events INNER JOIN Demographics ON Events.state = Demographics.state INNER JOIN Zipcodes ON Events.state = Zipcodes.state WHERE Demographics.income < 30000.00 AND Events.state IN ('CA', 'MA');"
    },
    {
        "instruction": "입력 텍스트: 도시 지역과 농촌 지역에 있는 공장들 사이의 인력 개발 프로그램의 차이점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT, workforce_development BOOLEAN); INSERT INTO factories (factory_id, name, location, workforce_development) VALUES (1, 'Factory A', 'City A, Urban', true), (2, 'Factory B', 'City B, Rural', true), (3, 'Factory C', 'City C, Urban', false), (4, 'Factory D', 'City D, Rural', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f1.name AS factory1, f2.name AS factory2, f1.workforce_development AS workforce_program1, f2.workforce_development AS workforce_program2 FROM factories f1 JOIN factories f2 ON f1.location = f2.location WHERE f1.factory_id <> f2.factory_id AND (f1.location LIKE '%Urban' AND f2.location LIKE '%Rural') OR (f1.location LIKE '%Rural' AND f2.location LIKE '%Urban');"
    },
    {
        "instruction": "입력 텍스트: 2018년에 가장 높은 평균 수익을 낸 장르는 무엇인가요?\n\nDDL statements:\nCREATE TABLE genre_songs (year INT, genre VARCHAR(255), num_songs INT, revenue FLOAT); INSERT INTO genre_songs (year, genre, num_songs, revenue) VALUES (2018, 'Pop', 20, 4000000), (2018, 'Rock', 15, 3500000), (2019, 'Electronic', 20, 4000000), (2019, 'Jazz', 10, 1000000), (2018, 'Latin', 15, 2200000), (2018, 'Classical', 12, 2400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT genre, AVG(revenue/num_songs) FROM genre_songs WHERE year = 2018 GROUP BY genre ORDER BY AVG(revenue/num_songs) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 회사에 5년 이상 근무한 직원은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE EmployeeData (EmployeeID INT, EmploymentDate DATE); INSERT INTO EmployeeData (EmployeeID, EmploymentDate) VALUES (1, '2016-01-01'), (2, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM EmployeeData WHERE DATEDIFF(year, EmploymentDate, GETDATE()) > 5;"
    },
    {
        "instruction": "입력 텍스트: 예술 프로그램에 기부한 개인의 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donors (id INT, name TEXT, program TEXT, amount INT); INSERT INTO donors (id, name, program, amount) VALUES (1, 'John Doe', 'Arts', 500), (2, 'Jane Smith', 'Education', 1000), (3, 'Alice Johnson', 'Arts', 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM donors WHERE program = 'Arts' AND id NOT IN (4, 5);"
    },
    {
        "instruction": "입력 텍스트: GreenTech' 공장의 모든 인력 개발 프로그램을 나열하세요.\n\nDDL statements:\nCREATE TABLE Initiatives (id INT, name VARCHAR(255), plant_id INT); INSERT INTO Initiatives (id, name, plant_id) VALUES (1, 'Training Program', 2), (2, 'Internship', 2), (3, 'Mentorship', 2); CREATE TABLE Plants (id INT, name VARCHAR(255)); INSERT INTO Plants (id, name) VALUES (2, 'GreenTech');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Initiatives WHERE plant_id = 2;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 반복적으로 범죄를 저지른 피해자는 누구인가요?\n\nDDL statements:\nCREATE TABLE victims (id INT PRIMARY KEY, name VARCHAR(255), offense VARCHAR(255), date DATE); INSERT INTO victims (id, name, offense, date) VALUES (1, 'Jim Brown', 'Theft', '2021-01-01'); INSERT INTO victims (id, name, offense, date) VALUES (2, 'Lucy Johnson', 'Assault', '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v1.name, v1.offense, v1.date, COUNT(v2.id) as repeat_offenses FROM victims v1 JOIN victims v2 ON v1.name = v2.name AND v2.date >= DATEADD(month, -6, v1.date) AND v2.date < v1.date GROUP BY v1.name, v1.offense, v1.date HAVING COUNT(v2.id) > 1;"
    },
    {
        "instruction": "입력 텍스트: 특정 국가의 숲에서 흡수된 탄소의 총량과 그 숲의 헥타르당 평균 탄소 흡수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Forests (id INT, name VARCHAR(255), hectares FLOAT, country VARCHAR(255), carbon_sequestration_tonnes INT); INSERT INTO Forests (id, name, hectares, country, carbon_sequestration_tonnes) VALUES (1, 'Amazon Rainforest', 55000000.0, 'Brazil', 120000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(carbon_sequestration_tonnes) as total_carbon_sequestration, AVG(carbon_sequestration_tonnes/hectares) as avg_carbon_sequestration_per_hectare FROM Forests GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 어떤 종이 두 개 이상의 연구소에서 기록되었나요?\n\nDDL statements:\nCREATE TABLE Biodiversity (id INT PRIMARY KEY, species_id INT, station_id INT, FOREIGN KEY (species_id) REFERENCES Species(id), FOREIGN KEY (station_id) REFERENCES ResearchStations(id)); INSERT INTO Biodiversity (id, species_id, station_id) VALUES (2, 1, 1), (3, 1, 2), (4, 2, 1), (5, 2, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Species.name FROM Species INNER JOIN Biodiversity ON Species.id = Biodiversity.species_id GROUP BY Species.name HAVING COUNT(DISTINCT Biodiversity.station_id) > 1;"
    },
    {
        "instruction": "입력 텍스트: solar_plants' 테이블에 있는 모든 태양광 발전소를 나열하세요.\n\nDDL statements:\nCREATE TABLE solar_plants (name TEXT, capacity INTEGER); INSERT INTO solar_plants (name, capacity) VALUES ('Plant A', 300), ('Plant B', 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM solar_plants;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에서 발생한 긴급 사건의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE emergency_incidents (id INT, incident_type VARCHAR(50), incident_location VARCHAR(100), incident_date DATE, city VARCHAR(50), state VARCHAR(50)); INSERT INTO emergency_incidents (id, incident_type, incident_location, incident_date, city, state) VALUES (1, 'Medical Emergency', '123 Main St', '2021-01-01', 'Houston', 'TX');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM emergency_incidents WHERE state = 'TX';"
    },
    {
        "instruction": "입력 텍스트: 2017년 프로메튬의 최대 생산량(톤 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE production_data (year INT, element TEXT, production_quantity FLOAT); INSERT INTO production_data (year, element, production_quantity) VALUES (2015, 'Promethium', 10); INSERT INTO production_data (year, element, production_quantity) VALUES (2016, 'Promethium', 12); INSERT INTO production_data (year, element, production_quantity) VALUES (2017, 'Promethium', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(production_quantity) FROM production_data WHERE element = 'Promethium' AND year = 2017;"
    },
    {
        "instruction": "입력 텍스트: 2018년도 지역 P에서의 광업 작업의 평균 노동 생산성은 얼마인가요?\n\nDDL statements:\nCREATE TABLE productivity (id INT, mining_operation TEXT, region TEXT, year INT, productivity FLOAT); INSERT INTO productivity (id, mining_operation, region, year, productivity) VALUES (1, 'Operation A', 'Region P', 2017, 175.2); INSERT INTO productivity (id, mining_operation, region, year, productivity) VALUES (2, 'Operation B', 'Region P', 2018, 220.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(productivity) FROM productivity WHERE region = 'Region P' AND year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 고객에게 발급된 샤리아 준수 대출의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE shariah_compliant_loans(id INT, client_id INT, amount INT);CREATE TABLE clients(id INT, name TEXT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country, SUM(s.amount) FROM shariah_compliant_loans s INNER JOIN clients c ON s.client_id = c.id GROUP BY c.country;"
    },
    {
        "instruction": "입력 텍스트: Good' 또는 'Excellent' 등급을 받은 단체에 'California' 출신 기부자들이 기부한 총 기부금액을 표시하세요.\n\nDDL statements:\nCREATE TABLE organizations (id INT, name TEXT, country TEXT, year_founded INT, rating TEXT); INSERT INTO organizations (id, name, country, year_founded, rating) VALUES (1, 'Asian Childrens Aid', 'India', 2008, 'Good');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donations JOIN organizations ON donations.org_id = organizations.id WHERE organizations.rating IN ('Good', 'Excellent') AND donations.donor_state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 가장 최근에 발매된 앨범은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Album (AlbumID INT, ReleaseYear INT); INSERT INTO Album (AlbumID, ReleaseYear) VALUES (1, 2010), (2, 2011), (3, 2012), (4, 2013), (5, 2014), (6, 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AlbumID, ReleaseYear, ROW_NUMBER() OVER (ORDER BY ReleaseYear DESC) AS Rank FROM Album;"
    },
    {
        "instruction": "입력 텍스트: customer_size_diversity'에서 모든 레코드를 선택하세요\n\nDDL statements:\nCREATE TABLE customer_size_diversity (customer_id INT PRIMARY KEY, size VARCHAR(10), age INT, location VARCHAR(50)); INSERT INTO customer_size_diversity (customer_id, size, age, location) VALUES (1, 'XS', 25, 'New York'), (2, 'L', 40, 'Los Angeles'); SELECT * FROM customer_size_diversity;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM customer_size_diversity;"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 30일 이상 지연된 방위 사업 프로젝트 목록을 프로젝트 이름, 시작 날짜, 지연된 일수와 함께 나열하세요.\n\nDDL statements:\nCREATE TABLE DefenseProjects (ProjectID INT, ProjectName VARCHAR(50), StartDate DATE, EndDate DATE); INSERT INTO DefenseProjects (ProjectID, ProjectName, StartDate, EndDate) VALUES (1, 'Project A', '2021-01-01', '2021-04-15'), (2, 'Project B', '2021-02-01', '2021-05-30'), (3, 'Project C', '2021-03-01', '2021-07-15'), (4, 'Project D', '2021-04-01', '2021-08-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProjectName, StartDate, DATEDIFF(day, StartDate, EndDate) AS DaysDelayed FROM DefenseProjects WHERE DATEDIFF(day, StartDate, EndDate) > 30 AND StartDate >= DATEADD(day, -365, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 프랑스에서 열린 이벤트가 받은 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Events (EventID INT, EventName TEXT, Country TEXT); INSERT INTO Events (EventID, EventName, Country) VALUES (1, 'Art Exhibition', 'France'), (2, 'Theatre Play', 'Canada'); CREATE TABLE Funding (FundingID INT, EventID INT, Amount DECIMAL); INSERT INTO Funding (FundingID, EventID, Amount) VALUES (1, 1, 5000.00), (2, 1, 7500.00), (3, 2, 2500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Amount) FROM Funding F JOIN Events E ON F.EventID = E.EventID WHERE E.Country = 'France';"
    },
    {
        "instruction": "입력 텍스트: SmartContractC'의 평균 거래 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Transactions (tx_id INT, contract_name VARCHAR(255), tx_value DECIMAL(10,2)); INSERT INTO Transactions (tx_id, contract_name, tx_value) VALUES (1, 'SmartContractC', 100.50); INSERT INTO Transactions (tx_id, contract_name, tx_value) VALUES (2, 'SmartContractC', 200.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(tx_value) FROM Transactions WHERE contract_name = 'SmartContractC';"
    },
    {
        "instruction": "입력 텍스트: hockey_players' 테이블에서 가장 높은 연봉을 받는 선수는 누구인가요?\n\nDDL statements:\nCREATE TABLE hockey_players (player_id INT, name VARCHAR(50), salary DECIMAL(10, 2)); INSERT INTO hockey_players (player_id, name, salary) VALUES (1, 'Sidney Crosby', 11000000.00); INSERT INTO hockey_players (player_id, name, salary) VALUES (2, 'Alex Ovechkin', 10000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, MAX(salary) FROM hockey_players;"
    },
    {
        "instruction": "입력 텍스트: waste_management_projects' 테이블에서 예산이 150만 달러를 초과하는 모든 프로젝트의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE waste_management_projects (project VARCHAR(50), budget INT); INSERT INTO waste_management_projects (project, budget) VALUES ('Landfill Expansion', 2000000); INSERT INTO waste_management_projects (project, budget) VALUES ('Recycling Center Construction', 1200000); INSERT INTO waste_management_projects (project, budget) VALUES ('Composting Facility Building', 1800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project FROM waste_management_projects WHERE budget > 1500000;"
    },
    {
        "instruction": "입력 텍스트: 2019년도에 국가별로 완료된 경제 다양화 프로젝트는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE economic_diversification_projects (id INT PRIMARY KEY, country VARCHAR(50), project_name VARCHAR(100), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as completed_projects FROM economic_diversification_projects WHERE YEAR(end_date) = 2019 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 분기에 몇 명의 자원봉사자가 참여했습니까?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID int, VolunteerName varchar(50), JoinDate date); INSERT INTO Volunteers VALUES (1, 'Jane Doe', '2021-04-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(JoinDate, '%Y-%m') AS Quarter, COUNT(DISTINCT VolunteerID) FROM Volunteers WHERE JoinDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY Quarter"
    },
    {
        "instruction": "입력 텍스트: 2018년에 '아프리카'에서 가장 성공적인 개입을 한 기관은 어디인가요?\n\nDDL statements:\nCREATE TABLE organizations (id INT, name VARCHAR(255)); INSERT INTO organizations (id, name) VALUES (1, 'UNHCR'), (2, 'IOM'), (3, 'World Vision'); CREATE TABLE interventions (id INT, organization_id INT, intervention_type VARCHAR(255), success INT, intervention_date DATE, location VARCHAR(255)); INSERT INTO interventions (id, organization_id, intervention_type, success, intervention_date, location) VALUES (1, 1, 'Food Assistance', 500, '2018-01-01', 'Africa'), (2, 1, 'Health Services', 300, '2018-02-01', 'Asia'), (3, 2, 'Food Assistance', 700, '2018-03-01', 'Africa'), (4, 2, 'Health Services', 400, '2018-04-01', 'Europe'), (5, 3, 'Food Assistance', 600, '2018-05-01', 'Africa'), (6, 3, 'Health Services', 800, '2018-06-01', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organization_id, MAX(success) as highest_successful_interventions FROM interventions WHERE YEAR(intervention_date) = 2018 AND location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 멕시코의 경제 다양화 분야에서 어떤 기관이 받은 보조금의 최대 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE economic_diversification (id INT, organization_name TEXT, sector TEXT, country TEXT, grant_amount DECIMAL(10,2)); INSERT INTO economic_diversification (id, organization_name, sector, country, grant_amount) VALUES (1, 'Innovative Businesses', 'Economic Diversification', 'Mexico', 15000.00), (2, 'Small Business Development', 'Economic Diversification', 'Mexico', 12000.00), (3, 'Rural Tourism Initiative', 'Economic Diversification', 'Mexico', 18000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(grant_amount) FROM economic_diversification WHERE country = 'Mexico' AND sector = 'Economic Diversification';"
    },
    {
        "instruction": "입력 텍스트: 공동 소유 프로그램에 있는 부동산의 평균 공동 소유자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE co_ownership_program (property_id INT, co_owner_count INT); INSERT INTO co_ownership_program (property_id, co_owner_count) VALUES (1001, 2), (1002, 3), (1003, 1), (1004, 5), (1005, 4), (1006, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(co_owner_count) FROM co_ownership_program;"
    },
    {
        "instruction": "입력 텍스트: 아직 일어나지 않은 이벤트의 기록을 삭제하세요\n\nDDL statements:\nCREATE TABLE events (event_id INT, event_name VARCHAR(50), year INT); INSERT INTO events (event_id, event_name, year) VALUES (1, 'FIFA World Cup', 2022), (2, 'NBA Finals', 2023), (3, 'Super Bowl', 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM events WHERE year NOT IN (SELECT year FROM events WHERE year <= YEAR(CURRENT_DATE));"
    },
    {
        "instruction": "입력 텍스트: 인당 소득이 가장 낮은 주의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE states (name VARCHAR(20), population INT, per_capita_income FLOAT); INSERT INTO states (name, population, per_capita_income) VALUES ('California', 40000000, 35000), ('Texas', 30000000, 30000), ('New York', 20000000, 40000), ('Florida', 22000000, 25000), ('Illinois', 13000000, 30000), ('Ohio', 12000000, 28000), ('Pennsylvania', 13000000, 29000), ('Georgia', 11000000, 26000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM (SELECT name FROM states WHERE per_capita_income = (SELECT MIN(per_capita_income) FROM states));"
    },
    {
        "instruction": "입력 텍스트: menu_items 테이블에서 item_name이 'Fried Ice Cream'인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE menu_items (item_id INT, item_name TEXT, category TEXT, price DECIMAL(5,2), inventory_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM menu_items WHERE item_name = 'Fried Ice Cream';"
    },
    {
        "instruction": "입력 텍스트: \"Vancouver Art Theatre\"에서 공연하는 평균 티켓 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Performances (TheatreName TEXT, PerformanceDate DATE, TicketPrice FLOAT); INSERT INTO Performances (TheatreName, PerformanceDate, TicketPrice) VALUES ('Vancouver Art Theatre', '2021-08-01', 35.5), ('Vancouver Art Theatre', '2021-08-03', 40.0), ('Vancouver Art Theatre', '2021-08-05', 37.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(TicketPrice) FROM Performances WHERE TheatreName = 'Vancouver Art Theatre';"
    },
    {
        "instruction": "입력 텍스트: 캐나다 출신 아티스트의 노래 수를 계산합니다.\n\nDDL statements:\nCREATE TABLE Songs (song_id INT, artist_id INT, title VARCHAR(100), release_year INT); CREATE TABLE Artists (artist_id INT, name VARCHAR(100), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(s.song_id) FROM Songs s INNER JOIN Artists a ON s.artist_id = a.artist_id WHERE a.country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 주별로 사용된 물의 양을 메가리터 단위로 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE state_water_usage (state VARCHAR(50), usage BIGINT); INSERT INTO state_water_usage (state, usage) VALUES ('California', 1230000000), ('Texas', 950000000), ('Florida', 720000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, usage FROM state_water_usage ORDER BY usage DESC;"
    },
    {
        "instruction": "입력 텍스트: 워싱턴과 콜로라도에서 진행된 그린 빌딩 프로젝트의 평균 기간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_projects (project_number INT, state VARCHAR(20), start_date DATE, end_date DATE); INSERT INTO green_projects (project_number, state, start_date, end_date) VALUES (1, 'Washington', '2020-01-01', '2020-03-15'); INSERT INTO green_projects (project_number, state, start_date, end_date) VALUES (2, 'Colorado', '2019-06-01', '2020-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(end_date, start_date)) FROM green_projects WHERE (state = 'Washington' OR state = 'Colorado');"
    },
    {
        "instruction": "입력 텍스트: 최근 4년간 광업 분야에서 성별에 따른 직장 사고 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE workplace_safety (id INT PRIMARY KEY, gender VARCHAR(50), incident_date DATE); INSERT INTO workplace_safety (id, gender, incident_date) VALUES (1, 'Female', '2020-01-01'), (2, 'Male', '2019-05-05'), (3, 'Female', '2021-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) as incidents FROM workplace_safety WHERE incident_date >= DATEADD(year, -4, GETDATE()) GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 육류 식품 항목의 총 재고 수량을 보여주세요.\n\nDDL statements:\nCREATE TABLE food_items (id INT, name VARCHAR(255), type VARCHAR(255), quantity INT); INSERT INTO food_items (id, name, type, quantity) VALUES (1, 'Chicken', 'Non-vegetarian', 50), (2, 'Beef', 'Non-vegetarian', 30), (3, 'Tofu', 'Vegetarian', 70), (4, 'Salmon', 'Non-vegetarian', 40), (5, 'Pork', 'Non-vegetarian', 60), (6, 'Eggs', 'Non-vegetarian', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) AS total_quantity FROM food_items WHERE type = 'Non-vegetarian';"
    },
    {
        "instruction": "입력 텍스트: Europe' 지역에 위치한 제조업체들의 재활용 폴리에스터에 대한 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Manufacturers (ManufacturerID INT, ManufacturerName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Materials (MaterialID INT, ManufacturerID INT, MaterialName VARCHAR(50), QuantityUsed INT); INSERT INTO Manufacturers (ManufacturerID, ManufacturerName, Region) VALUES (1, 'EcoFriendlyFabrics', 'Europe'), (2, 'GreenYarns', 'Asia'), (3, 'SustainableTextiles', 'Africa'), (4, 'EcoWeaves', 'Europe'); INSERT INTO Materials (MaterialID, ManufacturerID, MaterialName, QuantityUsed) VALUES (1, 1, 'organic cotton', 2000), (2, 1, 'recycled polyester', 1500), (3, 2, 'hemp fiber', 1200), (4, 3, 'organic cotton', 1800), (5, 3, 'recycled polyester', 1000), (6, 4, 'organic cotton', 2500), (7, 4, 'recycled polyester', 1800), (8, 4, 'hemp fiber', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Materials WHERE ManufacturerID IN (SELECT ManufacturerID FROM Manufacturers WHERE Region = 'Europe') AND MaterialName = 'recycled polyester';"
    },
    {
        "instruction": "입력 텍스트: military_equipment' 테이블에 레코드를 삽입하세요\n\nDDL statements:\nCREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), manufacturer VARCHAR(255), year INT); INSERT INTO military_equipment (id, name, type, manufacturer, year) VALUES (1, 'M1 Abrams', 'Tank', 'General Dynamics', 1980);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO military_equipment (id, name, type, manufacturer, year) VALUES (2, 'F-15 Eagle', 'Fighter', 'McDonnell Douglas', 1976);"
    },
    {
        "instruction": "입력 텍스트: 게임 디자인 데이터에서 가상 현실 게임을 삭제하세요\n\nDDL statements:\nCREATE TABLE GameDesignData (GameID INT PRIMARY KEY, GameName VARCHAR(50), Genre VARCHAR(20), Platform VARCHAR(20), ReleaseDate DATE, Developer VARCHAR(50)); INSERT INTO GameDesignData (GameID, GameName, Genre, Platform, ReleaseDate, Developer) VALUES (1, 'VirtualReality Racer', 'Racing', 'VR', '2023-01-01', 'VR Game Studios'); INSERT INTO GameDesignData (GameID, GameName, Genre, Platform, ReleaseDate, Developer) VALUES (2, 'VirtualReality Adventure', 'Adventure', 'VR', '2023-02-01', 'VR Game Studios');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM GameDesignData WHERE GameName = 'VirtualReality Racer';"
    },
    {
        "instruction": "입력 텍스트: ticket_sales' 테이블에서 'VIP' 좌석 구역의 ticket_price를 $150로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE ticket_sales (seat_section VARCHAR(10), ticket_price DECIMAL(5,2)); INSERT INTO ticket_sales (seat_section, ticket_price) VALUES ('General', 75.00), ('VIP', 100.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE ticket_sales SET ticket_price = 150.00 WHERE seat_section = 'VIP';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 사회적 책임 대출의 최소 대출 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE socially_responsible_lending (id INT, country VARCHAR(255), loan_amount DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(loan_amount) FROM socially_responsible_lending WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: Youth Mentorship' 또는 'Senior Care' 프로그램에 참여했지만 두 프로그램 모두에 참여하지 않은 독특한 자원봉사자의 수는 몇 명인가요?\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID int, VolunteerName varchar(50)); CREATE TABLE VolunteerPrograms (VolunteerID int, ProgramID int); INSERT INTO Volunteers (VolunteerID, VolunteerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO VolunteerPrograms (VolunteerID, ProgramID) VALUES (1, 1), (1, 2), (2, 2), (3, 3); CREATE TABLE Programs (ProgramID int, ProgramName varchar(50), Category varchar(50)); INSERT INTO Programs (ProgramID, ProgramName, Category) VALUES (1, 'Youth Mentorship', 'Education'), (2, 'Senior Care', 'Health'), (3, 'Animal Rescue', 'Animal Welfare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT v.VolunteerID) as UniqueVolunteers FROM VolunteerPrograms vp JOIN Volunteers v ON vp.VolunteerID = v.VolunteerID JOIN Programs p ON vp.ProgramID = p.ProgramID WHERE p.Category IN ('Education', 'Health') GROUP BY v.VolunteerID HAVING COUNT(DISTINCT p.Category) = 1;"
    },
    {
        "instruction": "입력 텍스트: id 4'이며 'Canada'에 있는 언어 보존 프로젝트를 삭제하세요\n\nDDL statements:\nCREATE TABLE language_preservation (id INT PRIMARY KEY, name TEXT, location TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM language_preservation WHERE id = 4 AND location = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 가장 자주 주문된 채식 요리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE orders (item_name TEXT, is_vegetarian BOOLEAN); INSERT INTO orders (item_name, is_vegetarian) VALUES ('Veggie Burger', true); INSERT INTO orders (item_name, is_vegetarian) VALUES ('Veggie Pizza', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT item_name, COUNT(*) FROM orders WHERE is_vegetarian = true GROUP BY item_name ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아와 텍사스에 있는 건설 근로자들의 직업별 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE construction_workers (worker_id INT, occupation VARCHAR(50), state VARCHAR(50), salary INT); INSERT INTO construction_workers (worker_id, occupation, state, salary) VALUES (1, 'Carpenter', 'California', 60000); INSERT INTO construction_workers (worker_id, occupation, state, salary) VALUES (2, 'Electrician', 'California', 70000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT occupation, AVG(salary) FROM construction_workers WHERE state IN ('California', 'Texas') GROUP BY occupation;"
    },
    {
        "instruction": "입력 텍스트: 각 도시의 평균 크기와 가격은 어떻게 되며, 크기 순으로 정렬된 순서대로 나열해 주세요?\n\nDDL statements:\nCREATE TABLE Properties(id INT, size FLOAT, price INT, city VARCHAR(20));INSERT INTO Properties(id, size, price, city) VALUES (1, 1200, 500000, 'Seattle'), (2, 1500, 650000, 'Seattle'), (3, 1000, 400000, 'Portland'), (4, 2000, 800000, 'SanFrancisco');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(size), AVG(price) FROM Properties GROUP BY city ORDER BY AVG(size);"
    },
    {
        "instruction": "입력 텍스트: 각 주별로 그린 빌딩에서 발생하는 총 탄소 상쇄량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE green_buildings (building_id INT, building_name VARCHAR(50), state VARCHAR(50), certification_level VARCHAR(50), carbon_offsets FLOAT); INSERT INTO green_buildings (building_id, building_name, state, certification_level, carbon_offsets) VALUES (1, 'Green Building 1', 'StateA', 'Gold', 100.0), (2, 'Green Building 2', 'StateB', 'Platinum', 200.0), (3, 'Green Building 3', 'StateA', 'Silver', 150.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(carbon_offsets) FROM green_buildings GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 각 탄소 상쇄 이니셔티브의 총 CO2 상쇄량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE CarbonOffsetInitiatives (id INT, name TEXT, co2_offset_amount INT); INSERT INTO CarbonOffsetInitiatives (id, name, co2_offset_amount) VALUES (1, 'TreePlanting1', 500), (2, 'EnergyEfficiency1', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, co2_offset_amount FROM CarbonOffsetInitiatives;"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 숙박 시설의 평균 탄소 발자국은 얼마입니까?\n\nDDL statements:\nCREATE TABLE carbon_footprint (id INT, accommodation_id INT, carbon_footprint FLOAT); INSERT INTO carbon_footprint (id, accommodation_id, carbon_footprint) VALUES (1, 1, 5.2), (2, 2, 3.8); CREATE TABLE accommodations (id INT, name TEXT, country TEXT); INSERT INTO accommodations (id, name, country) VALUES (1, 'Eco Lodge', 'Costa Rica'), (2, 'Green Hotel', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(carbon_footprint) FROM carbon_footprint cf JOIN accommodations a ON cf.accommodation_id = a.id GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 재료 유형별 생산 당 평균 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Production (ProductionID INT, MaterialType VARCHAR(50), CO2Emission INT); INSERT INTO Production VALUES (1, 'Organic Cotton', 5), (2, 'Recycled Polyester', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MaterialType, AVG(CO2Emission) as AvgCO2Emission FROM Production GROUP BY MaterialType;"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 유럽에서 보고된 사이버 보안 사건은 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE cybersecurity_incidents (region VARCHAR(50), year INT, num_incidents INT); INSERT INTO cybersecurity_incidents (region, year, num_incidents) VALUES ('Europe', 2020, 7000), ('Europe', 2021, 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_incidents) FROM cybersecurity_incidents WHERE region = 'Europe' AND year BETWEEN 2020 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: 원주민 커뮤니티의 교사들에게 제공된 전문 개발 프로그램은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE teachers (teacher_id INT, professional_development_programs INT, community VARCHAR(50), last_update DATE); INSERT INTO teachers (teacher_id, professional_development_programs, community, last_update) VALUES (1, 3, 'Indigenous', '2022-01-01'), (2, 2, 'Urban', '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT t.community, AVG(t.professional_development_programs) as avg_programs_per_teacher FROM teachers t WHERE t.community = 'Indigenous' GROUP BY t.community;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 평균 토양 수분 수준이 가장 높은 상위 3개의 농장을 확인하세요.\n\nDDL statements:\nCREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT field_id, AVG(level) as avg_level FROM soil_moisture WHERE measurement >= DATEADD(month, -1, GETDATE()) GROUP BY field_id ORDER BY avg_level DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: sports' 또는 'technology'에 관심이 있는 독자들의 인구 통계적 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE demographics (city VARCHAR(255), gender VARCHAR(255), interest VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, gender, COUNT(*) AS readers FROM demographics WHERE interest IN ('sports', 'technology') GROUP BY city, gender;"
    },
    {
        "instruction": "입력 텍스트: factory1'에서 지난 분기에 생산된 총 폐기물 양은 얼마입니까?\n\nDDL statements:\nCREATE TABLE waste (factory VARCHAR(50), date DATE, waste_amount INT); INSERT INTO waste (factory, date, waste_amount) VALUES ('factory1', '2021-01-01', 500), ('factory1', '2021-04-01', 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(waste_amount) FROM waste WHERE factory = 'factory1' AND date >= '2021-01-01' AND date < '2021-04-01';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 시각 장애가 있는 학생들 중 보조 기술 지원을 받은 학생은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE student (id INT, disability VARCHAR(255)); INSERT INTO student (id, disability) VALUES (1, 'Visual Impairment'), (2, 'Hearing Impairment'), (3, 'Mobility Impairment'); CREATE TABLE support (id INT, student_id INT, type VARCHAR(255), date DATE); INSERT INTO support (id, student_id, type, date) VALUES (1, 1, 'Assistive Listening Devices', '2021-06-01'), (2, 2, 'Wheelchair Access', '2022-02-15'), (3, 3, 'Assistive Technology', '2022-03-03'), (4, 1, 'Screen Reader', '2022-08-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(s.id) as visual_impairment_support FROM support s JOIN student st ON s.student_id = st.id WHERE s.date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND st.disability = 'Visual Impairment' AND s.type IN ('Assistive Technology', 'Screen Reader');"
    },
    {
        "instruction": "입력 텍스트: 일본에서 호주로 해상으로 발송된 모든 화물의 배송 시간과 배송 비용을 보여주세요.\n\nDDL statements:\nCREATE TABLE Shipments(id INT, mode VARCHAR(50), source VARCHAR(50), destination VARCHAR(50), delivery_time DATE, shipping_cost FLOAT); INSERT INTO Shipments(id, mode, source, destination, delivery_time, shipping_cost) VALUES (1, 'sea', 'Japan', 'Australia', '2022-01-01', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Shipments.mode, Shipments.source, Shipments.destination, Shipments.delivery_time, Shipments.shipping_cost FROM Shipments WHERE Shipments.mode = 'sea' AND Shipments.source = 'Japan' AND Shipments.destination = 'Australia';"
    },
    {
        "instruction": "입력 텍스트: 지난해 아시아 국가에서 보고된 결핵 사례는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE countries (name PRIMARY KEY, region VARCHAR(20)); CREATE TABLE tb_cases (country VARCHAR(20), year INT, cases INT); INSERT INTO countries (name, region) VALUES ('India', 'Asia'), ('China', 'Asia'), ('Indonesia', 'Asia'), ('Pakistan', 'Asia'), ('Philippines', 'Asia'); INSERT INTO tb_cases (country, year, cases) VALUES ('India', 2021, 12345), ('China', 2021, 67890), ('Indonesia', 2021, 23456), ('Pakistan', 2021, 45678), ('Philippines', 2021, 78901), ('India', 2020, 11111), ('China', 2020, 77777), ('Indonesia', 2020, 33333), ('Pakistan', 2020, 66666), ('Philippines', 2020, 88888);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(t.cases) FROM tb_cases t JOIN countries c ON t.country = c.name WHERE c.region = 'Asia' AND t.year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 각 창의적 AI 애플리케이션의 최소 편향 점수와 관련된 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE CreativeAIs (id INT, name VARCHAR(255), bias_score DECIMAL(5,2)); INSERT INTO CreativeAIs (id, name, bias_score) VALUES (1, 'AI Painter', 0.15), (2, 'AI Music Composer', 0.08), (3, 'AI Poet', 0.12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, MIN(bias_score) as min_bias_score FROM CreativeAIs GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 장학금 유형별로 수여된 연구 장학금 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE grants (id INT, year INT, amount FLOAT, grant_type VARCHAR(20)); INSERT INTO grants (id, year, amount, grant_type) VALUES (1, 2020, 50000, 'Research'); INSERT INTO grants (id, year, amount, grant_type) VALUES (2, 2019, 75000, 'Teaching');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT grant_type, SUM(amount) FROM grants GROUP BY grant_type;"
    },
    {
        "instruction": "입력 텍스트: 캐나다와 미국에 있는 모든 수생 농장의 평균 수온은 얼마인가요?\n\nDDL statements:\nCREATE TABLE aquatic_farms (id INT, name TEXT, country TEXT, water_temp FLOAT); INSERT INTO aquatic_farms (id, name, country, water_temp) VALUES (1, 'Farm A', 'Canada', 15.3); INSERT INTO aquatic_farms (id, name, country, water_temp) VALUES (2, 'Farm B', 'Canada', 14.8); INSERT INTO aquatic_farms (id, name, country, water_temp) VALUES (3, 'Farm C', 'US', 16.1); INSERT INTO aquatic_farms (id, name, country, water_temp) VALUES (4, 'Farm D', 'US', 15.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(water_temp) FROM aquatic_farms WHERE country IN ('Canada', 'US');"
    },
    {
        "instruction": "입력 텍스트: ArtCollection' 테이블에 있는 작품 중 19세기에 만들어진 작품은 몇 점입니까?\n\nDDL statements:\nCREATE TABLE ArtCollection (ArtworkID INT, ArtworkYear INT); INSERT INTO ArtCollection (ArtworkID, ArtworkYear) VALUES (1, 1880), (2, 1885), (3, 1890), (4, 1895), (5, 1890), (6, 1895), (7, 1890), (8, 1895), (9, 1890), (10, 1895);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) AS Artworks19thCentury FROM ArtCollection WHERE ArtworkYear BETWEEN 1801 AND 1900;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 미국 도시에서의 스마트 시티 기술 최대 도입률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE city_tech (id INT, city VARCHAR(20), country VARCHAR(20), adoption_rate FLOAT, year INT); INSERT INTO city_tech (id, city, country, adoption_rate, year) VALUES (1, 'San Francisco', 'USA', 0.75, 2018), (2, 'Portland', 'USA', 0.68, 2019), (3, 'Vancouver', 'Canada', 0.55, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(adoption_rate) FROM city_tech WHERE country = 'USA' AND year BETWEEN 2016 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: \"fleet_vessels\" 테이블에서 선박 ID 66677의 선박 유형을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE fleet_vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH updated_vessel AS (UPDATE fleet_vessels SET type = 'New Vessel Type' WHERE id = 66677 RETURNING id, name, type, year) SELECT * FROM updated_vessel;"
    },
    {
        "instruction": "입력 텍스트: Role-playing' 게임 카테고리에서 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE games (game_id INT, game_name TEXT, game_category TEXT, game_purchase_price FLOAT, release_year INT); INSERT INTO games (game_id, game_name, game_category, game_purchase_price, release_year) VALUES (1, 'Game A', 'Role-playing', 49.99, 2018), (2, 'Game B', 'Action', 59.99, 2019), (3, 'Game C', 'Role-playing', 54.99, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(game_purchase_price) as total_revenue FROM games WHERE game_category = 'Role-playing';"
    },
    {
        "instruction": "입력 텍스트: 일본인 우주비행사의 최대 의료 데이터 기록 크기는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Astronaut_Medical_Data (id INT, astronaut_name VARCHAR(50), nationality VARCHAR(50), data_size INT); INSERT INTO Astronaut_Medical_Data (id, astronaut_name, nationality, data_size) VALUES (1, 'Naoko Yamazaki', 'Japan', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(data_size) FROM Astronaut_Medical_Data WHERE nationality = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 각 고객별로 두 번째로 높은 거래 금액과 그 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE customer_transactions (transaction_date DATE, customer_id INT, transaction_amt DECIMAL(10, 2)); INSERT INTO customer_transactions (transaction_date, customer_id, transaction_amt) VALUES ('2022-01-01', 1, 200.00), ('2022-01-05', 1, 300.00), ('2022-01-01', 2, 100.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT transaction_date, customer_id, transaction_amt, DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY transaction_amt DESC) AS rank FROM customer_transactions WHERE rank = 2;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 관광을 위해 소규모 섬 국가들이 시행하는 모든 실천 사례와 그 실천의 기간을 나열하세요.\n\nDDL statements:\nCREATE TABLE sustainable_tourism_practices_sis (id INT, country VARCHAR(50), practice VARCHAR(100), start_date DATE, end_date DATE, is_island BOOLEAN, region VARCHAR(50)); INSERT INTO sustainable_tourism_practices_sis (id, country, practice, start_date, end_date, is_island, region) VALUES (1, 'Maldives', 'Coral Reef Protection', '2015-01-01', '2030-12-31', true, 'South Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT stp.practice, stp.country, stp.start_date, stp.end_date FROM sustainable_tourism_practices_sis stp WHERE stp.is_island = true;"
    },
    {
        "instruction": "입력 텍스트: 고액 자산가' 부문의 고객들에 대한 사기성 거래의 총 건수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Clients (ClientID int, Name varchar(50), Division varchar(50)); INSERT INTO Clients (ClientID, Name, Division) VALUES (10, 'Alex Thompson', 'High Net Worth'), (11, 'Bella Chen', 'Retail'), (12, 'Charlie Lee', 'High Net Worth'); CREATE TABLE Transactions (TransactionID int, ClientID int, Amount decimal(10,2), Fraudulent int); INSERT INTO Transactions (TransactionID, ClientID, Amount, Fraudulent) VALUES (100, 10, 5000, 1), (101, 10, 7000, 0), (102, 11, 3000, 1), (103, 12, 8000, 1), (104, 11, 9000, 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(t.TransactionID) as TotalFraudulentTransactions FROM Clients c INNER JOIN Transactions t ON c.ClientID = t.ClientID WHERE c.Division = 'High Net Worth' AND t.Fraudulent = 1;"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 분야의 AI 프로젝트에 할당된 최소 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE healthcare_ai (id INT, sector VARCHAR(20), budget INT); INSERT INTO healthcare_ai (id, sector, budget) VALUES (1, 'healthcare', 200000), (2, 'healthcare', 150000), (3, 'healthcare', 250000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(budget) FROM healthcare_ai WHERE sector = 'healthcare';"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 결제를 하지 않은 모든 모바일 및 광대역 가입자와 그들의 마지막 결제 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE payment_dates (subscriber_id INT, payment_date DATE); INSERT INTO payment_dates (subscriber_id, payment_date) VALUES (1, '2021-05-10'), (2, '2021-07-15'), (3, '2021-06-01'), (4, '2021-04-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT subscriber_id FROM payment_dates WHERE payment_date <= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND payment_date IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 발로란트를 플레이한 모든 플레이어들의 총 플레이 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE players (id INT, name VARCHAR(50), age INT, game VARCHAR(50), hours_played INT); INSERT INTO players (id, name, age, game, hours_played) VALUES (1, 'John Doe', 25, 'Valorant', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(hours_played) AS total_hours FROM players WHERE game = 'Valorant';"
    },
    {
        "instruction": "입력 텍스트: 연도별로 수여된 연구 장학금의 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE research_grants (id INT, student_id INT, year INT, amount DECIMAL(10, 2)); INSERT INTO research_grants VALUES (1, 1, 2021, 10000); INSERT INTO research_grants VALUES (2, 2, 2020, 12000); INSERT INTO research_grants VALUES (3, 1, 2021, 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.year, SUM(r.amount) FROM research_grants r GROUP BY r.year;"
    },
    {
        "instruction": "입력 텍스트: 각 기계 유형별 총 구리 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE production (id INT, machine_type VARCHAR(20), copper_production FLOAT); INSERT INTO production (id, machine_type, copper_production) VALUES (1, 'TypeA', 1200.5), (2, 'TypeB', 1500.3), (3, 'TypeA', 1300.0), (4, 'TypeC', 1800.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT machine_type, SUM(copper_production) as total_production FROM production GROUP BY machine_type;"
    },
    {
        "instruction": "입력 텍스트: 리조트 호텔의 호텔별 평균 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels_types (hotel_id INT, type TEXT); CREATE TABLE bookings (booking_id INT, hotel_id INT, revenue FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(subquery.revenue) FROM (SELECT hotel_id, SUM(revenue) as revenue FROM bookings GROUP BY hotel_id) as subquery WHERE hotel_id IN (SELECT hotel_id FROM hotels_types WHERE type = 'Resort');"
    },
    {
        "instruction": "입력 텍스트: 서아프리카에서 500만 달러 이상 투자된 경제 다각화 노력을 확인하세요.\n\nDDL statements:\nCREATE TABLE DiversificationEfforts (id INT, effort_name TEXT, location TEXT, investment FLOAT); INSERT INTO DiversificationEfforts (id, effort_name, location, investment) VALUES (1, 'Renewable Energy West Africa', 'West Africa', 5500000); INSERT INTO DiversificationEfforts (id, effort_name, location, investment) VALUES (2, 'Tourism Development West Africa', 'West Africa', 4000000); INSERT INTO DiversificationEfforts (id, effort_name, location, investment) VALUES (3, 'Mining West Africa', 'West Africa', 3500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT effort_name, location FROM DiversificationEfforts WHERE investment > 5000000 AND location LIKE '%West Africa%';"
    },
    {
        "instruction": "입력 텍스트: education' 산업에서 노조 회원이 아닌 파트타임 근로자의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE parttime_workers (id INT, industry VARCHAR(20), salary FLOAT, union_member BOOLEAN); INSERT INTO parttime_workers (id, industry, salary, union_member) VALUES (1, 'healthcare', 30000.0, false), (2, 'healthcare', 32000.0, false), (3, 'manufacturing', 25000.0, true), (4, 'retail', 20000.0, false), (5, 'retail', 22000.0, true), (6, 'education', 25000.0, false), (7, 'education', 26000.0, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(salary) FROM parttime_workers WHERE industry = 'education' AND union_member = false;"
    },
    {
        "instruction": "입력 텍스트: 교육 분야에서 장애를 가진 사람이 설립한 스타트업이 받은 최소 자금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name VARCHAR(255), sector VARCHAR(255), founding_date DATE, funding FLOAT, founder_disability BOOLEAN); INSERT INTO company (id, name, sector, founding_date, funding, founder_disability) VALUES (1, 'Echo Inc', 'Technology', '2010-01-01', 3000000.0, FALSE); INSERT INTO company (id, name, sector, founding_date, funding, founder_disability) VALUES (2, 'Foxtrot LLC', 'Healthcare', '2012-05-15', 7000000.0, FALSE); INSERT INTO company (id, name, sector, founding_date, funding, founder_disability) VALUES (3, 'Golf Alpha Bravo', 'Technology', '2015-09-09', 10000000.0, FALSE); INSERT INTO company (id, name, sector, founding_date, funding, founder_disability) VALUES (4, 'Hotel India', 'Retail', '2018-01-01', 5000000.0, TRUE); INSERT INTO company (id, name, sector, founding_date, funding, founder_disability) VALUES (5, 'Kilo Lima', 'Education', '2020-06-19', 1200000.0, TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(funding) FROM company WHERE sector = 'Education' AND founder_disability = TRUE;"
    },
    {
        "instruction": "입력 텍스트: WaterConservation' 테이블에 구현된 물 절약 이니셔티브는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE WaterConservation (initiative_id INT, initiative_type VARCHAR(20), region VARCHAR(20)); INSERT INTO WaterConservation (initiative_id, initiative_type, region) VALUES (1, 'Rainwater Harvesting', 'RegionA'), (2, 'Greywater Recycling', 'RegionB'), (3, 'Smart Irrigation', 'RegionC');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(initiative_id) FROM WaterConservation;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월 각 교통 시스템별 평균 요금을 찾으세요.\n\nDDL statements:\nCREATE TABLE fare_collection (fare_id INT, fare_date DATE, fare_amount FLOAT, system_name VARCHAR(20)); CREATE TABLE trips (trip_id INT, fare_id INT, trip_start_time DATETIME, trip_end_time DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT system_name, AVG(fare_amount) FROM fare_collection FC JOIN trips T ON FC.fare_id = T.fare_id WHERE system_name IN ('Bus', 'Subway', 'Tram') AND FC.fare_date BETWEEN '2022-02-01' AND '2022-02-28' GROUP BY system_name;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 인도네시아가 동남아시아 국가들과 체결한 방위 협정은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE indonesia_defense_agreements (year INT, partner VARCHAR(50), agreement_type VARCHAR(50)); INSERT INTO indonesia_defense_agreements (year, partner, agreement_type) VALUES (2020, 'Malaysia', 'Defense Cooperation'), (2020, 'Singapore', 'Defense Cooperation'), (2020, 'Thailand', 'Defense Cooperation'), (2020, 'Philippines', 'Defense Cooperation'), (2020, 'Vietnam', 'Defense Cooperation'), (2020, 'Cambodia', 'Defense Cooperation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM indonesia_defense_agreements WHERE year = 2020 AND partner IN ('Malaysia', 'Singapore', 'Thailand', 'Philippines', 'Vietnam', 'Cambodia');"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 지속 가능한 여성용 신발의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (id INT, product VARCHAR(20), category VARCHAR(20), price DECIMAL(5,2)); INSERT INTO products VALUES (1, 'shoes', 'women', 100.50), (2, 'shoes', 'women', 120.00), (3, 'socks', 'men', 15.00); CREATE TABLE sustainability (id INT, product VARCHAR(20), sustainable BOOLEAN); INSERT INTO sustainability VALUES (1, 'shoes', true), (2, 'socks', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(p.price) FROM products p INNER JOIN sustainability s ON p.product = s.product WHERE p.category = 'women' AND s.sustainable = true AND p.country = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: high_bed_hospitals' 뷰를 보여주세요.\n\nDDL statements:\nCREATE TABLE rural_hospitals( hospital_id INT PRIMARY KEY, name VARCHAR(255), bed_count INT, rural_population_served INT); CREATE VIEW high_bed_hospitals AS SELECT name, bed_count FROM rural_hospitals WHERE bed_count > 100;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM high_bed_hospitals;"
    },
    {
        "instruction": "입력 텍스트: fan_demographics' 테이블에서 'New York' 출신 팬은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE fan_demographics (fan_id INT, name VARCHAR(50), city VARCHAR(50), state VARCHAR(50)); INSERT INTO fan_demographics (fan_id, name, city, state) VALUES (1, 'Mike Johnson', 'Los Angeles', 'CA'); INSERT INTO fan_demographics (fan_id, name, city, state) VALUES (2, 'Sarah Lee', 'New York', 'NY');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM fan_demographics WHERE state = 'NY';"
    },
    {
        "instruction": "입력 텍스트: WA에서의 광업 작업으로 인한 총 CO2 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE emissions (site VARCHAR(20), state VARCHAR(20), co2_emission INT); INSERT INTO emissions (site, state, co2_emission) VALUES ('SiteA', 'QLD', 2500), ('SiteB', 'NSW', 3000), ('SiteC', 'WA', 3500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(co2_emission) FROM emissions WHERE state = 'WA';"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 제출된 청원 수를 포함하여 가장 많은 청원이 제출된 상위 3개 주를 확인하세요.\n\nDDL statements:\nCREATE TABLE users (id INT PRIMARY KEY, state VARCHAR(2));CREATE TABLE petitions (id INT PRIMARY KEY, user_id INT, title VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.state, COUNT(p.id) AS num_petitions FROM petitions p JOIN users u ON p.user_id = u.id GROUP BY u.state ORDER BY num_petitions DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2020년도 지역별 아동 1인당 평균 소아과 방문 횟수를 계산하세요.\n\nDDL statements:\nCREATE TABLE pediatric_visits (child_id INTEGER, region VARCHAR(50), year INTEGER, num_visits INTEGER); INSERT INTO pediatric_visits (child_id, region, year, num_visits) VALUES (1, 'North', 2020, 3), (2, 'North', 2020, 4), (3, 'South', 2020, 2), (4, 'East', 2020, 5), (5, 'West', 2020, 6), (6, 'West', 2020, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(num_visits) as avg_visits_per_child FROM pediatric_visits WHERE year = 2020 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: volunteer_history' 테이블에 기록된 'repeat_volunteers'는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE volunteer_history (volunteer_type VARCHAR(20)); INSERT INTO volunteer_history (volunteer_type) VALUES ('first_time_volunteers'), ('repeat_volunteers'), ('first_time_volunteers');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM volunteer_history WHERE volunteer_type = 'repeat_volunteers';"
    },
    {
        "instruction": "입력 텍스트: 2010년 이전에 출시된 모든 영화와 TV 쇼의 총 제작 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Movies (id INT, title VARCHAR(255), release_year INT, budget INT); CREATE TABLE TVShows (id INT, title VARCHAR(255), release_year INT, budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM Movies WHERE release_year < 2010 UNION ALL SELECT SUM(budget) FROM TVShows WHERE release_year < 2010;"
    },
    {
        "instruction": "입력 텍스트: 박물관' 카테고리에 속하면서 가격이 50 이상인 이벤트의 총 참석자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE events (id INT, name VARCHAR(255), date DATE, category VARCHAR(255), price DECIMAL(5,2), attendance INT); INSERT INTO events (id, name, date, category, price, attendance) VALUES (1, 'Exhibition', '2022-06-01', 'museums', 75.00, 1000), (2, 'Tour', '2022-06-02', 'historical', 20.00, 500), (3, 'Workshop', '2022-06-03', 'museums', 30.00, 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(attendance) FROM events WHERE category = 'museums' AND price > 50;"
    },
    {
        "instruction": "입력 텍스트: 선박 유형별 총 선박 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists vessels (id INT, name VARCHAR(255), type VARCHAR(255), year_built INT); INSERT INTO vessels (id, name, type, year_built) VALUES (1, 'MV XYZ', 'Container', 2010); INSERT INTO vessels (id, name, type, year_built) VALUES (2, 'MS KLM', 'Bulk Carrier', 2015); CREATE VIEW vessels_by_type AS SELECT type, COUNT(*) as total FROM vessels GROUP BY type;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM vessels_by_type;"
    },
    {
        "instruction": "입력 텍스트: 스페인의 각 도시에서 가장 높은 도입률을 가진 기술은 무엇인가요?\n\nDDL statements:\nCREATE TABLE smart_cities (id INT, city VARCHAR(255), country VARCHAR(255), technology VARCHAR(255), adoption_rate DECIMAL(5,4)); INSERT INTO smart_cities (id, city, country, technology, adoption_rate) VALUES (1, 'Barcelona', 'Spain', 'Smart Lighting', 0.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, technology, MAX(adoption_rate) as max_adoption_rate FROM smart_cities WHERE country = 'Spain' GROUP BY city, technology;"
    },
    {
        "instruction": "입력 텍스트: 우주에서 가장 많은 시간을 보낸 우주인과 그들이 우주에서 보낸 총 일수를 나열하세요.\n\nDDL statements:\nCREATE TABLE astronauts (name VARCHAR(255), days_in_space FLOAT); INSERT INTO astronauts (name, days_in_space) VALUES ('John Doe', 450); INSERT INTO astronauts (name, days_in_space) VALUES ('Jane Smith', 600); INSERT INTO astronauts (name, days_in_space) VALUES ('Mike Johnson', 550);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, MAX(days_in_space) FROM astronauts;"
    },
    {
        "instruction": "입력 텍스트: id가 2인 평화유지 작전의 시작 날짜를 '2018-05-01'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE peacekeeping_operations (id INT, name VARCHAR(255), start_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE peacekeeping_operations SET start_date = '2018-05-01' WHERE id = 2;"
    },
    {
        "instruction": "입력 텍스트: 멕시코 시티 지역의 'Pablo Garcia'라는 새 회원을 멤버십 가격 60.00으로 추가하세요.\n\nDDL statements:\nCREATE TABLE Memberships (id INT, member_name TEXT, region TEXT, price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Memberships (id, member_name, region, price) VALUES (3, 'Pablo Garcia', 'Mexico City', 60.00);"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 식이장애를 가진 환자들이 참석한 지원 그룹 모임의 최대 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE support_groups (support_group_id INT, patient_id INT, country VARCHAR(50), condition VARCHAR(50), num_meetings INT); INSERT INTO support_groups (support_group_id, patient_id, country, condition, num_meetings) VALUES (1, 40, 'Canada', 'Eating Disorder', 6), (2, 41, 'Canada', 'Eating Disorder', 8), (3, 42, 'Canada', 'Eating Disorder', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(num_meetings) FROM support_groups WHERE country = 'Canada' AND condition = 'Eating Disorder';"
    },
    {
        "instruction": "입력 텍스트: quality control' 부서에서 일하는 모든 직원의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(20), salary DECIMAL(10, 2)); INSERT INTO employees (id, name, department, salary) VALUES (1, 'John Doe', 'manufacturing', 50000.00), (2, 'Jane Smith', 'engineering', 60000.00), (3, 'Alice Johnson', 'HR', 55000.00), (4, 'Bob Brown', 'quality control', 52000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM employees WHERE department = 'quality control';"
    },
    {
        "instruction": "입력 텍스트: 각 기관별로 총 기부 금액과 지지자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, organization TEXT, supporter INT, amount FLOAT); INSERT INTO donations (id, organization, supporter, amount) VALUES (1, 'WFP', 1, 50.00), (2, 'UNHCR', 2, 100.00), (3, 'Save the Children', 3, 150.00), (4, 'WFP', 4, 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organization, COUNT(supporter) AS supporters, SUM(amount) AS total_donations FROM donations GROUP BY organization;"
    },
    {
        "instruction": "입력 텍스트: 2021년 AAPI 커뮤니티에서 활동한 자원봉사자의 총 인원수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Volunteers2021 (VolunteerID int, VolunteerName varchar(50), VolunteerDate date, Community varchar(50)); INSERT INTO Volunteers2021 (VolunteerID, VolunteerName, VolunteerDate, Community) VALUES (1, 'Jane Lee', '2021-03-20', 'AAPI'); INSERT INTO Volunteers2021 (VolunteerID, VolunteerName, VolunteerDate, Community) VALUES (2, 'David Wong', '2021-06-05', 'Asian American');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Volunteers2021 WHERE Community = 'AAPI' AND YEAR(VolunteerDate) = 2021;"
    },
    {
        "instruction": "입력 텍스트: green_buildings 테이블에 다음 데이터를 가진 새로운 레코드를 추가하세요: (5, 'Building E', 'LEED', 'Asia').\n\nDDL statements:\nCREATE TABLE green_buildings (building_id INT, building_name VARCHAR(255), certification VARCHAR(255), region VARCHAR(255)); INSERT INTO green_buildings (building_id, building_name, certification, region) VALUES (1, 'Building A', 'LEED', 'Americas'), (2, 'Building B', 'BREEAM', 'Europe'), (3, 'Building C', 'LEED', 'Americas'), (4, 'Building D', 'WELL', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO green_buildings (building_id, building_name, certification, region) VALUES (5, 'Building E', 'LEED', 'Asia');"
    },
    {
        "instruction": "입력 텍스트: 윤리적인 '의류' 판매의 평균 매출액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, product_id INT, category VARCHAR(20), revenue DECIMAL(5,2), is_ethical BOOLEAN); INSERT INTO sales (sale_id, product_id, category, revenue, is_ethical) VALUES (1, 1, 'apparel', 150.00, true), (2, 2, 'apparel', 120.00, false), (3, 3, 'apparel', 175.00, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(revenue) FROM sales WHERE category = 'apparel' AND is_ethical = true;"
    },
    {
        "instruction": "입력 텍스트: 유럽과 아시아에서 모두 인기 있는 패션 트렌드를 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE European_Trends (Trend_ID INT, Trend_Name TEXT); INSERT INTO European_Trends (Trend_ID, Trend_Name) VALUES (1, 'Minimalist Style'), (2, 'Bohemian Style'); CREATE TABLE Asian_Trends (Trend_ID INT, Trend_Name TEXT); INSERT INTO Asian_Trends (Trend_ID, Trend_Name) VALUES (1, 'K-Pop Fashion'), (2, 'Japanese Streetwear');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT European_Trends.Trend_Name FROM European_Trends INNER JOIN Asian_Trends ON European_Trends.Trend_Name = Asian_Trends.Trend_Name;"
    },
    {
        "instruction": "입력 텍스트: 2021년 이전에 고용된 HR 부서 직원들의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Gender VARCHAR(10), Salary FLOAT, HireDate DATE); INSERT INTO Employees (EmployeeID, Department, Gender, Salary, HireDate) VALUES (1, 'IT', 'Male', 70000, '2021-02-15'), (2, 'HR', 'Female', 60000, '2018-05-01'), (3, 'IT', 'Female', 75000, '2020-11-01'), (4, 'IT', 'Male', 78000, '2019-01-10'), (5, 'Finance', 'Male', 85000, '2022-03-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM Employees WHERE Department = 'HR' AND YEAR(HireDate) < 2021;"
    },
    {
        "instruction": "입력 텍스트: 대서양과 태평양에 서식하는 해양 생물 종의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE marine_species (id INT, species_name VARCHAR(255), location VARCHAR(255)); INSERT INTO marine_species (id, species_name, location) VALUES (1, 'Narwhal', 'Arctic'), (2, 'Beluga', 'Arctic'), (3, 'Blue Whale', 'Atlantic'), (4, 'Giant Pacific Octopus', 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM marine_species WHERE marine_species.location IN ('Atlantic', 'Pacific');"
    },
    {
        "instruction": "입력 텍스트: 적어도 한 번의 백신 접종을 받은 환자들의 백신 접종 상태를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE patients (patient_id INT, patient_name TEXT, vaccination_status TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE patients SET vaccination_status = 'Partially Vaccinated' WHERE patient_id IN (SELECT patient_id FROM vaccination_records WHERE dose_received >= 1);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 월에 고용된 직원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID int, HireDate date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_PART('month', e.HireDate) as Month, COUNT(DISTINCT EmployeeID) as NumberHired FROM Employees e WHERE e.HireDate >= (CURRENT_DATE - INTERVAL '1 year') GROUP BY Month ORDER BY Month;"
    },
    {
        "instruction": "입력 텍스트: 어떤 선수의 최대 연속 승리 횟수는 몇 회인가요?\n\nDDL statements:\nCREATE TABLE games (id INT, player_id INT, won BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player_id, MAX(consecutive_wins) FROM (SELECT player_id, won, SUM(won) OVER (PARTITION BY player_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS consecutive_wins FROM games) AS consecutive_wins_by_player GROUP BY player_id;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 있는 각 재생 에너지 프로젝트 유형별로 총 에너지 소비량과 총 에너지 절감량을 보여주세요.\n\nDDL statements:\nCREATE TABLE RenewableEnergyProjectTypes (TypeID INT, TypeName VARCHAR(50));CREATE TABLE RenewableEnergyProjects (ProjectID INT, TypeID INT, EnergyConsumption FLOAT, EnergySavings FLOAT, State VARCHAR(2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT RenewableEnergyProjectTypes.TypeName, SUM(RenewableEnergyProjects.EnergyConsumption) AS TotalEnergyConsumption, SUM(RenewableEnergyProjects.EnergySavings) AS TotalEnergySavings FROM RenewableEnergyProjectTypes INNER JOIN RenewableEnergyProjects ON RenewableEnergyProjectTypes.TypeID = RenewableEnergyProjects.TypeID WHERE RenewableEnergyProjects.State = 'CA' GROUP BY RenewableEnergyProjectTypes.TypeName;"
    },
    {
        "instruction": "입력 텍스트: 회사 'Tesla'에서 제조한 차량의 평균 안전 등급은 얼마입니까?\n\nDDL statements:\nCREATE TABLE VehicleManufacturers (Manufacturer VARCHAR(255), SafetyRating FLOAT); INSERT INTO VehicleManufacturers (Manufacturer, SafetyRating) VALUES ('Tesla', 5.1), ('Toyota', 4.8), ('Honda', 4.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(SafetyRating) FROM VehicleManufacturers WHERE Manufacturer = 'Tesla';"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 지원 그룹에 참여한 조현병 환자의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE patients (id INT, age INT, condition VARCHAR(50), country VARCHAR(50)); INSERT INTO patients (id, age, condition, country) VALUES (1, 35, 'Schizophrenia', 'Europe'), (2, 45, 'Depression', 'Europe'), (3, 28, 'Schizophrenia', 'Europe'), (4, 60, 'Anxiety', 'Europe'); CREATE TABLE support_groups (id INT, patient_id INT); INSERT INTO support_groups (id, patient_id) VALUES (1, 1), (2, 3), (3, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(patients.age) FROM patients INNER JOIN support_groups ON patients.id = support_groups.patient_id WHERE patients.condition = 'Schizophrenia' AND patients.country = 'Europe';"
    },
    {
        "instruction": "입력 텍스트: 가장 최근의 무차별 공격에 대한 세부 사항은 무엇인가요?\n\nDDL statements:\nCREATE TABLE brute_force_attacks (id INT, ip VARCHAR(255), timestamp TIMESTAMP); INSERT INTO brute_force_attacks (id, ip, timestamp) VALUES (1, '10.0.0.1', '2021-01-01 10:00:00'), (2, '10.0.0.2', '2021-01-01 11:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM brute_force_attacks WHERE timestamp = (SELECT MAX(timestamp) FROM brute_force_attacks);"
    },
    {
        "instruction": "입력 텍스트: 각 법원 위치별로 30일 이내에 해결된 사건의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Courts (Location VARCHAR(255), CourtID INT); CREATE TABLE Cases (CaseID INT, CourtID INT, CaseDate DATE, ResolutionDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Courts.Location, COUNT(*) OVER(PARTITION BY Courts.Location) * 100.0 / SUM(COUNT(*)) OVER() AS Percentage FROM Courts JOIN Cases ON Courts.CourtID = Cases.CourtID WHERE DATEDIFF(DAY, CaseDate, ResolutionDate) <= 30 GROUP BY Courts.Location, Courts.CourtID;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 각 미디어 아웃렛에서 발행된 기사 수를 요일별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE articles (id INT, media_outlet VARCHAR(20), date DATE); CREATE VIEW last_week AS SELECT CURDATE() - INTERVAL day day FROM (SELECT 0 day UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6) days; INSERT INTO articles VALUES (3, 'BBC', '2022-01-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(articles.date, '%W') as weekday, media_outlet, COUNT(*) as article_count FROM articles INNER JOIN last_week ON DATEDIFF(articles.date, last_week.day) BETWEEN 0 AND 6 GROUP BY weekday, media_outlet;"
    },
    {
        "instruction": "입력 텍스트: 총 청취 시간으로 가장 많이 스트리밍된 상위 5곡은 무엇인가요?\n\nDDL statements:\nCREATE TABLE songs (song_id INT, song_name VARCHAR(255), genre VARCHAR(255)); ALTER TABLE music_streams ADD COLUMN song_id INT; ALTER TABLE music_streams ADD FOREIGN KEY (song_id) REFERENCES songs(song_id);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성:  SELECT song_name, SUM(listening_time) as total_time FROM music_streams JOIN songs ON music_streams.song_id = songs.song_id GROUP BY song_name ORDER BY total_time DESC LIMIT 5; "
    },
    {
        "instruction": "입력 텍스트: Open Pedagogy'에 대한 전문 개발을 완료한 교사들의 평균 연령은 얼마입니까?\n\nDDL statements:\nCREATE TABLE teachers (id INT, name TEXT, age INT, profession TEXT); INSERT INTO teachers (id, name, age, profession) VALUES (1, 'John Doe', 45, 'Teacher'); INSERT INTO teachers (id, name, age, profession) VALUES (2, 'Jane Smith', 35, 'Teacher'); CREATE TABLE professional_development (id INT, teacher_id INT, topic TEXT, completed_date DATE); INSERT INTO professional_development (id, teacher_id, topic, completed_date) VALUES (1, 1, 'Open Pedagogy', '2021-08-01'); INSERT INTO professional_development (id, teacher_id, topic, completed_date) VALUES (2, 2, 'Instructional Design', '2021-07-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(teachers.age) FROM teachers INNER JOIN professional_development ON teachers.id = professional_development.teacher_id WHERE professional_development.topic = 'Open Pedagogy';"
    },
    {
        "instruction": "입력 텍스트: \"사라\" 또는 \"아메드\"라는 이름을 가진 사람이 설립한 모든 회사를 나열하세요.\n\nDDL statements:\nCREATE TABLE company (id INT, name VARCHAR(255), founder VARCHAR(255)); INSERT INTO company (id, name, founder) VALUES (1, 'Acme Inc', 'Sara'), (2, 'Beta Corp', 'Ahmed'), (3, 'Charlie Inc', 'David');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM company WHERE founder IN ('Sara', 'Ahmed');"
    },
    {
        "instruction": "입력 텍스트: RPG 장르의 게임들의 총 수익과 2020년 이전에 출시된 RPG 게임의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Games (GameID INT, GameName VARCHAR(50), ReleaseYear INT, Genre VARCHAR(50), Price DECIMAL(5, 2)); INSERT INTO Games (GameID, GameName, ReleaseYear, Genre, Price) VALUES (1, 'GameA', 2022, 'Action', 60.00), (2, 'GameB', 2019, 'Adventure', 50.00), (3, 'GameC', 2018, 'RPG', 40.00), (4, 'GameD', 2017, 'RPG', 30.00), (5, 'GameE', 2016, 'RPG', 20.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Genre, COUNT(GameID) AS NumberOfGames, SUM(Price) AS TotalRevenue FROM Games WHERE Genre = 'RPG' AND ReleaseYear < 2020 GROUP BY Genre;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양' 지역에 있는 군사 기지의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE military_bases (id INT, base_name TEXT, region TEXT); INSERT INTO military_bases (id, base_name, region) VALUES (1, 'Andersen AFB', 'Asia-Pacific'), (2, 'Camp Zama', 'Asia-Pacific'), (3, 'Camp Humphreys', 'Asia-Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM military_bases WHERE region = 'Asia-Pacific';"
    },
    {
        "instruction": "입력 텍스트: 오클랜드의 약국에서 판매되는 대마초 꽃의 그램당 평균 소매 가격이 품종별로 얼마인지, 가격이 높은 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE Dispensaries (Dispensary_ID INT, Dispensary_Name TEXT, City TEXT, State TEXT); INSERT INTO Dispensaries (Dispensary_ID, Dispensary_Name, City, State) VALUES (1, 'Oakland Organics', 'Oakland', 'CA'); CREATE TABLE Sales (Sale_ID INT, Dispensary_ID INT, Strain TEXT, Retail_Price DECIMAL); INSERT INTO Sales (Sale_ID, Dispensary_ID, Strain, Retail_Price) VALUES (1, 1, 'Blue Dream', 12.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Strain, AVG(Retail_Price) as Avg_Price FROM Sales JOIN Dispensaries ON Sales.Dispensary_ID = Dispensaries.Dispensary_ID WHERE City = 'Oakland' GROUP BY Strain ORDER BY Avg_Price DESC;"
    },
    {
        "instruction": "입력 텍스트: 다양성 및 포용성 교육을 이수한 직원 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE Training (EmployeeID INT, TrainingName VARCHAR(50)); INSERT INTO Training (EmployeeID, TrainingName) VALUES (1, 'Diversity and Inclusion Training'), (2, 'Cybersecurity Training'), (3, 'Diversity and Inclusion Training');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT EmployeeID) FROM Training WHERE TrainingName = 'Diversity and Inclusion Training';"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 에너지 저장 시설 중 최소 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE energy_storage_canada (id INT, name TEXT, capacity FLOAT); INSERT INTO energy_storage_canada (id, name, capacity) VALUES (1, 'Storage 1', 70.0), (2, 'Storage 2', 80.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(capacity) FROM energy_storage_canada;"
    },
    {
        "instruction": "입력 텍스트: 각 우주 기구가 수행한 우주 임무는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE SpaceOrganizations (id INT, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE SpaceMissions (id INT, organization_id INT, mission VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SpaceOrganizations.name, COUNT(SpaceMissions.id) FROM SpaceOrganizations INNER JOIN SpaceMissions ON SpaceOrganizations.id = SpaceMissions.organization_id GROUP BY SpaceOrganizations.name;"
    },
    {
        "instruction": "입력 텍스트: 2023년 1분기에 영업 부서의 총 급여 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Salary FLOAT, HireDate DATE); INSERT INTO Employees (EmployeeID, Name, Department, Salary, HireDate) VALUES (1, 'John Doe', 'IT', 75000.00, '2021-01-01'), (2, 'Jane Smith', 'HR', 60000.00, '2022-01-01'), (3, 'Jim Brown', 'IT', 80000.00, '2021-03-01'), (4, 'Sara Johnson', 'Sales', 65000.00, '2023-01-05'), (5, 'Bob Williams', 'Sales', 70000.00, '2023-01-15'), (6, 'Alice Davis', 'Sales', 75000.00, '2023-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Salary) FROM Employees WHERE Department = 'Sales' AND HireDate BETWEEN '2023-01-01' AND '2023-03-31';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 인도네시아 논에서 IoT 센서 측정치에 따른 평균 질소 수준은 얼마입니까?\n\nDDL statements:\nCREATE TABLE if not exists iot_sensor_data (id INT, location VARCHAR(255), nitrogen_level FLOAT, metric_time DATETIME); INSERT INTO iot_sensor_data (id, location, nitrogen_level, metric_time) VALUES (1, 'Indonesia', 3.4, '2022-01-01 10:00:00'), (2, 'Thailand', 2.9, '2022-01-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(nitrogen_level) FROM iot_sensor_data WHERE location = 'Indonesia' AND metric_time BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW();"
    },
    {
        "instruction": "입력 텍스트: 특정 항구에 있는 선박의 최대 수용 능력은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ports ( id INT, name VARCHAR(255), location VARCHAR(255), operated_by VARCHAR(255)); CREATE TABLE vessels ( id INT, name VARCHAR(255), port_id INT, capacity INT); INSERT INTO ports (id, name, location, operated_by) VALUES (1, 'Port A', 'New York', 'Company A'), (2, 'Port B', 'Los Angeles', 'Company B'); INSERT INTO vessels (id, name, port_id, capacity) VALUES (1, 'Vessel A', 1, 5000), (2, 'Vessel B', 1, 6000), (3, 'Vessel C', 2, 4000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(vessels.capacity) as max_capacity FROM vessels INNER JOIN ports ON vessels.port_id = ports.id WHERE ports.name = 'Port A';"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 위치한 창고들의 총 수용 능력을 보여주세요.\n\nDDL statements:\nCREATE TABLE warehouse (id INT, city VARCHAR(20), capacity INT); INSERT INTO warehouse (id, city, capacity) VALUES (1, 'Chicago', 1000), (2, 'Houston', 1500), (3, 'Miami', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM warehouse WHERE city = 'Houston';"
    },
    {
        "instruction": "입력 텍스트: 중국 베이징 시에 있는 모든 다리의 평균 길이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Bridges (id INT, name VARCHAR(100), length FLOAT, city VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(length) FROM Bridges WHERE city = 'Beijing';"
    },
    {
        "instruction": "입력 텍스트: 금으로 만들어진 유물이 발견된 발굴 현장의 이름, 위치, 그리고 시대는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ExcavationSites (SiteID int, SiteName varchar(50), Location varchar(50)); CREATE TABLE Artifacts (ArtifactID int, SiteID int, Age varchar(20), Material varchar(20), Description varchar(100)); CREATE TABLE HistoricalContexts (ContextID int, ArtifactID int, Era varchar(20), Culture varchar(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ExcavationSites.SiteName, ExcavationSites.Location, HistoricalContexts.Era FROM ExcavationSites INNER JOIN Artifacts ON ExcavationSites.SiteID = Artifacts.SiteID INNER JOIN HistoricalContexts ON Artifacts.ArtifactID = HistoricalContexts.ArtifactID WHERE Artifacts.Material = 'gold';"
    },
    {
        "instruction": "입력 텍스트: 2021년 독일에서 전기차량이 이동한 총 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE electric_vehicles (vehicle_id INT, trip_start_time TIMESTAMP, trip_end_time TIMESTAMP, trip_distance FLOAT, vehicle_type VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(trip_distance) as total_distance FROM electric_vehicles WHERE country = 'Germany' AND YEAR(trip_start_time) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아에 위치한 약국에서 판매량이 가장 많은 상위 5개의 대마초 종류는 무엇이며, 총 판매량으로 정렬된 순서대로 나열하세요.\n\nDDL statements:\nCREATE TABLE dispensaries (id INT, name TEXT, state TEXT); INSERT INTO dispensaries (id, name, state) VALUES (1, 'Dispensary A', 'California'), (2, 'Dispensary B', 'California'), (3, 'Dispensary C', 'Colorado'); CREATE TABLE sales (dispensary_id INT, strain TEXT, sales INT); INSERT INTO sales (dispensary_id, strain, sales) VALUES (1, 'Blue Dream', 500), (1, 'Girl Scout Cookies', 700), (2, 'Blue Dream', 800), (2, 'Sour Diesel', 900), (3, 'Gorilla Glue', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.strain, SUM(s.sales) as total_sales FROM sales s JOIN dispensaries d ON s.dispensary_id = d.id WHERE d.state = 'California' GROUP BY s.strain ORDER BY total_sales DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: cali_mitigation_projects' 뷰에서 프로젝트와 그 예산을 보여주세요.\n\nDDL statements:\nCREATE VIEW cali_mitigation_projects AS SELECT name, budget FROM mitigation_projects WHERE location = 'California'; SELECT * FROM cali_mitigation_projects;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM cali_mitigation_projects;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 독일에서 개발된 바이오센서는 몇 개입니까?\n\nDDL statements:\nCREATE SCHEMA if not exists biosensors; USE biosensors; CREATE TABLE if not exists devices (id INT, name VARCHAR(255), country VARCHAR(255), year INT, type VARCHAR(255)); INSERT INTO devices (id, name, country, year, type) VALUES (1, 'BioSensor 1', 'Germany', 2020, 'Optical'), (2, 'BioSensor 2', 'Germany', 2019, 'Electrochemical'), (3, 'BioSensor 3', 'USA', 2020, 'Mass Spectrometry');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM biosensors.devices WHERE country = 'Germany' AND year = 2020 AND type = 'Biosensor';"
    },
    {
        "instruction": "입력 텍스트: 아시아와 유럽의 문화 유산 보존이 지역 경제에 미치는 총 영향은 얼마입니까?\n\nDDL statements:\nCREATE TABLE economic_impact (location VARCHAR(50), impact FLOAT); INSERT INTO economic_impact (location, impact) VALUES ('Rome, Italy', 2500000), ('Paris, France', 3000000), ('Barcelona, Spain', 2000000), ('Bangkok, Thailand', 1000000), ('Tokyo, Japan', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(impact) as total_impact FROM economic_impact WHERE location LIKE '%Asia%' OR location LIKE '%Europe%';"
    },
    {
        "instruction": "입력 텍스트: 하루 중 특정 시간에 각 사용자의 심박수는 성별에 따라 어떻게 나뉘어져 있나요?\n\nDDL statements:\nCREATE TABLE heart_rate_data (id INT, user_id INT, heart_rate INT, date DATE, time TIME); INSERT INTO heart_rate_data (id, user_id, heart_rate, date, time) VALUES (1, 1, 75, '2022-01-01', '08:00:00'), (2, 1, 76, '2022-01-01', '09:00:00'), (3, 2, 130, '2022-01-01', '08:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT user_id, gender, time, AVG(heart_rate) as avg_heart_rate FROM heart_rate_data JOIN user_data ON heart_rate_data.user_id = user_data.id WHERE time = '08:00:00' GROUP BY user_id, gender, time;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 일본 회원별 총 운동 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE members (id INT, country VARCHAR(50)); INSERT INTO members (id, country) VALUES (1, 'Japan'); CREATE TABLE workouts (id INT, member_id INT, date DATE, duration INT); INSERT INTO workouts (id, member_id, date, duration) VALUES (1, 1, '2022-01-01', 30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT members.id, SUM(duration) AS total_duration FROM members JOIN workouts ON members.id = workouts.member_id WHERE members.country = 'Japan' AND YEAR(workouts.date) = 2022 GROUP BY members.id;"
    },
    {
        "instruction": "입력 텍스트: 각 산업 분야별 총 투자 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Companies (CompanyID INT, CompanyName VARCHAR(50), Industry VARCHAR(30)); CREATE TABLE Investments (InvestmentID INT, InvestorID INT, CompanyID INT, InvestmentAmount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT C.Industry, SUM(I.InvestmentAmount) AS TotalInvestmentAmount FROM Companies C JOIN Investments I ON C.CompanyID = I.CompanyID GROUP BY C.Industry;"
    },
    {
        "instruction": "입력 텍스트: 파리'에서 '베를린'까지의 거리가 1200km이고 요금이 €250인 새로운 기차 노선을 추가하세요.\n\nDDL statements:\nCREATE TABLE stations (station_id INT, station_name TEXT); INSERT INTO stations (station_id, station_name) VALUES (1, 'New York'), (2, 'Boston'), (3, 'Paris'), (4, 'Berlin'); CREATE TABLE train_routes (route_id INT, start_station INT, end_station INT, distance INT, fare DECIMAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO train_routes (route_id, start_station, end_station, distance, fare) VALUES (1, (SELECT station_id FROM stations WHERE station_name = 'Paris'), (SELECT station_id FROM stations WHERE station_name = 'Berlin'), 1200, 250);"
    },
    {
        "instruction": "입력 텍스트: 자율주행 연구 데이터를 autonomous_driving_tests 테이블에 새로 추가하세요.\n\nDDL statements:\nCREATE TABLE autonomous_driving_tests (id INT PRIMARY KEY, make VARCHAR(50), test_location VARCHAR(50), test_date DATE, test_result VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO autonomous_driving_tests (make, test_location, test_date, test_result) VALUES ('waymo', 'Phoenix', '2022-08-01', 'passed'), ('waymo', 'San Francisco', '2022-07-20', 'failed');"
    },
    {
        "instruction": "입력 텍스트: 성별로 분류한 대학원생의 총 인원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE graduate_students (id INT, program_id INT, gender VARCHAR(10), num_students INT); INSERT INTO graduate_students (id, program_id, gender, num_students) VALUES (1, 1, 'Female', 50), (2, 1, 'Male', 30), (3, 2, 'Female', 20), (4, 2, 'Non-binary', 10), (5, 3, 'Male', 40), (6, 3, 'Female', 35), (7, 4, 'Genderqueer', 25), (8, 4, 'Two-Spirit', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, SUM(num_students)  FROM graduate_students GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 보잉사의 와이드바디 항공기의 최대 좌석 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Aircraft (AircraftID INT, Name VARCHAR(50), Manufacturer VARCHAR(50), SeatingCapacity INT); INSERT INTO Aircraft (AircraftID, Name, Manufacturer, SeatingCapacity) VALUES (1, '747', 'Boeing', 467), (2, '787', 'Boeing', 330);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(SeatingCapacity) FROM Aircraft WHERE Manufacturer = 'Boeing' AND Category = 'Wide-body';"
    },
    {
        "instruction": "입력 텍스트: 1990년부터 2000년 사이에 발사된 위성의 이름, 국가, 그리고 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE satellites (id INT, name VARCHAR(255), country VARCHAR(255), type VARCHAR(255), launch_date DATE); INSERT INTO satellites (id, name, country, type, launch_date) VALUES (1, 'Hubble Space Telescope', 'USA', 'Optical', '1990-04-24'); INSERT INTO satellites (id, name, country, type, launch_date) VALUES (2, 'Spot 1', 'France', 'Optical', '1986-02-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, country, type FROM satellites WHERE launch_date BETWEEN '1990-01-01' AND '2000-12-31';"
    },
    {
        "instruction": "입력 텍스트: 2019년 캐나다에서 기부금 총액이 가장 많은 상위 3명의 기부자를 내림차순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), Country VARCHAR(50), Amount DECIMAL(10,2), DonationYear INT); INSERT INTO Donors (DonorID, DonorName, Country, Amount, DonationYear) VALUES (1, 'John Doe', 'Canada', 800.00, 2019), (2, 'Jane Smith', 'Canada', 500.00, 2019), (3, 'Alice Johnson', 'Canada', 1200.00, 2019), (4, 'Bob Brown', 'Canada', 900.00, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, SUM(Amount) AS TotalDonation FROM Donors WHERE Country = 'Canada' AND DonationYear = 2019 GROUP BY DonorName ORDER BY TotalDonation DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2018년에 LGBTQ+로 식별하는 개인이 창립한 회사는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE founders (id INT, name VARCHAR(50), gender VARCHAR(10), ethnicity VARCHAR(20), company_id INT, founding_year INT, lgbtq BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT founders.company_id) FROM founders WHERE founders.lgbtq = true AND founders.founding_year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 각 재료 유형과 도시별 재활용률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE recycling_rates_material_city (city VARCHAR(255), material VARCHAR(255), year INT, rate FLOAT); INSERT INTO recycling_rates_material_city (city, material, year, rate) VALUES ('CityA', 'Plastic', 2019, 0.35), ('CityA', 'Paper', 2019, 0.60), ('CityA', 'Glass', 2019, 0.55), ('CityB', 'Plastic', 2019, 0.40), ('CityB', 'Paper', 2019, 0.50), ('CityB', 'Glass', 2019, 0.45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, material, AVG(rate) AS avg_rate FROM recycling_rates_material_city GROUP BY city, material;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 교사들이 완료한 연수 과정은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE teachers (teacher_id INT, last_pd_completion_date DATE); INSERT INTO teachers (teacher_id, last_pd_completion_date) VALUES (1, '2022-01-15'), (2, '2022-02-20'), (3, '2022-03-05'), (4, '2022-04-10'), (5, '2022-05-12'), (6, '2022-06-25');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(teacher_id) FROM teachers WHERE last_pd_completion_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 플랫폼과 사건 유형별로 보고된 가짜 정보 사건의 총 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE disinformation (id INT, incident_date DATE, incident_type VARCHAR(20), platform VARCHAR(20)); INSERT INTO disinformation (id, incident_date, incident_type, platform) VALUES (1, '2021-07-01', 'fake news', 'Twitter'), (2, '2021-08-15', 'propaganda', 'Facebook'), (3, '2021-09-30', 'manipulated media', 'Instagram');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT platform, incident_type, COUNT(*) AS count FROM disinformation WHERE incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY platform, incident_type;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 남아프리카의 옥수수 밭에서 측정된 질소 수준(%) 중 최소값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE nitrogen_data (nitrogen DECIMAL(3,1), reading_date DATE, location TEXT); INSERT INTO nitrogen_data (nitrogen, reading_date, location) VALUES (2.5, '2021-07-01', 'South Africa'), (2.8, '2021-07-02', 'South Africa'), (2.2, '2021-04-01', 'South Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(nitrogen) FROM nitrogen_data WHERE location = 'South Africa' AND reading_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND location LIKE '%corn%';"
    },
    {
        "instruction": "입력 텍스트: sales_fact 테이블에서 menu_item_id별로 각 메뉴 아이템의 총 판매액을 구하세요.\n\nDDL statements:\nCREATE TABLE sales_fact (sale_id INT, menu_item_id INT, sale_quantity INT, sale_price DECIMAL, sale_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT menu_item_id, SUM(sale_quantity * sale_price) as total_sales FROM sales_fact GROUP BY menu_item_id;"
    },
    {
        "instruction": "입력 텍스트: 각 변호사의 최대 청구 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE attorneys (attorney_id INT, name VARCHAR(50), start_date DATE); INSERT INTO attorneys (attorney_id, name, start_date) VALUES (1, 'John Doe', '2020-01-01'); INSERT INTO attorneys (attorney_id, name, start_date) VALUES (2, 'Jane Smith', '2019-06-15'); CREATE TABLE billing (billing_id INT, attorney_id INT, amount DECIMAL(10, 2), bill_date DATE); INSERT INTO billing (billing_id, attorney_id, amount, bill_date) VALUES (1, 1, 500.00, '2020-01-15'); INSERT INTO billing (billing_id, attorney_id, amount, bill_date) VALUES (2, 2, 750.00, '2019-07-01'); INSERT INTO billing (billing_id, attorney_id, amount, bill_date) VALUES (3, 1, 1000.00, '2020-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT attorney_id, MAX(amount) as max_amount FROM billing GROUP BY attorney_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년 'BioTech'의 연구개발 평균 지출은 얼마였나요?\n\nDDL statements:\nCREATE TABLE r_and_d (company TEXT, year INT, expenditure FLOAT); INSERT INTO r_and_d (company, year, expenditure) VALUES ('PharmaCorp', 2018, 5000000), ('PharmaCorp', 2019, 5500000), ('PharmaCorp', 2020, 6000000), ('BioTech', 2018, 3000000), ('BioTech', 2019, 3200000), ('BioTech', 2020, 3400000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(expenditure) FROM r_and_d WHERE company = 'BioTech' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 런던에서 전시회에 참석한 방문객의 비율을 계산하세요.\n\nDDL statements:\nCREATE TABLE Visitors (id INT, city VARCHAR(20)); CREATE TABLE Exhibitions (id INT, visitor_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(DISTINCT Visitors.id) / COUNT(DISTINCT Exhibitions.visitor_id) AS pct_london_visitors FROM Visitors LEFT JOIN Exhibitions ON Visitors.id = Exhibitions.visitor_id WHERE Visitors.city = 'London';"
    },
    {
        "instruction": "입력 텍스트: 각 회사의 평균 안전 등급을 보여주세요.\n\nDDL statements:\nCREATE TABLE safety_tests (id INT PRIMARY KEY, company VARCHAR(255), test_location VARCHAR(255), test_date DATE, safety_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company, AVG(safety_rating) as avg_rating FROM safety_tests GROUP BY company;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 Al-Jazeera에서 출판된 뉴스 기사는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE news (id INT, title TEXT, publisher TEXT, pub_date DATE); INSERT INTO news (id, title, publisher, pub_date) VALUES (1, 'Article1', 'Al-Jazeera', '2022-01-01'), (2, 'Article2', 'BBC', '2022-01-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM news WHERE publisher = 'Al-Jazeera' AND pub_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 환경 카테고리에 대해 가장 높은 총 기부금액을 기록한 국가들과 각각의 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, Amount DECIMAL, DonationDate DATE, Country TEXT); INSERT INTO Donations (DonationID, DonorID, Amount, DonationDate, Country) VALUES (1, 1, 50, '2022-01-01', 'USA'), (2, 1, 75, '2022-01-01', 'USA'), (3, 2, 100, '2022-02-01', 'Canada'), (4, 3, 200, '2022-03-01', 'Mexico'), (5, 4, 150, '2022-03-01', 'Brazil'); CREATE TABLE ProgramCategories (CategoryID INT, Category TEXT); INSERT INTO ProgramCategories (CategoryID, Category) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'), (4, 'Other'); CREATE TABLE Programs (ProgramID INT, CategoryID INT); INSERT INTO Programs (ProgramID, CategoryID) VALUES (101, 1), (102, 2), (103, 3), (104, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT D.Country, SUM(D.Amount) AS TotalDonations  FROM Donations D  INNER JOIN Programs P ON D.ProgramID = P.ProgramID  INNER JOIN ProgramCategories PC ON P.CategoryID = PC.CategoryID  WHERE PC.Category = 'Environment'  GROUP BY D.Country  ORDER BY TotalDonations DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 태평양 지역에서 2010년 이후에 설립된 모든 해양 보호 구역을 나열하시오.\n\nDDL statements:\nCREATE TABLE marine_protected_areas (id INT, name VARCHAR(255), region VARCHAR(50), year_established INT); INSERT INTO marine_protected_areas (id, name, region, year_established) VALUES (1, 'Pacific Protected Area 1', 'Pacific', 2012), (2, 'Pacific Protected Area 2', 'Pacific', 2008);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM marine_protected_areas WHERE region = 'Pacific' AND year_established > 2010;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 뉴욕으로 화물을 운송한 화물 운송업체의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE FreightForwarders (ID INT, Name VARCHAR(50), Country VARCHAR(50)); INSERT INTO FreightForwarders (ID, Name, Country) VALUES (1, 'ABC Logistics', 'USA'), (2, 'XYZ Shipping', 'Canada'); CREATE TABLE Shipments (ID INT, FreightForwarderID INT, Origin VARCHAR(50), Destination VARCHAR(50)); INSERT INTO Shipments (ID, FreightForwarderID, Origin, Destination) VALUES (1, 1, 'Tokyo', 'New York'), (2, 2, 'Paris', 'London');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT FreightForwarders.Name FROM FreightForwarders INNER JOIN Shipments ON FreightForwarders.ID = Shipments.FreightForwarderID WHERE Shipments.Origin = 'Tokyo' AND Shipments.Destination = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 주별 건강 형평성 지표 점수의 최대값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE health_equity_metrics (state VARCHAR(255), score DECIMAL(5,2)); INSERT INTO health_equity_metrics (state, score) VALUES ('California', 85.5), ('New York', 90.0), ('Texas', 76.0), ('Florida', 82.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, MAX(score) FROM health_equity_metrics GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 특정 파운데이션 브랜드의 미국 내 판매 비율을 찾으세요.\n\nDDL statements:\nCREATE TABLE foundation_sales (product_name TEXT, sale_country TEXT, brand TEXT); INSERT INTO foundation_sales (product_name, sale_country, brand) VALUES ('Foundation', 'USA', 'Earth Conscious'), ('Foundation', 'UK', 'Earth Conscious'), ('Foundation', 'USA', 'Earth Conscious');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) FILTER (WHERE sale_country = 'USA') OVER (PARTITION BY brand) * 100.0 / COUNT(*) OVER (PARTITION BY brand)) as usa_sales_percentage FROM foundation_sales WHERE brand = 'Earth Conscious';"
    },
    {
        "instruction": "입력 텍스트: 2022년 하반기에 여성 바지에 사용된 고유한 재질의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE inventory (product_category VARCHAR(255), material VARCHAR(255)); INSERT INTO inventory (product_category, material) VALUES ('women_pants', 'cotton'); INSERT INTO inventory (product_category, material) VALUES ('women_pants', 'polyester'); INSERT INTO inventory (product_category, material) VALUES ('women_pants', 'silk');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT material) FROM inventory WHERE product_category = 'women_pants' AND sale_date BETWEEN '2022-07-01' AND '2022-12-31';"
    },
    {
        "instruction": "입력 텍스트: IT' 부서의 모든 직원들 중 회사에 1년 이상 근무한 사람들의 급여를 85,000으로 조정하세요.\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(255), Gender VARCHAR(255), Salary DECIMAL(10,2), HireDate DATE); INSERT INTO Employees (EmployeeID, Department, Gender, Salary, HireDate) VALUES (1, 'IT', 'Male', 75000.00, '2020-01-01'), (2, 'IT', 'Female', 72000.00, '2021-06-15'), (3, 'HR', 'Male', 65000.00, '2019-12-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Employees SET Salary = 85000.00 WHERE Department = 'IT' AND DATEDIFF(CURDATE(), HireDate) > 365;"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 부서에 할당된 총 예산은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Budget (id INT, department VARCHAR(50), budget_amount DECIMAL(10,2), allocation_date DATE); INSERT INTO Budget (id, department, budget_amount, allocation_date) VALUES (1, 'Education', 50000, '2021-01-01'), (2, 'Health', 75000, '2021-04-15'), (3, 'Education', 60000, '2021-07-03'), (4, 'Health', 80000, '2021-10-17');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, SUM(budget_amount) as total_budget FROM Budget WHERE YEAR(allocation_date) = 2021 GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 고강도 인터벌 트레이닝(HIIT) 운동 중 분당 최대로 소모되는 칼로리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE activities (id INT, user_id INT, activity VARCHAR(50), calories INT, duration INT); INSERT INTO activities (id, user_id, activity, calories, duration) VALUES (1, 1, 'HIIT', 300, 30); INSERT INTO activities (id, user_id, activity, calories, duration) VALUES (2, 2, 'Running', 400, 45); INSERT INTO activities (id, user_id, activity, calories, duration) VALUES (3, 3, 'HIIT', 600, 60); INSERT INTO activities (id, user_id, activity, calories, duration) VALUES (4, 4, 'Cycling', 450, 75); INSERT INTO activities (id, user_id, activity, calories, duration) VALUES (5, 5, 'HIIT', 750, 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(calories / duration) as max_calories_per_minute FROM activities WHERE activity = 'HIIT';"
    },
    {
        "instruction": "입력 텍스트: animals'라는 이름의 테이블을 생성하세요\n\nDDL statements:\nCREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), species VARCHAR(50), population INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), species VARCHAR(50), population INT);"
    },
    {
        "instruction": "입력 텍스트: 보호' 서식지에 방사된 모든 동물의 이름을 나열하시오.\n\nDDL statements:\nCREATE TABLE habitats (habitat_id INT, habitat_name VARCHAR(50), habitat_status VARCHAR(50)); INSERT INTO habitats (habitat_id, habitat_name, habitat_status) VALUES (1, 'Habitat A', 'protected'), (2, 'Habitat B', 'unprotected'); CREATE TABLE animal_habitats (animal_id INT, habitat_id INT); INSERT INTO animal_habitats (animal_id, habitat_id) VALUES (101, 1), (102, 2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT animals.animal_name FROM animals INNER JOIN animal_habitats ON animals.animal_id = animal_habitats.animal_id INNER JOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id WHERE habitats.habitat_status = 'protected';"
    },
    {
        "instruction": "입력 텍스트: inclusive_affordable_housing' 테이블에서 국가별로 구분하여 주거 접근성 점수가 가장 높은 상위 2개 도시를 확인하세요.\n\nDDL statements:\nCREATE TABLE inclusive_affordable_housing (id INT, city VARCHAR(255), country VARCHAR(255), region VARCHAR(255), score INT); INSERT INTO inclusive_affordable_housing (id, city, country, region, score) VALUES (1, 'Sydney', 'Australia', 'Oceania', 80), (2, 'Auckland', 'New Zealand', 'Oceania', 70), (3, 'Lima', 'Peru', 'South America', 60), (4, 'Buenos Aires', 'Argentina', 'South America', 85), (5, 'Montreal', 'Canada', 'North America', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, country, score, RANK() OVER (PARTITION BY country ORDER BY score DESC) as housing_affordability_rank FROM inclusive_affordable_housing WHERE housing_affordability_rank <= 2;"
    },
    {
        "instruction": "입력 텍스트: Adopt-A-Wetland 프로그램의 설명을 업데이트하세요\n\nDDL statements:\nCREATE TABLE community_education (id INT PRIMARY KEY, program_name VARCHAR(255), description TEXT, target_audience VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE community_education SET description = 'A program that allows individuals or groups to sponsor the preservation of a wetland.' WHERE program_name = 'Adopt-A-Wetland';"
    },
    {
        "instruction": "입력 텍스트: 축구' 종목에서 '맨체스터 유나이티드' 팀이 득점한 총 골 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE games (id INT PRIMARY KEY, home_team VARCHAR(50), away_team VARCHAR(50), home_team_score INT, away_team_score INT, game_date DATE); CREATE TABLE teams (id INT PRIMARY KEY, name VARCHAR(50), sport VARCHAR(20), city VARCHAR(30)); INSERT INTO games (id, home_team, away_team, home_team_score, away_team_score, game_date) VALUES (1, 'Manchester United', 'Barcelona', 3, 2, '2023-04-01'); INSERT INTO teams (id, name, sport, city) VALUES (1, 'Manchester United', 'Soccer', 'Manchester');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(home_team_score) FROM games WHERE home_team = 'Manchester United' AND sport = 'Soccer';"
    },
    {
        "instruction": "입력 텍스트: 성별로 평균 정신 건강 점수보다 높은 점수를 가진 학생은 몇 명인가요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, student_name VARCHAR(50), gender VARCHAR(10), mental_health_score INT); INSERT INTO students (student_id, student_name, gender, mental_health_score) VALUES (1, 'John Doe', 'Male', 75), (2, 'Jane Smith', 'Female', 85), (3, 'Alice Johnson', 'Female', 70), (4, 'Bob Williams', 'Male', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) as num_students FROM students WHERE mental_health_score > (SELECT AVG(mental_health_score) FROM students GROUP BY gender) GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: games' 테이블에서 ID가 2인 행을 삭제하세요\n\nDDL statements:\nCREATE TABLE games (game_id INT, name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM games WHERE game_id = 2;"
    },
    {
        "instruction": "입력 텍스트: \"East\" 지역에 있는 사용자들이 지난 주에 각 세션 유형별로 120분 이상 운동한 총 운동 시간(분)을 확인하세요.\n\nDDL statements:\nCREATE TABLE user_profile (user_id INT, region VARCHAR(20), PRIMARY KEY (user_id)); CREATE TABLE workout_sessions (session_date DATE, user_id INT, session_type VARCHAR(30), workout_mins INT, PRIMARY KEY (session_date, user_id)); INSERT INTO user_profile (user_id, region) VALUES (1, 'East'), (2, 'North'), (3, 'East'); INSERT INTO workout_sessions (session_date, user_id, session_type, workout_mins) VALUES ('2022-04-01', 1, 'Cardio', 150), ('2022-04-02', 2, 'Strength', 100), ('2022-04-03', 3, 'Cardio', 180), ('2022-04-04', 1, 'Yoga', 90), ('2022-04-04', 3, 'Strength', 130);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT session_type, SUM(workout_mins) as total_workout_mins FROM workout_sessions JOIN user_profile ON workout_sessions.user_id = user_profile.user_id WHERE user_profile.region = 'East' AND workout_mins > 120 AND session_date >= DATE(NOW()) - INTERVAL 7 DAY GROUP BY session_type;"
    },
    {
        "instruction": "입력 텍스트: vessel_performance' 테이블에서 선박 'Z'의 평균 속도, 총 이동 거리 및 데이터 포인트 수를 포함한 선박 성능 데이터를 검색합니다.\n\nDDL statements:\nCREATE TABLE vessel_performance (vessel_id TEXT, speed FLOAT, distance FLOAT, data_point_id INT, timestamp TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel_id, AVG(speed) as avg_speed, SUM(distance) as total_distance, COUNT(data_point_id) as data_points FROM vessel_performance WHERE vessel_id = 'Z' GROUP BY vessel_id;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 지속 가능한 호텔의 총 개수와 그들이 수상한 상의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (id INT, country VARCHAR(50), sustainable BOOLEAN); INSERT INTO hotels (id, country, sustainable) VALUES (1, 'Egypt', TRUE), (2, 'Kenya', FALSE), (3, 'Morocco', TRUE); CREATE TABLE hotel_awards (id INT, hotel_id INT, award VARCHAR(50)); INSERT INTO hotel_awards (id, hotel_id, award) VALUES (1, 1, 'Green Flag'), (2, 1, 'Eco Certificate'), (3, 3, 'Green Globe');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT hotels.id), SUM(hotel_awards.count) FROM hotels LEFT JOIN (SELECT hotel_id, COUNT(*) AS count FROM hotel_awards GROUP BY hotel_id) AS hotel_awards ON hotels.id = hotel_awards.hotel_id WHERE hotels.country IN ('Africa') AND hotels.sustainable = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 종양학 분야에서 승인된 약물은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE drug_approval (drug_class TEXT, approval_year INTEGER, status TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM drug_approval WHERE drug_class = 'oncology' AND approval_year = 2020 AND status = 'approved';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 10,000명 이상의 관객이 참석한 모든 콘서트 목록을 나열하세요.\n\nDDL statements:\nCREATE TABLE Concerts (ConcertId INT, Venue VARCHAR(255), Location VARCHAR(255), Attendees INT); INSERT INTO Concerts (ConcertId, Venue, Location, Attendees) VALUES (1, 'Madison Square Garden', 'New York, NY', 15000), (2, 'Staples Center', 'Los Angeles, CA', 20000), (3, 'United Center', 'Chicago, IL', 12000), (4, 'Bridgestone Arena', 'Nashville, TN', 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Venue, Location, Attendees FROM Concerts WHERE Location = 'USA' AND Attendees > 10000;"
    },
    {
        "instruction": "입력 텍스트: 재활용 폴리에스터 재킷의 모든 브랜드에 걸쳐 최소 생산 비용이 얼마인가요?\n\nDDL statements:\nCREATE TABLE RecycledPolyesterJackets(brand VARCHAR(255), production_cost DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(production_cost) FROM RecycledPolyesterJackets;"
    },
    {
        "instruction": "입력 텍스트: 교통 부문의 각 인프라 프로젝트 유형별 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transportation_projects (id INT, name VARCHAR(50), type VARCHAR(50), budget FLOAT); INSERT INTO transportation_projects (id, name, type, budget) VALUES (1, 'Road', 'Construction', 20000000), (2, 'Highway', 'Construction', 50000000), (3, 'Bridge', 'Construction', 35000000), (4, 'Tunnel', 'Construction', 40000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, SUM(budget) FROM transportation_projects WHERE division = 'Transportation' GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 앨라배마의 시골 병원 중 250개 이상의 병상을 가진 병원들의 병상 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hospitals (id INT, name TEXT, location TEXT, beds INT, rural BOOLEAN); INSERT INTO hospitals (id, name, location, beds, rural) VALUES (1, 'Hospital A', 'Alabama', 300, true), (2, 'Hospital B', 'Alabama', 200, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(beds) FROM hospitals WHERE location = 'Alabama' AND rural = true AND beds > 250;"
    },
    {
        "instruction": "입력 텍스트: 독일의 재생 에너지 프로젝트에서 평균 이산화탄소 배출 감소량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE renewable_energy_projects (id INT, name TEXT, country TEXT, co2_emissions_reduction FLOAT); INSERT INTO renewable_energy_projects (id, name, country, co2_emissions_reduction) VALUES (1, 'Solar Farm 1', 'Germany', 5000.0); INSERT INTO renewable_energy_projects (id, name, country, co2_emissions_reduction) VALUES (2, 'Wind Farm 2', 'Germany', 7000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(co2_emissions_reduction) FROM renewable_energy_projects WHERE country = 'Germany';"
    },
    {
        "instruction": "입력 텍스트: 2020년 이전에 'ethereum' 네트워크에서 생성된 디지털 자산은 무엇인가요?\n\nDDL statements:\nCREATE TABLE digital_assets (asset_id INT, name VARCHAR(255), network VARCHAR(255), creation_date DATE); INSERT INTO digital_assets (asset_id, name, network, creation_date) VALUES (1, 'Asset1', 'ethereum', '2019-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM digital_assets WHERE network = 'ethereum' AND creation_date < '2020-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 자원봉사자가 일주일에 봉사한 최소 및 최대 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE volunteer_hours (id INT, volunteer_id INT, hours DECIMAL, week INT); INSERT INTO volunteer_hours (id, volunteer_id, hours, week) VALUES (1, 1, 5.0, 1), (2, 2, 10.0, 1), (3, 3, 7.5, 1), (4, 1, 4.0, 2), (5, 3, 8.0, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT volunteer_id, MIN(hours), MAX(hours) FROM volunteer_hours GROUP BY volunteer_id;"
    },
    {
        "instruction": "입력 텍스트: 호주에 있는 야생 서식지 중 총 면적이 10000헥타르 미만인 곳은 몇 군데입니까?\n\nDDL statements:\nCREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'Australia' GROUP BY country HAVING SUM(area) < 10000;"
    },
    {
        "instruction": "입력 텍스트: 기술 산업에서 AAPI에 의해 설립된 스타트업은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE startups (id INT, name TEXT, founded_year INT, industry TEXT, founder_gender TEXT, founder_race TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM startups WHERE industry LIKE '%tech%' AND founder_race = 'AAPI';"
    },
    {
        "instruction": "입력 텍스트: 2019년 이후 재생 가능 에너지 분야에 얼마나 많은 투자가 이루어졌습니까?\n\nDDL statements:\nCREATE TABLE sectors (id INT, sector VARCHAR(20)); INSERT INTO sectors (id, sector) VALUES (1, 'technology'), (2, 'renewable energy'), (3, 'healthcare'); CREATE TABLE investments (id INT, sector_id INT, investment_date DATE); INSERT INTO investments (id, sector_id, investment_date) VALUES (1, 2, '2021-01-01'), (2, 3, '2020-12-31'), (3, 2, '2019-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM investments INNER JOIN sectors ON investments.sector_id = sectors.id WHERE sectors.sector = 'renewable energy' AND investments.investment_date >= '2019-01-01';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 제작된 영화의 수를 세어주세요.\n\nDDL statements:\nCREATE TABLE movies (id INT, title VARCHAR(255), production_country VARCHAR(64)); INSERT INTO movies (id, title, production_country) VALUES (1, 'MovieA', 'Canada'), (2, 'MovieB', 'Italy'), (3, 'MovieC', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM movies WHERE production_country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: new york' 지역에 있는 고객들의 총 청구 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE clients (id INT, name TEXT, region TEXT, billing_amount DECIMAL(10, 2)); INSERT INTO clients (id, name, region, billing_amount) VALUES (1, 'Alice', 'new york', 200.00), (2, 'Bob', 'new york', 300.00), (3, 'Charlie', 'new york', 400.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(billing_amount) FROM clients WHERE region = 'new york';"
    },
    {
        "instruction": "입력 텍스트: 각 제조 사이트의 평균 안전 점수를 점수가 높은 순으로 나열하시오.\n\nDDL statements:\nCREATE TABLE manufacturing_sites (site_id INT, site_name VARCHAR(50), safety_score DECIMAL(3,2)); INSERT INTO manufacturing_sites (site_id, site_name, safety_score) VALUES (1, 'Site A', 85.6), (2, 'Site B', 92.3), (3, 'Site C', 76.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_name, AVG(safety_score) OVER (PARTITION BY site_id ORDER BY safety_score DESC) as avg_safety_score FROM manufacturing_sites;"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 지난 5년 동안 기록된 최저 온도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ocean_temperatures (year INTEGER, ocean VARCHAR(255), temperature FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(temperature) FROM ocean_temperatures WHERE ocean = 'Atlantic Ocean' AND year BETWEEN (SELECT MAX(year) - 5 FROM ocean_temperatures) AND MAX(year);"
    },
    {
        "instruction": "입력 텍스트: carbon_pricing 테이블에 구현된 탄소 가격제도의 종류는 무엇인가요?\n\nDDL statements:\nCREATE TABLE carbon_pricing (id INT, name VARCHAR(50), type VARCHAR(50), region VARCHAR(50), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT type FROM carbon_pricing WHERE end_date IS NULL;"
    },
    {
        "instruction": "입력 텍스트: rural_hospitals' 스키마에 있는 병원들의 이름과 각각의 의사 수는 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists rural_hospitals; use rural_hospitals; CREATE TABLE hospitals (id int, name varchar(255)); CREATE TABLE doctors (id int, name varchar(255), hospital_id int);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.name, COUNT(d.id) as doctor_count FROM hospitals h INNER JOIN doctors d ON h.id = d.hospital_id GROUP BY h.name;"
    },
    {
        "instruction": "입력 텍스트: 제조사별로 전월 대비 자율주행 차량 사고 건수는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE MonthlyAutonomousVehicleAccidents (id INT, accident_date DATE, make VARCHAR(20), model VARCHAR(20), autonomy_level INT); INSERT INTO MonthlyAutonomousVehicleAccidents (id, accident_date, make, model, autonomy_level) VALUES (1, '2022-01-01', 'Tesla', 'Model S', 4), (2, '2022-01-01', 'Tesla', 'Model 3', 3), (3, '2022-02-01', 'Tesla', 'Model S', 5), (4, '2022-02-01', 'Tesla', 'Model 3', 4), (5, '2022-03-01', 'Tesla', 'Model S', 6), (6, '2022-03-01', 'Tesla', 'Model 3', 5), (7, '2022-01-01', 'Volvo', 'XC60', 0), (8, '2022-02-01', 'Volvo', 'XC60', 0), (9, '2022-03-01', 'Volvo', 'XC60', 0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT make, EXTRACT(MONTH FROM accident_date) AS month, (COUNT(*) - LAG(COUNT(*)) OVER (PARTITION BY make ORDER BY EXTRACT(MONTH FROM accident_date))) * 100.0 / LAG(COUNT(*)) OVER (PARTITION BY make ORDER BY EXTRACT(MONTH FROM accident_date)) AS pct_change  FROM MonthlyAutonomousVehicleAccidents WHERE autonomy_level > 0 GROUP BY month, make;"
    },
    {
        "instruction": "입력 텍스트: 아프리카의 각 기관 유형별로 기부된 총 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (DonationID int, Amount decimal, OrganizationType text); INSERT INTO Donations (DonationID, Amount, OrganizationType) VALUES (1, 5000, 'Environment'); INSERT INTO Donations (DonationID, Amount, OrganizationType) VALUES (2, 7000, 'Health'); INSERT INTO Donations (DonationID, Amount, OrganizationType) VALUES (3, 3000, 'Education'); INSERT INTO Donations (DonationID, Amount, OrganizationType) VALUES (4, 2000, 'Environment'); CREATE TABLE OrganizationTypes (OrganizationTypeID int, OrganizationType text, Continent text); INSERT INTO OrganizationTypes (OrganizationTypeID, OrganizationType, Continent) VALUES (1, 'Environment', 'Africa'); INSERT INTO OrganizationTypes (OrganizationTypeID, OrganizationType, Continent) VALUES (2, 'Health', 'Europe'); INSERT INTO OrganizationTypes (OrganizationTypeID, OrganizationType, Continent) VALUES (3, 'Education', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT OrganizationType, SUM(Amount) as TotalDonation FROM Donations JOIN OrganizationTypes ON Donations.OrganizationType = OrganizationTypes.OrganizationType WHERE Continent = 'Africa' GROUP BY OrganizationType;"
    },
    {
        "instruction": "입력 텍스트: 인도와 남아프리카의 농촌 보건 센터에서 가장 많은 의료 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE medical_staff (country VARCHAR(20), center_name VARCHAR(50), num_staff INT); INSERT INTO medical_staff (country, center_name, num_staff) VALUES ('India', 'Center I', 30), ('India', 'Center J', 40), ('South Africa', 'Center K', 50), ('South Africa', 'Center L', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(num_staff) FROM medical_staff GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: IslamicBank에서 발행한 샤리아 준수 대출의 총 잔액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE shariah_compliant_loans (id INT, bank VARCHAR(20), amount DECIMAL(10,2), is_shariah_compliant BOOLEAN); INSERT INTO shariah_compliant_loans (id, bank, amount, is_shariah_compliant) VALUES (1, 'IslamicBank', 3000.00, true), (2, 'IslamicBank', 6000.00, true), (3, 'IslamicBank', 8000.00, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM shariah_compliant_loans WHERE bank = 'IslamicBank' AND is_shariah_compliant = true;"
    },
    {
        "instruction": "입력 텍스트: 테이블 'humanitarian_assistance'에서 'disaster_name'이 'Typhoon Haiyan'인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE humanitarian_assistance (assistance_id SERIAL PRIMARY KEY, disaster_name VARCHAR(255), location VARCHAR(255), start_date DATE, end_date DATE, assistance_type VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH cte_haiyan AS (DELETE FROM humanitarian_assistance WHERE disaster_name = 'Typhoon Haiyan' RETURNING assistance_id, disaster_name, location, start_date, end_date, assistance_type) DELETE FROM cte_haiyan;"
    },
    {
        "instruction": "입력 텍스트: 각 연도의 '4월'에 '파리'에서 발생한 범죄의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE crimes (id INT, city VARCHAR(20), month VARCHAR(10), year INT, crimes INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, SUM(crimes) FROM crimes WHERE city = 'Paris' AND month = 'April' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 여성이 창업한 회사들의 산업별 평균 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Companies (id INT, name TEXT, industry TEXT, total_funding FLOAT, founder_gender TEXT); INSERT INTO Companies (id, name, industry, total_funding, founder_gender) VALUES (1, 'Alpha Co', 'Software', 4000000, 'Female'), (2, 'Beta Inc', 'Software', 6000000, 'Male'), (3, 'Gamma Ltd', 'Hardware', 1000000, 'Female'), (4, 'Delta Corp', 'Hardware', 2000000, 'Non-binary'), (5, 'Epsilon Pte', 'Consumer', 3000000, 'Female');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT industry, AVG(total_funding) as avg_funding FROM Companies WHERE founder_gender = 'Female' GROUP BY industry;"
    },
    {
        "instruction": "입력 텍스트: Washington' 주의 'Seattle' 도시와 'USA' 국가에 대한 새로운 기록을 'recycling_facilities' 테이블에 입력하세요.\n\nDDL statements:\nCREATE TABLE recycling_facilities (id INT, city VARCHAR(255), state VARCHAR(255), country VARCHAR(255), type VARCHAR(255), capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO recycling_facilities (city, state, country, type, capacity) VALUES ('Seattle', 'Washington', 'USA', 'Material Recovery Facility', 150000);"
    },
    {
        "instruction": "입력 텍스트: concerts' 테이블에서 아티스트 'Adele'의 콘서트 기록에 대한 가격을 150으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE concerts (id INT, artist VARCHAR(255), city VARCHAR(255), tickets_sold INT, price DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE concerts SET price = 150 WHERE artist = 'Adele';"
    },
    {
        "instruction": "입력 텍스트: 어떤 레스토랑에 지속 가능한 소싱 기록이 없습니까?\n\nDDL statements:\nCREATE TABLE restaurants (restaurant_id INT, name VARCHAR(255)); CREATE TABLE sourcing (sourcing_id INT, restaurant_id INT, produce VARCHAR(255), local BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name FROM restaurants r LEFT JOIN sourcing s ON r.restaurant_id = s.restaurant_id WHERE s.sourcing_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 석사 학위가 필요한 직위의 부서별 평균 채용 소요 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE JobVacancies (VacancyID INT, Department VARCHAR(50), DegreeRequired VARCHAR(20), TimeToFill INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Department, AVG(TimeToFill) as Avg_TimeToFill FROM JobVacancies WHERE DegreeRequired = 'Master’s' GROUP BY Department;"
    },
    {
        "instruction": "입력 텍스트: 지난 12개월 동안 'Exhibition' 이벤트를 제외한 독특한 이스포츠 이벤트의 수와 그 종류를 확인하세요.\n\nDDL statements:\nCREATE TABLE EsportsEvents (EventID INT, EventName TEXT, EventType TEXT, EventDate DATE); INSERT INTO EsportsEvents (EventID, EventName, EventType, EventDate) VALUES (1, 'ELC', 'League', '2022-01-01'), (2, 'DAC', 'Championship', '2022-02-15'), (3, 'GCS', 'Cup', '2021-12-10'), (4, 'WCS', 'Series', '2022-04-20'), (5, 'EPL', 'League', '2022-05-05'), (6, 'IEM', 'Cup', '2022-06-12'), (7, 'EXPO', 'Exhibition', '2022-07-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT EventID), EventType FROM EsportsEvents WHERE EventDate >= DATEADD(month, -12, GETDATE()) AND EventType != 'Exhibition' GROUP BY EventType;"
    },
    {
        "instruction": "입력 텍스트: 시티 A에서 포용적 주택 정책을 가진 공동 소유주와 그들의 소유 부동산을 나열하시오.\n\nDDL statements:\nCREATE TABLE co_owners (owner_id INT, name VARCHAR(255), property_id INT); CREATE TABLE properties (property_id INT, address VARCHAR(255), city VARCHAR(255), inclusive_housing BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT co_owners.name, properties.address FROM co_owners INNER JOIN properties ON co_owners.property_id = properties.property_id WHERE properties.city = 'City A' AND properties.inclusive_housing = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2021년 8월 도쿄 항구에서 출발한 어떤 선박보다도 더 빠른 속도를 가진 선박은 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, speed FLOAT, departed_port TEXT, departed_date DATE); INSERT INTO vessels (id, name, speed, departed_port, departed_date) VALUES (1, 'VesselA', 15.2, 'Tokyo', '2021-08-01'); INSERT INTO vessels (id, name, speed, departed_port, departed_date) VALUES (2, 'VesselB', 17.8, 'Tokyo', '2021-08-15'); INSERT INTO vessels (id, name, speed, departed_port, departed_date) VALUES (3, 'VesselC', 19.2, 'Seattle', '2021-09-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM vessels WHERE speed > (SELECT MAX(speed) FROM vessels WHERE departed_port = 'Tokyo' AND departed_date >= '2021-08-01' AND departed_date < '2021-09-01');"
    },
    {
        "instruction": "입력 텍스트: 텍사스에서 절약된 물의 양은 얼마인가요?\n\nDDL statements:\nCREATE TABLE conservation_initiatives(state VARCHAR(20), water_conserved INT); INSERT INTO conservation_initiatives VALUES('Texas', 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT water_conserved FROM conservation_initiatives WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: smart_cities' 스키마에 있는 건물들의 도시별 최대 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE smart_cities.building_data (city VARCHAR(255), energy_consumption FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, MAX(energy_consumption) FROM smart_cities.building_data GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: fair_labor' 테이블에서 최저 임금 이상을 버는 모든 근로자를 나열하세요.\n\nDDL statements:\nCREATE TABLE fair_labor (id INT, worker VARCHAR(20), hourly_wage DECIMAL(4,2)); INSERT INTO fair_labor (id, worker, hourly_wage) VALUES (1, 'John', 15.00), (2, 'Jane', 14.50), (3, 'Alice', 7.50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM fair_labor WHERE hourly_wage >= (SELECT MIN(hourly_wage) FROM fair_labor WHERE hourly_wage > 0);"
    },
    {
        "instruction": "입력 텍스트: 물고기 종류 테이블에 참다랑어를 추가하세요.\n\nDDL statements:\nCREATE TABLE fish_species (species_id INT PRIMARY KEY, species_name VARCHAR(50), conservation_status VARCHAR(20))\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO fish_species (species_name, conservation_status) VALUES ('bluefin tuna', 'endangered')"
    },
    {
        "instruction": "입력 텍스트: 오클랜드와 버클리에 있는 포괄적 주택 단위는 총 몇 개인가요?\n\nDDL statements:\nCREATE TABLE inclusive_housing (property_id INT, city VARCHAR(20), units INT); INSERT INTO inclusive_housing (property_id, city, units) VALUES (1, 'Oakland', 20), (2, 'Berkeley', 15), (3, 'Seattle', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(units) FROM inclusive_housing WHERE city IN ('Oakland', 'Berkeley');"
    },
    {
        "instruction": "입력 텍스트: Preferred' 등급을 가진 보험 가입자의 보험 정책 수와 클레임 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE policyholders (id INT, rating VARCHAR(10));CREATE TABLE claims (id INT, policyholder_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT rating, COUNT(DISTINCT policyholders.id) as num_policies, COUNT(DISTINCT claims.id) as num_claims FROM policyholders LEFT JOIN claims ON policyholders.id = claims.policyholder_id WHERE rating = 'Preferred';"
    },
    {
        "instruction": "입력 텍스트: 아직 출구 전략이 없지만, 최소 한 번의 투자 라운드를 가진 모든 스타트업을 나열하세요.\n\nDDL statements:\nCREATE TABLE startup (id INT, name TEXT, exit_strategy TEXT); CREATE TABLE investment (startup_id INT, investment_amount INT); INSERT INTO startup (id, name, exit_strategy) VALUES (1, 'Gamma Ltd', NULL); INSERT INTO investment (startup_id, investment_amount) VALUES (1, 500000); INSERT INTO startup (id, name, exit_strategy) VALUES (2, 'Delta Inc', 'Acquisition'); INSERT INTO investment (startup_id, investment_amount) VALUES (2, 750000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.name FROM startup s INNER JOIN investment i ON s.id = i.startup_id WHERE s.exit_strategy IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 레크리에이션 부문에 있는 모든 공원의 이름과 총 면적은 무엇인가요?\n\nDDL statements:\nCREATE TABLE parks (id INT, name VARCHAR(50), division VARCHAR(50), area FLOAT); INSERT INTO parks (id, name, division, area) VALUES (1, 'Park A', 'Recreation', 100.0), (2, 'Park B', 'Recreation', 150.0), (3, 'Park C', 'Recreation', 120.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, SUM(area) FROM parks WHERE division = 'Recreation' GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 대륙에 할당된 기후 재정의 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ClimateFinance (finance_id INT, continent VARCHAR(50), allocated_amount FLOAT, year INT); INSERT INTO ClimateFinance (finance_id, continent, allocated_amount, year) VALUES (1, 'Africa', 5000000, 2022), (2, 'Asia', 7000000, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, SUM(allocated_amount) as total_allocation FROM ClimateFinance WHERE year = 2022 GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: 네팔의 농촌 인프라 프로젝트의 총 비용과 평균 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE costs (id INT, project TEXT, country TEXT, cost FLOAT); INSERT INTO costs (id, project, country, cost) VALUES (1, 'Road', 'Nepal', 100000), (2, 'Bridge', 'Nepal', 200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*), AVG(cost) FROM costs WHERE country = 'Nepal';"
    },
    {
        "instruction": "입력 텍스트: 2022년 2분기에 가장 높은 평가와 가장 낮은 평가를 받은 커뮤니티 센터는 어디인가요?\n\nDDL statements:\nCREATE TABLE CommunityRatings (Center text, Rating int, RatingDate date); INSERT INTO CommunityRatings (Center, Rating, RatingDate) VALUES ('CenterA', 8, '2022-04-01'), ('CenterB', 6, '2022-04-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Center, Rating FROM (SELECT Center, Rating, ROW_NUMBER() OVER (ORDER BY Rating) as Rank FROM CommunityRatings WHERE RatingDate >= '2022-04-01' AND RatingDate < '2022-07-01') as Subquery WHERE Rank IN (1, (SELECT COUNT(*) FROM CommunityRatings WHERE RatingDate >= '2022-04-01' AND RatingDate < '2022-07-01') * 0.01);"
    },
    {
        "instruction": "입력 텍스트: world_tournament' 테이블에서 각 국가별 선수 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE world_tournament (player_id INT, player_name TEXT, score INT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as num_players FROM world_tournament GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2020년 3분기에 ACME 해운 회사 소유 선박에 의해 운송된 위험물질이 포함된 컨테이너의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Hazardous_Containers (container_id INTEGER, hazardous_material BOOLEAN, vessel_name TEXT, handling_date DATE); INSERT INTO Hazardous_Containers (container_id, hazardous_material, vessel_name, handling_date) VALUES (1, true, 'ACME Vessel 1', '2020-07-01'), (2, false, 'ACME Vessel 1', '2020-07-02'), (3, true, 'ACME Vessel 2', '2020-08-01'), (4, false, 'ACME Vessel 3', '2020-09-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Hazardous_Containers WHERE hazardous_material = true AND vessel_name LIKE 'ACME%' AND handling_date >= '2020-07-01' AND handling_date <= '2020-09-30';"
    },
    {
        "instruction": "입력 텍스트: 독일에 거주하는 잔액이 5000.00보다 적은 고객을 삭제하세요.\n\nDDL statements:\nCREATE TABLE customers (id INT, name VARCHAR(255), country VARCHAR(255), balance DECIMAL(10, 2)); INSERT INTO customers (id, name, country, balance) VALUES (1, 'John Doe', 'Germany', 4000.00), (2, 'Jane Smith', 'Germany', 6000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM customers WHERE country = 'Germany' AND balance < 5000.00;"
    },
    {
        "instruction": "입력 텍스트: 가장 흔한 식품 안전 문제는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Inspections (inspection_id INT, restaurant_id INT, issue VARCHAR(255)); INSERT INTO Inspections (inspection_id, restaurant_id, issue) VALUES (1, 1, 'Missing handwashing sign'), (2, 2, 'Improper food storage'), (3, 3, 'Missing handwashing sign'), (4, 1, 'Improper food storage'), (5, 2, 'Improper food storage');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT issue, COUNT(issue) as issue_count FROM Inspections GROUP BY issue ORDER BY issue_count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: creative_ai' 테이블과 'explainable_ai' 테이블에 있는 편향 점수가 0.3 미만인 AI 모델의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE creative_ai (app_id INT, app_name TEXT, bias_score FLOAT); CREATE TABLE explainable_ai (model_id INT, model_name TEXT, bias_score FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT app_id FROM creative_ai WHERE bias_score < 0.3 UNION ALL SELECT model_id FROM explainable_ai WHERE bias_score < 0.3) AS low_bias_models;"
    },
    {
        "instruction": "입력 텍스트: 재생 에너지 분야에서 난민이 설립한 스타트업의 투자 라운드 총 횟수와 총 자금 조달액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investment_rounds(id INT, startup_id INT, round_type TEXT, amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as total_rounds, SUM(amount) as total_funding FROM investment_rounds JOIN startups ON investment_rounds.startup_id = startups.id JOIN founders ON startups.id = founders.startup_id WHERE industry = 'Renewable Energy' AND founders.founder_identity = 'Refugee';"
    },
    {
        "instruction": "입력 텍스트: 캐나다산 메이크업 제품의 평균 지속 가능성 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, brand_id INT, sustainability_rating FLOAT); INSERT INTO products (product_id, product_name, brand_id, sustainability_rating) VALUES (1, 'Liquid Lipstick', 1, 4.2), (2, 'Eyeshadow Palette', 1, 4.5), (3, 'Moisturizing Cream', 2, 4.7), (4, 'Tinted Moisturizer', 2, 4.8), (5, 'Lip Balm', 3, 4.3); CREATE TABLE brands (brand_id INT, brand_name TEXT, country TEXT); INSERT INTO brands (brand_id, brand_name, country) VALUES (1, 'Flawless Faced', 'CA'), (2, 'Naturally Radiant', 'UK'), (3, 'Cruelty Free Cosmetics', 'US');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(p.sustainability_rating) as avg_sustainability_rating FROM products p JOIN brands b ON p.brand_id = b.brand_id WHERE b.country = 'CA';"
    },
    {
        "instruction": "입력 텍스트: 특정 모바일 고객의 월간 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mobile_customers (customer_id INT, monthly_revenue FLOAT); INSERT INTO mobile_customers (customer_id, monthly_revenue) VALUES (1, 50), (2, 60), (3, 55); CREATE TABLE customer_data (customer_id INT, customer_name VARCHAR(50)); INSERT INTO customer_data (customer_id, customer_name) VALUES (1, 'John Smith'), (2, 'Jane Doe'), (3, 'Mike Johnson');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT monthly_revenue FROM mobile_customers WHERE customer_id = 1;"
    },
    {
        "instruction": "입력 텍스트: John' 매니저가 감독하는 직원들의 최대 급여를 계산하세요.\n\nDDL statements:\nCREATE TABLE departments (id INT, name TEXT, manager TEXT); INSERT INTO departments (id, name, manager) VALUES (1, 'textiles', 'Bob'), (2, 'chemicals', 'Alice'), (3, 'electronics', 'Jane'), (4, 'metals', 'John'); CREATE TABLE workers (id INT, department_id INT, salary FLOAT, supervisor TEXT); INSERT INTO workers (id, department_id, salary, supervisor) VALUES (1, 1, 60000, 'Jane'), (2, 1, 65000, 'Jane'), (3, 2, 55000, 'Bob'), (4, 2, 50000, 'Bob'), (5, 1, 70000, 'John');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(salary) FROM workers WHERE supervisor = 'John';"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 재료를 가장 많이 사용하는 상위 3개국의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE materials (material_id INT, name TEXT, country TEXT); INSERT INTO materials (material_id, name, country) VALUES (1, 'organic cotton', 'France'); INSERT INTO materials (material_id, name, country) VALUES (2, 'recycled polyester', 'Germany'); INSERT INTO materials (material_id, name, country) VALUES (3, 'hemp', 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(name) OVER (ORDER BY COUNT(name) DESC) rn FROM materials GROUP BY country HAVING rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 일본에 있는 5성급 호텔 중 가상 투어를 제공하는 곳은 몇 곳입니까?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, name VARCHAR(255), country VARCHAR(255), rating INT, virtual_tour BOOLEAN); INSERT INTO hotels (hotel_id, name, country, rating, virtual_tour) VALUES (1, 'Five Star Tokyo Hotel', 'Japan', 5, true), (2, 'Seaside Ryokan', 'Japan', 4, false), (3, 'Kyoto Heritage Hotel', 'Japan', 5, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hotels WHERE country = 'Japan' AND rating = 5 AND virtual_tour = true;"
    },
    {
        "instruction": "입력 텍스트: 싱가포르에서 현재 운행 중인 자율 주행 택시는 몇 대인가요?\n\nDDL statements:\nCREATE TABLE autonomous_taxis (taxi_id INT, license_plate TEXT, model TEXT, production_year INT, in_service BOOLEAN, city TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM autonomous_taxis WHERE city = 'Singapore' AND in_service = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 각 스마트 도시의 월별 총 탄소 배출량과 에너지 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE city_data (id INT, city VARCHAR(255), type VARCHAR(255), value FLOAT, timestamp TIMESTAMP); INSERT INTO city_data (id, city, type, value, timestamp) VALUES (1, 'EcoCity', 'Carbon Emissions', 15000, '2022-04-01 10:00:00'), (2, 'EcoCity', 'Energy Consumption', 1000000, '2022-04-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, type, SUM(value) as total, DATE_FORMAT(timestamp, '%%Y-%%m') as month FROM city_data GROUP BY city, type, month;"
    },
    {
        "instruction": "입력 텍스트: 각 약물에 대해 진행된 임상 시험의 수를 가장 많은 임상 시험부터 가장 적은 임상 시험 순으로, 종양학 치료 영역에서 찾으세요.\n\nDDL statements:\nCREATE TABLE clinical_trials_oncology (clinical_trial_id INT, drug_name VARCHAR(255), therapeutic_area VARCHAR(255), trial_status VARCHAR(255)); INSERT INTO clinical_trials_oncology (clinical_trial_id, drug_name, therapeutic_area, trial_status) VALUES (1, 'DrugX', 'Oncology', 'Completed'), (2, 'DrugY', 'Oncology', 'Active'), (3, 'DrugX', 'Oncology', 'Active'), (4, 'DrugZ', 'Oncology', 'Completed'), (5, 'DrugY', 'Oncology', 'Completed'), (6, 'DrugZ', 'Oncology', 'Active'), (7, 'DrugX', 'Oncology', 'Completed'), (8, 'DrugY', 'Oncology', 'Active');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug_name, COUNT(*) as num_of_trials FROM clinical_trials_oncology WHERE therapeutic_area = 'Oncology' GROUP BY drug_name ORDER BY num_of_trials DESC;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 가장 많은 방문객을 가진 문화 유적지의 지속 가능성 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE cultural_sites_japan (site_id INT, name TEXT, city TEXT, visitors INT, sustainability_score INT); INSERT INTO cultural_sites_japan (site_id, name, city, visitors, sustainability_score) VALUES (1, 'Tokyo Tower', 'Tokyo', 5000000, 9), (2, 'Tokyo National Museum', 'Tokyo', 4000000, 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sustainability_score FROM cultural_sites_japan WHERE city = 'Tokyo' ORDER BY visitors DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: John Doe'라는 이름을 가진 선수가 참가한 토너먼트의 총 상금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE tournaments (id INT, name VARCHAR(50), prize_pool INT); CREATE TABLE tournament_participation (id INT, tournament_id INT, player_id INT); INSERT INTO tournaments VALUES (1, 'Tournament1', 70000); INSERT INTO tournaments VALUES (2, 'Tournament2', 30000); INSERT INTO tournament_participation VALUES (1, 1, 1); INSERT INTO tournament_participation VALUES (2, 2, 2); INSERT INTO tournament_participation VALUES (3, 1, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tournaments.prize_pool)  FROM tournaments  INNER JOIN tournament_participation ON tournaments.id = tournament_participation.tournament_id  INNER JOIN players ON tournament_participation.player_id = players.id  WHERE players.name = 'John Doe';"
    },
    {
        "instruction": "입력 텍스트: 남서부 지역에서 지난 5년간 완료된 교통 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE transportation_projects (id INT, region VARCHAR(255), completion_date DATE); INSERT INTO transportation_projects (id, region, completion_date) VALUES (1, 'Southwest', '2018-01-01'), (2, 'Northeast', '2020-12-31'), (3, 'Southwest', '2021-05-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM transportation_projects WHERE region = 'Southwest' AND completion_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR);"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 동안 각 광산 사이트의 일일 물 사용량은 무엇이며, 날짜별로 정렬된 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE water_consumption (site_id INT, consumption_date DATE, water_amount INT); INSERT INTO water_consumption (site_id, consumption_date, water_amount) VALUES (1, '2022-01-01', 1000), (1, '2022-01-02', 1500), (2, '2022-01-01', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT site_id, consumption_date, AVG(water_amount) as avg_water_amount FROM water_consumption WHERE consumption_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY site_id, consumption_date ORDER BY consumption_date;"
    },
    {
        "instruction": "입력 텍스트: 모든 메뉴 중에서 가장 인기 없는 요리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE MenuA (menu_item VARCHAR(50), quantity_sold INT); INSERT INTO MenuA (menu_item, quantity_sold) VALUES ('Pizza', 50), ('Pasta', 75), ('Burger', 100); CREATE TABLE MenuB (menu_item VARCHAR(50), quantity_sold INT); INSERT INTO MenuB (menu_item, quantity_sold) VALUES ('Sushi', 25), ('Ramen', 35), ('Salad', 45);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: (SELECT menu_item, quantity_sold FROM MenuA) UNION (SELECT menu_item, quantity_sold FROM MenuB) ORDER BY quantity_sold ASC;"
    },
    {
        "instruction": "입력 텍스트: 시티A와 시티B의 대중버스 평균 속도를 각 노선별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE CityA_BusRoutes (route_id INT, route_name TEXT, avg_speed FLOAT); CREATE TABLE CityB_BusRoutes (route_id INT, route_name TEXT, avg_speed FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COALESCE(a.route_name, b.route_name) AS route_name, AVG(COALESCE(a.avg_speed, b.avg_speed)) AS avg_speed FROM CityA_BusRoutes a FULL OUTER JOIN CityB_BusRoutes b ON a.route_id = b.route_id GROUP BY 1;"
    },
    {
        "instruction": "입력 텍스트: 커뮤니티 개발 프로젝트에 대한 연간 평균 지출액을 계산하세요.\n\nDDL statements:\nCREATE TABLE project (project_id INT, project_year INT, cost DECIMAL(5,2)); INSERT INTO project (project_id, project_year, cost) VALUES (1, 2018, 5000), (2, 2019, 7000), (3, 2020, 8000), (4, 2021, 9000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) as avg_annual_expenditure FROM project WHERE project_year IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 석탄과 철을 채굴하지만 금이나 은은 채굴하지 않는 광산을 표시합니다.\n\nDDL statements:\nCREATE TABLE mine (id INT, name VARCHAR(50), location VARCHAR(50));CREATE TABLE coal_mine (mine_id INT, amount INT);CREATE TABLE iron_mine (mine_id INT, amount INT);CREATE TABLE gold_mine (mine_id INT, amount INT);CREATE TABLE silver_mine (mine_id INT, amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.name, m.location FROM mine m LEFT JOIN coal_mine c ON m.id = c.mine_id LEFT JOIN iron_mine i ON m.id = i.mine_id LEFT JOIN gold_mine g ON m.id = g.mine_id LEFT JOIN silver_mine s ON m.id = s.mine_id WHERE c.mine_id IS NOT NULL AND i.mine_id IS NOT NULL AND g.mine_id IS NULL AND s.mine_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 메뉴 아이템 중에서 마크업 비율이 가장 낮은 것은 무엇인가요?\n\nDDL statements:\nCREATE TABLE MenuItems (item TEXT, category TEXT, price INT, cost INT); INSERT INTO MenuItems (item, category, price, cost) VALUES ('Sushi Roll', 'Appetizer', 8, 6), ('Pizza Margherita', 'Entree', 12, 10), ('Churros', 'Dessert', 6, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT item, category, ROUND(100.0 * (price - cost) / cost, 2) as markup_percentage FROM MenuItems ORDER BY markup_percentage ASC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 텍사스의 총 에너지 효율 점수를 찾아라\n\nDDL statements:\nCREATE TABLE energy_efficiency_stats_2 (state VARCHAR(20), energy_efficiency_score INT); INSERT INTO energy_efficiency_stats_2 (state, energy_efficiency_score) VALUES ('Texas', 90), ('Texas', 85), ('Texas', 88);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(energy_efficiency_score) FROM energy_efficiency_stats_2 WHERE state = 'Texas' GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: RenewableEnergy 스키마에서 재생 가능 에너지 프로젝트의 총 비용을 계산하세요.\n\nDDL statements:\nCREATE SCHEMA RenewableEnergy; USE RenewableEnergy; CREATE TABLE RenewableEnergyProjects (id INT, project_name VARCHAR(100), type VARCHAR(50), cost DECIMAL(10,2)); INSERT INTO RenewableEnergyProjects (id, project_name, type, cost) VALUES (1, 'Hydroelectric Plant', 'Hydro', 100000.00), (2, 'Wind Farm', 'Wind', 150000.00), (3, 'Solar Farm', 'Solar', 200000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM RenewableEnergy.RenewableEnergyProjects;"
    },
    {
        "instruction": "입력 텍스트: 2020년 캘리포니아에서 콜레라 진단을 받은 환자들의 평균 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Patients (ID INT, Age INT, Gender VARCHAR(10), Diagnosis VARCHAR(20), State VARCHAR(20)); INSERT INTO Patients (ID, Age, Gender, Diagnosis, State) VALUES (1, 45, 'Male', 'Cholera', 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Patients WHERE Diagnosis = 'Cholera' AND State = 'California' AND YEAR(Diagnosed_Date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 특정 팀의 주어진 해에 대한 티켓 판매 수익 비율을 계산합니다.\n\nDDL statements:\nCREATE TABLE tickets (id INT, game_id INT, team VARCHAR(50), tickets_sold INT, price DECIMAL(5, 2), year INT); INSERT INTO tickets (id, game_id, team, tickets_sold, price, year) VALUES (1, 101, 'Chicago Bulls', 50, 50.00, 2022), (2, 102, 'Chicago Bulls', 30, 75.00, 2022), (3, 103, 'New York Knicks', 40, 40.00, 2022), (4, 104, 'New York Knicks', 60, 30.00, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team, ((SUM(tickets_sold * price) / (SELECT SUM(tickets_sold * price) FROM tickets WHERE year = 2022)) * 100) as revenue_percentage FROM tickets WHERE team = 'Chicago Bulls' AND year = 2022 GROUP BY team;"
    },
    {
        "instruction": "입력 텍스트: emissions' 테이블에 있는 제품들의 평균 CO2 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE emissions (product_id INT, CO2_emissions DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(CO2_emissions) FROM emissions;"
    },
    {
        "instruction": "입력 텍스트: 어떤 군사 장비 유형이 유지 보수 비용이 가장 높고 가장 낮은가요?\n\nDDL statements:\nCREATE TABLE equipment_maintenance_costs (id INT, equipment_type VARCHAR(50), maintenance_cost DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_type, AVG(maintenance_cost) AS avg_cost FROM equipment_maintenance_costs GROUP BY equipment_type ORDER BY avg_cost DESC, equipment_type LIMIT 1; SELECT equipment_type, AVG(maintenance_cost) AS avg_cost FROM equipment_maintenance_costs GROUP BY equipment_type ORDER BY avg_cost LIMIT 1 OFFSET 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 각 학과에 수여된 연구비 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE departments (id INT, name VARCHAR(50)); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'); INSERT INTO departments (id, name) VALUES (2, 'Mathematics'); CREATE TABLE research_grants (id INT, department_id INT, year INT, amount INT); INSERT INTO research_grants (id, department_id, year, amount) VALUES (1, 1, 2018, 50000); INSERT INTO research_grants (id, department_id, year, amount) VALUES (2, 1, 2020, 75000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name, SUM(rg.amount) FROM research_grants rg JOIN departments d ON rg.department_id = d.id WHERE rg.year BETWEEN 2017 AND 2021 GROUP BY d.name;"
    },
    {
        "instruction": "입력 텍스트: transit_routes' 테이블의 각 노선 구간의 평균 길이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE transit_routes (route_id INT, segment_name VARCHAR(255), start_station VARCHAR(255), end_station VARCHAR(255), length FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT segment_name, AVG(length) as avg_length FROM transit_routes GROUP BY segment_name;"
    },
    {
        "instruction": "입력 텍스트: 2016년부터 2020년까지 'CountryY'에서 승인된 약품은 총 몇 개입니까?\n\nDDL statements:\nCREATE TABLE drug_approvals (country varchar(20), year int, num_approved int); INSERT INTO drug_approvals (country, year, num_approved) VALUES ('CountryY', 2016, 12), ('CountryY', 2017, 15), ('CountryY', 2018, 18), ('CountryY', 2019, 21), ('CountryY', 2020, 24);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_approved) FROM drug_approvals WHERE country = 'CountryY' AND year BETWEEN 2016 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 스마트 계약 'Crowdfund'의 언어를 'Scilla'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE smart_contracts (contract_id INT, name VARCHAR(20), language VARCHAR(20)); INSERT INTO smart_contracts (contract_id, name, language) VALUES (1, 'Crowdfund', 'Solidity'), (2, 'Voting', 'Vyper');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE smart_contracts SET language = 'Scilla' WHERE name = 'Crowdfund';"
    },
    {
        "instruction": "입력 텍스트: 기후 변화에 관한 지역별 일일 평균 기사 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(100), topic VARCHAR(50), publish_date DATE, region VARCHAR(50)); CREATE VIEW article_summary AS SELECT topic, COUNT(*) as num_articles, YEAR(publish_date) as year, MONTH(publish_date) as month, DAY(publish_date) as day, region FROM articles GROUP BY topic, year, month, day, region;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(article_summary.num_articles) FROM article_summary INNER JOIN articles ON article_summary.topic = articles.topic AND article_summary.region = articles.region WHERE articles.topic = 'climate change' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 일리노이 주에서 20분 이상 응답하는 데 걸린 호출을 제외한 응급 호출의 평균 응답 시간은 얼마입니까?\n\nDDL statements:\nCREATE TABLE emergency_calls (id INT, state VARCHAR(20), response_time INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(response_time) FROM emergency_calls WHERE state = 'Illinois' AND response_time < 20*60;"
    },
    {
        "instruction": "입력 텍스트: 아시아 각 국가에서의 문화 보존에 대한 커뮤니티 참여 비율을 백분율로 나타내고, 그 비율에 따라 내림차순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE CommunityEngagement (EngagementID INT, Country VARCHAR(255), EngagementScore INT, PRIMARY KEY (EngagementID));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, 100.0 * COUNT(*) OVER (PARTITION BY Country) * 1.0 / SUM(COUNT(*)) OVER () AS PercentageOfTotal FROM CommunityEngagement WHERE Country IN ('North Asia', 'Central Asia', 'South Asia', 'East Asia', 'Southeast Asia') GROUP BY Country ORDER BY PercentageOfTotal DESC;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 가장 많은 작품을 판매한 상위 3명의 예술가를 확인하세요.\n\nDDL statements:\nCREATE TABLE artworks (artwork_id INT, artwork_name VARCHAR(50), artist_name VARCHAR(50), price DECIMAL(10,2), sale_date DATE); INSERT INTO artworks (artwork_id, artwork_name, artist_name, price, sale_date) VALUES (1, 'Painting 1', 'Artist A', 5000, '2022-01-10'); INSERT INTO artworks (artwork_id, artwork_name, artist_name, price, sale_date) VALUES (2, 'Sculpture 1', 'Artist B', 8000, '2022-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artist_name, COUNT(*) as artworks_sold FROM artworks WHERE sale_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY artist_name ORDER BY artworks_sold DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: efficiency' 스키마의 'commercial' 분야에 대한 에너지 효율 통계를 보여주세요.\n\nDDL statements:\nCREATE SCHEMA efficiency; CREATE TABLE energy_efficiency (sector VARCHAR(255), energy_rating DECIMAL(3,2)); INSERT INTO energy_efficiency (sector, energy_rating) VALUES ('commercial', 85.50), ('residential', 72.30);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT energy_rating FROM efficiency.energy_efficiency WHERE sector = 'commercial';"
    },
    {
        "instruction": "입력 텍스트: 수학과의 각 교수진이 저술하거나 공동 저술한 출판물은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50), num_publications INT); INSERT INTO faculty (id, name, department, num_publications) VALUES (1, 'Charlie', 'Mathematics', 10), (2, 'Dana', 'Mathematics', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT id, name, department, ROW_NUMBER() OVER (PARTITION BY department ORDER BY num_publications DESC) as rank FROM faculty WHERE department = 'Mathematics';"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 가장 높은 방문객 평점을 받은 지속 가능한 관광 이니셔티브 상위 2개를 확인하세요.\n\nDDL statements:\nCREATE TABLE initiative_ratings (initiative_id INT, initiative_name TEXT, sustainable BOOLEAN, continent TEXT, year INT, rating DECIMAL(3,2)); INSERT INTO initiative_ratings (initiative_id, initiative_name, sustainable, continent, year, rating) VALUES (1, 'Initiative A', TRUE, 'Africa', 2021, 4.6), (2, 'Initiative B', TRUE, 'Africa', 2021, 4.8), (3, 'Initiative C', FALSE, 'Africa', 2021, 4.5), (4, 'Initiative D', TRUE, 'Africa', 2021, 4.2), (5, 'Initiative E', FALSE, 'Africa', 2021, 4.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name, ROW_NUMBER() OVER (PARTITION BY sustainable ORDER BY rating DESC) as ranking FROM initiative_ratings WHERE continent = 'Africa' AND year = 2021 AND sustainable = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2021년 1월에 첫 거래를 한 고객의 최대 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE transactions (customer_id INT, transaction_amount DECIMAL(10, 2), transaction_date DATE); INSERT INTO transactions (customer_id, transaction_amount, transaction_date) VALUES (1, 150.00, '2021-01-01'), (1, 200.00, '2021-01-10'), (2, 50.00, '2021-01-05'), (2, 75.00, '2021-02-01'), (3, 300.00, '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(transaction_amount) FROM transactions WHERE MONTH(transaction_date) = 1;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 기후 적응 프로젝트의 연평균 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE climate_projects (country VARCHAR(50), project_type VARCHAR(50), year INT); INSERT INTO climate_projects (country, project_type, year) VALUES ('USA', 'climate adaptation', 2015), ('USA', 'climate adaptation', 2016), ('China', 'climate adaptation', 2015), ('China', 'climate adaptation', 2016), ('India', 'climate adaptation', 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(year) FROM climate_projects WHERE project_type = 'climate adaptation' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 지난 3일 동안 일본에 위치한 계정에서 게시된 해시태그 #animalrights가 포함된 게시물과 상호 작용한 고유 사용자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE accounts (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE posts (id INT, account_id INT, content TEXT, timestamp TIMESTAMP); CREATE TABLE interactions (id INT, post_id INT, user_id INT); INSERT INTO accounts (id, name, location) VALUES (1, 'animal_rights_user', 'Japan'); INSERT INTO posts (id, account_id, content, timestamp) VALUES (1, 1, 'post1 #animalrights', '2022-05-03 12:00:00'); INSERT INTO interactions (id, post_id, user_id) VALUES (1, 1, 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT interactions.user_id) FROM interactions JOIN posts ON interactions.post_id = posts.id JOIN accounts ON posts.account_id = accounts.id WHERE posts.timestamp >= NOW() - INTERVAL '3 days' AND posts.content LIKE '%#animalrights%' AND accounts.location = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 설명 가능성 점수가 가장 높은 상위 3개 국가를 나열하세요.\n\nDDL statements:\nCREATE TABLE ai_models (model_id INT, name TEXT, country TEXT, explainability_score FLOAT); INSERT INTO ai_models (model_id, name, country, explainability_score) VALUES (1, 'ModelA', 'Germany', 0.85), (2, 'ModelB', 'Canada', 0.90), (3, 'ModelC', 'US', 0.75), (4, 'ModelD', 'Germany', 0.95), (5, 'ModelE', 'France', 0.92), (6, 'ModelF', 'US', 0.80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(explainability_score) AS avg_explainability_score FROM ai_models GROUP BY country ORDER BY avg_explainability_score DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 어떤 지역에 야생동물 서식지가 가장 많은가요?\n\nDDL statements:\nCREATE TABLE Regions (RegionID INT, RegionName TEXT); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'Northeast'), (2, 'Southeast'); CREATE TABLE Habitats (HabitatID INT, RegionID INT, Wildlife TEXT); INSERT INTO Habitats (HabitatID, RegionID, Wildlife) VALUES (1, 1, 'Deer'), (2, 1, 'Bear'), (3, 2, 'Raccoon');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Regions.RegionName, COUNT(Habitats.HabitatID) as TotalHabitats FROM Regions INNER JOIN Habitats ON Regions.RegionID = Habitats.RegionID GROUP BY Regions.RegionName ORDER BY TotalHabitats DESC;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 예산이 5억을 초과하는 군사 기술을 확인하세요.\n\nDDL statements:\nCREATE TABLE MilitaryBudget (ID INT, Technology TEXT, Year INT, Budget INT); INSERT INTO MilitaryBudget (ID, Technology, Year, Budget) VALUES (1, 'Stealth Technology', 2018, 700), (2, 'Artificial Intelligence', 2019, 800), (3, 'Cybersecurity', 2017, 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Technology, Budget FROM MilitaryBudget WHERE Year >= 2016 AND Budget > 500000000;"
    },
    {
        "instruction": "입력 텍스트: 지난 60일 동안 접수된 고객 불만의 건수는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE customer_complaints (complaint_id INT, customer_id INT, complaint_date DATE); INSERT INTO customer_complaints (complaint_id, customer_id, complaint_date) VALUES (1, 1, '2022-01-01'), (2, 3, '2022-01-15'), (3, 2, '2022-01-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM customer_complaints WHERE complaint_date >= CURDATE() - INTERVAL 60 DAY;"
    },
    {
        "instruction": "입력 텍스트: 중국인 우주비행사들의 우주 임무 평균 지속 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Astronauts (AstronautID INT, Name VARCHAR(50), Nationality VARCHAR(50));CREATE TABLE SpaceMissions (MissionID INT, AstronautID INT, Name VARCHAR(50), Duration INT); INSERT INTO Astronauts (AstronautID, Name, Nationality) VALUES (1, 'Yang Liwei', 'China'), (2, 'Zhang Xiaoguang', 'China'), (3, 'Wang Yaping', 'China'); INSERT INTO SpaceMissions (MissionID, AstronautID, Name, Duration) VALUES (1, 1, 'Shenzhou 5', 21), (2, 2, 'Shenzhou 10', 15), (3, 3, 'Shenzhou 13', 186);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(sm.Duration) FROM SpaceMissions sm INNER JOIN Astronauts a ON sm.AstronautID = a.AstronautID WHERE a.Nationality = 'China';"
    },
    {
        "instruction": "입력 텍스트: ID가 7인 고객의 재정 안정성 점수를 85로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE client (client_id INT, name TEXT, country TEXT, financial_wellbeing_score INT); INSERT INTO client (client_id, name, country, financial_wellbeing_score) VALUES (1, 'John Doe', 'USA', 70); INSERT INTO client (client_id, name, country, financial_wellbeing_score) VALUES (2, 'Jane Smith', 'USA', 75); INSERT INTO client (client_id, name, country, financial_wellbeing_score) VALUES (7, 'Liam Davis', 'New Zealand', 80); CREATE VIEW clients_from_nz AS SELECT * FROM client WHERE country = 'New Zealand';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE client SET financial_wellbeing_score = 85 WHERE client_id = 7;"
    },
    {
        "instruction": "입력 텍스트: 2018년 이후 중동 지역의 지정학적 위험 평가로 인해 지연된 방위 사업 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE projects(id INT, project_name VARCHAR(50), start_date DATE, end_date DATE, geopolitical_risk INT); INSERT INTO projects VALUES (1, 'Army Base Upgrade', '2018-01-01', '2021-01-01', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(projects.id) FROM projects WHERE projects.geopolitical_risk = 1 AND projects.start_date >= '2018-01-01';"
    },
    {
        "instruction": "입력 텍스트: waste_data' 테이블에서 폐기물 생성량이 50보다 큰 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE waste_data (id INT PRIMARY KEY, chemical_id INT, year INT, waste_generated FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM waste_data WHERE waste_generated > 50;"
    },
    {
        "instruction": "입력 텍스트: 우간다의 농업 프로젝트에서 경제 다양화 지수의 최대값은 얼마였나요?\n\nDDL statements:\nCREATE TABLE Projects (id INT, project_id INT, project_type VARCHAR(20), economic_diversification_index DECIMAL(5,2), country VARCHAR(20)); INSERT INTO Projects (id, project_id, project_type, economic_diversification_index, country) VALUES (1, 3001, 'Agricultural', 75.67, 'Uganda'), (2, 3002, 'Infrastructure', 89.34, 'Uganda'), (3, 3003, 'Agricultural', 92.10, 'Uganda');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(economic_diversification_index) FROM Projects WHERE project_type = 'Agricultural' AND country = 'Uganda';"
    },
    {
        "instruction": "입력 텍스트: 중국에 있는 ID가 2인 문화 유산의 이름을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE heritage_sites (id INT PRIMARY KEY, name TEXT, location TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE heritage_sites SET name = 'Temple of Heaven' WHERE id = 2 AND location = 'China';"
    },
    {
        "instruction": "입력 텍스트: 25세에서 34세 사이 사용자들의 평균 심박수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, age INT, heart_rate FLOAT); INSERT INTO users (id, age, heart_rate) VALUES (1, 26, 78.5), (2, 31, 82.3), (3, 29, 79.6), (4, 35, 85.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(heart_rate) FROM users WHERE age BETWEEN 25 AND 34;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 총 해운 라인 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE shipping_lines (shipping_line_id INT, shipping_line_country VARCHAR(50), number_of_shipping_lines INT); INSERT INTO shipping_lines (shipping_line_id, shipping_line_country, number_of_shipping_lines) VALUES (1, 'CountryA', 3), (2, 'CountryB', 4), (3, 'CountryC', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT shipping_line_country, SUM(number_of_shipping_lines) FROM shipping_lines GROUP BY shipping_line_country;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 금융 부문에서 발견된 심각한 취약점은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, severity VARCHAR(255), sector VARCHAR(255), date DATE); INSERT INTO vulnerabilities (id, severity, sector, date) VALUES (1, 'critical', 'financial', '2022-02-01'), (2, 'high', 'healthcare', '2022-02-05'), (3, 'critical', 'financial', '2022-02-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'critical' AND sector = 'financial' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"
    },
    {
        "instruction": "입력 텍스트: 2019년 아이스하키 경기에서 판매된 티켓 수의 최소값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ice_hockey_matches (match_id INT, season INT, tickets_sold INT); INSERT INTO ice_hockey_matches (match_id, season, tickets_sold) VALUES (1, 2019, 32000), (2, 2019, 35000), (3, 2018, 30000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(tickets_sold) FROM ice_hockey_matches WHERE season = 2019;"
    },
    {
        "instruction": "입력 텍스트: 2020년과 2021년에 가입한 사용자의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE users (user_id INT, name TEXT, gender TEXT, signup_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as total FROM users WHERE signup_date >= '2020-01-01' AND signup_date < '2022-01-01';"
    },
    {
        "instruction": "입력 텍스트: 각 창고의 평균 창고 관리 통계를 보여주세요.\n\nDDL statements:\nCREATE TABLE Warehouse (id INT, name VARCHAR(50), avg_statistic INT); INSERT INTO Warehouse (id, name, avg_statistic) VALUES (1, 'Warehouse A', 80), (2, 'Warehouse B', 90);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, AVG(avg_statistic) FROM Warehouse GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 교수 테이블에 'Emily Lee'라는 이름, '기계공학' 학과, 그리고 '로봇공학' 연구 분야를 가진 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE professors (id INT, name VARCHAR(50), department VARCHAR(50), research_interest VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO professors (name, department, research_interest) VALUES ('Emily Lee', 'Mechanical Engineering', 'Robotics');"
    },
    {
        "instruction": "입력 텍스트: 리오데자네이루에 있는 친환경 호텔의 최대 수용 인원은 얼마입니까?\n\nDDL statements:\nCREATE TABLE brazil_hotels (hotel_id INT, name VARCHAR(255), city VARCHAR(255), capacity INT, eco_friendly BOOLEAN); INSERT INTO brazil_hotels (hotel_id, name, city, capacity, eco_friendly) VALUES (1, 'EcoHotel Rio', 'Rio de Janeiro', 120, TRUE), (2, 'GreenHotel Rio', 'Rio de Janeiro', 180, FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(capacity) FROM brazil_hotels WHERE city = 'Rio de Janeiro' AND eco_friendly = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 식이장애로 진단받은 환자 중 18세에서 25세 사이인 환자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE diagnoses (patient_id INT, diagnosis_date DATE, condition VARCHAR(20), age INT); INSERT INTO diagnoses (patient_id, diagnosis_date, condition, age) VALUES (1, '2022-02-15', 'anorexia nervosa', 22), (2, '2021-12-12', 'bulimia nervosa', 30), (3, '2022-03-01', 'binge eating disorder', 40), (4, '2022-01-05', 'anorexia nervosa', 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM diagnoses WHERE condition IN ('anorexia nervosa', 'bulimia nervosa', 'binge eating disorder') AND age BETWEEN 18 AND 25;"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 500건 이상의 입고된 화물을 받은 미국 내 모든 창고들과 그에 해당하는 위치 및 수용 능력을 나열합니다.\n\nDDL statements:\nCREATE TABLE warehouses (id INT, name TEXT, location TEXT, capacity INT); CREATE TABLE shipments (id INT, warehouse_id INT, shipped_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT w.name, w.location, w.capacity FROM warehouses w JOIN shipments s ON w.id = s.warehouse_id WHERE s.shipped_date >= DATEADD(month, -1, GETDATE()) GROUP BY w.id, w.name, w.location, w.capacity HAVING COUNT(*) > 500 AND w.location LIKE '%United States%';"
    },
    {
        "instruction": "입력 텍스트: 2022-01-01'부터 '2022-03-31'까지 고객번호가 3인 고객의 'USD' 통화 예금 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE clients (client_id INT, name TEXT, region TEXT); INSERT INTO clients (client_id, name, region) VALUES (1, 'John Doe', 'US'), (2, 'Jane Smith', 'APAC'), (3, 'Mike Johnson', 'EU'), (4, 'Sophia Chen', 'APAC'); CREATE TABLE transactions (transaction_id INT, client_id INT, currency TEXT, amount DECIMAL(10, 2), type TEXT, transaction_date DATE); INSERT INTO transactions (transaction_id, client_id, currency, amount, type, transaction_date) VALUES (1, 1, 'USD', 10000.00, 'deposit', '2022-01-01'), (2, 1, 'USD', 5000.00, 'deposit', '2022-01-15'), (3, 2, 'EUR', 7500.00, 'withdrawal', '2022-02-01'), (4, 3, 'USD', 2500.00, 'deposit', '2022-02-20'), (5, 3, 'USD', 1500.00, 'deposit', '2022-03-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM transactions WHERE client_id = 3 AND currency = 'USD' AND type = 'deposit' AND transaction_date BETWEEN '2022-01-01' AND '2022-03-31';"
    },
    {
        "instruction": "입력 텍스트: 성별에 따른 재정적으로 안정된 고객의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE clients (id INT, name VARCHAR(50), gender VARCHAR(50), financially_well BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) as num_financially_well FROM clients WHERE financially_well = TRUE GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 2019년 한 도시에서 보고된 감염병 사례 수가 가장 높은 것은 얼마인가요?\n\nDDL statements:\nCREATE TABLE YearlyCases (Year INT, City VARCHAR(20), Disease VARCHAR(20), NumberOfCases INT); INSERT INTO YearlyCases (Year, City, Disease, NumberOfCases) VALUES (2019, 'Los Angeles', 'Influenza', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City, MAX(NumberOfCases) FROM YearlyCases WHERE Year = 2019 GROUP BY City;"
    },
    {
        "instruction": "입력 텍스트: 대서양 지역에서 멸종 위기에 처한 해양 생물종의 보전 노력을 표시합니다.\n\nDDL statements:\nCREATE TABLE marine_species (id INT, conservation_status VARCHAR(255), region VARCHAR(255)); CREATE TABLE conservation_efforts (id INT, species_id INT, description VARCHAR(255)); INSERT INTO marine_species (id, conservation_status, region) VALUES (1, 'Endangered', 'Atlantic'), (2, 'Least Concern', 'Pacific'); INSERT INTO conservation_efforts (id, species_id, description) VALUES (1, 1, 'Habitat protection'), (2, 2, 'Research and monitoring');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT marine_species.conservation_status, conservation_efforts.description FROM marine_species INNER JOIN conservation_efforts ON marine_species.id = conservation_efforts.species_id WHERE marine_species.conservation_status = 'Endangered' AND marine_species.region = 'Atlantic';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 뉴욕의 의료 제공자들을 위한 문화 역량 훈련 기록을 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE CulturalCompetency (ProviderID INT, Training VARCHAR(255), State VARCHAR(255), Date DATE); INSERT INTO CulturalCompetency VALUES (1, 'Cultural Competency Training', 'New York', '2021-06-15'); INSERT INTO CulturalCompetency VALUES (2, 'Cultural Sensitivity Training', 'New York', '2022-02-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM CulturalCompetency WHERE State = 'New York' AND Date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 로스앤젤레스 카운티에서 보고된 식중독 사례는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE foodborne_illnesses (id INT, case_number INT, report_date DATE, county TEXT); INSERT INTO foodborne_illnesses (id, case_number, report_date, county) VALUES (1, 123, '2022-01-01', 'Los Angeles'); INSERT INTO foodborne_illnesses (id, case_number, report_date, county) VALUES (2, 456, '2022-12-31', 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM foodborne_illnesses WHERE report_date >= DATEADD(year, -1, CURRENT_DATE) AND county = 'Los Angeles';"
    },
    {
        "instruction": "입력 텍스트: 러닝 또는 사이클링 운동에 참여한 적이 있는 사용자의 총 수를 나열합니다.\n\nDDL statements:\nCREATE TABLE WorkoutTypes (WorkoutType VARCHAR(20), WorkoutID INT); INSERT INTO WorkoutTypes (WorkoutType, WorkoutID) VALUES ('Cycling', 1), ('Yoga', 2), ('Pilates', 3), ('Running', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT Members.MemberID) FROM Members INNER JOIN Workouts ON Members.MemberID = Workouts.MemberID INNER JOIN WorkoutTypes ON Workouts.WorkoutID = WorkoutTypes.WorkoutID WHERE WorkoutType IN ('Running', 'Cycling');"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 포괄적 주택 정책을 가진 부동산의 평균 가격을 계산하세요.\n\nDDL statements:\nCREATE TABLE properties_inclusive_ny (id INT, price FLOAT); INSERT INTO properties_inclusive_ny (id, price) VALUES (1, 550000), (2, 600000), (3, 650000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM properties_inclusive_ny WHERE id IN (SELECT property_id FROM inclusive_housing WHERE city = 'New York');"
    },
    {
        "instruction": "입력 텍스트: 2016년 이후 각 해마다의 국방 외교 행사 수와 그 예산 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE defense_diplomacy (id INT, event_name VARCHAR(50), region VARCHAR(50), year INT, budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, COUNT(*), SUM(budget) FROM defense_diplomacy WHERE year >= 2016 GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 각 광산 유형별로 200명 이상인 광산의 총 근로자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE mine (id INT, name VARCHAR(255), type VARCHAR(255), workers INT); INSERT INTO mine (id, name, type, workers) VALUES (1, 'Arizona Copper Mine', 'Open Pit', 300), (2, 'California Gold Mine', 'Underground', 150), (3, 'Nevada Silver Mine', 'Open Pit', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(*) as total_workers FROM mine GROUP BY type HAVING total_workers > 200;"
    },
    {
        "instruction": "입력 텍스트: fleet_management 테이블에서 2018년에 출시된 선박들의 평균 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE fleet_management (vessel_id INT, vessel_name VARCHAR(50), launch_date DATE); INSERT INTO fleet_management (vessel_id, vessel_name, launch_date) VALUES (1, 'Vessel_A', '2016-01-01'), (2, 'Vessel_B', '2017-01-01'), (3, 'Vessel_C', '2018-01-01'), (4, 'Vessel_D', '2018-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(CURDATE(), launch_date) / 365.25) FROM fleet_management WHERE YEAR(launch_date) = 2018;"
    },
    {
        "instruction": "입력 텍스트: 2022년 첫 분기에 'FieldJ'에서 생산량이 1500을 초과하는 우물의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE wells (well_id varchar(10), field varchar(10), production int, datetime date); INSERT INTO wells (well_id, field, production, datetime) VALUES ('W013', 'FieldJ', 1700, '2022-01-01'), ('W014', 'FieldJ', 1400, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM wells WHERE field = 'FieldJ' AND production > 1500 AND YEAR(datetime) = 2022 AND QUARTER(datetime) = 1;"
    },
    {
        "instruction": "입력 텍스트: 접근성 테이블에서 지역이 '아프리카'이고 연도가 2017년인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE accessibility (region VARCHAR(255), year INT, internet_penetration FLOAT, mobile_penetration FLOAT); INSERT INTO accessibility (region, year, internet_penetration, mobile_penetration) VALUES ('Africa', 2016, 0.25, 0.45), ('Asia', 2017, 0.42, 0.78), ('Africa', 2017, 0.31, 0.52), ('Europe', 2018, 0.78, 0.91);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM accessibility WHERE region = 'Africa' AND year = 2017;"
    },
    {
        "instruction": "입력 텍스트: 특정 요리 종류에 대한 고유 메뉴 항목을 나열하세요.\n\nDDL statements:\nCREATE TABLE menu_items (menu_item_id INT, menu_item VARCHAR(255), cuisine VARCHAR(255)); INSERT INTO menu_items (menu_item_id, menu_item, cuisine) VALUES (1, 'Pizza', 'Italian'), (2, 'Tacos', 'Mexican'), (3, 'Ramen', 'Chinese'), (4, 'Pasta', 'Italian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT menu_item FROM menu_items WHERE cuisine = 'Italian';"
    },
    {
        "instruction": "입력 텍스트: 2010년부터 2020년 사이에 아프리카 국가들이 수행한 평화유지 작전은 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE PeacekeepingOperations (nation VARCHAR(50), year INT, operation_count INT); INSERT INTO PeacekeepingOperations (nation, year, operation_count) VALUES ('Egypt', 2010, 3), ('Kenya', 2010, 2), ('Nigeria', 2010, 4), ('Senegal', 2010, 1), ('South Africa', 2010, 5), ('Egypt', 2011, 3), ('Kenya', 2011, 2), ('Nigeria', 2011, 4), ('Senegal', 2011, 1), ('South Africa', 2011, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(operation_count) FROM PeacekeepingOperations WHERE nation IN ('Egypt', 'Kenya', 'Nigeria', 'Senegal', 'South Africa') AND year BETWEEN 2010 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 인도에 있는 사용자들의 하루 최대 게시물 수는 얼마였나요?\n\nDDL statements:\nCREATE SCHEMA postsdata; CREATE TABLE posts_per_day(post_date DATE, user_id INT, posts_per_day INT); INSERT INTO posts_per_day (post_date, user_id, posts_per_day) VALUES ('2022-01-01', 1, 5); INSERT INTO posts_per_day (post_date, user_id, posts_per_day) VALUES ('2022-01-01', 2, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT post_date, MAX(posts_per_day) FROM postsdata.posts_per_day WHERE user_id IN (SELECT user_id FROM postsdata.posts_per_day WHERE country = 'IN') GROUP BY post_date;"
    },
    {
        "instruction": "입력 텍스트: 각 아티스트별 음악 스트리밍 횟수와 티켓 판매량의 총합은 얼마인가요?\n\nDDL statements:\nCREATE TABLE artist_activity(artist_id INT, genre_id INT, streams INT, sales INT); CREATE TABLE artists(artist_id INT, name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT artists.name, SUM(artist_activity.streams) AS total_streams, SUM(artist_activity.sales) AS total_sales FROM artist_activity JOIN artists ON artist_activity.artist_id = artists.artist_id GROUP BY artists.name;"
    },
    {
        "instruction": "입력 텍스트: 다음 세부 정보를 가진 새로운 콘서트를 추가하세요: 'K-pop Festival', 'Los Angeles', 'K-pop', 150000.00.\n\nDDL statements:\nCREATE SCHEMA if not exists music_schema;CREATE TABLE if not exists concerts (id INT, name VARCHAR, city VARCHAR, genre VARCHAR, revenue FLOAT);INSERT INTO concerts (id, name, city, genre, revenue) VALUES (1, 'Music Festival', 'New York', 'Pop', 50000.00), (2, 'Rock Concert', 'Chicago', 'Rock', 75000.00), (3, 'Jazz Festival', 'Los Angeles', 'Jazz', 125000.00), (4, 'Hip Hop Concert', 'Miami', 'Hip Hop', 60000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO music_schema.concerts (name, city, genre, revenue) VALUES ('K-pop Festival', 'Los Angeles', 'K-pop', 150000.00);"
    },
    {
        "instruction": "입력 텍스트: hr' 스키마의 각 지역별 총 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE hr.employees (employee_id INT, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), location VARCHAR(50)); INSERT INTO hr.employees (employee_id, first_name, last_name, department, location) VALUES (1, 'John', 'Doe', 'Production', 'New York'), (2, 'Jane', 'Doe', 'Production', 'New York'), (3, 'Mike', 'Johnson', 'Quality', 'Los Angeles');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) as total_employees FROM hr.employees GROUP BY location;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 기계 학습 기법을 사용한 유전 연구 연구의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE genetic_research (study_name VARCHAR(255), location VARCHAR(255), method VARCHAR(255)); INSERT INTO genetic_research (study_name, location, method) VALUES ('GenesBrazil', 'Brazil', 'Machine Learning');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT study_name FROM genetic_research WHERE location = 'Brazil' AND method = 'Machine Learning';"
    },
    {
        "instruction": "입력 텍스트: 각 대륙별로, 각 국가에서 연도별로 진행된 유전 연구 연구의 평균 횟수를 찾아보세요.\n\nDDL statements:\nCREATE SCHEMA if not exists genetics; USE genetics; CREATE TABLE if not exists studies (id INT, name VARCHAR(100), country VARCHAR(100), year INT); INSERT INTO studies (id, name, country, year) VALUES (1, 'StudyA', 'USA', 2015), (2, 'StudyB', 'Canada', 2016), (3, 'StudyC', 'Brazil', 2017), (4, 'StudyD', 'China', 2018), (5, 'StudyE', 'Japan', 2019), (6, 'StudyF', 'Australia', 2020), (7, 'StudyG', 'India', 2015), (8, 'StudyH', 'Germany', 2017), (9, 'StudyI', 'France', 2018), (10, 'StudyJ', 'UK', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT studies.continent, studies.country, AVG(studies.year) FROM genetics.studies GROUP BY studies.continent, studies.country ORDER BY AVG(studies.year) DESC;"
    },
    {
        "instruction": "입력 텍스트: 2021년 1월 1일 이후에 'gaming_league'에 가입한 플레이어는 누구인가요?\n\nDDL statements:\nCREATE TABLE gaming_league (player_id INT, player_name VARCHAR(50), join_date DATE); INSERT INTO gaming_league (player_id, player_name, join_date) VALUES (1, 'John Doe', '2021-01-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM gaming_league WHERE join_date > '2021-01-01';"
    },
    {
        "instruction": "입력 텍스트: 동남부' 지역의 건물들에 대한 평균 에너지 효율 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE EnergyEfficientBuildings (region VARCHAR(50), score FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(score) FROM EnergyEfficientBuildings WHERE region = 'Southeast';"
    },
    {
        "instruction": "입력 텍스트: 북태평양에 서식하는 어종별로, 개체 수가 100만 마리를 초과하는 어종의 총 개체 수를 구하시오.\n\nDDL statements:\nCREATE TABLE FishPopulation (Species TEXT, Ocean TEXT, Population INT); INSERT INTO FishPopulation (Species, Ocean, Population) VALUES ('Salmon', 'North Pacific', 800000), ('Tuna', 'North Pacific', 1200000), ('Shark', 'North Pacific', 500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Species, SUM(Population) FROM FishPopulation WHERE Ocean = 'North Pacific' GROUP BY Species HAVING SUM(Population) > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 아시아' 지역에서 최소 한 가지 유기농 재료를 공급하는 공급업체를 확인하세요.\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), region VARCHAR(255));CREATE TABLE ingredients (ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(255), is_organic BOOLEAN, supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier_name FROM suppliers s JOIN ingredients i ON s.supplier_id = i.supplier_id WHERE s.region = 'Asia' AND is_organic = TRUE GROUP BY supplier_name HAVING COUNT(*) > 0;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서 각 이벤트별로 몇 장의 티켓이 팔렸나요?\n\nDDL statements:\nCREATE TABLE Events (ID INT, EventName TEXT, Location TEXT, TicketsSold INT); INSERT INTO Events (ID, EventName, Location, TicketsSold) VALUES (1, 'The Nutcracker', 'New York', 500), (2, 'Hamlet', 'New York', 300), (3, 'Swan Lake', 'Chicago', 400);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EventName, SUM(TicketsSold) as TotalTickets FROM Events WHERE Location = 'New York' GROUP BY EventName;"
    },
    {
        "instruction": "입력 텍스트: AccommodationHistory 테이블에서 한 해 동안 각 월별로 제공된 숙박 시설은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE AccommodationHistory (studentID INT, accommodationType VARCHAR(50), startDate DATE, endDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM startDate) AS month, COUNT(*) AS accommodationsCount FROM AccommodationHistory GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: \"더글러스 퍼\"라는 일반적인 이름을 가진 나무 종의 목재 생산 총량은 입방미터로 얼마입니까?\n\nDDL statements:\nCREATE TABLE tree_species (id INT, species TEXT, avg_height FLOAT, avg_dbh FLOAT, common_name TEXT); CREATE TABLE timber_production (species TEXT, year INT, volume_m3 INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(volume_m3) FROM timber_production WHERE species IN (SELECT species FROM tree_species WHERE common_name = 'Douglas Fir');"
    },
    {
        "instruction": "입력 텍스트: 각 법률 서비스 제공자가 처리한 사건의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Cases (ID INT, Service_Provider VARCHAR(50), Number_Of_Cases INT); INSERT INTO Cases (ID, Service_Provider, Number_Of_Cases) VALUES (1, 'Legal Aid', 500), (2, 'Public Defender', 300), (3, 'Community Legal Clinic', 200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Service_Provider, SUM(Number_Of_Cases) FROM Cases GROUP BY Service_Provider;"
    },
    {
        "instruction": "입력 텍스트: 2020년 '광업' 부서의 근로자들의 평균 생산성은 얼마입니까?\n\nDDL statements:\nCREATE TABLE workers(id INT, name TEXT, department TEXT, productivity FLOAT, year INT);INSERT INTO workers(id, name, department, productivity, year) VALUES (1, 'John', 'mining', 12.5, 2020), (2, 'Jane', 'mining', 13.7, 2020), (3, 'Mike', 'mining', 11.8, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(productivity) FROM workers WHERE department = 'mining' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 광물 종류별로 그룹화된 환경 영향 평가의 평균 소요 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE assessments (id INT, country VARCHAR(255), mineral VARCHAR(255), lead_time INT); INSERT INTO assessments (id, country, mineral, lead_time) VALUES (1, 'Brazil', 'Gold', 60), (2, 'Brazil', 'Gold', 65), (3, 'Brazil', 'Gold', 70), (4, 'Brazil', 'Copper', 50), (5, 'Brazil', 'Copper', 55), (6, 'Brazil', 'Copper', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mineral, AVG(lead_time) FROM assessments WHERE country = 'Brazil' GROUP BY mineral;"
    },
    {
        "instruction": "입력 텍스트: 2017년에 승인된 약물의 연구개발 최소 지출액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rd_expenditure (drug_id VARCHAR(10), approval_year INT, expenditure NUMERIC(12,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(expenditure) FROM rd_expenditure WHERE approval_year = 2017;"
    },
    {
        "instruction": "입력 텍스트: 영화 'The Greatest Showman'의 제작 예산을 1억 달러로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Movies (movie_id INT, title TEXT, release_year INT, production_budget FLOAT); INSERT INTO Movies (movie_id, title, release_year, production_budget) VALUES (1, 'MovieA', 2005, 60.0), (2, 'MovieB', 2012, 40.0), (3, 'The Greatest Showman', 2017, 80.0), (4, 'MovieD', 2008, 55.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Movies SET production_budget = 100.0 WHERE title = 'The Greatest Showman';"
    },
    {
        "instruction": "입력 텍스트: Donations 테이블에서 id가 1인 기부 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Donations (id INT, user VARCHAR(255), amount DECIMAL(10, 2)); INSERT INTO Donations (id, user, amount) VALUES (1, 'John', 50.00), (2, 'Jane', 75.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Donations WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: 아프리카에서 판매된 순환 공급망 제품의 수.\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(255), circular_supply_chain BOOLEAN); INSERT INTO products (product_id, name, circular_supply_chain) VALUES (1, 'Refurbished Printer', TRUE), (2, 'Organic Cotton Shirt', FALSE); CREATE TABLE sales (sale_id INT, product_id INT, sale_quantity INT); INSERT INTO sales (sale_id, product_id, sale_quantity) VALUES (1, 1, 3), (2, 2, 5), (3, 1, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sale_quantity) FROM products JOIN sales ON products.product_id = sales.product_id WHERE circular_supply_chain = TRUE AND region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 미시시피의 농촌 지역에 있는 일차 진료 전문의는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE mississippi_rural_physicians (physician_id INT, physician_name VARCHAR(255), specialty VARCHAR(255), rural BOOLEAN); INSERT INTO mississippi_rural_physicians VALUES (1, 'Dr. Smith', 'Primary Care', true), (2, 'Dr. Johnson', 'Surgery', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mississippi_rural_physicians WHERE specialty = 'Primary Care' AND rural = true;"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기에 뉴욕 디스펜서리에서 판매된 사티바 종류의 온스 당 최소 가격을 찾으세요.\n\nDDL statements:\nCREATE TABLE strains (type VARCHAR(10), price DECIMAL(5,2), unit VARCHAR(10)); INSERT INTO strains (type, price, unit) VALUES ('sativa', 250, 'ounce'), ('sativa', 275, 'ounce'), ('indica', 225, 'ounce'); CREATE TABLE dispensaries (state VARCHAR(20), sales INT); INSERT INTO dispensaries (state, sales) VALUES ('New York', 2800), ('New York', 3100); CREATE TABLE time_periods (quarter INT); INSERT INTO time_periods (quarter) VALUES (4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(strains.price) FROM strains JOIN dispensaries ON TRUE WHERE strains.type = 'sativa' AND strains.unit = 'ounce' AND dispensaries.state = 'New York' AND time_periods.quarter = 4;"
    },
    {
        "instruction": "입력 텍스트: 각 정부 기관이 주최한 공공 행사의 총 개수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE agency (id INT, name VARCHAR); INSERT INTO agency (id, name) VALUES (1, 'Agriculture'), (2, 'Education'), (3, 'Finance'); CREATE TABLE event (id INT, agency_id INT, name VARCHAR, date DATE); INSERT INTO event (id, agency_id, name, date) VALUES (1, 1, 'Farmers Day', '2021-05-01'), (2, 2, 'Education Fair', '2021-06-15'), (3, 3, 'Finance Symposium', '2021-07-20'), (4, 1, 'Food Festival', '2021-08-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT agency_id, COUNT(*) as total_events FROM event GROUP BY agency_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기 동안 각 고객의 총 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE customer_transactions (customer_id INT, transaction_value DECIMAL(10,2), transaction_date DATE); INSERT INTO customer_transactions (customer_id, transaction_value, transaction_date) VALUES (1, 100.00, '2021-04-01'), (1, 200.00, '2021-05-15'), (2, 50.00, '2021-05-05'), (2, 150.00, '2021-06-20'), (3, 300.00, '2021-04-10'), (3, 250.00, '2021-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT customer_id, SUM(transaction_value) as total_transaction_value FROM customer_transactions WHERE transaction_date BETWEEN DATEADD(quarter, -1, GETDATE()) AND GETDATE() GROUP BY customer_id;"
    },
    {
        "instruction": "입력 텍스트: tech_companies' 테이블의 모든 사용자에 대해 'status' 컬럼을 'inactive'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE tech_companies (id INT PRIMARY KEY, name VARCHAR(50), status VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE tech_companies SET status = 'inactive';"
    },
    {
        "instruction": "입력 텍스트: 2019년 남부 지역 각 주에서 시행된 물 보존 이니셔티브의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE conservation_initiatives (state VARCHAR(255), init_date DATE, type VARCHAR(255)); INSERT INTO conservation_initiatives (state, init_date, type) VALUES ('Florida', '2019-01-01', 'Rainwater harvesting'); CREATE TABLE state_population (state VARCHAR(255), population INT); INSERT INTO state_population (state, population) VALUES ('Florida', 21477737);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ci.state, (COUNT(ci.init_date) * 100.0 / sp.population) AS percentage FROM conservation_initiatives AS ci JOIN state_population AS sp ON ci.state = sp.state WHERE ci.state IN ('Florida', 'Georgia', 'South Carolina', 'North Carolina', 'Virginia', 'West Virginia', 'Maryland', 'Delaware', 'District of Columbia') AND YEAR(ci.init_date) = 2019 GROUP BY ci.state;"
    },
    {
        "instruction": "입력 텍스트: HR 부서의 총 급여 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Salary DECIMAL(10,2)); INSERT INTO Employees (EmployeeID, Department, Salary) VALUES (1, 'HR', 90000.00), (2, 'HR', 95000.00), (3, 'HR', 100000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Salary) FROM Employees WHERE Department = 'HR';"
    },
    {
        "instruction": "입력 텍스트: 해양 보호 구역의 평균 수심을 크기별로 정렬하여 알려주세요.\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name VARCHAR(50), size FLOAT, avg_depth FLOAT); INSERT INTO marine_protected_areas VALUES ('Area 1', 1234.5, 500.5), ('Area 2', 2345.6, 700.2), ('Area 3', 3456.7, 800.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(avg_depth) as avg_depth, size FROM marine_protected_areas GROUP BY size ORDER BY size DESC;"
    },
    {
        "instruction": "입력 텍스트: news_articles' 테이블에서 가장 흔한 단어 상위 3개를 확인하세요.\n\nDDL statements:\nCREATE TABLE news_articles (article_id INT, author_name VARCHAR(50), title VARCHAR(100), published_date DATE, word_list VARCHAR(500));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT unnest(regexp_split_to_array(string_agg(word_list, ' '), 's+')) as word, COUNT(*) as word_count FROM news_articles GROUP BY word ORDER BY word_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에 있는 정신 건강 동등성 규정의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE mental_health_parity (id INT, regulation VARCHAR(100), effective_date DATE); INSERT INTO mental_health_parity (id, regulation, effective_date) VALUES (1, 'Regulation 1', '2010-01-01'), (2, 'Regulation 2', '2015-01-01'), (3, 'Regulation 3', '2018-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mental_health_parity;"
    },
    {
        "instruction": "입력 텍스트: 미국의 스타트업들이 모금한 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA biotech; CREATE TABLE biotech.startups (id INT, name VARCHAR(100), country VARCHAR(50), funding FLOAT); INSERT INTO biotech.startups (id, name, country, funding) VALUES (1, 'StartupA', 'USA', 15000000.00); INSERT INTO biotech.startups (id, name, country, funding) VALUES (2, 'StartupB', 'USA', 20000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding) FROM biotech.startups WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 2020년 콜롬비아의 농업 프로젝트에 대한 투자 총액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Investments (id INT, investment_id INT, project_type VARCHAR(20), investment_amount DECIMAL(10,2), investment_date DATE, country VARCHAR(20)); INSERT INTO Investments (id, investment_id, project_type, investment_amount, investment_date, country) VALUES (1, 6001, 'Agricultural', 3000.00, '2020-04-01', 'Colombia'), (2, 6002, 'Infrastructure', 5000.00, '2020-05-15', 'Colombia'), (3, 6003, 'Agricultural', 4000.00, '2020-06-30', 'Colombia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(investment_amount) FROM Investments WHERE project_type = 'Agricultural' AND country = 'Colombia' AND YEAR(investment_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 각 과목 영역별로 교사들이 이수한 전문 개발 과정은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE teacher_development (teacher_id INT, subject VARCHAR(255), course_year INT, courses_completed INT); INSERT INTO teacher_development (teacher_id, subject, course_year, courses_completed) VALUES (101, 'Math', 2019, 3), (101, 'Science', 2020, 4), (101, 'English', 2021, 2), (102, 'Social Studies', 2019, 2), (102, 'Math', 2020, 5), (102, 'Science', 2021, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT subject, SUM(courses_completed) FROM teacher_development WHERE course_year = 2020 GROUP BY subject;"
    },
    {
        "instruction": "입력 텍스트: 각 NFL 팀별로 진행된 게임의 총 수와 이긴 게임의 수를 찾아주세요.\n\nDDL statements:\nCREATE TABLE teams (team_id INT, team_name VARCHAR(50)); CREATE TABLE games (game_id INT, team_id INT, won INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_id, COUNT(*) AS total_games, SUM(won) AS games_won FROM games GROUP BY team_id;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 연구개발비가 가장 높았던 약품은 무엇인가요?\n\nDDL statements:\nCREATE TABLE rd_expenditure (drug_name TEXT, rd_expenditure NUMERIC(12, 2)); INSERT INTO rd_expenditure (drug_name, rd_expenditure) VALUES ('DrugA', 5000000.00), ('DrugB', 7000000.00), ('DrugC', 3000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug_name, MAX(rd_expenditure) as highest_rd_expenditure FROM rd_expenditure;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에서 수여된 총 방위 계약 금액 기준 상위 3개의 방위 계약업체는 무엇인가요?\n\nDDL statements:\nCREATE TABLE defense_contracts (id INT, contractor VARCHAR(50), region VARCHAR(20), contract_value DECIMAL(10,2));INSERT INTO defense_contracts (id, contractor, region, contract_value) VALUES (1, 'Contractor A', 'Asia-Pacific', 5000000), (2, 'Contractor B', 'Asia-Pacific', 6000000), (3, 'Contractor C', 'Asia-Pacific', 4000000), (4, 'Contractor D', 'Europe', 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT contractor, SUM(contract_value) AS total_contracts FROM defense_contracts WHERE region = 'Asia-Pacific' GROUP BY contractor ORDER BY total_contracts DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 영국에서 럭셔리 호텔을 본 가상 투어의 사용자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, hotel_id INT, country TEXT, user_count INT); CREATE TABLE hotels (hotel_id INT, hotel_type TEXT); INSERT INTO virtual_tours (tour_id, hotel_id, country, user_count) VALUES (1, 1, 'UK', 50), (2, 1, 'USA', 30), (3, 2, 'USA', 20); INSERT INTO hotels (hotel_id, hotel_type) VALUES (1, 'Luxury'), (2, 'Economy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(user_count) FROM virtual_tours JOIN hotels ON virtual_tours.hotel_id = hotels.hotel_id WHERE hotels.hotel_type = 'Luxury' AND virtual_tours.country = 'UK';"
    },
    {
        "instruction": "입력 텍스트: 도쿄에 있는 5성급 호텔의 총 객실 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, name TEXT, city TEXT, stars INT, rooms INT); INSERT INTO hotels (hotel_id, name, city, stars, rooms) VALUES (1, 'Hotel Tokyo', 'Tokyo', 5, 300), (2, 'Hotel Osaka', 'Osaka', 4, 200), (3, 'Hotel Kyoto', 'Kyoto', 3, 150), (4, 'Hotel Nagoya', 'Nagoya', 5, 400), (5, 'Hotel Hiroshima', 'Hiroshima', 2, 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(rooms) FROM hotels WHERE city = 'Tokyo' AND stars = 5;"
    },
    {
        "instruction": "입력 텍스트: 25세에서 30세 사이 사용자들의 평균 심박수를 성별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Users (id INT, age INT, gender VARCHAR(10)); INSERT INTO Users (id, age, gender) VALUES (1, 27, 'Female'), (2, 31, 'Male'); CREATE TABLE HeartRates (user_id INT, rate INT, timestamp TIMESTAMP); INSERT INTO HeartRates (user_id, rate, timestamp) VALUES (1, 120, '2022-01-01 10:00:00'), (1, 110, '2022-01-01 11:00:00'), (2, 150, '2022-01-01 10:00:00'), (2, 140, '2022-01-01 11:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.gender, AVG(hr.rate) as avg_rate FROM Users u JOIN HeartRates hr ON u.id = hr.user_id WHERE u.age BETWEEN 25 AND 30 GROUP BY u.gender;"
    },
    {
        "instruction": "입력 텍스트: 우리 태양계 밖의 천체를 관측한 모든 우주 망원경을 나열하시오.\n\nDDL statements:\nCREATE TABLE telescopes (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), launched_date DATE); CREATE TABLE observations (telescope_id INT, observed_object VARCHAR(255), observed_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT t.name FROM telescopes t JOIN observations o ON t.id = o.telescope_id WHERE o.observed_object NOT LIKE 'Solar System%';"
    },
    {
        "instruction": "입력 텍스트: cargos' 테이블에 있는 모든 화물 중 'Los Angeles' 항구로 배송된 화물의 총 중량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE cargos (id INT PRIMARY KEY, name VARCHAR(50), tonnage INT, destination VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tonnage) FROM cargos WHERE destination = 'Los Angeles';"
    },
    {
        "instruction": "입력 텍스트: 힙합 노래가 지난 달 텍사스에서 얼마나 많은 스트리밍을 받았나요?\n\nDDL statements:\nCREATE TABLE Streams (song_genre VARCHAR(255), state VARCHAR(255), stream_count INT, stream_date DATE); INSERT INTO Streams (song_genre, state, stream_count, stream_date) VALUES ('hip-hop', 'Texas', 5000, '2022-01-01'), ('rock', 'California', 6000, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(stream_count) FROM Streams WHERE song_genre = 'hip-hop' AND state = 'Texas' AND stream_date >= DATEADD(MONTH, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 생산 비용이 가장 높은 지속 가능한 재료는 무엇인가요?\n\nDDL statements:\nCREATE TABLE material_prices (material_id INT, material_name VARCHAR(50), region VARCHAR(50), production_cost DECIMAL(10,2)); INSERT INTO material_prices (material_id, material_name, region, production_cost) VALUES (1, 'Organic Cotton', 'Europe', 3.00), (2, 'Recycled Polyester', 'Europe', 4.00), (3, 'Hemp', 'Europe', 2.20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT material_name, MAX(production_cost) FROM material_prices WHERE region = 'Europe' GROUP BY material_name;"
    },
    {
        "instruction": "입력 텍스트: biosensors' 테이블에서 감도가 0.0005 mV/decade 미만인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE biosensors (biosensor_id INT PRIMARY KEY, biosensor_name VARCHAR(50), biosensor_sensitivity DECIMAL(5,4));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM biosensors WHERE biosensor_sensitivity < 0.0005;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 '수학' 학과의 교사들이 완료한 전문 개발 과정은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE courses (id INT, course_name TEXT, department TEXT, completion_date DATE); INSERT INTO courses (id, course_name, department, completion_date) VALUES (1, 'Algebra Fundamentals', 'Math', '2022-01-01'), (2, 'Geometry for Teachers', 'Math', '2022-02-15'), (3, 'Calculus Basics', 'Math', '2022-03-30');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM courses WHERE department = 'Math' AND completion_date >= DATE('now', '-6 month');"
    },
    {
        "instruction": "입력 텍스트: 심각도가 '낮음'이며 30일 이상 된 취약점을 삭제합니다.\n\nDDL statements:\nCREATE TABLE vulnerabilities (id INT, title VARCHAR(255), description TEXT, severity VARCHAR(10), date_reported DATE); INSERT INTO vulnerabilities (id, title, description, severity, date_reported) VALUES (4, 'Phishing Vulnerability', 'Description of Phishing Vulnerability', 'Low', '2021-07-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM vulnerabilities WHERE severity = 'Low' AND date_reported < DATE_SUB(CURDATE(), INTERVAL 30 DAY);"
    },
    {
        "instruction": "입력 텍스트: 기후 금융 투자에서 500,000 이상을 보유한 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE climate_finance (country VARCHAR(255), investment_amount INT); INSERT INTO climate_finance (country, investment_amount) VALUES ('Canada', 1200000), ('Mexico', 800000), ('Brazil', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM climate_finance WHERE investment_amount > 500000;"
    },
    {
        "instruction": "입력 텍스트: 지난 30일 이내에 거래를 한 고객을 확인하세요?\n\nDDL statements:\nCREATE TABLE transactions (transaction_id INT, client_id INT, transaction_date DATE); INSERT INTO transactions VALUES (1, 1, '2022-01-01'), (2, 2, '2022-02-10'), (3, 3, '2022-03-05'), (4, 1, '2022-04-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT client_id, name FROM transactions t JOIN clients c ON t.client_id = c.client_id WHERE transaction_date >= CURDATE() - INTERVAL 30 DAY;"
    },
    {
        "instruction": "입력 텍스트: 어느 나라에 연구소가 두 개 이상 있으며, 이 나라들 중 가장 먼저 설립된 연구소의 설립 연도는 언제인가요?\n\nDDL statements:\nCREATE TABLE ResearchStations (id INT, name VARCHAR(50), country VARCHAR(50), year INT); INSERT INTO ResearchStations (id, name, country, year) VALUES (1, 'Station A', 'Canada', 2000); INSERT INTO ResearchStations (id, name, country, year) VALUES (2, 'Station B', 'USA', 2010); INSERT INTO ResearchStations (id, name, country, year) VALUES (3, 'Station C', 'Canada', 2005);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MIN(year) FROM ResearchStations GROUP BY country HAVING COUNT(name) > 1;"
    },
    {
        "instruction": "입력 텍스트: 2021년 뉴욕 시의 총 물 소비량(리터)을 보여주세요.\n\nDDL statements:\nCREATE TABLE water_consumption (consumption_id INT, consumption_date DATE, city VARCHAR(50), amount FLOAT); INSERT INTO water_consumption (consumption_id, consumption_date, city, amount) VALUES (1, '2021-01-01', 'New York', 100000), (2, '2021-02-01', 'Los Angeles', 120000), (3, '2021-03-01', 'New York', 150000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) as total_consumption FROM water_consumption WHERE consumption_date BETWEEN '2021-01-01' AND '2021-12-31' AND city = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 애피타이저 카테고리에서 재고 회전율이 가장 높은 요리를 나열하세요.\n\nDDL statements:\nCREATE TABLE Inventory (id INT, dish_id INT, quantity INT, order_date DATE); INSERT INTO Inventory (id, dish_id, quantity, order_date) VALUES (1, 1, 30, '2022-01-01'), (2, 2, 50, '2022-01-02'), (3, 3, 70, '2022-01-03'); CREATE TABLE Dishes (id INT, name VARCHAR(255), category VARCHAR(255)); INSERT INTO Dishes (id, name, category) VALUES (1, 'Bruschetta', 'Appetizer'), (2, 'Calamari', 'Appetizer'), (3, 'Lasagna', 'Entree');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT D.name, SUM(I.quantity) as total_quantity, ROW_NUMBER() OVER (PARTITION BY D.category ORDER BY SUM(I.quantity) DESC) as turnover_rank FROM Inventory I JOIN Dishes D ON I.dish_id = D.id GROUP BY I.dish_id, D.name, D.category ORDER BY D.category, turnover_rank;"
    },
    {
        "instruction": "입력 텍스트: 브리티시 컬럼비아 주의 월간 매립지 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE provincial_landfill (province VARCHAR(255), landfill_capacity INT, capacity_unit VARCHAR(10), month INT); INSERT INTO provincial_landfill (province, landfill_capacity, capacity_unit, month) VALUES ('British Columbia', 4000, 'tonnes', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT landfill_capacity FROM provincial_landfill WHERE province='British Columbia' AND month=8;"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 지속 가능한 재료로 만들어진 제품의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Products (product_id INT, name VARCHAR(255), category VARCHAR(255), material_id INT); INSERT INTO Products (product_id, name, category, material_id) VALUES (1, 'Recycled Polyester T-Shirt', 'Clothing', 1), (2, 'Bamboo Socks', 'Clothing', 2), (3, 'Recycled Plastic Water Bottle', 'Accessories', 3); CREATE TABLE Materials (material_id INT, name VARCHAR(255), is_sustainable BOOLEAN); INSERT INTO Materials (material_id, name, is_sustainable) VALUES (1, 'Recycled Polyester', TRUE), (2, 'Bamboo', TRUE), (3, 'Recycled Plastic', TRUE); CREATE TABLE Factories (factory_id INT, name VARCHAR(255), country VARCHAR(255)); INSERT INTO Factories (factory_id, name, country) VALUES (1, 'GreenFactory', 'USA'), (2, 'EcoFriendlyFactory', 'India'), (3, 'SustainableFactory', 'Brazil'); CREATE TABLE ProductFactories (product_id INT, factory_id INT); INSERT INTO ProductFactories (product_id, factory_id) VALUES (1, 1), (2, 2), (3, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Factories.country, (SUM(CASE WHEN Materials.is_sustainable THEN 1 ELSE 0 END) / COUNT(DISTINCT Products.product_id)) * 100 AS percentage FROM Factories INNER JOIN ProductFactories ON 1 = 1 INNER JOIN Products ON ProductFactories.factory_id = Products.factory_id INNER JOIN Materials ON Products.material_id = Materials.material_id GROUP BY Factories.country;"
    },
    {
        "instruction": "입력 텍스트: RuralDev' 데이터베이스의 농촌 지역에서 재배되는 작물의 이름과 종류는 무엇인가요?\n\nDDL statements:\nCREATE TABLE crops (name VARCHAR(255), type VARCHAR(255)); INSERT INTO crops (name, type) VALUES ('Corn', 'Grain'), ('Soybean', 'Legume'), ('Cotton', 'Fiber');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT name, type FROM crops;"
    },
    {
        "instruction": "입력 텍스트: 태평양에서 플라스틱 쓰레기 배출량으로 상위 5개 오염국가를 찾아주세요.\n\nDDL statements:\nCREATE TABLE country_plastic_waste (country_name TEXT, ocean_basin TEXT, plastic_waste_tons INTEGER);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country_name, plastic_waste_tons FROM country_plastic_waste WHERE ocean_basin = 'Pacific' ORDER BY plastic_waste_tons DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 친환경 소재를 사용하는 브랜드의 평균 평점은 얼마인가요?\n\nDDL statements:\nCREATE TABLE brands (id INT, name VARCHAR(50), uses_eco_friendly BOOLEAN); CREATE TABLE reviews (id INT, brand_id INT, rating INT); INSERT INTO brands (id, name, uses_eco_friendly) VALUES (1, 'Brand A', true), (2, 'Brand B', false), (3, 'Brand C', true); INSERT INTO reviews (id, brand_id, rating) VALUES (1, 1, 4), (2, 1, 5), (3, 2, 2), (4, 3, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(r.rating) FROM brands b INNER JOIN reviews r ON b.id = r.brand_id WHERE b.uses_eco_friendly = true;"
    },
    {
        "instruction": "입력 텍스트: 각 주에서 대체 분쟁 해결 방법의 성공률은 어떻게 되며, 그 방법별로는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE dispute_resolutions (dispute_id INT, state VARCHAR(20), resolution_method VARCHAR(20), success BOOLEAN); INSERT INTO dispute_resolutions (dispute_id, state, resolution_method, success) VALUES (1, 'California', 'Mediation', true), (2, 'Texas', 'Restorative Justice', false), (3, 'New York', 'Mediation', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dispute_resolutions.state, dispute_resolutions.resolution_method, AVG(dispute_resolutions.success) as success_rate FROM dispute_resolutions GROUP BY dispute_resolutions.state, dispute_resolutions.resolution_method;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에서의 콘서트 티켓 판매로부터 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Concerts (id INT, city VARCHAR(255), price DECIMAL(5,2), tickets_sold INT); INSERT INTO Concerts (id, city, price, tickets_sold) VALUES (1, 'New York', 50.00, 1000), (2, 'Los Angeles', 75.00, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price * tickets_sold) FROM Concerts WHERE city = 'New York';"
    },
    {
        "instruction": "입력 텍스트: mining_operations' 테이블에 있는 각 부서별 총 직원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mining_operations (id INT, name VARCHAR(50), job_title VARCHAR(50), department VARCHAR(50), experience INT); INSERT INTO mining_operations (id, name, job_title, department, experience) VALUES (1, 'John Doe', 'Mining Engineer', 'Operations', 7); INSERT INTO mining_operations (id, name, job_title, department, experience) VALUES (2, 'Jane Smith', 'Geologist', 'Exploration', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, COUNT(*) as total_employees FROM mining_operations GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 2020년 중국에서 제조된 '자켓' 품목의 최소 수량은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE Manufacturing (id INT, garment_type VARCHAR(20), country VARCHAR(20), quantity INT, year INT); INSERT INTO Manufacturing (id, garment_type, country, quantity, year) VALUES (1, 'Dress', 'China', 300, 2020), (2, 'Shirt', 'China', 450, 2020), (3, 'Pant', 'China', 600, 2020), (4, 'Jacket', 'China', 100, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(quantity) as min_quantity FROM Manufacturing WHERE garment_type = 'Jacket' AND country = 'China' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이전에 발매된 R&B 노래를 들은 고유 사용자 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE songs (id INT, title TEXT, release_year INT, genre TEXT, streams INT); INSERT INTO songs (id, title, release_year, genre, streams) VALUES (1, 'Song1', 2014, 'R&B', 100000); INSERT INTO songs (id, title, release_year, genre, streams) VALUES (2, 'Song2', 2016, 'R&B', 120000); INSERT INTO songs (id, title, release_year, genre, streams) VALUES (3, 'Song3', 2019, 'Pop', 150000); CREATE TABLE users (id INT, user_name TEXT, song_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT users.id) AS unique_users  FROM users  JOIN songs ON users.song_id = songs.id  WHERE songs.release_year < 2015 AND songs.genre = 'R&B';"
    },
    {
        "instruction": "입력 텍스트: 티어 1 투자자로부터 투자를 받지 않은 회사들을 나열하세요.\n\nDDL statements:\nCREATE TABLE Founders (id INT, name TEXT); INSERT INTO Founders (id, name) VALUES (1, 'First Founders'); INSERT INTO Founders (id, name) VALUES (2, 'Green Startup'); CREATE TABLE Investors (id INT, tier TEXT, name TEXT); INSERT INTO Investors (id, tier, name) VALUES (1, 'Tier 1', 'Sequoia'); CREATE TABLE Investments (investor_id INT, company_name TEXT); INSERT INTO Investments (investor_id, company_name) VALUES (1, 'First Founders');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Founders.name FROM Founders LEFT JOIN Investments ON Founders.name = Investments.company_name LEFT JOIN Investors ON Investments.investor_id = Investors.id WHERE Investors.tier IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 북부 지역의 광대역 서비스와 관련된 모든 고객 불만 사항을 나열합니다.\n\nDDL statements:\nCREATE TABLE complaints (complaint_id INT, subscriber_type VARCHAR(10), region VARCHAR(10), complaint VARCHAR(50)); INSERT INTO complaints (complaint_id, subscriber_type, region, complaint) VALUES (1, 'broadband', 'North', 'slow internet speed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT complaint FROM complaints WHERE subscriber_type = 'broadband' AND region = 'North';"
    },
    {
        "instruction": "입력 텍스트: 대학원생 테이블에서 각 성별별로 출판물의 총 수를 구하세요.\n\nDDL statements:\nCREATE TABLE GraduateStudents (StudentID INT, FirstName VARCHAR(20), LastName VARCHAR(20), Gender VARCHAR(10), NumberOfPublications INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Gender, SUM(NumberOfPublications) FROM GraduateStudents GROUP BY Gender;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 발생한 총 폐기물 양은 얼마입니까?\n\nDDL statements:\nCREATE TABLE waste_generation (year INT, amount INT); INSERT INTO waste_generation (year, amount) VALUES (2018, 1200), (2019, 1500), (2021, 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM waste_generation WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 미국 내 남성과 여성의 평균 금융 복지 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE financial_wellbeing (id INTEGER, name TEXT, gender TEXT, score INTEGER, country TEXT); INSERT INTO financial_wellbeing (id, name, gender, score, country) VALUES (1, 'John Doe', 'Male', 70, 'USA'), (2, 'Jane Doe', 'Female', 75, 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, AVG(score) FROM financial_wellbeing WHERE country = 'USA' GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코 센티넬'에서 지난 3년 동안 '인종 정의' 또는 '사회 정의'라는 단어가 포함된 기사의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE the_san_francisco_sentinel (title TEXT, publication_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM the_san_francisco_sentinel WHERE (lower(title) LIKE '%racial justice%' OR lower(title) LIKE '%social justice%') AND publication_date > DATE('now','-3 years');"
    },
    {
        "instruction": "입력 텍스트: 각 레스토랑의 채식주의자용 요리의 평균 가격을 찾으세요.\n\nDDL statements:\nCREATE TABLE inventory (item_id INT, quantity INT, unit_price DECIMAL(5,2)); INSERT INTO inventory (item_id, quantity, unit_price) VALUES (1, 10, 12.99), (2, 20, 7.50), (3, 30, 9.99), (4, 40, 15.49), (5, 50, 8.99); CREATE TABLE orders (order_id INT, item_id INT, order_date DATE, restaurant_id INT); INSERT INTO orders (order_id, item_id, order_date, restaurant_id) VALUES (1, 1, '2022-04-01', 2), (2, 3, '2022-04-02', 2), (3, 2, '2022-04-03', 1), (4, 4, '2022-04-04', 1), (5, 5, '2022-04-05', 2); CREATE TABLE menu_items (item_id INT, name TEXT, is_vegan BOOLEAN, is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu_items (item_id, name, is_vegan, is_vegetarian, price) VALUES (1, 'Quinoa Salad', true, true, 12.99), (2, 'Beef Burger', false, false, 7.50), (3, 'Chickpea Curry', true, true, 9.99), (4, 'Cheesecake', false, false, 15.49), (5, 'Veggie Pizza', false, true, 8.99); CREATE TABLE restaurants (restaurant_id INT, name TEXT, region TEXT); INSERT INTO restaurants (restaurant_id, name, region) VALUES (1, 'Big Burger', 'East'), (2, 'Veggies R Us', 'Midwest'), (3, 'Tasty Bites', 'West');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, AVG(m.price) as avg_price FROM menu_items m JOIN inventory i ON m.item_id = i.item_id JOIN orders o ON i.item_id = o.item_id JOIN restaurants r ON o.restaurant_id = r.restaurant_id WHERE m.is_vegetarian = true GROUP BY o.restaurant_id;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 발생한 응급 대응 및 재난 복구 노력의 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Regions (RId INT, Name VARCHAR(50)); CREATE TABLE EmergencyResponses (ResponseId INT, RId INT, Cost INT); CREATE TABLE DisasterRecovery (RecoveryId INT, RId INT, Cost INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT R.Name, SUM(ER.Cost) + SUM(DR.Cost) FROM Regions R LEFT JOIN EmergencyResponses ER ON R.RId = ER.RId LEFT JOIN DisasterRecovery DR ON R.RId = DR.RId GROUP BY R.Name;"
    },
    {
        "instruction": "입력 텍스트: 2021년 1월 1일 기준 캘리포니아 주에서 여성 판사가 해결한 형사 사건은 몇 건입니까?\n\nDDL statements:\nCREATE TABLE cases (case_id INT, judge_gender VARCHAR(20), state VARCHAR(20), open_date DATE); INSERT INTO cases (case_id, judge_gender, state, open_date) VALUES (1, 'Male', 'California', '2020-01-01'), (2, 'Female', 'California', '2021-01-01'), (3, 'Non-binary', 'California', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM cases WHERE state = 'California' AND open_date < '2021-01-01' AND judge_gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 2021년 남미에서 국가 안보에 얼마가 지출되었나요?\n\nDDL statements:\nCREATE TABLE national_security_budget(budget_id INT, budget FLOAT, year INT, country VARCHAR(255)); INSERT INTO national_security_budget(budget_id, budget, year, country) VALUES (1, 10000000, 2021, 'Country1'), (2, 15000000, 2021, 'Country2'), (3, 12000000, 2022, 'Country3'), (4, 20000000, 2022, 'Country4');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM national_security_budget WHERE year = 2021 AND country LIKE 'South%';"
    },
    {
        "instruction": "입력 텍스트: 보전 상태가 '위험'인 모든 해양 보호 구역의 총 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (id INT, name VARCHAR(255), area_size FLOAT, conservation_status VARCHAR(100)); INSERT INTO marine_protected_areas (id, name, area_size, conservation_status) VALUES (1, 'Great Barrier Reef', 344400, 'Least Concern'), (2, 'Galapagos Marine Reserve', 133000, 'Endangered'), (3, 'Palau National Marine Sanctuary', 500000, 'Least Concern');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(area_size) FROM marine_protected_areas WHERE conservation_status = 'Endangered';"
    },
    {
        "instruction": "입력 텍스트: 각 국가의 공장 중 공정 노동 관행을 준수하는 공장의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE FairLaborPractices (factory_country TEXT, compliant BOOLEAN); INSERT INTO FairLaborPractices (factory_country, compliant) VALUES ('Country1', true), ('Country2', false), ('Country3', true), ('Country4', false), ('Country5', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT factory_country, (COUNT(*)::FLOAT / (SELECT COUNT(*) FROM FairLaborPractices)) * 100 as percentage FROM FairLaborPractices WHERE compliant = true GROUP BY factory_country;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 일요일에 활동한 휠체어 접근 가능 택시는 몇 대였나요?\n\nDDL statements:\nCREATE TABLE vehicles (vehicle_id INT, vehicle_type VARCHAR(255), day_of_week ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')); INSERT INTO vehicles (vehicle_id, vehicle_type, day_of_week) VALUES (7, 'Wheelchair Accessible', 'Sunday'); CREATE TABLE taxi_activity (taxi_id INT, vehicle_id INT, activity_date DATE); INSERT INTO taxi_activity (taxi_id, vehicle_id, activity_date) VALUES (8, 7, '2022-03-06');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM taxi_activity JOIN vehicles ON taxi_activity.vehicle_id = vehicles.vehicle_id WHERE vehicles.day_of_week = 'Sunday' AND activity_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: DrugK'와 'DrugL'의 각 연도별 총 매출액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales_yearly(year int, drug varchar(10), revenue int); INSERT INTO sales_yearly(year, drug, revenue) VALUES(2019, 'DrugK', 5000), (2019, 'DrugL', 6000), (2020, 'DrugK', 7000), (2020, 'DrugL', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT year, SUM(revenue) FROM sales_yearly WHERE drug IN ('DrugK', 'DrugL') GROUP BY year"
    },
    {
        "instruction": "입력 텍스트: 가나와 케냐에 있는 공장들의 총 생산 능력은 얼마입니까?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, location VARCHAR(50), capacity INT); INSERT INTO factories (factory_id, location, capacity) VALUES (1, 'Accra, Ghana', 3000), (2, 'Nairobi, Kenya', 4000), (3, 'London, UK', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM factories WHERE location LIKE '%Ghana%' OR location LIKE '%Kenya%';"
    },
    {
        "instruction": "입력 텍스트: Purple Rain Inc.'의 2021년 3분기 방위 계약을 삭제하세요.\n\nDDL statements:\nCREATE TABLE defense_contracts (company VARCHAR(255), quarter VARCHAR(10), value DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM defense_contracts WHERE company = 'Purple Rain Inc.' AND quarter = 'Q3 2021';"
    },
    {
        "instruction": "입력 텍스트: 지난 3년간 이집트의 평균 경제 다양화 진척도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE economic_diversification (id INT, country VARCHAR(50), year INT, progress DECIMAL(5,2)); INSERT INTO economic_diversification (id, country, year, progress) VALUES (1, 'Egypt', 2019, 45.60), (2, 'Egypt', 2020, 48.20), (3, 'Egypt', 2021, 52.10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(progress) FROM economic_diversification WHERE country = 'Egypt' AND year BETWEEN (SELECT YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: 옥수수의 평균 수확량보다 높은 수확량을 가진 농장은 어디인가요?\n\nDDL statements:\nCREATE TABLE farming (id INT, name TEXT, location TEXT, crop TEXT, yield INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'Colorado', 'Corn', 120), (2, 'Brown Farm', 'Nebraska', 'Soybeans', 45), (3, 'Jones Farm', 'Iowa', 'Wheat', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, yield FROM farming WHERE yield > (SELECT AVG(yield) FROM farming WHERE crop = 'Corn');"
    },
    {
        "instruction": "입력 텍스트: 다음 세부 사항을 가진 \"diplomacy_meetings\" 테이블에 새로운 기록을 추가하세요: meeting_id 20220101, country_name 'Afghanistan', meeting_date '2022-01-01', meeting_outcome 'Successful'\n\nDDL statements:\nCREATE TABLE diplomacy_meetings (meeting_id INT, country_name VARCHAR(50), meeting_date DATE, meeting_outcome VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO diplomacy_meetings (meeting_id, country_name, meeting_date, meeting_outcome) VALUES (20220101, 'Afghanistan', '2022-01-01', 'Successful');"
    },
    {
        "instruction": "입력 텍스트: 모든 창고에 있는 'Wibble' 아이템의 총 재고 가치는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Warehouse_Inventory (id INT, item VARCHAR(50), quantity INT, purchase_price DECIMAL(10, 2), warehouse VARCHAR(50)); INSERT INTO Warehouse_Inventory (id, item, quantity, purchase_price, warehouse) VALUES (1, 'Wibble', 100, 25.50, 'Seattle'), (2, 'Wobble', 75, 18.35, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity * purchase_price) FROM Warehouse_Inventory WHERE item = 'Wibble';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 최소 5000장 이상 팔린 각 이벤트 유형의 평균 티켓 가격을 찾으세요.\n\nDDL statements:\nCREATE TABLE TicketSales (id INT, event_type VARCHAR(255), location VARCHAR(255), tickets_sold INT, price DECIMAL(5,2), ticket_type VARCHAR(50), date DATE); INSERT INTO TicketSales (id, event_type, location, tickets_sold, price, ticket_type, date) VALUES (1, 'Concert', 'Indoor Arena', 1500, 150, 'VIP', '2021-11-01'), (2, 'Sports Game', 'Outdoor Stadium', 8000, 50, 'General Admission', '2021-10-15'), (3, 'Concert', 'Indoor Arena', 2000, 200, 'VIP', '2021-12-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT event_type, AVG(price) as avg_price FROM TicketSales WHERE tickets_sold >= 5000 AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY event_type HAVING COUNT(*) >= 5000;"
    },
    {
        "instruction": "입력 텍스트: 지역별 정신 건강 동등 위반 사건의 총 수와 평균 문화 역량 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mental_health_parity (state VARCHAR(2), incidents INT); INSERT INTO mental_health_parity (state, incidents) VALUES ('CA', 120), ('NY', 150), ('TX', 80); CREATE TABLE cultural_competency (region VARCHAR(10), score INT); INSERT INTO cultural_competency (region, score) VALUES ('North', 85), ('South', 70), ('East', 90), ('West', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(mhp.incidents) AS total_incidents, AVG(cc.score) AS avg_score FROM mental_health_parity mhp RIGHT JOIN cultural_competency cc ON mhp.state = cc.region GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: HR 부서에서 베테랑으로부터 접수된 채용 지원서의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE JobApplications (ApplicationID int, Name varchar(50), VeteranStatus varchar(50), Department varchar(50)); INSERT INTO JobApplications (ApplicationID, Name, VeteranStatus, Department) VALUES (1, 'John Doe', 'Yes', 'HR'); INSERT INTO JobApplications (ApplicationID, Name, VeteranStatus, Department) VALUES (2, 'Jane Smith', 'No', 'IT');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM JobApplications WHERE VeteranStatus = 'Yes' AND Department = 'HR';"
    },
    {
        "instruction": "입력 텍스트: 제조' 부문에서 노조에 가입하지 않은 근로자의 평균 급여는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Workers (EmployeeID INT, Sector VARCHAR(20), UnionMember BOOLEAN, Salary FLOAT); INSERT INTO Workers (EmployeeID, Sector, UnionMember, Salary) VALUES (1, 'Manufacturing', false, 50000.0), (2, 'Manufacturing', true, 55000.0), (3, 'Manufacturing', false, 48000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM Workers WHERE Sector = 'Manufacturing' AND UnionMember = false;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 소셜 미디어 플랫폼에서 'climate change' 또는 '#climatechange'를 언급한 사용자 수를 국가별로 나누어 보여주세요.\n\nDDL statements:\nCREATE TABLE mentions (mention_id INT, user_id INT, country VARCHAR(20), platform VARCHAR(20), mention_text VARCHAR(100), mention_date DATE); INSERT INTO mentions VALUES (1, 1, 'USA', 'Twitter', 'climate change', '2022-01-01'), (2, 2, 'Canada', 'Facebook', '#climatechange', '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.country, COUNT(DISTINCT m.user_id) as num_users FROM mentions m WHERE m.mention_text IN ('climate change', '#climatechange') AND m.mention_date >= DATEADD(year, -1, GETDATE()) GROUP BY m.country;"
    },
    {
        "instruction": "입력 텍스트: 파리'에 있는 호텔에서 AI 챗봇의 도입률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, name TEXT, city TEXT, ai_chatbot BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hotels WHERE city = 'Paris')) as adoption_rate FROM hotels WHERE ai_chatbot = true AND city = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 각 고객별로 최소 거래 금액이 발생한 거래 날짜를 찾아주세요.\n\nDDL statements:\nCREATE TABLE transactions (transaction_date DATE, customer_id INT, transaction_amt DECIMAL(10, 2)); INSERT INTO transactions (transaction_date, customer_id, transaction_amt) VALUES ('2022-01-01', 1, 200.00), ('2022-01-02', 2, 300.50), ('2022-01-03', 3, 150.25);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT transaction_date, customer_id, transaction_amt, RANK() OVER (PARTITION BY customer_id ORDER BY transaction_amt ASC) AS rank FROM transactions;"
    },
    {
        "instruction": "입력 텍스트: 5개 이상의 사무실을 가진 노조의 총 회원 수는 얼마입니까? * 'union_profiles' 테이블에 숫자 값이 있는 'num_offices'라는 컬럼이 있다고 가정합니다.\n\nDDL statements:\nCREATE TABLE union_profiles (union_name VARCHAR(30), num_offices INT); INSERT INTO union_profiles (union_name, num_offices) VALUES ('UnionA', 6), ('UnionB', 3), ('UnionC', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM union_profiles WHERE num_offices > 5;"
    },
    {
        "instruction": "입력 텍스트: 어떤 네트워크 장치에 가장 심각한 취약점이 있습니까?\n\nDDL statements:\nCREATE TABLE network_devices (id INT, ip VARCHAR(20), vulnerability VARCHAR(50), severity INT); INSERT INTO network_devices (id, ip, vulnerability, severity) VALUES (1, '10.0.0.1', 'CVE-2021-1234', 8), (2, '10.0.0.2', 'CVE-2022-5678', 7), (3, '10.0.0.3', 'CVE-2021-1234', 8), (4, '10.0.0.4', 'CVE-2023-9012', 9), (5, '10.0.0.5', 'CVE-2022-5678', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ip, vulnerability FROM network_devices WHERE severity = (SELECT MAX(severity) FROM network_devices);"
    },
    {
        "instruction": "입력 텍스트: 2022년 상반기에 워싱턴 주의 약국에서 판매된 대마초의 총 수량을 찾으세요.\n\nDDL statements:\nCREATE TABLE products (type VARCHAR(10), quantity INT); INSERT INTO products (type, quantity) VALUES ('flower', 1200), ('concentrate', 1500), ('edible', 800); CREATE TABLE dispensaries (state VARCHAR(20), sales INT); INSERT INTO dispensaries (state, sales) VALUES ('Washington', 2300), ('Washington', 2700); CREATE TABLE time_periods (half INT); INSERT INTO time_periods (half) VALUES (1), (2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(products.quantity) FROM products JOIN dispensaries ON TRUE WHERE products.type IN ('flower', 'concentrate', 'edible') AND dispensaries.state = 'Washington' AND time_periods.half BETWEEN 1 AND 2;"
    },
    {
        "instruction": "입력 텍스트: 2021년 4분기 주별 보안 사고에 연루된 고유 IP 주소의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE incident_ip_addresses (id INT, incident_id INT, ip_address TEXT, date_reported DATE); INSERT INTO incident_ip_addresses (id, incident_id, ip_address, date_reported) VALUES (1, 1, '192.168.1.1', '2021-10-02'), (2, 1, '8.8.8.8', '2021-10-02'), (3, 2, '192.168.1.2', '2021-10-05'), (4, 3, '192.168.1.3', '2021-10-10'), (5, 4, '192.168.1.4', '2021-11-15'), (6, 5, '192.168.1.5', '2021-11-20'), (7, 6, '192.168.1.6', '2021-12-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT WEEKOFYEAR(date_reported) as week, COUNT(DISTINCT ip_address) as unique_ips FROM incident_ip_addresses WHERE date_reported >= '2021-10-01' AND date_reported < '2022-01-01' GROUP BY week;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 'admin' 계정의 하루 최대 실패한 로그인 시도 횟수는 몇 번입니까?\n\nDDL statements:\nCREATE TABLE LoginAttempts (id INT, username VARCHAR(255), date DATE, success BOOLEAN); INSERT INTO LoginAttempts (id, username, date, success) VALUES (1, 'admin', '2022-02-01', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(failed_attempts) FROM (SELECT COUNT(*) AS failed_attempts FROM LoginAttempts WHERE username = 'admin' AND success = FALSE AND date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY date) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 장애가 있는 학생들 중 각 유형의 숙박 서비스를 받은 학생들의 비율을 찾으세요.\n\nDDL statements:\nCREATE TABLE accommodation (student_id INT, accommodation_type TEXT, accommodation_date DATE); INSERT INTO accommodation (student_id, accommodation_type, accommodation_date) VALUES (1, 'Tutoring', '2022-01-01'), (2, 'Quiet Space', '2022-02-01'), (3, 'Extended Testing Time', '2022-03-01'), (4, 'Tutoring', '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT accommodation_type, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM accommodation WHERE student_id IN (SELECT student_id FROM student WHERE disability = 'Mental Health')) as percentage FROM accommodation WHERE student_id IN (SELECT student_id FROM student WHERE disability = 'Mental Health') GROUP BY accommodation_type;"
    },
    {
        "instruction": "입력 텍스트: 칠레와 콜롬비아에서 재난 복구 노력에 들어간 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE disaster_recovery (id INT, country VARCHAR(20), recovery_type VARCHAR(50), cost DECIMAL(10, 2), recovery_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(cost) as total_cost FROM disaster_recovery GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 기부자가 기부한 총액을 기부 총액이 많은 순으로 정렬하여 보여주세요.\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, TotalDonation DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, SUM(TotalDonation) AS TotalDonated FROM Donors GROUP BY DonorName ORDER BY TotalDonated DESC;"
    },
    {
        "instruction": "입력 텍스트: Policy' 테이블에서 'California'에 거주하는 보험 가입자의 정책 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Policy (policy_id INT, policyholder_state VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Policy WHERE policyholder_state = 'California';"
    },
    {
        "instruction": "입력 텍스트: 미국에 투자한 고객들의 투자 평균 가치는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Investments (CustomerID INT, Market VARCHAR(20), Value DECIMAL(10,2)); INSERT INTO Investments (CustomerID, Market, Value) VALUES (1, 'US', 5000); INSERT INTO Investments (CustomerID, Market, Value) VALUES (2, 'US', 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Value) FROM Investments WHERE Market = 'US'"
    },
    {
        "instruction": "입력 텍스트: 각 소매업체에서 취급하는 비건 및 글루텐 프리 제품의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE retailers (retailer_id INT, retailer_name TEXT);CREATE TABLE products (product_id INT, product_name TEXT, is_vegan BOOLEAN, is_gluten_free BOOLEAN);CREATE TABLE inventory (retailer_id INT, product_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT retailers.retailer_name, COUNT(DISTINCT products.product_id) as total_products FROM retailers JOIN inventory ON retailers.retailer_id = inventory.retailer_id JOIN products ON inventory.product_id = products.product_id WHERE products.is_vegan = TRUE OR products.is_gluten_free = TRUE GROUP BY retailers.retailer_name;"
    },
    {
        "instruction": "입력 텍스트: ID 1인 숙박 시설의 이름을 '개선된 램프'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE accommodations_2 (id INT, name TEXT, cost FLOAT); INSERT INTO accommodations_2 (id, name, cost) VALUES (1, 'Wheelchair Ramp', 120000.00), (2, 'Sign Language Interpreter', 60000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE accommodations_2 SET name = 'Improved Ramp' WHERE id = 1;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 도시 프로젝트 자금이 2021년에서 2022년까지 얼마나 변화했습니까?\n\nDDL statements:\nCREATE TABLE sustainable_urbanism (id INT, project TEXT, year INT, funding FLOAT); INSERT INTO sustainable_urbanism (id, project, year, funding) VALUES (1, 'Green City Initiative', 2021, 500000), (2, 'Sustainable Spaces', 2021, 750000), (3, 'Green City Initiative', 2022, 550000), (4, 'Sustainable Spaces', 2022, 800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (MAX(funding) FILTER (WHERE year = 2022) - MAX(funding) FILTER (WHERE year = 2021)) FROM sustainable_urbanism WHERE project IN ('Green City Initiative', 'Sustainable Spaces');"
    },
    {
        "instruction": "입력 텍스트: 안전 등급이 7 미만인 화학 물질의 기록을 삭제하세요\n\nDDL statements:\nCREATE TABLE chemical_compounds (id INT PRIMARY KEY, name VARCHAR(255), safety_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM chemical_compounds WHERE safety_rating < 7;"
    },
    {
        "instruction": "입력 텍스트: Armed Forces' 스키마에 있는 군사 기지의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE SCHEMA IF NOT EXISTS Armed_Forces; CREATE TABLE IF NOT EXISTS Armed_Forces.Military_Bases (base_id INT, base_name VARCHAR(255), location VARCHAR(255)); INSERT INTO Armed_Forces.Military_Bases (base_id, base_name, location) VALUES (1, 'Fort Bragg', 'North Carolina'), (2, 'Camp Humphreys', 'South Korea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Armed_Forces.Military_Bases;"
    },
    {
        "instruction": "입력 텍스트: 그린 라인의 코플리 역에서 이용 가능한 자전거 수를 12대로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Bikes (station VARCHAR(20), line VARCHAR(20), quantity INTEGER); INSERT INTO Bikes (station, line, quantity) VALUES ('Boylston', 'Green Line', 15), ('Copley', 'Green Line', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Bikes SET quantity = 12 WHERE station = 'Copley' AND line = 'Green Line';"
    },
    {
        "instruction": "입력 텍스트: 남미와 중동 지역의 호텔 기술 도입 시기를 보여주세요.\n\nDDL statements:\nCREATE TABLE tech_adoption (hotel_id INT, location VARCHAR(20), adoption_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, MIN(adoption_date) as first_adoption, MAX(adoption_date) as last_adoption FROM tech_adoption WHERE location IN ('South America', 'Middle East') GROUP BY location"
    },
    {
        "instruction": "입력 텍스트: 2022년 4월 'Central' 지역의 최대 에너지 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE energy_prices (id INT, region VARCHAR(50), price FLOAT, date DATE); INSERT INTO energy_prices (id, region, price, date) VALUES (1, 'Central', 70.5, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(price) AS max_price FROM energy_prices WHERE date BETWEEN '2022-04-01' AND '2022-04-30' AND region = 'Central' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2018년 남아프리카에서 발생한 콜레라의 환자 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE infectious_diseases (id INT, disease TEXT, state TEXT, year INT, cases INT); INSERT INTO infectious_diseases (id, disease, state, year, cases) VALUES (1, 'cholera', 'South Africa', 2018, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT disease, SUM(cases) as num_cases FROM infectious_diseases WHERE state = 'South Africa' AND year = 2018 GROUP BY disease;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 '아침'과 '점심' 메뉴 카테고리의 일일 평균 수익을 찾으세요.\n\nDDL statements:\nCREATE TABLE daily_revenue(menu_category VARCHAR(20), revenue DECIMAL(10, 2), order_date DATE); INSERT INTO daily_revenue(menu_category, revenue, order_date) VALUES ('Breakfast', 6000, '2021-05-01'), ('Lunch', 8000, '2021-05-01'), ('Breakfast', 5000, '2021-05-02'), ('Lunch', 7500, '2021-05-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT menu_category, AVG(revenue) AS avg_daily_revenue FROM daily_revenue WHERE order_date >= (SELECT DATE(CURRENT_DATE - INTERVAL 30 DAY)) AND menu_category IN ('Breakfast', 'Lunch') GROUP BY menu_category;"
    },
    {
        "instruction": "입력 텍스트: VolunteerID가 3인 자원봉사자를 삭제하세요.\n\nDDL statements:\nCREATE TABLE Volunteers (VolunteerID INT, FirstName VARCHAR(255), LastName VARCHAR(255), Email VARCHAR(255), Phone VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Volunteers WHERE VolunteerID = 3;"
    },
    {
        "instruction": "입력 텍스트: 2000년 이전에 보잉과 에어버스에서 제조된 항공기 모델은 총 몇 개입니까?\n\nDDL statements:\nCREATE TABLE boeing_aircraft (model VARCHAR(50), year INT); INSERT INTO boeing_aircraft (model, year) VALUES ('B707', 1954), ('B727', 1963), ('B737', 1967), ('B747', 1969), ('B757', 1981), ('B767', 1982), ('B777', 1995); CREATE TABLE airbus_aircraft (model VARCHAR(50), year INT); INSERT INTO airbus_aircraft (model, year) VALUES ('A300', 1972), ('A310', 1983), ('A320', 1988), ('A330', 1992), ('A340', 1993);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT model, year FROM boeing_aircraft WHERE year < 2000 UNION ALL SELECT model, year FROM airbus_aircraft WHERE year < 2000) AS combined;"
    },
    {
        "instruction": "입력 텍스트: 2022년 3월에 비건 메뉴 아이템의 총 수익을 계산하세요.\n\nDDL statements:\nCREATE TABLE menu_sales_7 (menu_item VARCHAR(255), sale_date DATE, revenue INT, is_vegan BOOLEAN); INSERT INTO menu_sales_7 (menu_item, sale_date, revenue, is_vegan) VALUES ('Veggie Burger', '2022-03-01', 1500, true), ('Cheese Pizza', '2022-03-01', 2000, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM menu_sales_7 WHERE is_vegan = true AND sale_date BETWEEN '2022-03-01' AND '2022-03-31';"
    },
    {
        "instruction": "입력 텍스트: R&B 앨범의 평균 발매일은 무엇인가요?\n\nDDL statements:\nCREATE TABLE genres (id INT, genre VARCHAR(255)); INSERT INTO genres (id, genre) VALUES (1, 'R&B'); CREATE TABLE albums (id INT, genre_id INT, release_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(release_date) FROM albums JOIN genres ON albums.genre_id = genres.id WHERE genres.genre = 'R&B';"
    },
    {
        "instruction": "입력 텍스트: 우주 탐사 프로그램에 가장 많은 자금을 지원받은 우주 기관이 있는 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE agency_funding (id INT, agency VARCHAR(255), country VARCHAR(255), total_funding FLOAT, PRIMARY KEY(id)); INSERT INTO agency_funding (id, agency, country, total_funding) VALUES (1, 'Agency4', 'Country4', 2500000), (2, 'Agency5', 'Country5', 3000000), (3, 'Agency6', 'Country4', 1800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT agency_funding.country, SUM(agency_funding.total_funding) FROM agency_funding GROUP BY agency_funding.country;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 농촌 보건 클리닉의 의료 용품 총 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE clinics (clinic_id INT, clinic_name VARCHAR(50)); CREATE TABLE supply_costs (clinic_id INT, supply_id INT, cost FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT clinics.clinic_name, SUM(supply_costs.cost) as total_cost FROM clinics INNER JOIN supply_costs ON clinics.clinic_id = supply_costs.clinic_id WHERE YEAR(supply_costs.date) = 2022 GROUP BY clinics.clinic_name;"
    },
    {
        "instruction": "입력 텍스트: 2018년 이후 일본에서 출시된 무료 게임은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE Games (GameID INT, GameName VARCHAR(50), GameType VARCHAR(50), ReleaseYear INT); INSERT INTO Games (GameID, GameName, GameType, ReleaseYear) VALUES (1, 'GameA', 'Paid', 2017), (2, 'GameB', 'Free', 2018), (3, 'GameC', 'Paid', 2019), (4, 'GameD', 'Free', 2020), (5, 'GameE', 'Paid', 2021), (6, 'GameF', 'Free', 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(GameID) FROM Games WHERE GameType = 'Free' AND ReleaseYear >= 2018 AND Country = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 비건 친화적인 아이섀도 팔레트의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE eyeshadow_sales (product_name TEXT, price DECIMAL(5,2), is_vegan BOOLEAN); INSERT INTO eyeshadow_sales (product_name, price, is_vegan) VALUES ('Eyeshadow Palette', 25.99, true), ('Eyeshadow Palette', 31.99, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(price) FROM eyeshadow_sales WHERE is_vegan = true;"
    },
    {
        "instruction": "입력 텍스트: training' 및 'employee' 테이블에서 다양성 및 포용성 교육을 받지 않은 직원의 수를 구하세요.\n\nDDL statements:\nCREATE TABLE employee (id INT, name VARCHAR(50), gender VARCHAR(50), department_id INT, training_id INT); CREATE TABLE training (id INT, title VARCHAR(50), type VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(employee.id) FROM employee LEFT JOIN training ON employee.training_id = training.id WHERE training.type IS NULL;"
    },
    {
        "instruction": "입력 텍스트: production_costs' 테이블에서 옥수수의 평균 생산 비용은 얼마인가요?\n\nDDL statements:\nCREATE TABLE production_costs (id INT, crop VARCHAR(255), year INT, cost DECIMAL(5,2)); INSERT INTO production_costs (id, crop, year, cost) VALUES (1, 'Corn', 2020, 250.3), (2, 'Soybean', 2020, 225.1), (3, 'Wheat', 2020, 195.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT crop, AVG(cost) as AvgCost FROM production_costs WHERE crop = 'Corn' GROUP BY crop;"
    },
    {
        "instruction": "입력 텍스트: veteran_employment' 테이블에서 캘리포니아 주에 해당하는 모든 기록을 삭제하세요.\n\nDDL statements:\nveteran_employment(veteran_id, state, industry, company, job_title, employment_status)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM veteran_employment WHERE state = 'CA';"
    },
    {
        "instruction": "입력 텍스트: 서호주의 각 광산에서 일하는 직원 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE mines (id INT, name TEXT, location TEXT, type TEXT, num_employees INT); INSERT INTO mines (id, name, location, type, num_employees) VALUES (1, 'Super Pit', 'Western Australia', 'gold', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, ROW_NUMBER() OVER (ORDER BY num_employees DESC) as employee_count FROM mines WHERE location = 'Western Australia';"
    },
    {
        "instruction": "입력 텍스트: mining_company'와 'drilling_company'에 있는 직원의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE mining_company (id INT, name VARCHAR, position VARCHAR, department VARCHAR, salary DECIMAL); INSERT INTO mining_company (id, name, position, department, salary) VALUES (1, 'John Doe', 'Engineer', 'Mining', 75000.00), (2, 'Jane Smith', 'Technician', 'Mining', 50000.00); CREATE TABLE drilling_company (id INT, name VARCHAR, position VARCHAR, department VARCHAR, salary DECIMAL); INSERT INTO drilling_company (id, name, position, department, salary) VALUES (1, 'Mike Johnson', 'Supervisor', 'Drilling', 80000.00), (2, 'Alice Davis', 'Operator', 'Drilling', 60000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM ( (SELECT * FROM mining_company) UNION ALL (SELECT * FROM drilling_company) ) AS total;"
    },
    {
        "instruction": "입력 텍스트: 멸종 위기' 상태에 있는 모든 동물의 총 나이를 계산하세요.\n\nDDL statements:\nCREATE TABLE animals (id INT, name VARCHAR(50), status VARCHAR(20), age INT); INSERT INTO animals (id, name, status, age) VALUES (1, 'Tiger', 'Endangered', 10); INSERT INTO animals (id, name, status, age) VALUES (2, 'Elephant', 'Vulnerable', 30); INSERT INTO animals (id, name, status, age) VALUES (3, 'Rhino', 'Critically Endangered', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(age) FROM animals WHERE status = 'Endangered';"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 그린 인증을 받은 주택 단위의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Tokyo_Housing (Location VARCHAR(255), Green_Certified BOOLEAN, Units INT); INSERT INTO Tokyo_Housing (Location, Green_Certified, Units) VALUES ('Shibuya', true, 50), ('Shinjuku', false, 60), ('Shinagawa', true, 70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Units) FROM Tokyo_Housing WHERE Green_Certified = true;"
    },
    {
        "instruction": "입력 텍스트: 2021년 마지막 분기에 발행된 대출 금액 중 최대 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE loans (id INT, amount DECIMAL, date DATE); INSERT INTO loans (id, amount, date) VALUES (1, 5000, '2021-09-05'), (2, 7000, '2021-10-07'), (3, 9000, '2021-11-03'), (4, 11000, '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4;"
    },
    {
        "instruction": "입력 텍스트: 재활용 센터'와 '매립지'에서 발생하는 총 폐기물 양은 얼마입니까?\n\nDDL statements:\nCREATE TABLE recycling_centers (id INT, name VARCHAR(50), waste_generated FLOAT); CREATE TABLE landfills (id INT, name VARCHAR(50), waste_generated FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(rc.waste_generated) + SUM(l.waste_generated) FROM recycling_centers rc, landfills l;"
    },
    {
        "instruction": "입력 텍스트: 각 게임별로 'eSports' 스키마에는 몇 명의 플레이어가 있나요?\n\nDDL statements:\nCREATE TABLE esports (game_id INT, player_count INT); INSERT INTO esports VALUES (1, 50000), (2, 30000), (3, 40000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.game_id, e.player_count, g.game_name FROM esports e JOIN game g ON e.game_id = g.game_id;"
    },
    {
        "instruction": "입력 텍스트: 낮은 심각도 등급을 가진 시스템의 이름과 취약점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE SystemVulnerabilities (SystemName VARCHAR(255), Vulnerability VARCHAR(255), Severity RATING); INSERT INTO SystemVulnerabilities (SystemName, Vulnerability, Severity) VALUES ('WebServer04', 'Information Disclosure', 'LOW'); INSERT INTO SystemVulnerabilities (SystemName, Vulnerability, Severity) VALUES ('DBServer04', 'Denial of Service', 'MEDIUM');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SystemName, Vulnerability FROM SystemVulnerabilities WHERE Severity = 'LOW';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 자연재해로 인해 피해를 입은 사람들의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE natural_disasters (disaster_id INT, region VARCHAR(50), people_impacted INT); INSERT INTO natural_disasters (disaster_id, region, people_impacted) VALUES (1, 'Region A', 5000), (2, 'Region A', 8000), (3, 'Region B', 12000), (4, 'Region A', 7000), (5, 'Region B', 9000), (6, 'Region C', 10000); CREATE TABLE regions (region_id INT, name VARCHAR(50)); INSERT INTO regions (region_id, name) VALUES (1, 'Region A'), (2, 'Region B'), (3, 'Region C');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, SUM(nd.people_impacted) AS total_people_impacted FROM natural_disasters nd JOIN regions r ON nd.region = r.name GROUP BY r.name"
    },
    {
        "instruction": "입력 텍스트: 플레이어들의 성별 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10)); INSERT INTO Players (PlayerID, Age, Gender) VALUES (1, 25, 'Male'); INSERT INTO Players (PlayerID, Age, Gender) VALUES (2, 30, 'Female'); INSERT INTO Players (PlayerID, Age, Gender) VALUES (3, 22, 'Male'); INSERT INTO Players (PlayerID, Age, Gender) VALUES (4, 35, 'Female'); INSERT INTO Players (PlayerID, Age, Gender) VALUES (5, 28, 'Non-binary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Players.Gender, COUNT(Players.PlayerID) FROM Players GROUP BY Players.Gender;"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 천체물리학 프로젝트의 총 연구 자금을 보여주세요.\n\nDDL statements:\nCREATE TABLE astrophysics_projects (project_id INT, name VARCHAR(50), research_funding DECIMAL(10,2), start_year INT, end_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, SUM(research_funding) FROM astrophysics_projects WHERE start_year <= 2022 AND end_year >= 2022 GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: post_engagements' 테이블에서 지난 한 달 동안 '데이터 프라이버시'에 관한 게시물에 참여한 고유 사용자 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE post_engagements (user_id INT, post_id INT, engagement_date DATE, post_topic VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT user_id) as unique_users FROM post_engagements WHERE post_topic = 'data privacy' AND engagement_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 요금이 20달러를 초과하는 노선에 대해 수집된 총 요금과 고유 승객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE fare (fare_id INT, route_id INT, passenger_count INT, fare_amount FLOAT, payment_method VARCHAR(255)); INSERT INTO fare (fare_id, route_id, passenger_count, fare_amount, payment_method) VALUES (1, 3, 2, 25.0, 'Credit Card'); INSERT INTO fare (fare_id, route_id, passenger_count, fare_amount, payment_method) VALUES (2, 4, 1, 12.50, 'Cash');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT route_id, SUM(fare_amount) as total_fare, COUNT(DISTINCT passenger_count) as unique_passengers FROM fare WHERE fare_amount > 20 GROUP BY route_id;"
    },
    {
        "instruction": "입력 텍스트: team_performance' 테이블의 각 팀별 승-패-무 비율은 무엇인가요?\n\nDDL statements:\nCREATE TABLE team_performance (team_name VARCHAR(30), wins INT, losses INT, draws INT); INSERT INTO team_performance (team_name, wins, losses, draws) VALUES ('Celtics', 40, 10, 10), ('Heat', 35, 15, 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT team_name, (wins::DECIMAL / (wins + losses + draws)) AS win_ratio FROM team_performance;"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역의 AI 모델 중 최소 공정성 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE asia_fairness (model_name TEXT, region TEXT, fairness_score INTEGER); INSERT INTO asia_fairness (model_name, region, fairness_score) VALUES ('ModelA', 'Asia', 70), ('ModelB', 'Asia', 80), ('ModelC', 'Asia', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(fairness_score) FROM asia_fairness WHERE region = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 모바일과 브로드밴드 가입자 수는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE countries (country_id INT PRIMARY KEY, country_name VARCHAR(255)); INSERT INTO countries (country_id, country_name) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'); CREATE TABLE mobile_subscribers (subscriber_id INT PRIMARY KEY, country_id INT); INSERT INTO mobile_subscribers (subscriber_id, country_id) VALUES (1, 1), (2, 1), (3, 2), (4, 3), (5, 3); CREATE TABLE broadband_subscribers (subscriber_id INT PRIMARY KEY, country_id INT); INSERT INTO broadband_subscribers (subscriber_id, country_id) VALUES (1, 1), (2, 2), (3, 2), (4, 3), (5, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.country_name, COUNT(m.subscriber_id) + COUNT(b.subscriber_id) as total_subscribers FROM countries c LEFT JOIN mobile_subscribers m ON c.country_id = m.country_id LEFT JOIN broadband_subscribers b ON c.country_id = b.country_id GROUP BY c.country_name;"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2021년 인도의 총 설치된 태양광 발전 용량을 계산하세요.\n\nDDL statements:\nCREATE TABLE solar_capacity (country VARCHAR(255), year INT, capacity FLOAT); INSERT INTO solar_capacity (country, year, capacity) VALUES ('India', 2019, 28000), ('India', 2019, 30000), ('India', 2021, 35000), ('India', 2021, 37000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) as total_capacity, year FROM solar_capacity WHERE country = 'India' GROUP BY year;"
    },
    {
        "instruction": "입력 텍스트: 각 그룹별 고유 위협 행위자의 총 수를 나열하시오.\n\nDDL statements:\nCREATE TABLE threat_actors (id INT, actor VARCHAR(255), group_name VARCHAR(255), incident_type VARCHAR(255)); INSERT INTO threat_actors (id, actor, group_name, incident_type) VALUES (1, 'APT28', 'APT', 'spear phishing'), (2, 'APT33', 'APT', 'DDoS'), (3, 'APT29', 'APT', 'malware'), (4, 'Lazarus', 'APT', 'ransomware'), (5, 'APT34', 'APT', 'phishing');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT group_name, COUNT(DISTINCT actor) as unique_actors FROM threat_actors GROUP BY group_name;"
    },
    {
        "instruction": "입력 텍스트: 브라질로 배송된 상품의 평균 배송 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE shipments (id INT, shipped_at DATETIME, delivered_at DATETIME, country VARCHAR(255)); INSERT INTO shipments (id, shipped_at, delivered_at, country) VALUES (1, '2022-01-01 10:00:00', '2022-01-05 14:00:00', 'Brazil'), (2, '2022-02-10 09:00:00', '2022-02-15 10:00:00', 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DATEDIFF(delivered_at, shipped_at)) as avg_delivery_time FROM shipments WHERE country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 채식 식사의 평균 단백질 함량 비율을 찾아주세요.\n\nDDL statements:\nCREATE TABLE meals (id INT, name VARCHAR(255), vegetarian BOOLEAN, protein_percent DECIMAL(5,2)); INSERT INTO meals (id, name, vegetarian, protein_percent) VALUES (1, 'Chicken Curry', FALSE, 28), (2, 'Vegetable Stir Fry', TRUE, 12), (3, 'Beef Burger', FALSE, 22);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(protein_percent) FROM meals WHERE vegetarian = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 부서를 변경한 직원 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE department_changes (id INT, employee_id INT, change_date DATE, new_department VARCHAR(255)); INSERT INTO department_changes (id, employee_id, change_date, new_department) VALUES (1, 401, '2020-03-01', 'IT'); INSERT INTO department_changes (id, employee_id, change_date, new_department) VALUES (2, 402, '2019-12-20', 'HR');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT employee_id) FROM department_changes WHERE YEAR(change_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2021년 뉴욕 시에서 개최된 커뮤니티 치안 행사는 몇 개였나요?\n\nDDL statements:\nCREATE TABLE CommunityPolicingEvents (ID INT, City VARCHAR(20), Year INT, Events INT); INSERT INTO CommunityPolicingEvents (ID, City, Year, Events) VALUES (1, 'New York City', 2021, 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Events) FROM CommunityPolicingEvents WHERE City = 'New York City' AND Year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 5편 이상의 논문을 출판한 교수진의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE faculty_publications(id INT, name TEXT, num_papers INT); INSERT INTO faculty_publications(id, name, num_papers) VALUES (1, 'Alice', 6), (2, 'Bob', 3), (3, 'Charlie', 8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM faculty_publications WHERE num_papers > 5;"
    },
    {
        "instruction": "입력 텍스트: 2022년 4분기에 새로운 기부자들의 총 기부금액을 찾으세요.\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, donation_date DATE, donation_amount DECIMAL(10, 2)); INSERT INTO donors VALUES (20, '2022-10-01', 75.00), (21, '2022-12-15', 120.00), (22, '2022-11-05', 225.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE donor_id IN (SELECT donor_id FROM donors WHERE donation_date BETWEEN '2022-10-01' AND '2022-12-31' GROUP BY donor_id HAVING COUNT(*) = 1);"
    },
    {
        "instruction": "입력 텍스트: 2020년 아프리카 지역에서의 군사 장비 판매 최대 금액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE military_sales (id INT, year INT, region VARCHAR(20), equipment_type VARCHAR(20), value FLOAT); INSERT INTO military_sales (id, year, region, equipment_type, value) VALUES (1, 2020, 'Africa', 'Missiles', 7000000); INSERT INTO military_sales (id, year, region, equipment_type, value) VALUES (2, 2020, 'Africa', 'Radars', 6000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(value) FROM military_sales WHERE year = 2020 AND region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 미국에서 활동 중인 자율 주행 연구 프로젝트의 모델은 무엇인가요?\n\nDDL statements:\nCREATE TABLE AutonomousDrivingResearchUS (project_id INT, project_name VARCHAR(100), start_date DATE, end_date DATE, country VARCHAR(50)); INSERT INTO AutonomousDrivingResearchUS (project_id, project_name, start_date, end_date, country) VALUES (1, 'Project A', '2020-01-01', '2024-12-31', 'US'), (2, 'Project B', '2021-01-01', '2025-12-31', 'US');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name FROM AutonomousDrivingResearchUS WHERE end_date >= CURDATE() AND country = 'US';"
    },
    {
        "instruction": "입력 텍스트: 독일과 일본의 모든 재정 복지 프로그램을 나열하시오.\n\nDDL statements:\nCREATE TABLE fw_programs (program_name TEXT, country TEXT); INSERT INTO fw_programs (program_name, country) VALUES ('German Financial Wellbeing', 'Germany'), ('Japanese Financial Health', 'Japan'), ('Swiss Financial Literacy', 'Switzerland');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name FROM fw_programs WHERE country IN ('Germany', 'Japan');"
    },
    {
        "instruction": "입력 텍스트: 민간 투자자들이 기후 완화 프로젝트당 평균적으로 얼마를 투자하나요?\n\nDDL statements:\nCREATE TABLE private_investors(project_id INT, project_name TEXT, amount_funded FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount_funded) FROM private_investors WHERE sector = 'climate mitigation';"
    },
    {
        "instruction": "입력 텍스트: 각 우주선 제조에 대한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Spacecraft (ID INT PRIMARY KEY, Name TEXT); CREATE TABLE Budget (ID INT PRIMARY KEY, Spacecraft_ID INT, Amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.Name, SUM(b.Amount) as Total_Budget FROM Spacecraft s INNER JOIN Budget b ON s.ID = b.Spacecraft_ID GROUP BY s.Name;"
    },
    {
        "instruction": "입력 텍스트: 최근 3개월 동안 캐나다, 멕시코, 미국에 발표된 여행 경보를 나열하세요.\n\nDDL statements:\nCREATE TABLE travel_advisories (id INT, country VARCHAR(10), advisory_date DATE, advisory_text TEXT); INSERT INTO travel_advisories (id, country, advisory_date, advisory_text) VALUES (1, 'Canada', '2023-01-01', 'Stay aware of your surroundings'); INSERT INTO travel_advisories (id, country, advisory_date, advisory_text) VALUES (2, 'Mexico', '2023-02-15', 'Exercise increased caution'); INSERT INTO travel_advisories (id, country, advisory_date, advisory_text) VALUES (3, 'USA', '2023-03-20', 'Reconsider travel');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT advisory_text FROM travel_advisories WHERE country IN ('Canada', 'Mexico', 'USA') AND advisory_date > DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 과학대학의 각 학과에서 정규직 교수의 비율을 계산하세요.\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(100), department VARCHAR(100), tenure VARCHAR(10)); INSERT INTO faculty (id, name, department, tenure) VALUES (1, 'Faculty Name', 'Physics', 'Tenured'); CREATE TABLE departments (id INT, name VARCHAR(100), college VARCHAR(50)); INSERT INTO departments (id, name, college) VALUES (1, 'Physics', 'College of Science');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, (COUNT(*) FILTER (WHERE tenure = 'Tenured')) * 100.0 / COUNT(*) as tenure_percentage FROM faculty f JOIN departments d ON f.department = d.name WHERE d.college = 'College of Science' GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 영국에서 성공한 바이오센서 기술 개발 프로젝트의 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT, name VARCHAR(50), location VARCHAR(50), status VARCHAR(50), type VARCHAR(50)); INSERT INTO projects (id, name, location, status, type) VALUES (3, 'Project3', 'UK', 'Success', 'Biosensor');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM projects WHERE location = 'UK' AND type = 'Biosensor' AND status = 'Success';"
    },
    {
        "instruction": "입력 텍스트: 세계에서 연어 양식 산업을 가진 나라는 몇 개국입니까?\n\nDDL statements:\nCREATE TABLE Countries (CountryName TEXT, IndustryType TEXT); INSERT INTO Countries (CountryName, IndustryType) VALUES ('Norway', 'Salmon'), ('Chile', 'Salmon'), ('Scotland', 'Salmon'), ('Canada', 'Salmon'), ('Faroe Islands', 'Salmon'), ('Iceland', 'Salmon'), ('United States', 'Salmon'), ('Norway', 'Cod'), ('Norway', 'Haddock');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT CountryName) FROM Countries WHERE IndustryType = 'Salmon';"
    },
    {
        "instruction": "입력 텍스트: \"threats\" 테이블에서 다음의 정보로 위협 정보를 업데이트하세요: [(1, 'APT28', '러시아', '국가 후원'), (2, 'APT33', '이란', '국가 후원'), (3, 'APT38', '북한', '국가 후원')]\n\nDDL statements:\nCREATE TABLE threats (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), type VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE threats SET country = CASE id WHEN 1 THEN 'Russia' WHEN 2 THEN 'Iran' WHEN 3 THEN 'North Korea' END, type = 'state-sponsored' WHERE id IN (1, 2, 3);"
    },
    {
        "instruction": "입력 텍스트: CarbonEmissions' 테이블에서 '2020'년도의 총 CO2 배출량은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE CarbonEmissions (id INT, year INT, co2_emission INT); INSERT INTO CarbonEmissions (id, year, co2_emission) VALUES (1, 2019, 5000), (2, 2020, 6000), (3, 2021, 7000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(co2_emission) FROM CarbonEmissions WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 조직별 특정 유형의 정책 옹호 활동 내역은 무엇인가요?\n\nDDL statements:\nCREATE TABLE PolicyAdvocacy (PolicyAdvocacyID INT, Organization VARCHAR(255), AdvocacyDate DATE, AdvocacyType VARCHAR(255)); INSERT INTO PolicyAdvocacy (PolicyAdvocacyID, Organization, AdvocacyDate, AdvocacyType) VALUES (1, 'National Alliance on Mental Illness', '2020-01-01', 'Lobbying'), (2, 'Autistic Self Advocacy Network', '2019-12-15', 'Protest');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Organization, AdvocacyType, AdvocacyDate FROM PolicyAdvocacy WHERE AdvocacyType = 'Lobbying';"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 발견된 해양 생물 종 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE Species_Database (species_name TEXT, region TEXT); INSERT INTO Species_Database (species_name, region) VALUES ('Pacific Salmon', 'North Pacific'), ('Green Sea Turtle', 'Atlantic and Pacific Oceans'), ('Blue Whale', 'Worldwide'), ('Krill', 'Antarctic'), ('Squid', 'Worldwide'), ('Seagrass', 'Atlantic and Pacific Oceans');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM Species_Database GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 남아프리카의 의료 지원을 위해 기부된 총 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (donation_id INT, donor_id INT, cause TEXT, amount DECIMAL); CREATE TABLE Donors (donor_id INT, donor_name TEXT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM Donations JOIN Donors ON Donations.donor_id = Donors.donor_id WHERE cause = 'healthcare' AND country = 'South Africa';"
    },
    {
        "instruction": "입력 텍스트: 각 학년별 평균 정신 건강 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE students (id INT, name VARCHAR(50), grade INT, mental_health_score INT); INSERT INTO students (id, name, grade, mental_health_score) VALUES (1, 'John Doe', 9, 75), (2, 'Jane Doe', 12, 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT grade, AVG(mental_health_score) FROM students GROUP BY grade;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 출신 기부자들의 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (Id INT, Name VARCHAR(50), Location VARCHAR(50), Donation DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Donation) FROM Donors WHERE Location = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 2021년 아프리카와 유럽에서의 평화유지 작전에 대한 총 지출은 얼마입니까?\n\nDDL statements:\nCREATE TABLE PeacekeepingOperations (OperationName VARCHAR(50), Year INT, Region VARCHAR(20), Spending DECIMAL(10,2)); INSERT INTO PeacekeepingOperations (OperationName, Year, Region, Spending) VALUES ('Op1', 2021, 'Africa', 2000), ('Op2', 2021, 'Europe', 2500), ('Op3', 2021, 'Asia-Pacific', 1200), ('Op4', 2021, 'Americas', 1500), ('Op5', 2021, 'Africa', 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Spending) FROM PeacekeepingOperations WHERE Region IN ('Africa', 'Europe') AND Year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 인도의 노인 인구에서 두 번째로 흔한 정신 건강 상태는 무엇입니까?\n\nDDL statements:\nCREATE TABLE conditions (id INT, patient_id INT, condition VARCHAR(255)); CREATE TABLE patients (id INT, age INT, country VARCHAR(255)); INSERT INTO conditions (id, patient_id, condition) VALUES (1, 1, 'depression'), (2, 2, 'anxiety'), (3, 3, 'anxiety'), (4, 3, 'bipolar'); INSERT INTO patients (id, age, country) VALUES (1, 65, 'India'), (2, 25, 'India'), (3, 72, 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT conditions.condition, COUNT(conditions.condition) AS count FROM conditions JOIN patients ON conditions.patient_id = patients.id WHERE patients.country = 'India' AND patients.age > 60 GROUP BY conditions.condition ORDER BY count DESC LIMIT 1 OFFSET 1;"
    },
    {
        "instruction": "입력 텍스트: 2019년도에 가장 높은 커뮤니티 참여 지표를 보인 소수 대표 커뮤니티의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE Community_Engagement (id INT, community_name VARCHAR(100), year INT, engagement_score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT community_name FROM Community_Engagement WHERE year = 2019 AND engagement_score IN (SELECT MAX(engagement_score) FROM Community_Engagement WHERE year = 2019) AND community_name IN ('African American', 'Hispanic', 'Indigenous', 'Asian', 'LGBTQ+');"
    },
    {
        "instruction": "입력 텍스트: 기후 변화 프로젝트에 한 해 동안 할당된 최소 자금은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE climate_change_projects_funding_2(project_id INT, year INT, amount FLOAT); INSERT INTO climate_change_projects_funding_2 (project_id, year, amount) VALUES (21, 2018, 80000.0), (22, 2019, 90000.0), (23, 2020, 70000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(amount) FROM climate_change_projects_funding_2;"
    },
    {
        "instruction": "입력 텍스트: 각 구역별 학교 수와 학교당 평균 학생 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Districts (DistrictID INT, DistrictName VARCHAR(100)); INSERT INTO Districts (DistrictID, DistrictName) VALUES (1, 'District1'), (2, 'District2'); CREATE TABLE Schools (SchoolID INT, SchoolName VARCHAR(100), DistrictID INT, NumberOfStudents INT); INSERT INTO Schools (SchoolID, SchoolName, DistrictID, NumberOfStudents) VALUES (1, 'School1', 1, 500), (2, 'School2', 1, 700), (3, 'School3', 2, 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DistrictName, COUNT(*) as TotalSchools, AVG(NumberOfStudents) as AverageStudentsPerSchool FROM Schools JOIN Districts ON Schools.DistrictID = Districts.DistrictID GROUP BY DistrictName;"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 보장 데이터가 있는 의료 제공자의 총 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE healthcare.MentalHealthParity( parity_id INT PRIMARY KEY, healthcare_provider VARCHAR(100), mental_health_coverage FLOAT); INSERT INTO healthcare.MentalHealthParity (parity_id, healthcare_provider, mental_health_coverage) VALUES (1, 'Dr. Juan Rodriguez', 0.85), (2, 'Dr. Tara Patel', 0.90), (3, 'Dr. Ahmed Al-Sayed', 0.87), (4, 'Dr. Maria Gonzalez', 0.92);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM healthcare.MentalHealthParity;"
    },
    {
        "instruction": "입력 텍스트: 저궤도와 정지궤도에 있는 우주 물체의 총 질량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE space_objects_orbits (id INT, name VARCHAR(255), mass FLOAT, orbit VARCHAR(255)); INSERT INTO space_objects_orbits (id, name, mass, orbit) VALUES (1, 'Object 1', 1000.0, 'Low Earth Orbit'), (2, 'Object 2', 2000.0, 'Geostationary Orbit'), (3, 'Object 3', 500.0, 'Low Earth Orbit');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT orbit, SUM(mass) FROM space_objects_orbits GROUP BY orbit;"
    },
    {
        "instruction": "입력 텍스트: Vessel 테이블에서 평균 속도가 가장 빠른 상위 2척의 선박을 찾으세요.\n\nDDL statements:\nCREATE TABLE Vessel (ID INT, Name TEXT, AverageSpeed DECIMAL); INSERT INTO Vessel (ID, Name, AverageSpeed) VALUES (1, 'VesselA', 20.5), (2, 'VesselB', 22.3), (3, 'VesselC', 18.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name FROM (SELECT Name, AverageSpeed, NTILE(2) OVER (ORDER BY AverageSpeed DESC) AS Tile FROM Vessel) AS RankedVessels WHERE Tile <= 2;"
    },
    {
        "instruction": "입력 텍스트: 화장품 제품에 사용된 유기농 및 비유기농 성분의 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE ingredients (ingredient_id INT, organic BOOLEAN, product_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT organic, COUNT(*) as num_ingredients FROM ingredients GROUP BY organic;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 기부자가 기부한 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), AmountDonated numeric); INSERT INTO Donors (DonorID, DonorName, AmountDonated) VALUES (1, 'John Doe', 500.00), (2, 'Jane Smith', 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, SUM(AmountDonated) as TotalDonated  FROM Donors WHERE YEAR(DonationDate) = 2020 GROUP BY DonorName;"
    },
    {
        "instruction": "입력 텍스트: 2020년과 2021년에 채용된 직원의 총 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Hiring (EmployeeID INT, HireYear INT); INSERT INTO Hiring (EmployeeID, HireYear) VALUES (1, 2020), (2, 2021), (3, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Hiring WHERE HireYear BETWEEN 2020 AND 2021;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주의 모든 교통 프로젝트와 그 예산 및 완료 예정일을 나열하세요.\n\nDDL statements:\nCREATE TABLE if not exists Projects (id INT, name VARCHAR(50), type VARCHAR(50), budget DECIMAL(10,2), completion_date DATE); INSERT INTO Projects (id, name, type, budget, completion_date) VALUES (1, 'Seawall', 'Resilience', 5000000.00, '2023-01-01'), (2, 'Floodgate', 'Resilience', 3000000.00, '2023-02-01'), (3, 'Bridge', 'Transportation', 8000000.00, '2023-12-01'), (4, 'Highway', 'Transportation', 12000000.00, '2024-03-15'); CREATE TABLE if not exists States (id INT, name VARCHAR(50)); INSERT INTO States (id, name) VALUES (1, 'California'), (2, 'Texas');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, budget, completion_date FROM Projects INNER JOIN States ON Projects.id = 3 AND States.name = 'California' WHERE type = 'Transportation';"
    },
    {
        "instruction": "입력 텍스트: 프로그램별로 봉사자의 총 수와 그들이 기여한 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE volunteer_hours (volunteer_id INT, program_id INT, hours_contributed DECIMAL(10,2), signup_date DATE); INSERT INTO volunteer_hours (volunteer_id, program_id, hours_contributed, signup_date) VALUES (1, 1, 5.00, '2020-01-01'), (2, 2, 10.00, '2020-02-01'), (3, 1, 7.50, '2020-03-01'), (1, 2, 3.00, '2020-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_id, COUNT(DISTINCT volunteer_id) as total_volunteers, SUM(hours_contributed) as total_hours_contributed FROM volunteer_hours GROUP BY program_id;"
    },
    {
        "instruction": "입력 텍스트: EthicalFashion' 데이터베이스의 각 제조업체와 관련된 윤리적 노동 위반 보고서 수와 준수 보고서 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE labor_compliance (report_id INT, manufacturer_id INT, violation_details TEXT, is_compliant BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT manufacturer_id, COUNT(*) FILTER (WHERE is_compliant = TRUE) AS compliant_count, COUNT(*) FILTER (WHERE is_compliant = FALSE) AS violation_count FROM labor_compliance GROUP BY manufacturer_id;"
    },
    {
        "instruction": "입력 텍스트: 각 구역별 시민 불만에 대한 평균 응답 시간을 가장 빠른 응답 시간부터 가장 느린 응답 시간 순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE Complaint_Response(District VARCHAR(255), Response_Time INT); INSERT INTO Complaint_Response VALUES ('District 1', 2), ('District 1', 5), ('District 2', 3), ('District 3', 4), ('District 3', 6);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT District, AVG(Response_Time) as Avg_Response_Time FROM Complaint_Response GROUP BY District ORDER BY Avg_Response_Time ASC;"
    },
    {
        "instruction": "입력 텍스트: 안전 애플리케이션 중 적어도 하나보다 높은 창의성 점수를 가진 모든 창의적 AI 애플리케이션의 이름과 창의성 점수를 표시합니다.\n\nDDL statements:\nCREATE TABLE ai_applications (app_id INT, app_name VARCHAR(255), app_type VARCHAR(255), safety_score DECIMAL(3,2), creativity_score DECIMAL(3,2)); INSERT INTO ai_applications (app_id, app_name, app_type, safety_score, creativity_score) VALUES (1, 'App1', 'Safety', 0.95, 0.75), (2, 'App2', 'Creativity', 0.85, 0.92), (3, 'App3', 'Safety', 0.90, 0.65), (4, 'App4', 'Creativity', 0.75, 0.80), (5, 'App5', 'Safety', 0.82, 0.70);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT app_name, creativity_score FROM ai_applications WHERE app_type = 'Creativity' AND creativity_score > ANY (SELECT safety_score FROM ai_applications WHERE app_type = 'Safety');"
    },
    {
        "instruction": "입력 텍스트: 아시아 지역에서 추출량이 1000톤 이상인 광물의 이름과 종류는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Minerals (name TEXT, type TEXT, extraction_volume INTEGER, region TEXT); INSERT INTO Minerals (name, type, extraction_volume, region) VALUES ('Gold', 'Metal', 1500, 'Asia'); INSERT INTO Minerals (name, type, extraction_volume, region) VALUES ('Silver', 'Metal', 1200, 'Asia'); INSERT INTO Minerals (name, type, extraction_volume, region) VALUES ('Coal', 'Mineral', 5000, 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, type FROM Minerals WHERE extraction_volume > 1000 AND region = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: NA-LAX' 창고의 가장 빠른 루트 도착 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE route_arrivals (id INT, warehouse_id VARCHAR(5), arrival_date DATE); INSERT INTO route_arrivals VALUES (1, 'NA', '2021-10-01'), (2, 'NA-LAX', '2021-10-05'), (3, 'NA', '2021-10-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(arrival_date) FROM route_arrivals WHERE warehouse_id = (SELECT id FROM warehouses WHERE name = 'NA-LAX');"
    },
    {
        "instruction": "입력 텍스트: 유럽의 화학 제조 시설들의 평균 환경 영향 점수(1-10점 척도)는 국가별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE europe_facilities (facility_id INT, facility_name TEXT, country TEXT, environmental_score INT); INSERT INTO europe_facilities (facility_id, facility_name, country, environmental_score) VALUES (1, 'Facility A', 'Germany', 7), (2, 'Facility B', 'France', 8), (3, 'Facility C', 'Italy', 6), (4, 'Facility D', 'Spain', 9), (5, 'Facility E', 'Germany', 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(environmental_score) as avg_score FROM europe_facilities GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 민사 부서에서 가장 빠른 사건 접수 날짜는 언제인가요?\n\nDDL statements:\nCREATE TABLE cases (case_id INT, division VARCHAR(50), filing_date DATE); INSERT INTO cases (case_id, division, filing_date) VALUES (1, 'Civil', '2021-01-01'), (2, 'Criminal', '2021-02-01'), (3, 'Civil', '2021-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(filing_date) FROM cases WHERE division = 'Civil';"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후 캐나다의 유로퓸 시장 동향을 생산 총량과 가격을 포함하여 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE europium_market (year INT, country TEXT, production_quantity INT, price FLOAT); INSERT INTO europium_market (year, country, production_quantity, price) VALUES (2015, 'Canada', 120, 24.5), (2016, 'Canada', 150, 26.3), (2017, 'Canada', 175, 28.1), (2018, 'Canada', 200, 31.0), (2019, 'Canada', 225, 34.2), (2020, 'Canada', 250, 37.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM europium_market WHERE country = 'Canada' AND year >= 2015;"
    },
    {
        "instruction": "입력 텍스트: safety_recalls' 테이블에서 각 제조사별로 가장 흔한 안전 문제는 무엇인가요?\n\nDDL statements:\nCREATE TABLE safety_recalls (id INT, manufacturer VARCHAR(50), recall_date DATE, reason VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT manufacturer, reason, COUNT(*) FROM safety_recalls GROUP BY manufacturer, reason ORDER BY COUNT(*) DESC;"
    },
    {
        "instruction": "입력 텍스트: 최근 한 달 동안 캐나다에서 \"기후 변화\"에 대해 가장 많이 게시한 상위 3명의 사용자를 좋아요 수를 기준으로 찾아주세요.\n\nDDL statements:\nCREATE TABLE users (id INT, username VARCHAR(255), country VARCHAR(255)); CREATE TABLE posts (id INT, user_id INT, likes INT, hashtags VARCHAR(255), created_at TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT u.username, SUM(p.likes) as total_likes FROM users u JOIN posts p ON u.id = p.user_id WHERE u.country = 'Canada' AND p.hashtags LIKE '%#climatechange%' AND p.created_at > NOW() - INTERVAL '1 month' GROUP BY u.username ORDER BY total_likes DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 국가와 이니셔티브별로 총 탄소 상쇄량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE CarbonOffsets (Country VARCHAR(50), Initiative VARCHAR(50), CarbonOffset FLOAT); INSERT INTO CarbonOffsets (Country, Initiative, CarbonOffset) VALUES ('USA', 'PublicTransport', 100.0), ('USA', 'Recycling', 50.0), ('UK', 'PublicTransport', 150.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, Initiative, SUM(CarbonOffset) AS TotalCarbonOffset FROM CarbonOffsets GROUP BY Country, Initiative;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별 해양 생물의 총 개체 수를 개체 수에 따라 순위를 매겨서 알려주세요.\n\nDDL statements:\nCREATE TABLE marine_species_by_region (id INT, species_name VARCHAR(255), population INT, habitat VARCHAR(255), region VARCHAR(255)); INSERT INTO marine_species_by_region (id, species_name, population, habitat, region) VALUES (1, 'Green Sea Turtle', 120000, 'Coastal', 'Caribbean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(population) AS total_population FROM marine_species_by_region GROUP BY region ORDER BY total_population DESC;"
    },
    {
        "instruction": "입력 텍스트: 25세에서 34세 사이의 회원들로부터 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Members (MemberID INT, Age INT, Revenue FLOAT); INSERT INTO Members (MemberID, Age, Revenue) VALUES (1,26,500.50),(2,32,700.20),(3,45,800.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Revenue) FROM Members WHERE Age BETWEEN 25 AND 34;"
    },
    {
        "instruction": "입력 텍스트: Australia'에 위치한 새로운 친환경 건물 'Eco Tower'를 green_buildings 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE green_buildings (id INT, building_name VARCHAR(100), country VARCHAR(50)); INSERT INTO green_buildings (id, building_name, country) VALUES (1, 'Green Building 1', 'Canada'), (2, 'Green Building 2', 'Mexico');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO green_buildings (building_name, country) VALUES ('Eco Tower', 'Australia');"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에 있는 모든 댐의 최대 설계 하중은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Dams (id INT, name VARCHAR(100), design_load INT); INSERT INTO Dams (id, name, design_load) VALUES (1, 'Hoover Dam', 64000), (2, 'Glen Canyon Dam', 26000), (3, 'Oroville Dam', 45000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(design_load) FROM Dams;"
    },
    {
        "instruction": "입력 텍스트: 위성을 발사한 고유한 국가의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE satellites (satellite_id INT, satellite_name VARCHAR(50), country VARCHAR(50)); INSERT INTO satellites VALUES (1, 'Jason-3', 'USA'), (2, 'Sentinel-1A', 'France'), (3, 'MetOp-C', 'Germany'), (4, 'KOMPSAT-5', 'South Korea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT country) as unique_countries FROM satellites;"
    },
    {
        "instruction": "입력 텍스트: employee_demographics 테이블에서 각 성별의 직원 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE employee_demographics (id INT PRIMARY KEY, age INT, ethnicity VARCHAR(255), gender VARCHAR(255), job_title VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT gender, COUNT(*) as num_employees FROM employee_demographics GROUP BY gender;"
    },
    {
        "instruction": "입력 텍스트: 마이애미 시에 위치하고 포괄적 주택 정책이 적용되지 않은 부동산의 평균 크기(제곱피트)를 찾으세요.\n\nDDL statements:\nCREATE TABLE property (id INT, size INT, city VARCHAR(20), inclusive_housing_policy BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(size) FROM property WHERE city = 'Miami' AND inclusive_housing_policy = FALSE;"
    },
    {
        "instruction": "입력 텍스트: 온콜로지 분야의 최소 연구개발 비용\n\nDDL statements:\nCREATE TABLE rd_expenditure (expenditure_id INT, drug_name TEXT, disease_area TEXT, year INT, amount DECIMAL); INSERT INTO rd_expenditure (expenditure_id, drug_name, disease_area, year, amount) VALUES (1, 'DrugQ', 'Oncology', 2020, 3000000), (2, 'DrugR', 'Cardiovascular', 2019, 4000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(amount) FROM rd_expenditure WHERE disease_area = 'Oncology';"
    },
    {
        "instruction": "입력 텍스트: tree_counts' 테이블에서 성장률이 1.2cm/년보다 큰 종에 속하는 나무의 총 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE tree_counts (id INT, species VARCHAR(255), tree_count INT); INSERT INTO tree_counts (id, species, tree_count) VALUES (1, 'Oak', 100), (2, 'Maple', 120), (3, 'Pine', 80); CREATE TABLE species_growth_rates (id INT, species VARCHAR(255), growth_rate FLOAT); INSERT INTO species_growth_rates (id, species, growth_rate) VALUES (1, 'Oak', 1.25), (2, 'Maple', 1.1), (3, 'Pine', 0.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tree_count) FROM tree_counts INNER JOIN species_growth_rates ON tree_counts.species = species_growth_rates.species WHERE growth_rate > 1.2;"
    },
    {
        "instruction": "입력 텍스트: 지난 달 각 레스토랑의 총 매출을 보여주세요.\n\nDDL statements:\nCREATE TABLE sales_data(id INT, restaurant_id INT, sales FLOAT, sale_date DATE); INSERT INTO sales_data (id, restaurant_id, sales, sale_date) VALUES (1, 1, 2500.00, '2022-05-01'), (2, 1, 2000.00, '2022-05-02'), (3, 2, 1500.00, '2022-05-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT restaurant_id, SUM(sales) FROM sales_data WHERE sale_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE GROUP BY restaurant_id;"
    },
    {
        "instruction": "입력 텍스트: 아리조나 주에서 설치된 태양광 발전 설비의 총 용량은 얼마이며, 설비 용량이 500kW 미만인 설치는 제외하고 계산하세요?\n\nDDL statements:\nCREATE TABLE solar_installations (id INT, name VARCHAR(50), state VARCHAR(50), capacity FLOAT, completion_year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(capacity) FROM solar_installations WHERE state = 'Arizona' AND capacity >= 500000 AND completion_year >= 2000;"
    },
    {
        "instruction": "입력 텍스트: ID 3번 전시회와 같은 도시에서 열린 모든 전시회를 보여주세요.\n\nDDL statements:\nCREATE TABLE Exhibitions (exhibition_id INT, city VARCHAR(50)); INSERT INTO Exhibitions (exhibition_id, city) VALUES (1, 'Paris'); INSERT INTO Exhibitions (exhibition_id, city) VALUES (2, 'London'); INSERT INTO Exhibitions (exhibition_id, city) VALUES (3, 'New York'); INSERT INTO Exhibitions (exhibition_id, city) VALUES (4, 'Paris');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT exhibition_id, city FROM Exhibitions WHERE city = (SELECT city FROM Exhibitions WHERE exhibition_id = 3);"
    },
    {
        "instruction": "입력 텍스트: North' 지역의 각 프로젝트별 총 노동 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Project_Timeline (id INT, region VARCHAR(20), project VARCHAR(30), phase VARCHAR(20), start_date DATE, end_date DATE, labor_cost FLOAT); INSERT INTO Project_Timeline (id, region, project, phase, start_date, end_date, labor_cost) VALUES (1, 'North', 'Green Tower', 'Planning', '2021-05-01', '2021-07-31', 50000.00), (2, 'West', 'Solar Park', 'Construction', '2021-08-01', '2022-05-31', 750000.00), (3, 'North', 'Wind Farm', 'Design', '2022-06-01', '2022-09-30', 30000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project, SUM(labor_cost) FROM Project_Timeline WHERE region = 'North' GROUP BY project;"
    },
    {
        "instruction": "입력 텍스트: 인도에서 매년 제조된 항공기의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Aircraft_Manufacturing (ID INT, Year INT, Country VARCHAR(50), Number_Of_Aircraft INT); INSERT INTO Aircraft_Manufacturing (ID, Year, Country, Number_Of_Aircraft) VALUES (1, 2015, 'India', 100), (2, 2016, 'India', 120), (3, 2017, 'India', 150), (4, 2018, 'India', 180), (5, 2019, 'India', 210);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Year, SUM(Number_Of_Aircraft) FROM Aircraft_Manufacturing WHERE Country = 'India' GROUP BY Year;"
    },
    {
        "instruction": "입력 텍스트: 이스포츠 이벤트에 참가한 선수들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 30, 'Female', 'Canada'); CREATE TABLE EsportsEvents (EventID INT, PlayerID INT, EventName VARCHAR(50)); INSERT INTO EsportsEvents (EventID, PlayerID, EventName) VALUES (1, 1, 'GameX Championship'); INSERT INTO EsportsEvents (EventID, PlayerID, EventName) VALUES (2, 2, 'CyberSport Cup');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Players.Age) FROM Players INNER JOIN EsportsEvents ON Players.PlayerID = EsportsEvents.PlayerID;"
    },
    {
        "instruction": "입력 텍스트: 협업한 모든 예술 작품과 그 창작자들의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE artists (id INT, name VARCHAR(50), gender VARCHAR(50));CREATE TABLE collaborations (id INT, artwork VARCHAR(50), artist1_id INT, artist2_id INT); INSERT INTO artists (id, name, gender) VALUES (1, 'Banksy', 'male'), (2, 'Invader', 'male'); INSERT INTO collaborations (id, artwork, artist1_id, artist2_id) VALUES (1, 'Artwork X', 1, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.artwork, a1.name, a2.name FROM collaborations c INNER JOIN artists a1 ON c.artist1_id = a1.id INNER JOIN artists a2 ON c.artist2_id = a2.id;"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리별로 순환 공급망을 사용하여 생산된 제품은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name TEXT, category TEXT, is_circular_supply_chain BOOLEAN); INSERT INTO products (product_id, product_name, category, is_circular_supply_chain) VALUES (1, 'Refurbished Smartphone', 'Electronics', TRUE), (2, 'Upcycled Furniture', 'Home Decor', TRUE), (3, 'Vintage Clothing', 'Fashion', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, COUNT(*) FROM products WHERE is_circular_supply_chain = TRUE GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 2021년도 분기별로 발급된 동물 실험을 하지 않는 인증서는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE certifications (certification_id INT, date DATE, is_cruelty_free BOOLEAN); INSERT INTO certifications (certification_id, date, is_cruelty_free) VALUES (1, '2021-01-01', true), (2, '2021-02-15', false), (3, '2021-04-01', true), (4, '2021-07-01', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_PART('quarter', date) as quarter, COUNT(*) as certifications_issued FROM certifications WHERE date >= '2021-01-01' AND date < '2022-01-01' AND is_cruelty_free = true GROUP BY quarter ORDER BY quarter;"
    },
    {
        "instruction": "입력 텍스트: smart_grid'에서 모든 도시와 그들의 전력원을 보여주세요.\n\nDDL statements:\nCREATE TABLE smart_grid (id INT PRIMARY KEY, city VARCHAR(50), power_sources VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, power_sources FROM smart_grid;"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램별로 몇 명의 자원봉사자가 있나요?\n\nDDL statements:\nCREATE TABLE Volunteers (id INT, program VARCHAR(25), volunteer_count INT); INSERT INTO Volunteers (id, program, volunteer_count) VALUES (1, 'Education', 50), (2, 'Health', 75), (3, 'Environment', 100), (4, 'Arts', 80), (5, 'Social Services', 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program, SUM(volunteer_count) as total_volunteers FROM Volunteers GROUP BY program;"
    },
    {
        "instruction": "입력 텍스트: 어떤 극장 프로그램이 가장 높고 낮은 총 자금을 받았으며, 자금 출처는 누구인가요?\n\nDDL statements:\nCREATE TABLE ProgramFunding (ProgramId INT, FundingSource VARCHAR(50), Amount DECIMAL(10,2));CREATE TABLE TheaterPrograms (Id INT, ProgramName VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT P.ProgramName, PF.FundingSource, SUM(PF.Amount) as TotalFunding FROM TheaterPrograms P INNER JOIN ProgramFunding PF ON P.Id = PF.ProgramId GROUP BY P.ProgramName ORDER BY TotalFunding DESC, P.ProgramName;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 도시별 평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50), City varchar(50)); INSERT INTO Donors (DonorID, DonorName, Country, City) VALUES (1, 'John Smith', 'USA', 'New York'); INSERT INTO Donors (DonorID, DonorName, Country, City) VALUES (2, 'Sara Ahmed', 'Canada', 'Toronto');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(DonationAmount) AS AverageDonation, City FROM Donors JOIN Donations ON Donors.DonorID = Donations.DonorID WHERE Donors.Country = 'Canada' GROUP BY City;"
    },
    {
        "instruction": "입력 텍스트: 2023년도 공공 서비스 중 사회 복지 서비스와 환경 보호 서비스를 제외한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE budget_2023 (service TEXT, budget INTEGER); INSERT INTO budget_2023 (service, budget) VALUES ('Social Services', 1600000), ('Environment Protection', 1500000), ('Healthcare', 1800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM budget_2023 WHERE service NOT IN ('Social Services', 'Environment Protection');"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 원주민 커뮤니티에서의 평균 기대 수명은 얼마인가요?\n\nDDL statements:\nCREATE TABLE life_expectancy (id INT, expectancy INT, location TEXT); INSERT INTO life_expectancy (id, expectancy, location) VALUES (1, 75, 'Indigenous community, Canada'); INSERT INTO life_expectancy (id, expectancy, location) VALUES (2, 80, 'Non-indigenous community, Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(expectancy) FROM life_expectancy WHERE location LIKE 'Indigenous%';"
    },
    {
        "instruction": "입력 텍스트: 립스틱과 아이섀도우에 모두 사용되는 재료는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ingredient (id INT, product_id INT, name VARCHAR(50), source_country VARCHAR(50), PRIMARY KEY (id)); INSERT INTO ingredient (id, product_id, name, source_country) VALUES (1, 1, 'Beeswax', 'Australia'), (2, 2, 'Coconut Oil', 'Thailand'), (3, 3, 'Shea Butter', 'Ghana'), (4, 4, 'Beeswax', 'Australia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM ingredient i1 WHERE product_id IN (SELECT id FROM product WHERE category = 'Lipstick') INTERSECT SELECT name FROM ingredient i2 WHERE product_id IN (SELECT id FROM product WHERE category = 'Eyeshadow');"
    },
    {
        "instruction": "입력 텍스트: 2019년 남해에서의 최소 해수면 온도는 얼마였나요?\n\nDDL statements:\nCREATE TABLE sea_temperature (id INT, location VARCHAR(255), temperature FLOAT, date DATE); INSERT INTO sea_temperature (id, location, temperature, date) VALUES (1, 'Southern Ocean', 10.0, '2019-01-01'), (2, 'Atlantic Ocean', 15.0, '2018-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(temperature) FROM sea_temperature WHERE location = 'Southern Ocean' AND YEAR(date) = 2019;"
    },
    {
        "instruction": "입력 텍스트: 학생 주거 시설 내에서 서비스 동물과 관련된 새로운 정책 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE policy (id INT, policy_name VARCHAR(255), description VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO policy (id, policy_name, description) VALUES (3, 'Service Animal Policy in Student Housing', 'Policy regarding the use of service animals in student housing');"
    },
    {
        "instruction": "입력 텍스트: 네덜란드에서 500개 미만의 리뷰를 가진 가상 투어를 나열하세요.\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, name TEXT, country TEXT, review_count INT); INSERT INTO virtual_tours VALUES (1, 'Virtual Amsterdam Tour', 'Netherlands', 400), (2, 'Dutch Windmills Tour', 'Netherlands', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, review_count FROM virtual_tours WHERE country = 'Netherlands' AND review_count < 500;"
    },
    {
        "instruction": "입력 텍스트: 2021년 미국과 중국의 군사 기술 예산 비교\n\nDDL statements:\nCREATE TABLE military_budget (country VARCHAR(50), year INT, budget FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT budget FROM military_budget WHERE country = 'United States' AND year = 2021 INTERSECT SELECT budget FROM military_budget WHERE country = 'China' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 지난 5년 동안 설명 가능한 AI에 중점을 둔 AI 모델의 평균 훈련 시간을 훈련 분기별로 그룹화하여 확인하세요.\n\nDDL statements:\nCREATE TABLE ai_models (model_id INT, model_name VARCHAR(50), trained_for VARCHAR(50), training_location VARCHAR(50), training_date DATE, training_time INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CONCAT(YEAR(training_date), '-Q', QUARTER(training_date)) AS quarter, AVG(training_time) AS avg_training_time FROM ai_models WHERE trained_for = 'explainable AI' AND training_date >= DATE(CURRENT_DATE) - INTERVAL 5 YEAR GROUP BY quarter;"
    },
    {
        "instruction": "입력 텍스트: 시애틀 시에 있는 휠체어 접근 가능하고 애완동물 동반 가능한 부동산의 이름과 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE properties (property_id INT, name VARCHAR(255), city VARCHAR(255), wheelchair_accessible BOOLEAN, pet_friendly BOOLEAN); INSERT INTO properties (property_id, name, city, wheelchair_accessible, pet_friendly) VALUES (1, 'The Accessible Arbor', 'Seattle', true, true), (2, 'The Pet-friendly Palace', 'Seattle', false, true), (3, 'The Wheelchair Haven', 'Seattle', true, false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, 'property' as type FROM properties WHERE city = 'Seattle' AND wheelchair_accessible = true AND pet_friendly = true;"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 발생한 모든 이벤트의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA culture; CREATE TABLE events (event_id INT, event_name VARCHAR(255), event_date DATE, revenue DECIMAL(10,2)); INSERT INTO events (event_id, event_name, event_date, revenue) VALUES (1, 'Concert', '2020-02-01', 5000.00), (2, 'Theater Play', '2020-05-15', 8000.00), (3, 'Art Exhibit', '2019-12-31', 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM culture.events WHERE YEAR(event_date) = 2020;"
    },
    {
        "instruction": "입력 텍스트: space_missions 테이블에서 가장 최근의 발사 날짜를 표시하세요.\n\nDDL statements:\nCREATE TABLE space_missions (id INT, name VARCHAR(50), type VARCHAR(50), country VARCHAR(50), launch_date DATE, has_astrobiology BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(launch_date) as latest_launch_date FROM space_missions;"
    },
    {
        "instruction": "입력 텍스트: 영국 런던에서 전기 대중교통의 시장 점유율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE public_transportation (transport_id INT, type VARCHAR(50), city VARCHAR(50), electric BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM public_transportation WHERE city = 'London') FROM public_transportation WHERE city = 'London' AND electric = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 선박 테이블에 있는 각 국가의 선박 평균 용량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name VARCHAR(255), country VARCHAR(255), capacity INT); INSERT INTO vessels (id, name, country, capacity) VALUES (1, 'Vessel1', 'India', 10000), (2, 'Vessel2', 'Pakistan', 12000), (3, 'Vessel3', 'Bangladesh', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(capacity) as average_capacity FROM vessels GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 윤리적 패션 제품에 대한 총 지출이 가장 많은 상위 3명의 고객은 누구인가요?\n\nDDL statements:\nCREATE TABLE Customers (CustomerID INT, CustomerName VARCHAR(50), Country VARCHAR(50)); INSERT INTO Customers VALUES (1, 'John Smith', 'USA'), (2, 'Jane Doe', 'Canada'); CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderValue DECIMAL(10,2)); INSERT INTO Orders VALUES (1, 1, 50.00), (2, 1, 75.00), (3, 2, 100.00), (4, 2, 200.00); CREATE TABLE EthicalProducts (ProductID INT, OrderID INT, ProductType VARCHAR(50)); INSERT INTO EthicalProducts VALUES (1, 1, 'Fair Trade'), (2, 2, 'Sustainable'), (3, 3, 'Fair Trade'), (4, 4, 'Sustainable');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CustomerName, SUM(OrderValue) as TotalSpending FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN EthicalProducts ep ON o.OrderID = ep.OrderID WHERE ProductType IN ('Fair Trade', 'Sustainable') GROUP BY CustomerName ORDER BY TotalSpending DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 이전 해에 비해 신용 점수를 최소 20점 이상 향상시킨 고객의 비율을 계산하시오.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, credit_score INT, date_updated DATE); INSERT INTO clients (client_id, credit_score, date_updated) VALUES (101, 650, '2020-05-01'), (101, 670, '2021-05-01'), (102, 700, '2020-07-15'), (102, 680, '2021-07-15'), (103, 550, '2020-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM clients) AS percentage FROM (SELECT client_id, CASE WHEN credit_score > LAG(credit_score, 1, credit_score) OVER (PARTITION BY client_id ORDER BY date_updated) + 20 THEN 1 END AS flag FROM clients WHERE date_updated >= DATEADD(year, -1, GETDATE())) x WHERE flag IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 2021년 미국 내에서 운행된 국내선 항공편의 총 이산화탄소 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE flights (id INT, type VARCHAR(50), country VARCHAR(50), co2_emission DECIMAL(5,2), flight_year INT); INSERT INTO flights (id, type, country, co2_emission, flight_year) VALUES (1, 'Domestic', 'United States', 120.5, 2021), (2, 'International', 'United States', 250.3, 2021), (3, 'Domestic', 'United States', 150.7, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(co2_emission) FROM flights WHERE type = 'Domestic' AND country = 'United States' AND flight_year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 음악 아티스트 중 앨범 판매량 상위 3명의 총 앨범 판매량과 그들의 장르는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(255), Genre VARCHAR(50)); CREATE TABLE Albums (AlbumID INT, AlbumName VARCHAR(255), Sales INT, ArtistID INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT A.ArtistName, A.Genre, SUM(Albums.Sales) AS Total_Sales FROM Artists A INNER JOIN (SELECT ArtistID, SUM(Sales) AS Sales, ROW_NUMBER() OVER (ORDER BY SUM(Sales) DESC) AS Rank FROM Albums GROUP BY ArtistID) B ON A.ArtistID = B.ArtistID WHERE B.Rank <= 3 GROUP BY A.ArtistName, A.Genre;"
    },
    {
        "instruction": "입력 텍스트: 아폴로 임무에 사용된 모든 달 탐사 로버를 확인하세요.\n\nDDL statements:\nCREATE TABLE lunar_rovers (rover_name VARCHAR(50), mission_type VARCHAR(50)); INSERT INTO lunar_rovers (rover_name, mission_type) VALUES ('Lunar Roving Vehicle', 'Apollo 15'), ('Lunar Roving Vehicle', 'Apollo 16'), ('Lunar Roving Vehicle', 'Apollo 17');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT rover_name FROM lunar_rovers;"
    },
    {
        "instruction": "입력 텍스트: 국제 주식에 투자한 자산 총액이 가장 높은 상위 3명의 고객을 보여주세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT, total_assets DECIMAL(10,2)); CREATE TABLE investments (client_id INT, investment_type VARCHAR(20)); INSERT INTO clients VALUES (1,50000),(2,80000),(3,60000),(4,90000),(5,70000); INSERT INTO investments VALUES (1,'US Equities'),(2,'Bonds'),(3,'US Equities'),(4,'International Equities'),(5,'International Equities');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT clients.client_id, clients.total_assets FROM clients INNER JOIN investments ON clients.client_id = investments.client_id WHERE investments.investment_type = 'International Equities' ORDER BY clients.total_assets DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 아이티와 인도네시아에서 실시된 재난 대응 훈련의 총 횟수를 강사별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE training_data (id INT, trainer VARCHAR(255), country VARCHAR(255), trainings_conducted INT); INSERT INTO training_data (id, trainer, country, trainings_conducted) VALUES ('1', 'Luis', 'Haiti', '5'), ('2', 'Nina', 'Haiti', '4'), ('3', 'Budi', 'Indonesia', '6'), ('4', 'Dewi', 'Indonesia', '7'), ('5', 'Carlos', 'Haiti', '8'), ('6', 'Siti', 'Indonesia', '9');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trainer, SUM(trainings_conducted) as total_trainings FROM training_data WHERE country IN ('Haiti', 'Indonesia') GROUP BY trainer;"
    },
    {
        "instruction": "입력 텍스트: 팝 콘서트의 최대 티켓 가격을 찾으세요.\n\nDDL statements:\nCREATE TABLE ConcertTickets (ticket_id INT, genre VARCHAR(20), price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(price) FROM ConcertTickets WHERE genre = 'pop';"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에서 자율 주행 연구 프로젝트 'Project E'를 삭제하세요.\n\nDDL statements:\nCREATE TABLE AutonomousDrivingResearch (Id INT, Project VARCHAR(50), Country VARCHAR(50), StartDate DATE); INSERT INTO AutonomousDrivingResearch (Id, Project, Country, StartDate) VALUES (1, 'Project A', 'USA', '2017-05-15'); INSERT INTO AutonomousDrivingResearch (Id, Project, Country, StartDate) VALUES (2, 'Project B', 'Germany', '2018-02-28'); INSERT INTO AutonomousDrivingResearch (Id, Project, Country, StartDate) VALUES (3, 'Project C', 'China', '2019-11-11'); INSERT INTO AutonomousDrivingResearch (Id, Project, Country, StartDate) VALUES (4, 'Project D', 'Japan', '2020-08-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM AutonomousDrivingResearch WHERE Project = 'Project E';"
    },
    {
        "instruction": "입력 텍스트: 온타리오에서 참가자들이 참석한 회복적 사법 프로그램의 평균 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE restorative_justice (id INT, participant_id INT, program_name VARCHAR(50), province VARCHAR(50)); INSERT INTO restorative_justice (id, participant_id, program_name, province) VALUES (1, 101, 'Victim Offender Mediation', 'Ontario'), (2, 102, 'Restorative Circles', 'Ontario'), (3, 103, 'Conferencing', 'Quebec');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(count) FROM (SELECT participant_id, COUNT(program_name) AS count FROM restorative_justice WHERE province = 'Ontario' GROUP BY participant_id) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: 각 광업 회사에서 소수 인종 및 민족 그룹의 직원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE company_demographics (company_id INT, company_name TEXT, racial_ethnic_group TEXT, num_employees INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company_name, racial_ethnic_group, SUM(num_employees) AS total_employees FROM company_demographics WHERE racial_ethnic_group IN ('Native American', 'Black or African American', 'Hispanic or Latino') GROUP BY company_name;"
    },
    {
        "instruction": "입력 텍스트: 각 예술가별 작품 수와 고유 카테고리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(100)); CREATE TABLE Artworks (ArtworkID INT, ArtistID INT, ArtworkName VARCHAR(100), Category VARCHAR(50)); INSERT INTO Artists (ArtistID, ArtistName) VALUES (1, 'Picasso'), (2, 'Van Gogh'); INSERT INTO Artworks (ArtworkID, ArtistID, ArtworkName, Category) VALUES (1, 1, 'Guernica', 'Cubism'), (2, 1, 'Starry Night', 'Post-Impressionism'), (3, 2, 'Sunflowers', 'Post-Impressionism');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistName, COUNT(ArtworkID) AS TotalArtworks, STRING_AGG(DISTINCT Category, ',') AS Categories FROM Artists A JOIN Artworks B ON A.ArtistID = B.ArtistID GROUP BY ArtistName;"
    },
    {
        "instruction": "입력 텍스트: 2018년 중동 지역에서 이루어진 모든 인도적 지원 작전의 총 비용은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE humanitarian_assistance (operation_id INT, operation_name VARCHAR(255), region VARCHAR(255), start_date DATE, end_date DATE, cost DECIMAL(10,2)); INSERT INTO humanitarian_assistance (operation_id, operation_name, region, start_date, end_date, cost) VALUES (1, 'Operation A', 'Middle East', '2018-01-01', '2018-12-31', 1000000), (2, 'Operation B', 'Middle East', '2018-01-01', '2018-12-31', 2000000); CREATE TABLE operations (operation_id INT, operation_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM humanitarian_assistance INNER JOIN operations ON humanitarian_assistance.operation_id = operations.operation_id WHERE region = 'Middle East' AND YEAR(start_date) = 2018;"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 모험 관광객들을 위한 상위 3개의 여행지를 총 방문객 수에 따라 나열하세요.\n\nDDL statements:\nCREATE TABLE destinations (id INT, country VARCHAR(50), city VARCHAR(50), tourist_type VARCHAR(50), visitor_count INT); INSERT INTO destinations (id, country, city, tourist_type, visitor_count) VALUES (1, 'Thailand', 'Bangkok', 'adventure', 5000), (2, 'Nepal', 'Kathmandu', 'adventure', 3000), (3, 'Indonesia', 'Bali', 'adventure', 4000), (4, 'Japan', 'Tokyo', 'adventure', 2000), (5, 'India', 'New Delhi', 'adventure', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, SUM(visitor_count) as total_visitors FROM destinations WHERE tourist_type = 'adventure' AND country = 'Asia' GROUP BY city ORDER BY total_visitors DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 각 나라별로 가장 인기 있는 관광지는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Tourist_Attractions (Attraction_Name VARCHAR(50), Country VARCHAR(30)); INSERT INTO Tourist_Attractions (Attraction_Name, Country) VALUES ('A1', 'CountryA'), ('A2', 'CountryB'), ('A3', 'CountryC'); CREATE TABLE Visitors (Attraction_Name VARCHAR(50), Year INT, Visitors INT); INSERT INTO Visitors (Attraction_Name, Year, Visitors) VALUES ('A1', 2019, 1000), ('A1', 2020, 1200), ('A2', 2019, 1500), ('A2', 2020, 1800), ('A3', 2019, 2000), ('A3', 2020, 2500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT T.Country, TA.Attraction_Name, V.Visitors  FROM Visitors V  JOIN Tourist_Attractions TA  ON V.Attraction_Name = TA.Attraction_Name  ORDER BY V.Visitors DESC;"
    },
    {
        "instruction": "입력 텍스트: peacekeeping_forces'라는 이름의 새로운 테이블을 'force_id', 'force_name', 'operation_id', 'strength' 컬럼과 함께 생성하세요.\n\nDDL statements:\nCREATE TABLE peacekeeping_forces (force_id INT, force_name VARCHAR(255), operation_id INT, strength INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE peacekeeping_forces (force_id INT, force_name VARCHAR(255), operation_id INT, strength INT);"
    },
    {
        "instruction": "입력 텍스트: 아메리카 지역의 언어 보존 프로그램에 할당된 최소 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE LANGUAGE_PRESERVATION (id INT PRIMARY KEY, program_name VARCHAR(255), region VARCHAR(255), budget FLOAT); INSERT INTO LANGUAGE_PRESERVATION (id, program_name, region, budget) VALUES (1, 'Quechua Program', 'Americas', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(budget) FROM LANGUAGE_PRESERVATION WHERE region = 'Americas';"
    },
    {
        "instruction": "입력 텍스트: APAC' 지역에서 발송된 고유한 패키지 유형을 모두 나열합니다.\n\nDDL statements:\nCREATE TABLE packages (id INT, type TEXT); INSERT INTO packages (id, type) VALUES (1, 'Box'), (2, 'Pallet'), (3, 'Envelope'); CREATE TABLE shipments (id INT, package_id INT, warehouse_id INT); INSERT INTO shipments (id, package_id, warehouse_id) VALUES (1, 1, 2), (2, 2, 2), (3, 3, 2), (4, 1, 1); CREATE TABLE warehouses (id INT, name TEXT, region TEXT); INSERT INTO warehouses (id, name, region) VALUES (1, 'Warehouse A', 'EMEA'), (2, 'Warehouse B', 'APAC');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT packages.type FROM packages JOIN shipments ON packages.id = shipments.package_id JOIN warehouses ON shipments.warehouse_id = warehouses.id WHERE warehouses.region = 'APAC';"
    },
    {
        "instruction": "입력 텍스트: Country E'에서 각 프로젝트 유형별로 재생 가능 에너지 프로젝트에 대한 총 투자액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE RenewableEnergyInvestments (ProjectID INT, ProjectType VARCHAR(255), Country VARCHAR(255), Investment FLOAT); INSERT INTO RenewableEnergyInvestments (ProjectID, ProjectType, Country, Investment) VALUES (1, 'Solar', 'Country E', 1000000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProjectType, SUM(Investment) FROM RenewableEnergyInvestments WHERE Country = 'Country E' GROUP BY ProjectType;"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에 있는 비상 대응 요원의 총 인원 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE emergency_responders (id INT, state VARCHAR(255), number_of_responders INT); INSERT INTO emergency_responders (id, state, number_of_responders) VALUES (1, 'New_York', 15000), (2, 'California', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(number_of_responders) FROM emergency_responders WHERE state = 'New_York';"
    },
    {
        "instruction": "입력 텍스트: 2021년도 월별 기부 횟수를 나열하세요.\n\nDDL statements:\nCREATE TABLE donations (id INT, donation_date DATE); INSERT INTO donations (id, donation_date) VALUES (1, '2021-01-01'), (2, '2021-01-15'), (3, '2021-02-01'), (4, '2021-02-15'), (5, '2021-03-01'), (6, '2021-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM donation_date) as month, COUNT(*) as donations FROM donations WHERE donation_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 말레이시아에서 할랄 인증을 받은 제품이 가장 많은 브랜드는 어디인가요?\n\nDDL statements:\nCREATE TABLE cosmetics.product_halal_certifications (product_id INT, brand VARCHAR(50), is_halal BOOLEAN, country VARCHAR(50)); INSERT INTO cosmetics.product_halal_certifications (product_id, brand, is_halal, country) VALUES (1, 'Innisfree', true, 'Malaysia'), (2, 'Etude House', false, 'Malaysia'), (3, 'Selene Beauty', true, 'Malaysia'), (4, 'Anna Sui', true, 'Malaysia'), (5, 'Amore Pacific', false, 'Malaysia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand, SUM(is_halal) as total_halal_products FROM cosmetics.product_halal_certifications WHERE country = 'Malaysia' GROUP BY brand ORDER BY total_halal_products DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 접근성' 카테고리에 속하면서 가격이 50달러 미만인 모든 도구의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE Tools (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2)); INSERT INTO Tools (id, name, category, price) VALUES (1, 'AdaptScreen', 'Accessibility', 45.00), (2, 'TalkType', 'Accessibility', 30.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Tools WHERE category = 'Accessibility' AND price < 50;"
    },
    {
        "instruction": "입력 텍스트: 각 공급업체가 지속 가능한 조달 관행을 얼마나 따르고 있는지의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sustainable_sourcing_practices(supplier VARCHAR(255), is_sustainable BOOLEAN); INSERT INTO sustainable_sourcing_practices VALUES ('Supplier X', true), ('Supplier Y', false), ('Supplier Z', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier, 100.0 * AVG(CAST(is_sustainable AS DECIMAL)) AS percentage FROM sustainable_sourcing_practices GROUP BY supplier;"
    },
    {
        "instruction": "입력 텍스트: 각 주별 기본 진료 의사와 전문의의 비율을 가장 높은 것부터 낮은 순으로 나열하시오.\n\nDDL statements:\nCREATE SCHEMA RuralHealth; USE RuralHealth; CREATE TABLE States (StateName VARCHAR(50), StateAbbreviation VARCHAR(10)); CREATE TABLE Physicians (PhysicianID INT, PhysicianName VARCHAR(50), Specialty VARCHAR(50), StateAbbreviation VARCHAR(10)); INSERT INTO States (StateName, StateAbbreviation) VALUES ('Alabama', 'AL'), ('Alaska', 'AK'); INSERT INTO Physicians (PhysicianID, PhysicianName, Specialty, StateAbbreviation) VALUES (1, 'PhysicianA', 'Primary Care', 'AL'), (2, 'PhysicianB', 'Specialist', 'AK');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT StateAbbreviation, COUNT(CASE WHEN Specialty = 'Primary Care' THEN 1 END) * 1.0 / COUNT(CASE WHEN Specialty = 'Specialist' THEN 1 END) as Ratio FROM Physicians GROUP BY StateAbbreviation ORDER BY Ratio DESC;"
    },
    {
        "instruction": "입력 텍스트: 새로운 콘서트 기록을 추가합니다\n\nDDL statements:\nCREATE TABLE concerts (id INT PRIMARY KEY, artist_id INT, venue_name VARCHAR(255), city VARCHAR(255), date DATE, num_attendees INT); CREATE TABLE artists (id INT PRIMARY KEY, name VARCHAR(255), genre VARCHAR(255), origin_country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO concerts (id, artist_id, venue_name, city, date, num_attendees) VALUES (987, 345, 'Parque Oeste de Madrid', 'Madrid', '2023-06-10', 5000);"
    },
    {
        "instruction": "입력 텍스트: 플레이어들이 슈팅 게임에서 플레이한 총 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE GameSessions (SessionID INT, PlayerID INT, Game VARCHAR(20), Duration INT); INSERT INTO GameSessions (SessionID, PlayerID, Game, Duration) VALUES (1, 1, 'Racing', 60); INSERT INTO GameSessions (SessionID, PlayerID, Game, Duration) VALUES (2, 2, 'Shooter', 120);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Duration) FROM GameSessions WHERE Game = 'Shooter';"
    },
    {
        "instruction": "입력 텍스트: 북미 지역에서 무인 체크인 시스템을 도입한 호텔의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, region TEXT, contactless_checkin BOOLEAN); INSERT INTO hotels (hotel_id, region, contactless_checkin) VALUES (1, 'North America', true), (2, 'Asia', false), (3, 'North America', true), (4, 'Asia', true), (5, 'North America', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FILTER (WHERE contactless_checkin = true) * 100.0 / COUNT(*) AS percentage FROM hotels GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 북미에서 언어 보존 프로그램에 할당된 총 자금은 얼마입니까?\n\nDDL statements:\nCREATE TABLE LanguagePreservationNA (id INT, program VARCHAR(255), start_date DATE, end_date DATE, participants INT, budget DECIMAL(10, 2), location VARCHAR(255)); INSERT INTO LanguagePreservationNA (id, program, start_date, end_date, participants, budget, location) VALUES (1, 'Navajo Language Course', '2022-03-01', '2022-05-31', 25, 22000, 'North America'), (2, 'Inuit Language Workshop', '2022-06-01', '2022-08-31', 20, 18000, 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) as total_funds FROM LanguagePreservationNA WHERE location = 'North America';"
    },
    {
        "instruction": "입력 텍스트: 최소 5경기 이상 티켓을 구매한 팬들의 수를 보여주세요.\n\nDDL statements:\nCREATE TABLE fan_games(fan_id INT, email VARCHAR(50), game_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT email, COUNT(DISTINCT game_id) AS games_attended FROM fan_games GROUP BY email HAVING games_attended >= 5;"
    },
    {
        "instruction": "입력 텍스트: fish_stock' 테이블과 'ocean_health' 테이블에서 각 위치별로 그룹화하여 평균 용존 산소 농도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE fish_stock (location VARCHAR(255), dissolved_oxygen FLOAT); CREATE TABLE ocean_health (location VARCHAR(255), dissolved_oxygen FLOAT); INSERT INTO fish_stock (location, dissolved_oxygen) VALUES ('Location A', 6.5), ('Location B', 7.1); INSERT INTO ocean_health (location, dissolved_oxygen) VALUES ('Location A', 6.8), ('Location B', 7.4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.location, AVG(f.dissolved_oxygen + o.dissolved_oxygen)/2 FROM fish_stock f INNER JOIN ocean_health o ON f.location = o.location GROUP BY f.location;"
    },
    {
        "instruction": "입력 텍스트: government_meetings' 테이블에서 공공 회의의 최소 및 최대 지속 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE government_meetings (meeting_id INT, duration INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(duration) AS min_duration, MAX(duration) AS max_duration FROM government_meetings;"
    },
    {
        "instruction": "입력 텍스트: 세계에서 인구가 가장 많은 상위 5개 도시의 스마트 시티 프로젝트에 필요한 최소 투자액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE smart_city_projects_investment (id INT, city VARCHAR(255), investment FLOAT); CREATE VIEW city_populations AS SELECT city, population FROM city_data;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, MIN(investment) FROM smart_city_projects_investment JOIN city_populations ON smart_city_projects_investment.city = city_populations.city WHERE population IN (SELECT population FROM (SELECT city, population FROM city_data ORDER BY population DESC LIMIT 5) subquery) GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 총 군인 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE military_soldiers (id INT, soldier_name TEXT, country TEXT, num_soldiers INT); INSERT INTO military_soldiers (id, soldier_name, country, num_soldiers) VALUES (1, 'John Smith', 'USA', 1), (2, 'Jane Doe', 'UK', 1), (3, 'Ali Al-Khateeb', 'Iraq', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(num_soldiers) as total_soldiers FROM military_soldiers GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2019년부터 2021년까지 각 부서의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE department_data (department VARCHAR(255), budget INT, year INT); INSERT INTO department_data VALUES ('Department A', 4500000, 2019), ('Department A', 5000000, 2020), ('Department A', 5500000, 2021), ('Department B', 6000000, 2019), ('Department B', 7000000, 2020), ('Department B', 7500000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, AVG(budget) FROM department_data WHERE year BETWEEN 2019 AND 2021 GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 미국에서 발사한 \"Kuiper\" 위성에 대한 새로운 데이터를 평균 거리가 43000km로 입력하세요.\n\nDDL statements:\nCREATE TABLE satellites (id INT, name VARCHAR(255), country_of_origin VARCHAR(255), avg_distance FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO satellites (name, country_of_origin, avg_distance) VALUES ('Kuiper', 'USA', 43000);"
    },
    {
        "instruction": "입력 텍스트: 각 소매업체의 지난 6개월간 누적 매출액을 계산합니다.\n\nDDL statements:\nCREATE TABLE sales (id INT PRIMARY KEY, retailer_id INT, sale_date DATE, sale_amount DECIMAL(10,2)); INSERT INTO sales (id, retailer_id, sale_date, sale_amount) VALUES (1, 1, '2022-01-01', 5000.00); INSERT INTO sales (id, retailer_id, sale_date, sale_amount) VALUES (2, 1, '2022-01-05', 6000.00); INSERT INTO sales (id, retailer_id, sale_date, sale_amount) VALUES (3, 2, '2022-02-01', 7000.00); INSERT INTO sales (id, retailer_id, sale_date, sale_amount) VALUES (4, 2, '2022-02-15', 8000.00); INSERT INTO sales (id, retailer_id, sale_date, sale_amount) VALUES (5, 3, '2022-03-01', 9000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.retailer_id, s.sale_date, s.sale_amount, SUM(s.sale_amount) OVER (PARTITION BY s.retailer_id ORDER BY s.sale_date ROWS BETWEEN 179 preceding AND CURRENT ROW) as running_total FROM sales s WHERE s.sale_date >= (CURRENT_DATE - INTERVAL '6 months');"
    },
    {
        "instruction": "입력 텍스트: 국가들을 그들이 참여한 우주 임무의 수에 따라 순위를 매기세요?\n\nDDL statements:\nCREATE TABLE space_missions (id INT, mission_name VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) AS num_missions, RANK() OVER (ORDER BY COUNT(*) DESC) AS country_rank FROM space_missions GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: community_education' 테이블의 프로그램들을 나열하세요.\n\nDDL statements:\nCREATE TABLE community_education (id INT, program_name VARCHAR(255), target_audience VARCHAR(255), duration_weeks INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT program_name FROM community_education;"
    },
    {
        "instruction": "입력 텍스트: ID 23인 직원의 인종을 'Caucasian'에서 'Asian'으로 변경하세요.\n\nDDL statements:\nCREATE TABLE employees (id INT, first_name VARCHAR(50), last_name VARCHAR(50), ethnicity VARCHAR(20)); INSERT INTO employees (id, first_name, last_name, ethnicity) VALUES (23, 'James', 'Lee', 'Caucasian');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: WITH e AS (UPDATE employees SET ethnicity = 'Asian' WHERE id = 23 RETURNING id) SELECT * FROM employees WHERE id IN (SELECT id FROM e);"
    },
    {
        "instruction": "입력 텍스트: animal_population' 테이블에서 보전 상태별로 동물 수를 세어보세요.\n\nDDL statements:\nCREATE TABLE animal_population (species VARCHAR(50), animal_count INT, conservation_status VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT conservation_status, SUM(animal_count) FROM animal_population GROUP BY conservation_status;"
    },
    {
        "instruction": "입력 텍스트: 각 기부자의 월평균 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL(10,2)); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationAmount) VALUES (5, 1, '2022-03-01', 150.00), (6, 3, '2022-03-15', 500.00), (7, 4, '2022-04-01', 250.00), (8, 4, '2022-04-15', 350.00), (9, 5, '2022-04-01', 450.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorID, AVG(DonationAmount) OVER (PARTITION BY DonorID ORDER BY EXTRACT(MONTH FROM DonationDate) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AvgMonthlyDonation FROM Donations;"
    },
    {
        "instruction": "입력 텍스트: 최근 6개월 동안 코스타리카의 에코 로지를 방문한 관광객 수는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE eco_lodges (id INT, name TEXT, country TEXT); INSERT INTO eco_lodges (id, name, country) VALUES (1, 'Eco Lodge 1', 'Costa Rica'), (2, 'Eco Lodge 2', 'Costa Rica'); CREATE TABLE visits (id INT, lodge_id INT, visit_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(visitor_count) FROM (SELECT COUNT(*) AS visitor_count FROM eco_lodges JOIN visits ON eco_lodges.id = visits.lodge_id WHERE eco_lodges.country = 'Costa Rica' AND visit_date > (CURRENT_DATE - INTERVAL '6 months') GROUP BY visits.lodge_id)"
    },
    {
        "instruction": "입력 텍스트: 2020년에 'Bombardier'에서 제조한 항공기의 평균 비행 시간은 얼마였습니까?\n\nDDL statements:\nCREATE SCHEMA Bombardier; CREATE TABLE Bombardier.FlightTime (flight_time INT, year INT); INSERT INTO Bombardier.FlightTime (flight_time, year) VALUES (100, 2020), (110, 2019), (120, 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(flight_time) FROM Bombardier.FlightTime WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 각 카테고리별 평균 dapp 평점은 무엇인가요?\n\nDDL statements:\nCREATE TABLE dapp_categories (category_id INT, category_name VARCHAR(30), category_description TEXT, avg_rating DECIMAL(3,2), total_dapps INT); INSERT INTO dapp_categories (category_id, category_name, category_description, avg_rating, total_dapps) VALUES (1, 'Gaming', 'Interactive gaming applications', 4.4, 12), (2, 'Finance', 'Decentralized financial services', 4.6, 8), (3, 'Social', 'Social media and networking platforms', 4.1, 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category_name, avg_rating FROM dapp_categories;"
    },
    {
        "instruction": "입력 텍스트: 음악과 시각 예술 프로그램에 모두 기부한 국가의 이름을 나열하세요.\n\nDDL statements:\nCREATE TABLE donations (id INT, amount DECIMAL(10,2), donor_country VARCHAR(50), category VARCHAR(20)); INSERT INTO donations (id, amount, donor_country, category) VALUES (1, 500, 'USA', 'Visual Arts'); INSERT INTO donations (id, amount, donor_country, category) VALUES (2, 1000, 'Canada', 'Visual Arts'); INSERT INTO donations (id, amount, donor_country, category) VALUES (3, 750, 'Mexico', 'Music'); INSERT INTO donations (id, amount, donor_country, category) VALUES (4, 850, 'Brazil', 'Visual Arts'); INSERT INTO donations (id, amount, donor_country, category) VALUES (5, 600, 'USA', 'Music');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT donor_country FROM donations d1 WHERE category = 'Visual Arts' INTERSECT SELECT donor_country FROM donations d2 WHERE category = 'Music';"
    },
    {
        "instruction": "입력 텍스트: 2021년 유럽 도시 지역에서 발생한 총 폐기물 양은 폐기물 종류와 국가별로 어떻게 나뉘어져 있습니까?\n\nDDL statements:\nCREATE TABLE waste_generation_europe (waste_type TEXT, amount INTEGER, year INTEGER, area TEXT, country TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT waste_type, country, SUM(amount) FROM waste_generation_europe WHERE area = 'Europe' AND year = 2021 GROUP BY waste_type, country;"
    },
    {
        "instruction": "입력 텍스트: 각 대륙별 기후 완화 프로젝트에 할당된 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE continent (name VARCHAR(255), PRIMARY KEY (name)); INSERT INTO continent (name) VALUES ('Africa'), ('Asia'), ('Europe'), ('North America'), ('South America'), ('Antarctica'), ('Australia'), ('Arctic'), ('Oceania'); CREATE TABLE climate_mitigation_projects (project_name VARCHAR(255), location VARCHAR(255), funding DECIMAL(10,2)); INSERT INTO climate_mitigation_projects (project_name, location, funding) VALUES ('Project A', 'Africa', 5000000.00), ('Project B', 'Asia', 6000000.00), ('Project C', 'Europe', 8000000.00), ('Project D', 'North America', 9000000.00), ('Project E', 'South America', 7000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, SUM(funding) FROM climate_mitigation_projects m JOIN continent c ON m.location = c.name GROUP BY c.name;"
    },
    {
        "instruction": "입력 텍스트: 브라질에서 유전 연구를 위한 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE SCHEMA genetics; CREATE TABLE genetics.budget (id INT, item VARCHAR(100), country VARCHAR(50), budget FLOAT); INSERT INTO genetics.budget (id, item, country, budget) VALUES (1, 'Genetic Research', 'Brazil', 8000000.00); INSERT INTO genetics.budget (id, item, country, budget) VALUES (2, 'Biomarker Discovery', 'Brazil', 10000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM genetics.budget WHERE item = 'Genetic Research' AND country = 'Brazil';"
    },
    {
        "instruction": "입력 텍스트: 수산 양식 종별 평균 사료 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE aquatic_feeds (species VARCHAR(50), feed_cost DECIMAL(5,2)); INSERT INTO aquatic_feeds (species, feed_cost) VALUES ('Tilapia', 2.50), ('Salmon', 3.25), ('Catfish', 1.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, AVG(feed_cost) as avg_feed_cost FROM aquatic_feeds GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 자동차 보험과 생명 보험 두 분야에서 모두 클레임을 제출한 보험 계약자의 총 클레임 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE car_claims (policyholder_name TEXT, claim_amount INTEGER); CREATE TABLE life_claims (policyholder_name TEXT, claim_amount INTEGER); INSERT INTO car_claims VALUES ('Alice', 500), ('Bob', 200), ('Carol', 300), ('Dave', 400); INSERT INTO life_claims VALUES ('Bob', 5000), ('Eve', 800), ('Alice', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(claim_amount) FROM car_claims WHERE policyholder_name IN (SELECT policyholder_name FROM life_claims);"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 '아시아'에서 발생한 보안 사건의 총 건수를 확인하세요.\n\nDDL statements:\nCREATE TABLE incidents (incident_id INT PRIMARY KEY, incident_date DATE, incident_location VARCHAR(50)); INSERT INTO incidents (incident_id, incident_date, incident_location) VALUES (1, '2022-01-01', 'HQ'), (2, '2022-02-15', 'Branch01'), (3, '2022-03-30', 'Asia'), (4, '2022-04-15', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM incidents WHERE incident_location = 'Asia' AND incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 대표성이 낮은 커뮤니티 출신으로 높은 윤리 등급을 가진 새로운 공급업체를 추가하세요.\n\nDDL statements:\nCREATE TABLE suppliers (supplier_id INT, supplier_name VARCHAR(50), ethical_rating INT, community_representation VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO suppliers (supplier_id, supplier_name, ethical_rating, community_representation) VALUES (104, 'Supplier W', 9, 'Underrepresented');"
    },
    {
        "instruction": "입력 텍스트: 플로리다에서 홍역에 대한 백신을 맞지 않은 환자들 중 최소 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Patients (PatientID INT, Age INT, Gender TEXT, VaccinationStatus TEXT, State TEXT); INSERT INTO Patients (PatientID, Age, Gender, VaccinationStatus, State) VALUES (1, 5, 'Male', 'Not Vaccinated', 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Age) FROM Patients WHERE VaccinationStatus = 'Not Vaccinated' AND State = 'Florida' AND Disease = 'Measles';"
    },
    {
        "instruction": "입력 텍스트: 어느 도시들이 자원봉사자 수가 적고 재난 대비 수준이 낮은가요?\n\nDDL statements:\nCREATE TABLE VolunteerForce (id INT PRIMARY KEY, city VARCHAR(255), volunteer_count INT); CREATE VIEW LowVolunteerForceCities AS SELECT city, volunteer_count FROM VolunteerForce WHERE volunteer_count < (SELECT AVG(volunteer_count) FROM VolunteerForce); CREATE TABLE DisasterPreparedness (id INT PRIMARY KEY, city VARCHAR(255), preparedness INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT lvc.city, lvc.volunteer_count, dp.preparedness FROM LowVolunteerForceCities lvc JOIN DisasterPreparedness dp ON lvc.city = dp.city WHERE dp.preparedness < 50;"
    },
    {
        "instruction": "입력 텍스트: 2021년 11월에 해당하는 모든 군사 장비 유지보수 기록과 해당 장비 유형을 나열하세요.\n\nDDL statements:\nCREATE TABLE equipment_maintenance (maintenance_id INT, equipment_id INT, maintenance_date DATE); CREATE TABLE equipment_types (equipment_id INT, equipment_type TEXT); INSERT INTO equipment_maintenance (maintenance_id, equipment_id, maintenance_date) VALUES (1, 1001, '2021-11-03'); INSERT INTO equipment_maintenance (maintenance_id, equipment_id, maintenance_date) VALUES (2, 1002, '2021-11-17'); INSERT INTO equipment_types (equipment_id, equipment_type) VALUES (1001, 'Tank'); INSERT INTO equipment_types (equipment_id, equipment_type) VALUES (1002, 'Helicopter');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_types.equipment_type, equipment_maintenance.maintenance_date FROM equipment_maintenance JOIN equipment_types ON equipment_maintenance.equipment_id = equipment_types.equipment_id WHERE equipment_maintenance.maintenance_date BETWEEN '2021-11-01' AND '2021-11-30';"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 국가의 최소 사이버보안 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cybersecurity_budgets (country TEXT, year INT, amount INT); INSERT INTO cybersecurity_budgets (country, year, amount) VALUES ('USA', 2020, 18000000000), ('UK', 2020, 3200000000), ('China', 2020, 5000000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MIN(amount) as min_budget FROM cybersecurity_budgets WHERE year = 2020 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 가장 많은 수익을 낸 레스토랑의 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE restaurants (id INT, name TEXT, area TEXT, revenue FLOAT); INSERT INTO restaurants (id, name, area, revenue) VALUES (1, 'Restaurant A', 'downtown', 50000.00), (2, 'Restaurant B', 'uptown', 45000.00), (3, 'Restaurant C', 'downtown', 60000.00), (4, 'Restaurant D', 'downtown', 75000.00), (5, 'Restaurant E', 'uptown', 80000.00), (6, 'Restaurant F', 'downtown', 90000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT area, MAX(revenue) FROM restaurants GROUP BY area;"
    },
    {
        "instruction": "입력 텍스트: 틸라피아' 종에 속하는 물고기가 연령대별로 몇 마리씩 있는지 알려주세요.\n\nDDL statements:\nCREATE TABLE Farm (id INT, species TEXT, weight FLOAT, age INT); INSERT INTO Farm (id, species, weight, age) VALUES (1, 'Tilapia', 500.3, 2), (2, 'Salmon', 300.1, 1), (3, 'Tilapia', 600.5, 3), (4, 'Tilapia', 700.2, 2), (5, 'Tilapia', 800.1, 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT age, COUNT(*) as num_fish FROM Farm WHERE species = 'Tilapia' GROUP BY age;"
    },
    {
        "instruction": "입력 텍스트: 모든 어종과 해당하는 먹이 종류를 표시하세요\n\nDDL statements:\nCREATE TABLE fish_stock (fish_id INT PRIMARY KEY, species VARCHAR(50), location VARCHAR(50), biomass FLOAT); CREATE TABLE feeding (feed_id INT PRIMARY KEY, feed_type VARCHAR(50), fish_id INT, FOREIGN KEY (fish_id) REFERENCES fish_stock(fish_id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, feed_type FROM fish_stock INNER JOIN feeding ON fish_stock.fish_id = feeding.fish_id;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 출신 작가들의 작품 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE artworks (id INT, artist_name VARCHAR(255), country VARCHAR(255)); INSERT INTO artworks (id, artist_name, country) VALUES (1, 'Marlene Dumas', 'South Africa'), (2, 'El Anatsui', 'Ghana'), (3, 'William Kentridge', 'South Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM artworks WHERE country IN (SELECT country FROM countries WHERE continent = 'Africa');"
    },
    {
        "instruction": "입력 텍스트: 선박 'Maritime Marvel'의 유형을 'Passenger'로 변경하세요.\n\nDDL statements:\nCREATE TABLE Vessels (ID INT, Name VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vessels (ID, Name, Type) VALUES (1, 'Ocean Titan', 'Cargo'); INSERT INTO Vessels (ID, Name, Type) VALUES (2, 'Maritime Marvel', 'Tanker');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Vessels SET Type = 'Passenger' WHERE Name = 'Maritime Marvel';"
    },
    {
        "instruction": "입력 텍스트: 20헥타르보다 큰 도시 농장의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE urban_farms (farmer_id INT, farm_size FLOAT); INSERT INTO urban_farms (farmer_id, farm_size) VALUES (1, 15.3), (2, 22.8), (3, 19.4), (4, 35.1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM urban_farms WHERE farm_size > 20;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 샌프란시스코 항구에 정박한 속도가 25노트 이상인 선박의 수는 몇 척입니까?\n\nDDL statements:\nCREATE TABLE Vessels (ID INT, Name TEXT, Speed FLOAT, DockedAt DATETIME); INSERT INTO Vessels (ID, Name, Speed, DockedAt) VALUES (1, 'Vessel1', 20.5, '2022-01-01 10:00:00'), (2, 'Vessel2', 25.3, '2022-01-05 14:30:00'), (3, 'Vessel3', 30.0, '2022-02-01 11:00:00'); CREATE TABLE Ports (ID INT, Name TEXT); INSERT INTO Ports (ID, Name) VALUES (1, 'Oakland'), (2, 'San_Francisco');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Vessels WHERE Speed > 25 AND DockedAt >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) AND Ports.Name = 'San_Francisco';"
    },
    {
        "instruction": "입력 텍스트: 남성들의 남아프리카와 브라질에서의 평균 금융 능력 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE afc_scores (name TEXT, gender TEXT, country TEXT, score NUMERIC); INSERT INTO afc_scores (name, gender, country, score) VALUES ('John Doe', 'Male', 'South Africa', 70), ('John Smith', 'Male', 'Brazil', 75), ('Jane Doe', 'Female', 'South Africa', 75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(score) FROM afc_scores WHERE gender = 'Male' AND country IN ('South Africa', 'Brazil');"
    },
    {
        "instruction": "입력 텍스트: 각 프로그램 카테고리에 기부한 고유 기부자 수와 평균 기부 금액을 표시합니다.\n\nDDL statements:\nCREATE TABLE DonorPrograms (DonorID INT, ProgramID INT); INSERT INTO DonorPrograms (DonorID, ProgramID) VALUES (1, 101), (1, 102), (2, 102), (3, 103), (3, 104); CREATE TABLE ProgramCategories (CategoryID INT, Category TEXT); INSERT INTO ProgramCategories (CategoryID, Category) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'), (4, 'Other'); CREATE TABLE Donations (DonationID INT, DonorID INT, Amount DECIMAL, DonationDate DATE); INSERT INTO Donations (DonationID, DonorID, Amount, DonationDate) VALUES (1, 1, 50, '2022-01-01'), (2, 1, 75, '2022-01-01'), (3, 2, 100, '2022-02-01'), (4, 3, 200, '2022-03-01'), (5, 4, 150, '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT PC.Category, COUNT(DISTINCT DP.DonorID) AS NumDonors, AVG(D.Amount) AS AvgDonation  FROM DonorPrograms DP  INNER JOIN Donations D ON DP.DonorID = D.DonorID  INNER JOIN Programs P ON DP.ProgramID = P.ProgramID  INNER JOIN ProgramCategories PC ON P.CategoryID = PC.CategoryID  GROUP BY PC.Category;"
    },
    {
        "instruction": "입력 텍스트: 광업' 산업에서 일하는 근로자들의 직무 유형별 평균 급여는 얼마이며, 급여 액수에 따라 내림차순으로 정렬된 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Workers (Id INT, Name VARCHAR(50), Job VARCHAR(50), Salary FLOAT, Industry VARCHAR(50)); INSERT INTO Workers (Id, Name, Job, Salary, Industry) VALUES (1, 'John Doe', 'Engineer', 80000.00, 'mining'); INSERT INTO Workers (Id, Name, Job, Salary, Industry) VALUES (2, 'Jane Smith', 'Technician', 60000.00, 'mining');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Job, AVG(Salary) as Avg_Salary FROM Workers WHERE Industry = 'mining' GROUP BY Job ORDER BY Avg_Salary DESC;"
    },
    {
        "instruction": "입력 텍스트: 각각의 원단 유형별로 재고에 있는 아이템의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE items_in_stock(fabric_type VARCHAR(20), items INT); INSERT INTO items_in_stock(fabric_type, items) VALUES('FabricA', 250), ('FabricB', 300), ('FabricC', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT fabric_type, SUM(items) FROM items_in_stock GROUP BY fabric_type;"
    },
    {
        "instruction": "입력 텍스트: 2018년 1분기에 \"SeaTech\" 회사의 각 선박이 수행한 항해 횟수와 총 이동 거리를 보여주세요.\n\nDDL statements:\nCREATE TABLE company (id INT, name VARCHAR(255)); INSERT INTO company (id, name) VALUES (1, 'SeaTech'); CREATE TABLE vessel (id INT, company_id INT, name VARCHAR(255)); CREATE TABLE voyage (id INT, vessel_id INT, distance INT, quarter INT); INSERT INTO company (id, name) VALUES (1, 'SeaTech'); INSERT INTO vessel (id, company_id, name) VALUES (1, 1, 'VesselA'), (2, 1, 'VesselB'), (3, 1, 'VesselC'); INSERT INTO voyage (id, vessel_id, distance, quarter) VALUES (1, 1, 1000, 1), (2, 1, 1200, 2), (3, 2, 1500, 1), (4, 2, 1600, 2), (5, 3, 1400, 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel.name, COUNT(voyage.id) AS voyages, SUM(voyage.distance) AS distance FROM vessel INNER JOIN voyage ON vessel.id = voyage.vessel_id INNER JOIN company ON vessel.company_id = company.id WHERE company.name = 'SeaTech' AND voyage.quarter = 1 GROUP BY vessel.name;"
    },
    {
        "instruction": "입력 텍스트: 주어진 국가의 모든 양식장에 대한 어류 건강 데이터를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE fish_health (id INT, farm_id INT, fish_species VARCHAR(50), health_score INT); INSERT INTO fish_health\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE fish_health SET health_score = 80 WHERE fish_species = 'Salmon';"
    },
    {
        "instruction": "입력 텍스트: 설명에 'Secure Communications'가 포함된 모든 방위 계약을 나열합니다.\n\nDDL statements:\nCREATE TABLE defense_contracts (contract_id INT, description TEXT, value FLOAT); INSERT INTO defense_contracts (contract_id, description, value) VALUES (1, 'Secure Communications for Air Force', 1000000.00), (2, 'Ground Vehicle Maintenance', 800000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM defense_contracts WHERE description LIKE '%Secure Communications%';"
    },
    {
        "instruction": "입력 텍스트: 2019년 테르븀의 총 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Terbium_Production (year INT, production FLOAT); INSERT INTO Terbium_Production (year, production) VALUES (2015, 120), (2016, 150), (2017, 180), (2018, 200), (2019, 220), (2020, 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(production) FROM Terbium_Production WHERE year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 도쿄에서 운행 중인 자율주행 버스는 몇 대인가요?\n\nDDL statements:\nCREATE TABLE autonomous_buses (bus_id INT, bus_model VARCHAR(50), production_year INT, operational BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM autonomous_buses WHERE bus_model LIKE '%Tokyo%' AND operational = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 영국에 기반을 둔 회사들이 출원한 모든 바이오센서 기술 특허를 나열하세요.\n\nDDL statements:\nCREATE TABLE patents (id INT, name VARCHAR(255), company VARCHAR(255), country VARCHAR(255), filed_date DATE); INSERT INTO patents (id, name, company, country, filed_date) VALUES (1, 'PatentA', 'CompanyA', 'United Kingdom', '2019-06-15'); INSERT INTO patents (id, name, company, country, filed_date) VALUES (2, 'PatentB', 'CompanyB', 'Canada', '2020-02-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM patents WHERE country = 'United Kingdom';"
    },
    {
        "instruction": "입력 텍스트: 베를린에서 공동 소유된 부동산의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE properties (id INT, co_owned BOOLEAN, city VARCHAR(20)); INSERT INTO properties (id, co_owned, city) VALUES (1, TRUE, 'Berlin'), (2, FALSE, 'Berlin'), (3, TRUE, 'Berlin');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(*) FILTER (WHERE co_owned = TRUE) / COUNT(*) FROM properties WHERE city = 'Berlin';"
    },
    {
        "instruction": "입력 텍스트: 2022년에 학생 7에게 제공된 숙박 시설 기록을 삭제합니다.\n\nDDL statements:\nCREATE TABLE accommodations (id INT, student_id INT, accommodation_type VARCHAR(50), cost FLOAT, accommodation_date DATE); INSERT INTO accommodations (id, student_id, accommodation_type, cost, accommodation_date) VALUES (1, 2, 'Sign Language Interpreter', 50.00, '2021-01-01'), (2, 3, 'Assistive Listening Devices', 300.00, '2021-04-01'), (3, 7, 'Braille Materials', 150.00, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM accommodations WHERE student_id = 7 AND YEAR(accommodation_date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 영국에서 10,000명 이상 수용할 수 있는 모든 콘서트를 나열하세요.\n\nDDL statements:\nCREATE TABLE concerts (concert_id INT, concert_name VARCHAR(255), country VARCHAR(255), capacity INT); INSERT INTO concerts (concert_id, concert_name, country, capacity) VALUES (1, 'Pop Music Festival', 'UK', 15000), (2, 'Rock Music Festival', 'France', 20000), (3, 'Jazz Music Festival', 'UK', 8000), (4, 'Hip Hop Music Festival', 'Germany', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT concert_name, country, capacity FROM concerts WHERE country = 'UK' AND capacity > 10000;"
    },
    {
        "instruction": "입력 텍스트: 인도의 각 섬유 공급업체의 총 판매액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Suppliers (id INT, supplier_name VARCHAR(255), country VARCHAR(255)); INSERT INTO Suppliers (id, supplier_name, country) VALUES (1, 'Supplier A', 'USA'), (2, 'Supplier B', 'India'), (3, 'Supplier C', 'China'); CREATE TABLE Purchase_Orders (id INT, supplier_id INT, purchase_value DECIMAL(5,2)); INSERT INTO Purchase_Orders (id, supplier_id, purchase_value) VALUES (1, 1, 1000.00), (2, 2, 1500.00), (3, 3, 1200.00), (4, 2, 500.00), (5, 2, 250.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Suppliers.country, SUM(Purchase_Orders.purchase_value) AS total_sales FROM Suppliers INNER JOIN Purchase_Orders ON Suppliers.id = Purchase_Orders.supplier_id WHERE Suppliers.country = 'India' GROUP BY Suppliers.country;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 보고된 사이버 보안 사건이 없는 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE CountryIncidents (Country VARCHAR(255), IncidentDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country FROM CountryIncidents CI WHERE IncidentDate IS NULL OR IncidentDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY Country HAVING COUNT(*) = 0;"
    },
    {
        "instruction": "입력 텍스트: 시애틀 시에서 발급된 건축 허가증의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE building_permits (permit_id INT, city VARCHAR(20), state VARCHAR(20), issue_date DATE); INSERT INTO building_permits (permit_id, city, state, issue_date) VALUES (1, 'Seattle', 'WA', '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM building_permits WHERE city = 'Seattle';"
    },
    {
        "instruction": "입력 텍스트: 덴버 시에 있는 공공 도서관은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE library_data (library_id INT, library_name TEXT, type TEXT, city TEXT); INSERT INTO library_data (library_id, library_name, type, city) VALUES (1, 'Library A', 'Public', 'Denver'), (2, 'Library B', 'Private', 'Denver'), (3, 'Library C', 'Public', 'Atlanta'), (4, 'Library D', 'Private', 'Atlanta');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM library_data WHERE type = 'Public' AND city = 'Denver';"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 통과하지 못한 컴플라이언스 보고서는 어떤 것들인가요?\n\nDDL statements:\nCREATE TABLE dispensaries (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE compliance_reports (id INT PRIMARY KEY, dispensary_id INT, compliance_date DATE, passed BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT dispensaries.name, compliance_reports.compliance_date FROM dispensaries INNER JOIN compliance_reports ON dispensaries.id = compliance_reports.dispensary_id WHERE compliance_reports.passed = FALSE AND compliance_reports.compliance_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;"
    },
    {
        "instruction": "입력 텍스트: 다음 세부 정보를 가진 회원을 위한 새로운 운동 기록을 추가하세요: 회원 번호 5, 운동 종류 '요가', 운동 시간 60, 평균 심박수 85, 소모 칼로리 350, 날짜 '2022-07-02'\n\nDDL statements:\nCREATE TABLE workout_data (member_id INT, workout_type VARCHAR(50), duration INT, heart_rate_avg INT, calories_burned INT, workout_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO workout_data (member_id, workout_type, duration, heart_rate_avg, calories_burned, workout_date) VALUES (5, 'Yoga', 60, 85, 350, '2022-07-02');"
    },
    {
        "instruction": "입력 텍스트: City B' 지역에서 발생한 '바람' 유형의 재해를 위해 구호 지원을 제공한 기관은 어디인가요?\n\nDDL statements:\nCREATE TABLE Disaster (id INT, name VARCHAR(50), location VARCHAR(50), type VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO Disaster (id, name, location, type, start_date, end_date) VALUES (3, 'Storm', 'City B', 'Wind', '2021-08-01', '2021-08-10');   CREATE TABLE Relief_Aid (id INT, disaster_id INT, organization VARCHAR(50), amount FLOAT, date DATE); INSERT INTO Relief_Aid (id, disaster_id, organization, amount, date) VALUES (2, 3, 'WFP', 7000, '2021-08-05');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Relief_Aid.organization FROM Relief_Aid WHERE Relief_Aid.disaster_id IN (SELECT Disaster.id FROM Disaster WHERE Disaster.location = 'City B' AND Disaster.type = 'Wind')"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 안전 점검의 평균 온도는 얼마인가요?\n\nDDL statements:\nCREATE TABLE SafetyInspections (id INT, inspection_date DATE, temperature FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(temperature) as avg_temperature, inspection_date FROM SafetyInspections WHERE inspection_date >= DATEADD(year, -1, GETDATE()) GROUP BY inspection_date;"
    },
    {
        "instruction": "입력 텍스트: 전시별 소외된 커뮤니티 방문객 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE exhibitions (id INT, name TEXT, community_engagement_score INT); INSERT INTO exhibitions (id, name, community_engagement_score) VALUES (1, 'Modern Art', 85), (2, 'Ancient Civilizations', 92);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, SUM(CASE WHEN community_engagement_score >= 80 THEN 1 ELSE 0 END) as underrepresented_community_visitors FROM exhibitions GROUP BY name;"
    },
    {
        "instruction": "입력 텍스트: 지중해에서 해양보호구역이 차지하는 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mediterranean_mpas (mpa_name TEXT, size INTEGER, location TEXT); INSERT INTO mediterranean_mpas (mpa_name, size, location) VALUES ('Medes Islands', 21, 'Spain'), ('Cinque Terre', 40, 'Italy');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ROUND(SUM(size) / (SELECT SUM(size) FROM mediterranean_mpas), 2) FROM mediterranean_mpas;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 인도에 위치한 계정에서 게시된, 해시태그 #sustainability를 포함한 게시물이 받은 최대 좋아요 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE accounts (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE posts (id INT, account_id INT, content TEXT, likes INT, timestamp TIMESTAMP); INSERT INTO accounts (id, name, location) VALUES (1, 'sustainable_user', 'India'); INSERT INTO posts (id, account_id, content, likes, timestamp) VALUES (1, 1, 'post1 #sustainability', 100, '2022-05-01 12:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(likes) FROM posts JOIN accounts ON posts.account_id = accounts.id WHERE posts.timestamp >= NOW() - INTERVAL '1 month' AND posts.content LIKE '%#sustainability%' AND accounts.location = 'India';"
    },
    {
        "instruction": "입력 텍스트: 상업 비행의 최대 비행 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE commercial_flights (flight_id INT, flight_time INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(flight_time) FROM commercial_flights;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에서 예산이 100만 달러를 초과하는 인도적 지원 프로젝트의 최소 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Assistance_Projects (Nation VARCHAR(50), Continent VARCHAR(50), Project VARCHAR(50), Budget DECIMAL(10,2)); INSERT INTO Assistance_Projects (Nation, Continent, Project, Budget) VALUES ('Australia', 'Asia-Pacific', 'Disaster Relief Project', 2000000.00), ('Japan', 'Asia-Pacific', 'Refugee Support Project', 1500000.00), ('China', 'Asia-Pacific', 'Medical Aid Project', 1000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(Budget) FROM Assistance_Projects WHERE Continent = 'Asia-Pacific' AND Budget > 1000000;"
    },
    {
        "instruction": "입력 텍스트: 전문 개발 과정을 이수하지 않았고 경력이 5년을 초과하는 선생님은 누구인가요?\n\nDDL statements:\nCREATE TABLE Teachers (TeacherID INT, Name VARCHAR(50), ProfessionalDevelopmentCourse INT, YearsOfExperience INT); INSERT INTO Teachers (TeacherID, Name, ProfessionalDevelopmentCourse, YearsOfExperience) VALUES (5, 'Ava Red', 0, 6); INSERT INTO Teachers (TeacherID, Name, ProfessionalDevelopmentCourse, YearsOfExperience) VALUES (6, 'Benjamin Orange', 0, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name FROM Teachers WHERE ProfessionalDevelopmentCourse = 0 AND YearsOfExperience > 5;"
    },
    {
        "instruction": "입력 텍스트: 여성 우주비행사들이 성공적으로 완수한 우주 임무는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE SpaceMissions (id INT, astronaut_name VARCHAR, mission_status VARCHAR); CREATE TABLE Astronauts (id INT, name VARCHAR, gender VARCHAR);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM (SELECT s.id FROM SpaceMissions s JOIN Astronauts a ON s.astronaut_name = a.name WHERE s.mission_status = 'successful' AND a.gender = 'female') t;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 새로운 기부자들이 기부한 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, DonationAmount DECIMAL(10,2), FirstDonationDate DATE); INSERT INTO Donors (DonorID, DonorName, DonationAmount, FirstDonationDate) VALUES (1, 'Charlie', 300.00, '2022-01-05'), (2, 'David', 150.00, '2021-12-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, SUM(DonationAmount) as TotalDonation FROM Donors WHERE DonationDate BETWEEN '2022-01-01' AND '2022-03-31' AND FirstDonationDate BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY DonorName;"
    },
    {
        "instruction": "입력 텍스트: 카리브 해에 있는 모든 맹그로브 숲의 총 면적은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mangrove_forests (id INT, name TEXT, location TEXT, size INT); INSERT INTO mangrove_forests (id, name, location, size) VALUES (1, 'Mangrove Forest 1', 'Caribbean Sea', 1000), (2, 'Mangrove Forest 2', 'Caribbean Sea', 2000), (3, 'Mangrove Forest 3', 'Atlantic Ocean', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(size) FROM mangrove_forests WHERE location = 'Caribbean Sea';"
    },
    {
        "instruction": "입력 텍스트: smart_cities' 스키마에서 도시와 이니셔티브 유형별로 스마트 시티 이니셔티브의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE smart_cities.initiatives (city VARCHAR(255), initiative_type VARCHAR(255), initiative_count INT); INSERT INTO smart_cities.initiatives (city, initiative_type, initiative_count) VALUES ('CityA', 'Transportation', 50), ('CityA', 'Waste Management', 30), ('CityB', 'Transportation', 60), ('CityB', 'Waste Management', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, initiative_type, SUM(initiative_count) FROM smart_cities.initiatives GROUP BY city, initiative_type;"
    },
    {
        "instruction": "입력 텍스트: 수학과에서 GPA가 가장 높은 상위 5명의 대학원생은 누구인가요?\n\nDDL statements:\nCREATE TABLE student (id INT, name VARCHAR(50), gpa DECIMAL(3,2), department VARCHAR(50)); INSERT INTO student (id, name, gpa, department) VALUES (1, 'John Doe', 3.9, 'Mathematics'), (2, 'Jane Smith', 3.8, 'Mathematics'), (3, 'Mike Johnson', 3.7, 'Mathematics'), (4, 'Sara Williams', 3.6, 'Mathematics'), (5, 'David Brown', 3.5, 'Mathematics');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM student WHERE department = 'Mathematics' ORDER BY gpa DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이후에 가입하고 'management' 직책이 아닌 'technical_unions' 테이블의 총 회원 수는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE technical_unions (id INT, name VARCHAR(50), join_year INT, position VARCHAR(50)); INSERT INTO technical_unions (id, name, join_year, position) VALUES (1, 'Aarav', 2016, 'Staff'), (2, 'Bhavik', 2014, 'Management'), (3, 'Chirag', 2017, 'Staff');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM technical_unions WHERE join_year > 2015 AND position != 'Management';"
    },
    {
        "instruction": "입력 텍스트: 천체물리학_연구 테이블에 있는 모든 별자리의 이름과 가장 가까운 별까지의 평균 거리를 평균 거리가 증가하는 순서로 정렬하여 가져오세요.\n\nDDL statements:\nCREATE TABLE Astrophysics_Research(id INT, constellation VARCHAR(50), distance_to_nearest_star FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT constellation, AVG(distance_to_nearest_star) as Average_Distance FROM Astrophysics_Research GROUP BY constellation ORDER BY Average_Distance ASC;"
    },
    {
        "instruction": "입력 텍스트: 해양 생물 다양성이 가장 높은 상위 3개 국가를 찾으세요.\n\nDDL statements:\nCREATE TABLE species (id INT, name VARCHAR(255), country VARCHAR(255), diversity INT);   INSERT INTO species (id, name, country, diversity) VALUES (1, 'Clownfish', 'Australia', 30);   INSERT INTO species (id, name, country, diversity) VALUES (2, 'Starfish', 'Japan', 45);   INSERT INTO species (id, name, country, diversity) VALUES (3, 'Jellyfish', 'Indonesia', 56);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(diversity) as total_diversity FROM species GROUP BY country ORDER BY total_diversity DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에는 몇 개의 노조가 있습니까?\n\nDDL statements:\nCREATE TABLE unions (id INT, name VARCHAR(20)); INSERT INTO unions (id, name) VALUES (1, 'construction'), (2, 'education'), (3, 'manufacturing'), (4, 'retail'), (5, 'healthcare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT name) FROM unions;"
    },
    {
        "instruction": "입력 텍스트: language_preservation' 테이블에서 'language_name' 값이 누락된 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE language_preservation (id INT, location VARCHAR(50), language_name VARCHAR(50), status VARCHAR(20)); INSERT INTO language_preservation (id, location, language_name, status) VALUES (1, 'Village A', 'Language X', 'Vulnerable'), (2, 'City B', 'Language Y', 'Safe'), (3, 'Island C', NULL, 'Critically Endangered');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM language_preservation WHERE language_name IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 각 대륙별로 e스포츠 이벤트에서 수여된 총 상금은 얼마이며, 가장 높은 총 상금을 가진 대륙은 어디인가요?\n\nDDL statements:\nCREATE TABLE EsportsEvents (EventID int, EventName varchar(25), Location varchar(20), PrizeMoney decimal(10,2)); INSERT INTO EsportsEvents (EventID, EventName, Location, PrizeMoney) VALUES (5, 'Event3', 'Asia', 100000.00); INSERT INTO EsportsEvents (EventID, EventName, Location, PrizeMoney) VALUES (6, 'Event4', 'South America', 80000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT CONCAT(SUBSTRING(Location, 1, 1), 'other continents') AS Continent, SUM(PrizeMoney) AS TotalPrizeMoney, RANK() OVER (ORDER BY SUM(PrizeMoney) DESC) AS Rank FROM EsportsEvents GROUP BY (CASE WHEN Location = 'Asia' THEN 'Asia' WHEN Location = 'South America' THEN 'South America' ELSE 'other continents' END);"
    },
    {
        "instruction": "입력 텍스트: 빈곤 완화에 중점을 둔 모든 기관과 그 기관의 총 기부금액을 총 기부금액이 많은 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE organizations (id INT, name TEXT, cause_area TEXT, total_donations_received FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM organizations WHERE cause_area = 'poverty alleviation' ORDER BY total_donations_received DESC;"
    },
    {
        "instruction": "입력 텍스트: 서부 지역의 각 재료별 평균 재활용률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Recycling_Rates_All (material VARCHAR(20), region VARCHAR(20), recycling_rate DECIMAL(4,2)); INSERT INTO Recycling_Rates_All (material, region, recycling_rate) VALUES ('Glass', 'East', 0.60), ('Paper', 'East', 0.75), ('Plastic', 'West', 0.55), ('Metal', 'North', 0.80), ('Glass', 'West', 0.70), ('Paper', 'West', 0.65);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(recycling_rate) FROM Recycling_Rates_All WHERE region = 'West' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 에너지 효율 지수를 기준으로 가장 에너지 효율이 높은 상위 3개 국가는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Countries (country_name VARCHAR(100), energy_efficiency_index FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country_name, energy_efficiency_index FROM Countries ORDER BY energy_efficiency_index DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 지난 6개월 동안 검토되지 않은 모든 정책과 해당 소유자를 확인하세요.\n\nDDL statements:\nCREATE TABLE policies (policy_id INT, policy_name VARCHAR(255), owner VARCHAR(255), review_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_name, owner FROM policies WHERE review_date < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"
    },
    {
        "instruction": "입력 텍스트: 각 지역과 연도별 동물의 평균 인구는 얼마입니까?\n\nDDL statements:\nCREATE TABLE animal_population (region VARCHAR(50), population INT, year INT); INSERT INTO animal_population (region, population, year) VALUES ('Africa', 500, 2020), ('Africa', 510, 2021), ('Asia', 800, 2020), ('Asia', 820, 2021), ('Americas', 300, 2020), ('Americas', 310, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, year, AVG(population) OVER (PARTITION BY region, year) as avg_population FROM animal_population ORDER BY region, year;"
    },
    {
        "instruction": "입력 텍스트: 플러스 사이즈 의류의 매출 총액을 구하세요.\n\nDDL statements:\nCREATE TABLE sales_data (id INT, category VARCHAR(50), subcategory VARCHAR(50), is_plus_size BOOLEAN, revenue DECIMAL(5,2)); INSERT INTO sales_data (id, category, subcategory, is_plus_size, revenue) VALUES (1, 'Clothing', 'Tops', FALSE, 500.00), (2, 'Clothing', 'Tops', TRUE, 750.00), (3, 'Clothing', 'Pants', FALSE, 400.00), (4, 'Clothing', 'Pants', TRUE, 900.00), (5, 'Clothing', 'Dresses', FALSE, 650.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM sales_data WHERE is_plus_size = TRUE;"
    },
    {
        "instruction": "입력 텍스트: player_stats' 테이블에서 어떤 게임에도 참여하지 않은 모든 선수들을 삭제하세요.\n\nDDL statements:\nCREATE TABLE player_stats (player_id INT, games_played INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM player_stats WHERE player_id NOT IN (SELECT player_id FROM game_attendance);"
    },
    {
        "instruction": "입력 텍스트: 중국이 발사한 위성의 평균 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SatelliteCostsByChina (id INT, satellite_name VARCHAR(100), launch_year INT, cost FLOAT); INSERT INTO SatelliteCostsByChina (id, satellite_name, launch_year, cost) VALUES (1, 'Beidou-3 G2', 2018, 100000000); INSERT INTO SatelliteCostsByChina (id, satellite_name, launch_year, cost) VALUES (2, 'Beidou-3 I1', 2017, 50000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM SatelliteCostsByChina;"
    },
    {
        "instruction": "입력 텍스트: ACTN3' 유전자를 연구하는 회사의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name VARCHAR(50), domain VARCHAR(50)); INSERT INTO company (id, name, domain) VALUES (1, 'GenEase', 'Genetic Research'), (2, 'BioTechNova', 'Genetic Research'); CREATE TABLE genetic_data (id INT, company_id INT, gene_name VARCHAR(50), location VARCHAR(50)); INSERT INTO genetic_data (id, company_id, gene_name, location) VALUES (1, 1, 'BRCA1', 'USA'), (2, 1, 'ACTN3', 'Canada'), (3, 2, 'TP53', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name FROM company c JOIN genetic_data g ON c.id = g.company_id WHERE g.gene_name = 'ACTN3';"
    },
    {
        "instruction": "입력 텍스트: 5개 이상의 우주선을 제조한 회사가 만든 고유한 우주선 이름을 나열하시오.\n\nDDL statements:\nCREATE TABLE Spacecraft_Manufacturers_5 (Company VARCHAR(50), Spacecraft_Name VARCHAR(50), Manufacturing_Date DATE); INSERT INTO Spacecraft_Manufacturers_5 (Company, Spacecraft_Name, Manufacturing_Date) VALUES ('SpaceX', 'Cargo Dragon', '2012-05-25'); INSERT INTO Spacecraft_Manufacturers_5 (Company, Spacecraft_Name, Manufacturing_Date) VALUES ('SpaceX', 'Crew Dragon', '2019-03-02'); INSERT INTO Spacecraft_Manufacturers_5 (Company, Spacecraft_Name, Manufacturing_Date) VALUES ('Boeing', 'Starliner', '2019-08-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT Spacecraft_Name FROM Spacecraft_Manufacturers_5 WHERE Company IN (SELECT Company FROM Spacecraft_Manufacturers_5 GROUP BY Company HAVING COUNT(*) > 5);"
    },
    {
        "instruction": "입력 텍스트: LATAM' 지역에 있는 사용자들 중 가장 많은 팔로워 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE followers (id INT, user_id INT, follower_count INT); INSERT INTO followers (id, user_id, follower_count) VALUES (1, 1, 1000), (2, 2, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(follower_count) FROM followers JOIN users ON followers.user_id = users.id WHERE users.region = 'LATAM';"
    },
    {
        "instruction": "입력 텍스트: 이익 마진이 가장 높은 상위 5개 메뉴 항목을 나열하세요.\n\nDDL statements:\nCREATE TABLE Menu_Items (item VARCHAR(50), sales INT, cost INT);  CREATE VIEW Profit_Margin AS SELECT item, (sales - cost) AS profit FROM Menu_Items;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT item, profit FROM Profit_Margin ORDER BY profit DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 연구선 'RV Ocean Explorer'의 유형을 '해양학적 연구'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE research_vessels (id INT, name VARCHAR(50), type VARCHAR(50), year INT); INSERT INTO research_vessels (id, name, type, year) VALUES (1, 'RV Ocean Explorer', 'Oceanographic', 2015), (2, 'RV Deep Diver', 'Underwater', 2018), (3, 'RV Sea Rover', 'Hydrographic', 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE research_vessels SET type = 'Oceanographic Research' WHERE name = 'RV Ocean Explorer';"
    },
    {
        "instruction": "입력 텍스트: 2021년 독일에서 가장 많은 쓰레기 매립지 용량을 가진 상위 3개 도시와 그들의 용량을 표시합니다.\n\nDDL statements:\nCREATE TABLE landfill (id INT, city VARCHAR(50), country VARCHAR(50), capacity INT, year INT); INSERT INTO landfill (id, city, country, capacity, year) VALUES (1, 'Berlin', 'Germany', 1200000, 2021), (2, 'Munich', 'Germany', 800000, 2021), (3, 'Hamburg', 'Germany', 700000, 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, capacity FROM (SELECT city, capacity, ROW_NUMBER() OVER (PARTITION BY country ORDER BY capacity DESC) as rank FROM landfill WHERE country = 'Germany' AND year = 2021) AS subquery WHERE rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: 아프리카 지역에 있는 호텔의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, hotel_name VARCHAR(255), region VARCHAR(255)); INSERT INTO hotels (hotel_id, hotel_name, region) VALUES (1, 'The Sands Hotel', 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hotels WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 어떤 학생들이 개방형 교육 과정에 한 번도 참여하지 않았나요?\n\nDDL statements:\nCREATE TABLE students (student_id INT, student_name VARCHAR(255)); INSERT INTO students VALUES (1, 'Alex Lee'), (2, 'Yasmine Khalil'), (3, 'James Chen'), (4, 'Sophia Kim'); CREATE TABLE student_courses (student_id INT, course_id INT); INSERT INTO student_courses VALUES (1, 1), (1, 2), (2, 1), (3, 2), (3, 3), (4, 1), (4, 2); CREATE TABLE open_pedagogy_courses (course_id INT, course_name VARCHAR(255)); INSERT INTO open_pedagogy_courses VALUES (1, 'Open Course 1'), (2, 'Open Course 2'), (3, 'Closed Course');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(s.student_id) as no_open_pedagogy_courses FROM students s LEFT JOIN student_courses sc ON s.student_id = sc.student_id LEFT JOIN open_pedagogy_courses opc ON sc.course_id = opc.course_id WHERE opc.course_id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 연령대별 정신 건강 점수 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE AgeGroups (AgeGroupID INT, AgeGroup VARCHAR(50)); CREATE TABLE MentalHealthScores (MH_ID INT, AgeGroupID INT, MentalHealthScore INT); INSERT INTO AgeGroups (AgeGroupID, AgeGroup) VALUES (1, '0-17'), (2, '18-29'), (3, '30-49'), (4, '50-64'), (5, '65+'); INSERT INTO MentalHealthScores (MH_ID, AgeGroupID, MentalHealthScore) VALUES (1, 1, 85), (2, 1, 90), (3, 2, 75), (4, 2, 70), (5, 3, 80), (6, 3, 85), (7, 4, 65), (8, 4, 70), (9, 5, 80), (10, 5, 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ag.AgeGroup, AVG(mhs.MentalHealthScore) as Avg_Score FROM MentalHealthScores mhs JOIN AgeGroups ag ON mhs.AgeGroupID = ag.AgeGroupID GROUP BY ag.AgeGroup;"
    },
    {
        "instruction": "입력 텍스트: 2020년 아프리카에서 열린 음악 콘서트의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE concerts (id INT, title VARCHAR(255), location VARCHAR(100), year INT, revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) as total_revenue FROM concerts WHERE location LIKE '%Africa%' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: athletics_competitions' 테이블에서 5개 이상의 경기에 참가한 모든 선수들을 나열하세요.\n\nDDL statements:\nCREATE TABLE athletics_competitions (athlete_name VARCHAR(50), event VARCHAR(50), year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT athlete_name FROM (SELECT athlete_name, COUNT(*) AS num_events FROM athletics_competitions GROUP BY athlete_name) AS subquery WHERE num_events > 5;"
    },
    {
        "instruction": "입력 텍스트: 최근 10년간 금속 유물의 보존 시간이 가장 긴 발굴 현장은 어디인가요?\n\nDDL statements:\nCREATE TABLE excavation_sites (id INT, site_name VARCHAR(255)); CREATE TABLE artifacts (id INT, excavation_site_id INT, artifact_type VARCHAR(255), is_metallic BOOLEAN, conservation_start_time TIMESTAMP, conservation_end_time TIMESTAMP);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.site_name, MAX(TIMESTAMPDIFF(MINUTE, a.conservation_start_time, a.conservation_end_time)) AS max_conservation_time FROM excavation_sites e JOIN artifacts a ON e.id = a.excavation_site_id WHERE a.is_metallic = TRUE AND a.conservation_start_time BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR) AND CURRENT_DATE GROUP BY e.site_name;"
    },
    {
        "instruction": "입력 텍스트: 모든 레스토랑에서 가장 비싼 메뉴 상위 3개는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (restaurant_id INT); CREATE TABLE Menu (menu_id INT, item_name TEXT, price DECIMAL, restaurant_id INT, FOREIGN KEY (restaurant_id) REFERENCES Restaurants(restaurant_id)); INSERT INTO Restaurants (restaurant_id) VALUES (1),(2),(3); INSERT INTO Menu (menu_id, item_name, price, restaurant_id) VALUES (1, 'Hamburger', 5.99, 1), (2, 'Cheeseburger', 6.49, 1), (3, 'Fries', 2.49, 1), (4, 'Salad', 4.99, 2), (5, 'Pizza', 7.99, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT item_name, price FROM Menu ORDER BY price DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: ID가 4인 재료의 원산지를 \"중국\"으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE ingredients (id INT, product_id INT, name VARCHAR(255), country VARCHAR(255)); INSERT INTO ingredients (id, product_id, name, country) VALUES (1, 1, 'Aloe Vera', 'Mexico'), (2, 1, 'Rosehip Oil', 'Chile'), (3, 2, 'Jojoba Oil', 'Brazil'), (4, 2, 'Green Tea Extract', 'Japan'), (5, 3, 'Cucumber Extract', 'France');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE ingredients SET country = 'China' WHERE id = 4;"
    },
    {
        "instruction": "입력 텍스트: 특정 연도의 각 프로그램별 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_id INT, donation_amount DECIMAL, donation_date DATE, donor_program VARCHAR); INSERT INTO donations (id, donor_id, donation_amount, donation_date, donor_program) VALUES (1, 101, '500', '2021-01-01', 'Education'), (2, 102, '300', '2021-02-01', 'Sports'), (3, 103, '800', '2021-03-01', 'Arts & Culture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.donor_program, SUM(d.donation_amount) as total_donation FROM donations d WHERE YEAR(d.donation_date) = 2021 GROUP BY d.donor_program;"
    },
    {
        "instruction": "입력 텍스트: carbon_offset_projects' 테이블에 다음과 같은 세부 정보를 가진 새로운 탄소 상쇄 프로젝트를 추가하세요: 국가 'Brazil', 이름 'Amazon Rainforest Protection', 상쇄 유형 'Forestation', 총 상쇄 수량 1000000, 상쇄 가격 15.00, 시작 날짜 '2022-01-01', 종료 날짜 '2030-12-31'\n\nDDL statements:\nCREATE TABLE carbon_offset_projects (id INT, country VARCHAR(255), name VARCHAR(255), offset_type VARCHAR(255), total_offset_quantity INT, offset_price FLOAT, start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO carbon_offset_projects (country, name, offset_type, total_offset_quantity, offset_price, start_date, end_date) VALUES ('Brazil', 'Amazon Rainforest Protection', 'Forestation', 1000000, 15.00, '2022-01-01', '2030-12-31');"
    },
    {
        "instruction": "입력 텍스트: oil_platforms' 테이블에 다음과 같은 세부 정보를 가진 새로운 레코드를 추가하세요: platform_id = 103, platform_name = 'Ocean Serpent', water_depth_ft = 3500, operational_status = 'Active'\n\nDDL statements:\nCREATE TABLE oil_platforms (platform_id INT PRIMARY KEY, platform_name VARCHAR(255), water_depth_ft INT, operational_status VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO oil_platforms (platform_id, platform_name, water_depth_ft, operational_status) VALUES (103, 'Ocean Serpent', 3500, 'Active');"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에서 창고 재고 가치가 가장 높은 상위 5명의 고객을 나열하십시오.\n\nDDL statements:\nCREATE TABLE Customers (id INT, customer VARCHAR(255), region VARCHAR(255)); CREATE TABLE Inventory (id INT, item VARCHAR(255), customer INT, quantity INT, price FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Customers.customer, SUM(Inventory.quantity * Inventory.price) as total_value FROM Customers INNER JOIN Inventory ON Customers.customer = Inventory.customer WHERE Customers.region = 'Asia-Pacific' GROUP BY Customers.customer ORDER BY total_value DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 주차별로 기록된 보안 사고 건수는 얼마나 되나요?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, incident_date TIMESTAMP); INSERT INTO security_incidents (id, incident_date) VALUES (1, '2022-01-01 10:00:00'), (2, '2022-01-08 11:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT YEAR(incident_date) as year, WEEKOFYEAR(incident_date) as week, COUNT(*) as total_incidents FROM security_incidents WHERE incident_date >= '2022-01-01' AND incident_date < '2023-01-01' GROUP BY year, week;"
    },
    {
        "instruction": "입력 텍스트: 남파르스/노스돔 필드에 있는 모든 가스 우물과 그 생산량을 나열하세요.\n\nDDL statements:\nCREATE TABLE gas_wells (well_id INT, location VARCHAR(30), gas_production FLOAT); INSERT INTO gas_wells (well_id, location, gas_production) VALUES (1, 'South Pars/North Dome field', 3000.1), (2, 'South Pars/North Dome field', 2800.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM gas_wells WHERE location = 'South Pars/North Dome field';"
    },
    {
        "instruction": "입력 텍스트: 아마존 지역에서 성공률이 가장 높은 상위 3개의 커뮤니티 개발 프로젝트를 확인하세요.\n\nDDL statements:\nCREATE TABLE community_development (id INT, name TEXT, location TEXT, success_rate DECIMAL(3,2)); INSERT INTO community_development (id, name, location, success_rate) VALUES (1, 'Housing Renovation', 'Amazon region', 0.92), (2, 'Education Center', 'Amazon region', 0.85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, success_rate FROM community_development WHERE location = 'Amazon region' ORDER BY success_rate DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 케냐와 탄자니아에서 유기농 식품을 공급하는 모든 공급업체를 나열합니다.\n\nDDL statements:\nCREATE TABLE Suppliers (id INT, country VARCHAR(255), supplier_name VARCHAR(255), organic_producer BOOLEAN); INSERT INTO Suppliers (id, country, supplier_name, organic_producer) VALUES (1, 'Kenya', 'Kenyan Organics', TRUE), (2, 'Tanzania', 'Tanzanian Greens', FALSE), (3, 'Kenya', 'East African Eco', TRUE); CREATE TABLE Produce (id INT, produce VARCHAR(255), supplier_id INT); INSERT INTO Produce (id, produce, supplier_id) VALUES (1, 'Carrots', 1), (2, 'Bananas', 3), (3, 'Chicken', 2), (4, 'Apples', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.supplier_name FROM Suppliers s JOIN Produce p ON s.id = p.supplier_id WHERE s.country IN ('Kenya', 'Tanzania') AND s.organic_producer = TRUE GROUP BY s.supplier_name;"
    },
    {
        "instruction": "입력 텍스트: 싱가포르와 뭄바이에 있는 하이브리드 버스의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE hybrid_buses (bus_id INT, city VARCHAR(50)); INSERT INTO hybrid_buses (bus_id, city) VALUES (1, 'Singapore'), (2, 'Singapore'), (3, 'Mumbai'), (4, 'Mumbai'), (5, 'Mumbai');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hybrid_buses WHERE city IN ('Singapore', 'Mumbai');"
    },
    {
        "instruction": "입력 텍스트: 2021년 인도에서 열린 크리켓 경기의 최소 관중 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE cricket_matches(id INT, team VARCHAR(50), location VARCHAR(50), year INT, spectators INT); INSERT INTO cricket_matches(id, team, location, year, spectators) VALUES (1, 'India Cricket Team', 'Eden Gardens', 2021, 65000), (2, 'India Cricket Team', 'Eden Gardens', 2021, 60000), (3, 'India Cricket Team', 'Eden Gardens', 2021, 68000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(spectators) FROM cricket_matches WHERE location = 'Eden Gardens' AND year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 공급업체별 총 계약 가치를 가장 높은 계약 가치 순으로 나열해 주세요.\n\nDDL statements:\nCREATE TABLE Vendors (VendorID int, VendorName varchar(50), ContractValue numeric(18,2)); INSERT INTO Vendors (VendorID, VendorName, ContractValue) VALUES (1, 'ABC Corp', 1500000.00), (2, 'XYZ Inc', 1200000.00), (3, 'DEF LLC', 800000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT VendorName, SUM(ContractValue) as TotalContractValue FROM Vendors GROUP BY VendorName ORDER BY TotalContractValue DESC;"
    },
    {
        "instruction": "입력 텍스트: 기술 부문에서 전액 장학금을 받은 남성 대학원생의 수를 계산하세요.\n\nDDL statements:\nCREATE TABLE graduate_student (id INT, name VARCHAR(50), gender VARCHAR(10), division VARCHAR(30), funding FLOAT); INSERT INTO graduate_student (id, name, gender, division, funding) VALUES (1, 'Qasim', 'Male', 'Technology', 100000.00), (2, 'Raya', 'Female', 'Technology', 0.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM graduate_student WHERE gender = 'Male' AND division = 'Technology' AND funding = 100000.00;"
    },
    {
        "instruction": "입력 텍스트: autonomous_vehicles' 스키마에서 'California'와 'Texas' 지역의 자율주행 차량 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE autonomous_vehicles (region VARCHAR(255), num_vehicles INT); INSERT INTO autonomous_vehicles (region, num_vehicles) VALUES ('California', 5000), ('Texas', 4000), ('New York', 3000), ('Florida', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_vehicles) FROM autonomous_vehicles WHERE region IN ('California', 'Texas');"
    },
    {
        "instruction": "입력 텍스트: 주어진 지역에서 순 에너지 용량이 가장 높은 상위 3개의 에너지 저장 시설을 찾으세요.\n\nDDL statements:\nCREATE TABLE energy_storage (name VARCHAR(50), location VARCHAR(50), net_capacity FLOAT, primary key (name)); INSERT INTO energy_storage (name, location, net_capacity) VALUES ('Facility A', 'California', 500), ('Facility B', 'California', 600), ('Facility C', 'California', 700), ('Facility D', 'Nevada', 800), ('Facility E', 'Nevada', 900);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, net_capacity FROM (SELECT name, net_capacity, ROW_NUMBER() OVER (PARTITION BY location ORDER BY net_capacity DESC) as rank FROM energy_storage) subquery WHERE rank <= 3"
    },
    {
        "instruction": "입력 텍스트: rural_infrastructure' 테이블에 있는 농촌 인프라 프로젝트에 지출된 평균 금액이 지역별로 어떻게 되며, 지출된 평균 금액을 기준으로 내림차순으로 정렬된 순서대로 나타내 주세요.\n\nDDL statements:\nCREATE TABLE rural_infrastructure (id INT, project_name VARCHAR(50), region VARCHAR(50), amount_spent DECIMAL(10,2)); INSERT INTO rural_infrastructure VALUES (1, 'Road Construction', 'North', 50000.00), (2, 'Bridge Building', 'Asia', 75000.00), (3, 'Water Supply', 'Europe', 60000.00), (4, 'Electricity Distribution', 'South America', 80000.00), (5, 'School Building', 'Oceania', 45000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(amount_spent) as avg_amount_spent FROM rural_infrastructure GROUP BY region ORDER BY avg_amount_spent DESC;"
    },
    {
        "instruction": "입력 텍스트: 동부 지역의 커뮤니티 개발 사업의 평균 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE CommunityDevelopment (id INT PRIMARY KEY, region VARCHAR(20), cost FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM CommunityDevelopment WHERE region = 'Eastern';"
    },
    {
        "instruction": "입력 텍스트: 오클랜드에서 중재자들이 처리한 회복적 사법 사건의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE restorative_justice_facilitators (facilitator_id INT, name VARCHAR(50), city VARCHAR(50)); INSERT INTO restorative_justice_facilitators (facilitator_id, name, city) VALUES (1, 'John Doe', 'Oakland'), (2, 'Jane Smith', 'San Francisco'); CREATE TABLE restorative_justice_cases (case_id INT, facilitator_id INT, case_type VARCHAR(50)); INSERT INTO restorative_justice_cases (case_id, facilitator_id, case_type) VALUES (1, 1, 'mediation'), (2, 1, 'conferencing'), (3, 2, 'mediation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM restorative_justice_cases rjc JOIN restorative_justice_facilitators rjf ON rjc.facilitator_id = rjf.facilitator_id WHERE rjf.city = 'Oakland';"
    },
    {
        "instruction": "입력 텍스트: 2018년 태평양 지역의 바다의 PH값은 얼마인가요?\n\nDDL statements:\nCREATE TABLE OceanAcidification (Location VARCHAR(50), PHValue DECIMAL(3,2), Year INT); INSERT INTO OceanAcidification (Location, PHValue, Year) VALUES ('Great Barrier Reef', 7.80, 2010); INSERT INTO OceanAcidification (Location, PHValue, Year) VALUES ('Pacific Ocean', 7.90, 2018);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT PHValue FROM OceanAcidification WHERE Location = 'Pacific Ocean' AND Year = 2018;"
    },
    {
        "instruction": "입력 텍스트: 이민자에 의해 설립된 농업 기술 산업의 스타트업 중 2010년 이전에 설립된 스타트업을 제외하고 펀딩을 받은 기업의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT, industry TEXT, founding_date DATE, founder_immigrant TEXT); INSERT INTO company (id, name, industry, founding_date, founder_immigrant) VALUES (1, 'AgriTechCo', 'Agriculture Technology', '2015-01-01', 'Yes');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT company.id) FROM company JOIN funding_records ON company.id = funding_records.company_id WHERE company.industry = 'Agriculture Technology' AND company.founder_immigrant = 'Yes' AND company.founding_date >= '2010-01-01';"
    },
    {
        "instruction": "입력 텍스트: 항공기 모델 별 총 비행 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE FlightData (Id INT, Aircraft VARCHAR(20), Model VARCHAR(20), FlightHours INT); INSERT INTO FlightData VALUES (1, 'Airbus', 'A320', 1500), (2, 'Boeing', '737', 2000), (3, 'Airbus', 'A330', 1200), (4, 'Boeing', '777', 2500), (5, 'Airbus', 'A380', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Model, SUM(FlightHours) as TotalFlightHours FROM FlightData GROUP BY Model;"
    },
    {
        "instruction": "입력 텍스트: 기부자 테이블에 (기부자_ID, 이름, 기부금액, 국가) 값 (5, 'Aisha Ahmed', 6000, 'USA')을 삽입하세요.\n\nDDL statements:\nCREATE TABLE Donors (Donor_ID int, Name varchar(50), Donation_Amount decimal(10,2), Country varchar(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Donors (Donor_ID, Name, Donation_Amount, Country) VALUES (5, 'Aisha Ahmed', 6000, 'USA');"
    },
    {
        "instruction": "입력 텍스트: 남해양에서 발견되는 해조류 종은 몇 종인가요?\n\nDDL statements:\nCREATE TABLE seabird_species (name VARCHAR(255), ocean VARCHAR(255)); INSERT INTO seabird_species (name, ocean) VALUES ('Albatross', 'Southern Ocean'), ('Penguin', 'Antarctic Ocean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM seabird_species WHERE ocean = 'Southern Ocean';"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 기부자가 기부한 총액은 무엇이며, 기부 금액이 많은 순으로 정렬된 목록은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, TotalDonation FLOAT); INSERT INTO Donors (DonorID, DonorName, TotalDonation) VALUES (1, 'John Doe', 5000.00), (2, 'Jane Smith', 3000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, SUM(TotalDonation) as 'Total Donated in 2021' FROM Donors WHERE YEAR(DonationDate) = 2021 GROUP BY DonorName ORDER BY SUM(TotalDonation) DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 실행된 기술 접근성 이니셔티브는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE access_by_region (region VARCHAR(50), initiatives INT); INSERT INTO access_by_region (region, initiatives) VALUES ('Asia', 10), ('Africa', 8), ('Europe', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, initiatives FROM access_by_region;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 판매되는 비유기농 헤어 케어 제품의 이름과 가격을 나열하세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, name VARCHAR(100), is_organic BOOLEAN, category VARCHAR(50), country VARCHAR(50), price DECIMAL(5,2)); INSERT INTO products (product_id, name, is_organic, category, country, price) VALUES (1, 'Shampoo', false, 'Hair Care', 'Canada', 9.99); INSERT INTO products (product_id, name, is_organic, category, country, price) VALUES (2, 'Conditioner', true, 'Hair Care', 'Canada', 12.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, price FROM products WHERE is_organic = false AND category = 'Hair Care' AND country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 태평양 북서부에 위치한 식당에서 제공되는 총 비건 식사의 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID int, Name varchar(50), Location varchar(50)); INSERT INTO Restaurants (RestaurantID, Name, Location) VALUES (1, 'Vegan Vista', 'Oregon'), (2, 'Plant-Based Paradise', 'Washington'); CREATE TABLE Dishes (DishID int, Name varchar(50), Category varchar(50), Vegan bit); INSERT INTO Dishes (DishID, Name, Category, Vegan) VALUES (1, 'Tofu Stir Fry', 'Vegan', 1), (2, 'Veggie Burger', 'Vegan', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Dishes.Vegan) FROM Dishes JOIN Restaurants ON Dishes.Category = 'Vegan' WHERE Restaurants.Location LIKE '%Pacific Northwest%';"
    },
    {
        "instruction": "입력 텍스트: 2020년 군사 혁신 지출 상위 3개국을 확인하세요.\n\nDDL statements:\nCREATE TABLE military_expenditure (country VARCHAR(255), year INT, expenditure DECIMAL(10,2)); INSERT INTO military_expenditure (country, year, expenditure) VALUES ('USA', 2020, 7780000000), ('China', 2020, 2520000000), ('India', 2020, 6600000000), ('Russia', 2020, 6100000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, expenditure FROM (SELECT country, expenditure, ROW_NUMBER() OVER (ORDER BY expenditure DESC) as rank FROM military_expenditure WHERE year = 2020) as subquery WHERE rank <= 3;"
    },
    {
        "instruction": "입력 텍스트: \"I-40\"과 교차하는 도로의 이름과 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Roads (name TEXT, number TEXT, state TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, state FROM Roads WHERE number = 'I-40';"
    },
    {
        "instruction": "입력 텍스트: 목적지에 도착한 지 한 달이 넘은 화물의 상태를 '배송 완료'로 업데이트하세요.\n\nDDL statements:\nCREATE SCHEMA if not exists ocean_shipping;CREATE TABLE if not exists ocean_shipping.cargo (id INT, status VARCHAR(255), arrived_at DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE ocean_shipping.cargo SET status = 'delivered' WHERE arrived_at < DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"
    },
    {
        "instruction": "입력 텍스트: \"workforce\" 테이블에 ID 678인 \"Brazil\"의 \"Mining\" 부서에서 새로운 여성 근로자를 위한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE workforce (id INT, gender VARCHAR(50), department VARCHAR(50), country VARCHAR(50), hire_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO workforce (id, gender, department, country, hire_date) VALUES (678, 'female', 'Mining', 'Brazil', CURRENT_DATE);"
    },
    {
        "instruction": "입력 텍스트: 뉴욕 주에서 통신 회사가 제공하는 모든 광대역 요금제를 월별 비용 기준 오름차순으로 정렬하여 나열하세요.\n\nDDL statements:\nCREATE TABLE broadband_plans (plan_id INT, plan_name VARCHAR(25), state VARCHAR(20), monthly_cost FLOAT); INSERT INTO broadband_plans (plan_id, plan_name, state, monthly_cost) VALUES (1, 'Basic', 'New York', 30), (2, 'Premium', 'New York', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT plan_name, monthly_cost FROM broadband_plans WHERE state = 'New York' ORDER BY monthly_cost ASC;"
    },
    {
        "instruction": "입력 텍스트: 2022년도 건강 프로그램의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ProgramBudget (ProgramID INT, ProgramName TEXT, BudgetYear INT, BudgetAmount INT); INSERT INTO ProgramBudget (ProgramID, ProgramName, BudgetYear, BudgetAmount) VALUES (1, 'Health Clinic', 2022, 50000), (2, 'Mental Health Services', 2021, 30000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(BudgetAmount) FROM ProgramBudget WHERE ProgramBudget.ProgramName LIKE '%Health%' AND BudgetYear = 2022;"
    },
    {
        "instruction": "입력 텍스트: voting_data' 테이블에서 'county_a'와 'county_b'를 제외한 등록된 유권자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE voting_data (county VARCHAR(255), num_voters INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(num_voters) FROM voting_data WHERE county NOT IN ('county_a', 'county_b');"
    },
    {
        "instruction": "입력 텍스트: 각 부문별 단체협약에 의해 보호받는 근로자의 평균 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE if not exists sectors (id INT PRIMARY KEY, sector VARCHAR(255)); CREATE TABLE if not exists workers (id INT PRIMARY KEY, sector VARCHAR(255), cba BOOLEAN); INSERT INTO sectors (id, sector) VALUES (1, 'agriculture'), (2, 'services'), (3, 'textiles'), (4, 'technology'); INSERT INTO workers (id, sector, cba) VALUES (1, 'agriculture', TRUE), (2, 'services', FALSE), (3, 'textiles', TRUE), (4, 'technology', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(covered_by_cba) FROM (SELECT sector, COUNT(*) as covered_by_cba FROM workers WHERE cba = TRUE GROUP BY sector) AS subquery;"
    },
    {
        "instruction": "입력 텍스트: 북미 지역의 각 생산 시설에서 2021년부터 2022년까지의 이산화탄소 배출 감소량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE facility_emission_data (facility_id INT, facility_location VARCHAR(255), CO2_emission INT, year INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT facility_location, (a.CO2_emission - b.CO2_emission) AS CO2_emission_reduction FROM facility_emission_data a JOIN facility_emission_data b ON a.facility_location = b.facility_location AND a.year = b.year + 1 WHERE a.facility_location LIKE 'North America%' AND b.year = 2021;"
    },
    {
        "instruction": "입력 텍스트: \"safety_testing\" 테이블에서 미국 기반 자동차 제조사들이 통과한 안전 테스트의 총 개수를 찾으세요.\n\nDDL statements:\nCREATE TABLE safety_testing (id INT, automaker VARCHAR(50), country VARCHAR(50), tests_passed INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(tests_passed) FROM safety_testing WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: agriculture_innovation' 테이블에서 여성 농부의 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE agriculture_innovation (farmer_id INT, farmer_name VARCHAR(50), gender VARCHAR(10), age INT, innovation_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(farmer_name) FROM agriculture_innovation WHERE gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 각 노선별 평균 요금과 탑승 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Rides (RideID INT, RouteID INT, FareAmount DECIMAL(5,2)); INSERT INTO Rides (RideID, RouteID, FareAmount) VALUES (1, 1, 2.50); INSERT INTO Rides (RideID, RouteID, FareAmount) VALUES (2, 2, 3.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT RouteID, AVG(FareAmount) AS AvgFare, COUNT(*) AS RideCount FROM Rides GROUP BY RouteID;"
    },
    {
        "instruction": "입력 텍스트: 미국의 모든 독특한 법률 기술 이니셔티브와 그에 해당하는 출시 날짜를 가장 최근 것부터 오래된 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE legal_tech_dates (id INT, initiative VARCHAR(255), launch_date DATE, country VARCHAR(255)); INSERT INTO legal_tech_dates (id, initiative, launch_date, country) VALUES (1, 'AI Dispute Resolution', '2021-05-15', 'US'), (2, 'Cloud-based Legal Platform', '2018-06-20', 'US'), (3, 'Traditional Law Firm Software', '2000-01-01', 'US');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative, launch_date FROM legal_tech_dates WHERE country = 'US' ORDER BY launch_date DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 조합 내 여성 및 남성 근로자의 비율을 계산하고, 여성 근로자의 비율이 높은 순으로 내림차순으로 정렬하세요.\n\nDDL statements:\nCREATE TABLE UnionMembers (MemberID INT, UnionID INT, Gender VARCHAR(10)); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (1, 1001, 'Female'); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (2, 1001, 'Male'); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (3, 1002, 'Female'); INSERT INTO UnionMembers (MemberID, UnionID, Gender) VALUES (4, 1002, 'Male');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT UnionID, (SUM(CASE WHEN Gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as FemalePercentage, (SUM(CASE WHEN Gender = 'Male' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as MalePercentage FROM UnionMembers GROUP BY UnionID ORDER BY FemalePercentage DESC;"
    },
    {
        "instruction": "입력 텍스트: 2023년 2분기에 소외된 커뮤니티에서 방문객 수가 가장 많은 목적지를 확인하세요.\n\nDDL statements:\nCREATE TABLE underrepresented_communities_destinations (id INT, country VARCHAR(10), visitors INT); INSERT INTO underrepresented_communities_destinations (id, country, visitors) VALUES (1, 'Nepal', 5000); INSERT INTO underrepresented_communities_destinations (id, country, visitors) VALUES (2, 'Bhutan', 7000); INSERT INTO underrepresented_communities_destinations (id, country, visitors) VALUES (3, 'Sri Lanka', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM underrepresented_communities_destinations WHERE QUARTER(arrival_date) = 2 GROUP BY country ORDER BY SUM(visitors) DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 가장 연료 소비가 많았던 선박은 어떤 것인가요?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name VARCHAR(50), type VARCHAR(50)); INSERT INTO vessels (id, name, type) VALUES (1, 'Ocean Titan', 'Cargo'); INSERT INTO vessels (id, name, type) VALUES (2, 'Sea Eagle', 'Tanker'); CREATE TABLE trips (id INT, vessel_id INT, consumption DECIMAL(10,2), date DATE); INSERT INTO trips (id, vessel_id, consumption, date) VALUES (1, 1, 5000, '2022-01-01'); INSERT INTO trips (id, vessel_id, consumption, date) VALUES (2, 1, 5200, '2022-02-01'); INSERT INTO trips (id, vessel_id, consumption, date) VALUES (3, 2, 4500, '2022-01-01'); INSERT INTO trips (id, vessel_id, consumption, date) VALUES (4, 2, 4800, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT vessel_id, AVG(consumption) as avg_consumption FROM trips WHERE date >= '2022-01-01' AND date <= '2022-03-31' GROUP BY vessel_id ORDER BY avg_consumption DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 지난 3개월 동안 유형과 주차별로 구분된 고유 위협 지표의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ThreatIntel (indicator_id INT, indicator VARCHAR(50), type VARCHAR(20), timestamp TIMESTAMP); INSERT INTO ThreatIntel (indicator_id, indicator, type, timestamp) VALUES (1, '192.168.1.1', 'IP', '2022-01-01 10:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, EXTRACT(WEEK FROM timestamp) as week, COUNT(DISTINCT indicator) as unique_indicator_count FROM ThreatIntel WHERE timestamp BETWEEN DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 3 MONTH) AND CURRENT_TIMESTAMP GROUP BY type, week;"
    },
    {
        "instruction": "입력 텍스트: 인도네시아에서 가장 많은 활성 사용자를 보유한 이슬람 금융 기술 회사는 어디인가요?\n\nDDL statements:\nCREATE TABLE islamic_fintech (id INT, company_name VARCHAR(50), country VARCHAR(50), num_active_users INT); INSERT INTO islamic_fintech (id, company_name, country, num_active_users) VALUES (1, 'Alami', 'Indonesia', 10000), (2, 'Ayoconnect', 'Indonesia', 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, company_name, num_active_users, RANK() OVER (ORDER BY num_active_users DESC) as rank FROM islamic_fintech WHERE country = 'Indonesia';"
    },
    {
        "instruction": "입력 텍스트: 각 교수님별로 출판된 총 간행물 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(255), department_id INT); INSERT INTO faculty (id, name, department_id) VALUES (1, 'Alice', 1), (2, 'Bob', 2), (3, 'Charlie', 3); CREATE TABLE departments (id INT, name VARCHAR(255)); INSERT INTO departments (id, name) VALUES (1, 'Biology'), (2, 'Mathematics'), (3, 'Sociology'); CREATE TABLE publications (id INT, faculty_id INT, title VARCHAR(255)); INSERT INTO publications (id, faculty_id, title) VALUES (1, 1, 'The Biology of Cells'), (2, 1, 'The Evolution of Species'), (3, 2, 'Advanced Calculus'), (4, 3, 'The Sociology of Race');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.name, COUNT(p.id)  FROM faculty f JOIN publications p ON f.id = p.faculty_id GROUP BY f.name;"
    },
    {
        "instruction": "입력 텍스트: habitat_preservation' 테이블에서 'region'이 'Africa'인 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE habitat_preservation (id INT PRIMARY KEY, region VARCHAR(20), organization VARCHAR(30), start_date DATE, end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM habitat_preservation WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 무황산염인 헤어 케어 제품들의 가격대별 비율은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(100), product_type VARCHAR(50), price FLOAT, sulfate_free BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT price_range, 100.0 * COUNT(*) / (SELECT COUNT(*) FROM products WHERE product_type = 'hair care') AS percentage FROM products JOIN (SELECT price / 10.0 AS price_range FROM products WHERE product_type = 'hair care' AND price IS NOT NULL) AS price_ranges ON products.price / 10.0 = price_ranges.price_range WHERE sulfate_free = TRUE GROUP BY price_range;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 주문되지 않은 요리를 확인하세요.\n\nDDL statements:\nCREATE TABLE dishes (id INT, name TEXT); CREATE TABLE orders (id INT, dish_id INT, order_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.name FROM dishes d LEFT JOIN orders o ON d.id = o.dish_id WHERE o.dish_id IS NULL AND order_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 WEEK) AND NOW();"
    },
    {
        "instruction": "입력 텍스트: 인도양에서 진행되는 해양 연구 프로젝트의 총 개수와 그들의 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_research_projects (id INT, name VARCHAR(255), location VARCHAR(255), budget DECIMAL(10,2)); INSERT INTO marine_research_projects (id, name, location, budget) VALUES (1, 'Coral Reef Study', 'Indian Ocean', 250000.00), (2, 'Ocean Current Analysis', 'Atlantic Ocean', 350000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*), SUM(budget) FROM marine_research_projects WHERE location = 'Indian Ocean';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 네오디뮴, 프라세오디뮴, 테르븀의 평균 생산량(톤 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE production_data (element VARCHAR(20), year INT, quantity FLOAT); INSERT INTO production_data (element, year, quantity) VALUES ('neodymium', 2018, 12000), ('neodymium', 2019, 14000), ('neodymium', 2020, 15000), ('praseodymium', 2018, 4000), ('praseodymium', 2019, 4500), ('praseodymium', 2020, 5000), ('terbium', 2018, 300), ('terbium', 2019, 320), ('terbium', 2020, 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(quantity) FROM production_data WHERE element IN ('neodymium', 'praseodymium', 'terbium') AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기 각 국가별 일일 최대 거래 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE customers (customer_id INT, country_code CHAR(2)); CREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(transaction_amount), transaction_date, country_code FROM transactions INNER JOIN customers ON transactions.customer_id = customers.customer_id WHERE transactions.transaction_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY transaction_date, country_code;"
    },
    {
        "instruction": "입력 텍스트: 각 장비 유형별 평균 유지비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Equipment (Type VARCHAR(255), Cost FLOAT); INSERT INTO Equipment (Type, Cost) VALUES ('Tank', 12000), ('Plane', 35000), ('Ship', 70000), ('Submarine', 100000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Type, AVG(Cost) FROM Equipment GROUP BY Type;"
    },
    {
        "instruction": "입력 텍스트: 미국 각 주에서 올해 발행된 총 기사 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE articles (article_id INT, publication_date DATE, state VARCHAR(255)); INSERT INTO articles (article_id, publication_date, state) VALUES (1, '2022-01-01', 'California'), (2, '2022-01-02', 'Texas'), (3, '2022-01-03', 'Florida');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(article_id) FROM articles WHERE YEAR(publication_date) = YEAR(GETDATE()) AND state IN ('California', 'Texas', 'Florida', 'New York', 'Pennsylvania') GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: Bankruptcy' 분야의 사건에 대해 사건 개시 날짜, 사건 종결 날짜, 그리고 두 날짜 간의 차이를 찾으세요. 이 정보는 주별로 구분되며, 두 날짜 간의 차이에 따라 오름차순으로 정렬됩니다.\n\nDDL statements:\nCREATE TABLE Cases (CaseID INT, ClientFirstName VARCHAR(50), ClientLastName VARCHAR(50), State VARCHAR(2), PracticeArea VARCHAR(50), CaseOutcome VARCHAR(20), OpenDate DATE, CloseDate DATE); INSERT INTO Cases (CaseID, ClientFirstName, ClientLastName, State, PracticeArea, CaseOutcome, OpenDate, CloseDate) VALUES (1, 'Daniel', 'Garcia', 'NY', 'Bankruptcy', 'closed', '2020-01-01', '2020-06-01'), (2, 'Avery', 'Washington', 'CA', 'Bankruptcy', 'open', '2019-01-01', NULL), (3, 'Jessica', 'Harris', 'NY', 'Bankruptcy', 'closed', '2021-01-01', '2021-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, OpenDate, CloseDate, DATEDIFF(CloseDate, OpenDate) AS DaysOpen FROM Cases WHERE PracticeArea = 'Bankruptcy' ORDER BY State, DaysOpen;"
    },
    {
        "instruction": "입력 텍스트: 각 농촌 지역의 보건 의료 종사자 수는 총 몇 명입니까?\n\nDDL statements:\nCREATE TABLE rural_areas (id INT, name TEXT, num_workers INT, avg_age FLOAT); INSERT INTO rural_areas (id, name, num_workers, avg_age) VALUES (1, 'Rural Area 1', 100, 49.5), (2, 'Rural Area 2', 125, 47.8); CREATE TABLE rural_clinics (id INT, name TEXT, location TEXT, num_workers INT, avg_age FLOAT); INSERT INTO rural_clinics (id, name, location, num_workers, avg_age) VALUES (1, 'Rural Clinic A', 'Rural Area 1', 10, 45.3), (2, 'Rural Clinic B', 'Rural Area 2', 15, 42.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, SUM(rural_clinics.num_workers + rural_areas.num_workers) FROM rural_areas r JOIN rural_clinics ON r.name = rural_clinics.location GROUP BY r.name;"
    },
    {
        "instruction": "입력 텍스트: infrastructure_development' 테이블에서 'project_id'가 1인 레코드의 'cost' 값을 350000000으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE infrastructure_development (project_id INT, location VARCHAR(30), start_date DATE, end_date DATE, cost INT); INSERT INTO infrastructure_development (project_id, location, start_date, end_date, cost) VALUES (1, 'North Sea', '2017-01-01', '2021-12-31', 400000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE infrastructure_development SET cost = 350000000 WHERE project_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 오염으로 인한 식품 리콜 건수는 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE recalls (id INT, reason VARCHAR(20), country VARCHAR(20)); INSERT INTO recalls (id, reason, country) VALUES (1, 'contamination', 'US'), (2, 'mislabeling', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM recalls WHERE reason = 'contamination' AND country = 'US';"
    },
    {
        "instruction": "입력 텍스트: 2023년 각 프로그램에 할당된 총 예산은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE ProgramBudget (ProgramID int, ProgramName varchar(255), Budget decimal(10,2)); INSERT INTO ProgramBudget VALUES (1, 'Education', 5000), (2, 'Healthcare', 7000), (3, 'Environment', 4000), (4, 'Arts & Culture', 6000), (5, 'Social Services', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProgramName, SUM(Budget) as TotalBudget FROM ProgramBudget GROUP BY ProgramName;"
    },
    {
        "instruction": "입력 텍스트: 발트해에서의 모든 어종과 그 성장률을 나열하세요.\n\nDDL statements:\nCREATE TABLE baltic_sea (region VARCHAR(255), id INTEGER); INSERT INTO baltic_sea (region, id) VALUES ('Baltic Sea', 1); CREATE TABLE fish_species (id INTEGER, species VARCHAR(255)); INSERT INTO fish_species (id, species) VALUES (1, 'Herring'), (2, 'Cod'); CREATE TABLE fish_growth (species_id INTEGER, region_id INTEGER, rate FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.species, g.rate FROM fish_growth g JOIN fish_species f ON g.species_id = f.id JOIN baltic_sea bs ON g.region_id = bs.id WHERE bs.region = 'Baltic Sea';"
    },
    {
        "instruction": "입력 텍스트: 2021년 기준 미국에서 전기차의 시장 점유율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE SalesData (id INT, year INT, country VARCHAR(50), vehicle_type VARCHAR(50), market_share FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT market_share FROM SalesData WHERE year = 2021 AND country = 'United States' AND vehicle_type = 'Electric';"
    },
    {
        "instruction": "입력 텍스트: 우수' 또는 '좋음'의 결과 평가를 받은 프로그램에 대한 총 기부금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donations (id INT, amount REAL, program_id INT); INSERT INTO donations (id, amount, program_id) VALUES (1, 50.0, 100), (2, 100.0, 200), (3, 75.0, 100); CREATE TABLE programs (id INT, name TEXT, outcome_rating TEXT); INSERT INTO programs (id, name, outcome_rating) VALUES (100, 'Education', 'excellent'), (200, 'Healthcare', 'good');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(d.amount) FROM donations d INNER JOIN programs p ON d.program_id = p.id WHERE p.outcome_rating IN ('excellent', 'good');"
    },
    {
        "instruction": "입력 텍스트: 2019년에 승인된 약품의 총 연구개발(R&D) 지출액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE rd_expenditures_2 (drug_name TEXT, expenditure DECIMAL(10, 2), approval_date DATE); INSERT INTO rd_expenditures_2 (drug_name, expenditure, approval_date) VALUES ('DrugH', 200000.00, '2019-01-01'), ('DrugI', 125000.00, '2019-06-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(expenditure) as total_expenditure FROM rd_expenditures_2 WHERE approval_date BETWEEN '2019-01-01' AND '2019-12-31';"
    },
    {
        "instruction": "입력 텍스트: green_buildings'라는 이름의 테이블을 생성하여 친환경 건물의 주소, 크기, 인증 등급, 도시를 추적합니다.\n\nDDL statements:\nCREATE TABLE green_buildings (address VARCHAR(255), size INT, certification VARCHAR(50), city VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE TABLE green_buildings (address VARCHAR(255), size INT, certification VARCHAR(50), city VARCHAR(100));"
    },
    {
        "instruction": "입력 텍스트: 어느 나라가 보안 사고를 해결하는 데 평균적으로 가장 오랜 시간이 걸리나요?\n\nDDL statements:\nCREATE TABLE incidents (id INT, country VARCHAR(50), resolved_date DATE); INSERT INTO incidents (id, country, resolved_date) VALUES (1, 'USA', '2022-01-05'), (2, 'Canada', '2022-01-10'), (3, 'Mexico', '2022-01-15'), (4, 'Brazil', '2022-01-20'); CREATE TABLE security_incidents (id INT, incident_id INT, reported_date DATE, resolved_date DATE); INSERT INTO security_incidents (id, incident_id, reported_date, resolved_date) VALUES (1, 1, '2022-01-01', '2022-01-03'), (2, 1, '2022-01-02', '2022-01-04'), (3, 2, '2022-01-06', '2022-01-08'), (4, 3, '2022-01-07', '2022-01-09');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT i.country, AVG(DATEDIFF(day, si.reported_date, si.resolved_date)) as avg_time_to_resolve FROM incidents i INNER JOIN security_incidents si ON i.id = si.incident_id GROUP BY i.country ORDER BY avg_time_to_resolve DESC;"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주의 통신 회사에서 모바일 및 광대역 서비스로 발생한 총 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE mobile_revenue (service VARCHAR(20), revenue FLOAT); CREATE TABLE broadband_revenue (service VARCHAR(20), revenue FLOAT); INSERT INTO mobile_revenue (service, revenue) VALUES ('Mobile', 1500), ('Mobile', 2000); INSERT INTO broadband_revenue (service, revenue) VALUES ('Broadband', 1000), ('Broadband', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(mobile_revenue.revenue + broadband_revenue.revenue) FROM mobile_revenue, broadband_revenue WHERE mobile_revenue.service = 'Mobile' AND broadband_revenue.service = 'Broadband' AND mobile_revenue.service = broadband_revenue.service AND mobile_revenue.service = 'California';"
    },
    {
        "instruction": "입력 텍스트: 도쿄'와 '시드니'에서 가장 높은 수익을 낸 아티스트를 보여주세요.\n\nDDL statements:\nCREATE TABLE Concerts (ConcertID INT, Artist VARCHAR(50), City VARCHAR(50), Revenue DECIMAL(10,2)); INSERT INTO Concerts (ConcertID, Artist, City, Revenue) VALUES (1, 'Taylor Swift', 'Los Angeles', 500000.00), (2, 'BTS', 'New York', 750000.00), (3, 'Adele', 'London', 600000.00), (4, 'Taylor Swift', 'New York', 350000.00), (5, 'BTS', 'Tokyo', 900000.00), (6, 'Adele', 'Sydney', 850000.00), (7, 'Taylor Swift', 'Tokyo', 1000000.00), (8, 'BTS', 'Sydney', 1000000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City, Artist, MAX(Revenue) FROM Concerts WHERE City IN ('Tokyo', 'Sydney') GROUP BY City, Artist;"
    },
    {
        "instruction": "입력 텍스트: animal_population' 테이블과 'rehabilitated_animals' 테이블에 있는 동물의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE animal_population (id INT, animal_name VARCHAR(50), population INT); CREATE TABLE rehabilitated_animals (id INT, animal_name VARCHAR(50), rehabilitated_count INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COALESCE(SUM(ap.population), 0) + COALESCE(SUM(ra.rehabilitated_count), 0) FROM animal_population ap FULL OUTER JOIN rehabilitated_animals ra ON ap.animal_name = ra.animal_name WHERE ap.id IS NULL OR ra.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 기부를 받은 고유 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE programs (id INT, program_name VARCHAR(50), donation_id INT); INSERT INTO programs (id, program_name, donation_id) VALUES (1, 'Feeding America', 100), (2, 'Red Cross', 101), (3, 'Feeding America', 103), (4, 'Save the Children', 104);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT program_name) FROM programs WHERE donation_id IN (SELECT id FROM donations WHERE YEAR(donation_date) = 2019);"
    },
    {
        "instruction": "입력 텍스트: crypto_regulations' 테이블에 'regulation_id' 1001, 'country_name' 'India', 'regulation_description' '디지털 자산 및 암호화폐 자산에 대한 규정', 'effective_date' '2021-03-31'인 새로운 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE crypto_regulations (regulation_id INT, country_name VARCHAR(50), regulation_description VARCHAR(255), effective_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO crypto_regulations (regulation_id, country_name, regulation_description, effective_date) VALUES (1001, 'India', 'Regulations for digital assets and crypto-assets', '2021-03-31');"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2020년까지 중동 국가들이 수행한 평화유지 작전은 총 몇 건입니까?\n\nDDL statements:\nCREATE TABLE PeacekeepingOperations (nation VARCHAR(50), year INT, operation_count INT); INSERT INTO PeacekeepingOperations (nation, year, operation_count) VALUES ('Egypt', 2015, 3), ('Iraq', 2015, 2), ('Jordan', 2015, 4), ('Saudi Arabia', 2015, 1), ('Turkey', 2015, 5), ('Egypt', 2016, 3), ('Iraq', 2016, 2), ('Jordan', 2016, 4), ('Saudi Arabia', 2016, 1), ('Turkey', 2016, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(operation_count) FROM PeacekeepingOperations WHERE nation IN ('Egypt', 'Iraq', 'Jordan', 'Saudi Arabia', 'Turkey') AND year BETWEEN 2015 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 재고 내에서 지속 가능한 의류 품목의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Clothing (id INT, sustainable VARCHAR(10)); INSERT INTO Clothing (id, sustainable) VALUES (1, 'yes'), (2, 'no'), (3, 'yes'), (4, 'yes'), (5, 'no');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(*) FILTER (WHERE sustainable = 'yes') / COUNT(*) FROM Clothing;"
    },
    {
        "instruction": "입력 텍스트: Prius' 차량 모델을 가진 보험 가입자의 최대 청구 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Auto (policyholder_id INT, car_model VARCHAR(20)); CREATE TABLE Claims (claim_id INT, policyholder_id INT, amount FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(amount) FROM Claims INNER JOIN Auto ON Claims.policyholder_id = Auto.policyholder_id WHERE car_model = 'Prius';"
    },
    {
        "instruction": "입력 텍스트: 모든 사이버 보안 사고와 그 유형, 영향을 받은 국가들을 날짜 순으로 나열하세요.\n\nDDL statements:\nCREATE TABLE incident (id INT, incident_type VARCHAR(255), country VARCHAR(255), timestamp TIMESTAMP); INSERT INTO incident (id, incident_type, country, timestamp) VALUES (1, 'Phishing', 'Germany', '2022-01-01 00:00:00'), (2, 'Malware', 'France', '2022-01-02 00:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT incident_type, country, timestamp FROM incident ORDER BY timestamp ASC;"
    },
    {
        "instruction": "입력 텍스트: 예술 및 문화 부문의 개인 기부자들의 평균 기부 금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(50), amount INT, sector VARCHAR(20)); INSERT INTO donors (id, name, amount, sector) VALUES (1, 'John', 50, 'education'), (2, 'Jane', 100, 'health'), (3, 'Mike', 25, 'education'), (4, 'Olivia', 75, 'arts and culture'), (5, 'Patrick', 150, 'arts and culture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(amount) FROM donors WHERE sector = 'arts and culture' AND id NOT IN (SELECT DISTINCT org_id FROM grants);"
    },
    {
        "instruction": "입력 텍스트: 80점 미만을 득점한 농구 경기를 보여주세요.\n\nDDL statements:\nCREATE TABLE basketball_matches (team1 VARCHAR(255), team2 VARCHAR(255), points1 INT, points2 INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM basketball_matches WHERE points1 < 80 AND points2 < 80;"
    },
    {
        "instruction": "입력 텍스트: 2017년에 발매된 Kendrick Lamar의 앨범 'DAMN'에 대한 새로운 레코드를 Albums 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE Albums (AlbumID INT, AlbumName VARCHAR(100), ReleaseYear INT, Artist VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Albums (AlbumID, AlbumName, ReleaseYear, Artist) VALUES (1, 'DAMN', 2017, 'Kendrick Lamar');"
    },
    {
        "instruction": "입력 텍스트: 미국 주식이나 채권 중 하나에만 투자한 고객을 찾으세요.\n\nDDL statements:\nCREATE TABLE clients (client_id INT); CREATE TABLE investments (client_id INT, investment_type VARCHAR(20)); INSERT INTO clients VALUES (1),(2),(3),(4); INSERT INTO investments VALUES (1,'US Equities'),(1,'Bonds'),(2,'US Equities'),(3,'Bonds'),(4,'International Equities');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT clients.client_id FROM clients INNER JOIN investments investments_1 ON clients.client_id = investments_1.client_id WHERE investments_1.investment_type IN ('US Equities', 'Bonds') INTERSECT SELECT clients.client_id FROM clients INNER JOIN investments investments_2 ON clients.client_id = investments_2.client_id WHERE investments_2.investment_type NOT IN ('US Equities', 'Bonds');"
    },
    {
        "instruction": "입력 텍스트: multimodal_mobility' 테이블에서 'city'가 'London'인 레코드를 업데이트하세요.\n\nDDL statements:\nCREATE TABLE multimodal_mobility (id INT, city VARCHAR(50), mode VARCHAR(50), users INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE multimodal_mobility SET mode = 'Bike Sharing (London)' WHERE city = 'London';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 업데이트된 사이버 보안 정책과 각 정책별 업데이트 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE policy_updates (id INT, policy_name VARCHAR(255), update_date DATE, updated_by VARCHAR(255), description TEXT); INSERT INTO policy_updates (id, policy_name, update_date, updated_by, description) VALUES (1, 'Policy_A', '2022-03-10', 'Admin_1', 'Description_1');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_name, COUNT(*) as updates_count FROM policy_updates WHERE update_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY policy_name;"
    },
    {
        "instruction": "입력 텍스트: \"emergency_responses\" 테이블에 ID 6, 유형 'Ambulance', 평균 응답 시간 6.5분인 새로운 응급 대응 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE emergency_responses (id INT PRIMARY KEY, response_type TEXT, avg_response_time FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO emergency_responses (id, response_type, avg_response_time) VALUES (6, 'Ambulance', 6.5);"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 각 광산 작업장에서 일하는 직원들의 최대 및 최소 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE mining_operations (id INT, location VARCHAR(50)); INSERT INTO mining_operations (id, location) VALUES (1, 'Canada - Mine A'), (2, 'Canada - Mine B'); CREATE TABLE employees (id INT, age INT, position VARCHAR(50), operation_id INT); INSERT INTO employees (id, age, position, operation_id) VALUES (1, 35, 'Engineer', 1), (2, 42, 'Manager', 1), (3, 28, 'Operator', 2), (4, 31, 'Supervisor', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mo.location, MAX(e.age) AS max_age, MIN(e.age) AS min_age FROM employees e INNER JOIN mining_operations mo ON e.operation_id = mo.id GROUP BY mo.location;"
    },
    {
        "instruction": "입력 텍스트: City K'와 'City L'에서 공공 서비스에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE city_budgets (city VARCHAR(255), sector VARCHAR(255), budget INT); INSERT INTO city_budgets\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM city_budgets WHERE (city = 'City K' OR city = 'City L') AND sector = 'public services'"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 미주기구에 의해 수행된 평화유지 작전은 몇 건이며, 날짜 순으로 정렬되었나요?\n\nDDL statements:\nCREATE TABLE OasPeacekeepingOperations (id INT, operation_name VARCHAR(255), operation_start_date DATE, operation_end_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY operation_start_date DESC) as rn FROM OasPeacekeepingOperations WHERE organization = 'Organization of American States' AND operation_start_date >= DATEADD(year, -2, CURRENT_DATE)) x WHERE rn = 1;"
    },
    {
        "instruction": "입력 텍스트: 역사학과 남성 교수의 최대 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE if NOT EXISTS faculty (id INT, name VARCHAR(50), gender VARCHAR(10), rank VARCHAR(20), department VARCHAR(20), salary INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(salary) FROM faculty WHERE gender='Male' AND rank='Professor' AND department='History';"
    },
    {
        "instruction": "입력 텍스트: \"cargo\" 테이블에 새 화물 기록을 추가합니다\n\nDDL statements:\nCREATE TABLE cargo (id INT PRIMARY KEY, description VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO cargo (id, description) VALUES (55566, 'New Cargo Description');"
    },
    {
        "instruction": "입력 텍스트: safety_records 테이블에서 'Vessel C'가 2022-03-25에 최신 검사를 통과했다는 정보를 반영하여 업데이트하세요.\n\nDDL statements:\nCREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), last_inspection_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE safety_records SET last_inspection_date = '2022-03-25' WHERE vessel_name = 'Vessel C';"
    },
    {
        "instruction": "입력 텍스트: basketball_teams' 테이블에서 'team_id'가 12인 레코드의 'team_name' 컬럼을 'New York Knicks'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE basketball_teams (team_id INT, team_name VARCHAR(50), city VARCHAR(50), conference VARCHAR(50), division VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE basketball_teams SET team_name = 'New York Knicks' WHERE team_id = 12;"
    },
    {
        "instruction": "입력 텍스트: 다음 3개월 안에 유지 보수가 예정된 군사 장비의 총 수는 몇 개이며, 그 중에서 가장 흔한 장비 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE military_equipment (equipment_id INT, equipment_type VARCHAR(255), last_maintenance_date DATE, next_maintenance_date DATE, unit_id INT); CREATE TABLE unit (unit_id INT, unit_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.equipment_type, COUNT(*) AS equipment_count FROM military_equipment e JOIN unit u ON e.unit_id = u.unit_id WHERE e.next_maintenance_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.equipment_type ORDER BY equipment_count DESC LIMIT 1; SELECT COUNT(*) FROM military_equipment e JOIN unit u ON e.unit_id = u.unit_id WHERE e.next_maintenance_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH);"
    },
    {
        "instruction": "입력 텍스트: \"rural\" 지역에서 가장 높은 수익을 올린 레스토랑을 확인하세요.\n\nDDL statements:\nCREATE TABLE revenue_by_restaurant (restaurant_id INT, revenue INT, area VARCHAR(255));INSERT INTO revenue_by_restaurant (restaurant_id, revenue, area) VALUES (1, 5000, 'urban'), (2, 4000, 'urban'), (3, 8000, 'suburban'), (4, 9000, 'rural'), (5, 6000, 'urban');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT revenue_by_restaurant.restaurant_id, MAX(revenue_by_restaurant.revenue) FROM revenue_by_restaurant WHERE revenue_by_restaurant.area = 'rural';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 게시한 일본 사용자들의 평균 팔로워 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE users (id INT, name TEXT, country TEXT, followers INT); INSERT INTO users (id, name, country, followers) VALUES (1, 'Hana', 'Japan', 1100), (2, 'Taro', 'Japan', 1500), (3, 'Sachiko', 'Japan', 800), (4, 'Kenji', 'Brazil', 1600); CREATE TABLE posts (id INT, user_id INT, timestamp DATETIME); INSERT INTO posts (id, user_id, timestamp) VALUES (1, 1, '2022-04-01 12:00:00'), (2, 1, '2022-04-05 13:00:00'), (3, 2, '2022-04-03 11:00:00'), (4, 3, '2022-03-31 14:00:00'), (5, 4, '2022-04-04 15:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(users.followers) FROM users JOIN posts ON users.id = posts.user_id WHERE users.country = 'Japan' AND posts.timestamp >= DATE_SUB(NOW(), INTERVAL 1 WEEK);"
    },
    {
        "instruction": "입력 텍스트: Japan', 'Canada', 'Brazil' 국가에 대해 각각 10000, 15000, 20000의 용량 값을 가진 데이터로 landfill_capacity 테이블에 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE landfill_capacity (country VARCHAR(50), capacity INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO landfill_capacity (country, capacity) VALUES ('Japan', 10000), ('Canada', 15000), ('Brazil', 20000);"
    },
    {
        "instruction": "입력 텍스트: 2022년에 캐나다 출신 기부자들이 기부한 총액은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(50), country VARCHAR(50), donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO donors (id, name, country, donation_amount, donation_date) VALUES (1, 'John Doe', 'Canada', 100, '2022-01-01'), (2, 'Jane Smith', 'USA', 200, '2022-02-01'), (3, 'Alice Johnson', 'Canada', 150, '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donors WHERE country = 'Canada' AND YEAR(donation_date) = 2022;"
    },
    {
        "instruction": "입력 텍스트: 2020년 캐나다의 에너지 효율 절감량(기가와트시(GWh) 단위)은 총 얼마였습니까?\n\nDDL statements:\nCREATE TABLE energy_efficiency (country VARCHAR(50), year INT, savings_gwh FLOAT); INSERT INTO energy_efficiency (country, year, savings_gwh) VALUES ('Canada', 2020, 12000), ('Canada', 2020, 13000), ('Canada', 2020, 11000), ('Canada', 2020, 14000), ('Canada', 2020, 15000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(savings_gwh) AS total_savings_gwh FROM energy_efficiency WHERE country = 'Canada' AND year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 모든 공장에 있는 지속 가능한 각 재료의 재고 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE materials (material_id INT, name VARCHAR(255), is_sustainable BOOLEAN); INSERT INTO materials VALUES (1, 'Organic Cotton', true); INSERT INTO materials VALUES (2, 'Recycled Polyester', true); INSERT INTO materials VALUES (3, 'Conventional Cotton', false); CREATE TABLE inventory (inventory_id INT, material_id INT, factory_id INT, quantity INT); INSERT INTO inventory VALUES (1, 1, 1, 2000); INSERT INTO inventory VALUES (2, 2, 2, 3000); INSERT INTO inventory VALUES (3, 3, 1, 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT materials.name, SUM(inventory.quantity) FROM materials JOIN inventory ON materials.material_id = inventory.material_id WHERE materials.is_sustainable = true GROUP BY materials.name;"
    },
    {
        "instruction": "입력 텍스트: 가장 높은 pH 내성과 가장 낮은 pH 내성을 가진 해양 생물의 이름은 무엇인가요?\n\nDDL statements:\nCREATE TABLE pH_tolerance (species TEXT, min_pH FLOAT, max_pH FLOAT); INSERT INTO pH_tolerance (species, min_pH, max_pH) VALUES ('Coral', 7.5, 8.4), ('Cuttlefish', 6.8, 8.2), ('Anglerfish', 6.2, 7.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species FROM pH_tolerance WHERE (min_pH = (SELECT MAX(min_pH) FROM pH_tolerance)) OR (max_pH = (SELECT MIN(max_pH) FROM pH_tolerance));"
    },
    {
        "instruction": "입력 텍스트: James Smith'가 '2022-05-10'에 'Health Awareness' 프로그램에 8000달러를 기부한 새로운 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE Donations (DonationID INT, DonorName VARCHAR(100), DonationAmount DECIMAL(10,2), DonationDate DATE, ProgramName VARCHAR(100)); INSERT INTO Donations (DonationID, DonorName, DonationAmount, DonationDate, ProgramName) VALUES (1, 'John Smith', 7500, '2021-05-10', 'Education Fund');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Donations (DonorName, DonationAmount, DonationDate, ProgramName) VALUES ('James Smith', 8000, '2022-05-10', 'Health Awareness');"
    },
    {
        "instruction": "입력 텍스트: 의류' 부서의 모든 제품 가격을 10% 인상하세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, department VARCHAR(20), price DECIMAL(5,2)); INSERT INTO products (product_id, department, price) VALUES (1, 'clothing', 19.99), (2, 'electronics', 79.99), (3, 'clothing', 49.99), (4, 'electronics', 299.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE products SET price = price * 1.1 WHERE department = 'clothing';"
    },
    {
        "instruction": "입력 텍스트: 뉴스 기관 'AFP'에서 프랑스어로 발행된 기사의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE news_agencies (name VARCHAR(50), language VARCHAR(50), country VARCHAR(50)); CREATE TABLE articles (title VARCHAR(255), publication_date DATE, agency_id INT, CONSTRAINT fk_agency FOREIGN KEY (agency_id) REFERENCES news_agencies(id)); INSERT INTO news_agencies (name, language, country) VALUES ('AFP', 'French', 'France'), ('Reuters', 'English', 'UK'), ('DPA', 'German', 'Germany'); INSERT INTO articles (title, publication_date, agency_id) VALUES ('Macron announces new policies', '2022-02-15', 1), ('Johnson visits Germany', '2022-02-16', 3), ('Scholz interviewed by DW', '2022-02-17', 3), ('Macron visits AFP headquarter', '2022-02-18', 1);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM articles INNER JOIN news_agencies ON articles.agency_id = news_agencies.id WHERE news_agencies.name = 'AFP' AND news_agencies.language = 'French';"
    },
    {
        "instruction": "입력 텍스트: 2010-01-01 이전에 NASA에서 발사한 모든 우주 임무를 나열하세요.\n\nDDL statements:\nCREATE TABLE Space_Missions (id INT, mission_name VARCHAR(50), launch_date DATE, launching_agency VARCHAR(50)); INSERT INTO Space_Missions (id, mission_name, launch_date, launching_agency) VALUES (1, 'Apollo 11', '1969-07-16', 'NASA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT mission_name FROM Space_Missions WHERE launch_date < '2010-01-01' AND launching_agency = 'NASA';"
    },
    {
        "instruction": "입력 텍스트: 인도에서 제작된 영화에 출연한 횟수가 가장 많은 상위 5명의 배우는 누구인가요?\n\nDDL statements:\nCREATE TABLE actors (id INT, name VARCHAR(255), gender VARCHAR(8)); CREATE TABLE movies_actors (movie_id INT, actor_id INT, PRIMARY KEY (movie_id, actor_id), FOREIGN KEY (movie_id) REFERENCES movies(id), FOREIGN KEY (actor_id) REFERENCES actors(id)); CREATE TABLE movies (id INT, title VARCHAR(255), production_country VARCHAR(64), PRIMARY KEY (id)); INSERT INTO actors (id, name, gender) VALUES (1, 'Actor1', 'Male'), (2, 'Actor2', 'Female'), (3, 'Actor3', 'Male'); INSERT INTO movies_actors (movie_id, actor_id) VALUES (1, 1), (1, 2), (2, 1), (3, 3); INSERT INTO movies (id, title, production_country) VALUES (1, 'Movie1', 'India'), (2, 'Movie2', 'India'), (3, 'Movie3', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.name, COUNT(ma.movie_id) AS num_movies FROM actors a INNER JOIN movies_actors ma ON a.id = ma.actor_id INNER JOIN movies m ON ma.movie_id = m.id WHERE m.production_country = 'India' GROUP BY a.name ORDER BY num_movies DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 브라질'에서 새로운 커뮤니티 참여 이벤트를 추가하세요.\n\nDDL statements:\nCREATE TABLE community_engagement (id INT PRIMARY KEY, name TEXT, location TEXT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO community_engagement (id, name, location, date) VALUES (1, 'Festa Junina', 'Brazil', '2023-06-24');"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 농촌 지역에서 시행된 미디어 리터러시 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE media_literacy_programs (id INT, program_name VARCHAR(255), location VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO media_literacy_programs (id, program_name, location, start_date, end_date) VALUES (1, 'Program 1', 'Rural', '2022-03-01', '2023-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM media_literacy_programs WHERE location = 'Rural' AND start_date <= GETDATE() AND end_date >= DATEADD(year, -1, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 고래 보호구역이 있는 나라는 몇 개국입니까?\n\nDDL statements:\nCREATE TABLE whale_sanctuaries (country_name TEXT, sanctuary_name TEXT); INSERT INTO whale_sanctuaries (country_name, sanctuary_name) VALUES ('Norway', 'Norwegian Whale Sanctuary'), ('Antarctica', 'Southern Ocean Whale Sanctuary'), ('Australia', 'Australian Whale Sanctuary');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT country_name) FROM whale_sanctuaries;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 온 방문객들의 최소 도착 연령은 얼마인가요?\n\nDDL statements:\nCREATE TABLE tourism_data (visitor_id INT, country VARCHAR(50), arrival_age INT); INSERT INTO tourism_data (visitor_id, country, arrival_age) VALUES (1, 'USA', 35), (2, 'USA', 42), (3, 'Japan', 28), (4, 'Australia', 31), (5, 'UK', 29), (6, 'UK', 34), (7, 'Canada', 22), (8, 'Canada', 25); CREATE VIEW us_visitors AS SELECT * FROM tourism_data WHERE country = 'USA';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(arrival_age) FROM us_visitors WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 최근 90일 동안 안전 검사를 받지 않은 모든 선박을 나열합니다.\n\nDDL statements:\nCREATE TABLE Vessels (VesselID varchar(10)); CREATE TABLE SafetyInspections (InspectionID int, VesselID varchar(10), InspectionDate date); INSERT INTO Vessels (VesselID) VALUES ('VesselA'), ('VesselB'), ('VesselC'); INSERT INTO SafetyInspections (InspectionID, VesselID, InspectionDate) VALUES (1, 'VesselA', '2021-06-01'), (2, 'VesselB', '2021-07-01'), (3, 'VesselC', '2021-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Vessels.VesselID FROM Vessels LEFT JOIN SafetyInspections ON Vessels.VesselID = SafetyInspections.VesselID WHERE SafetyInspections.InspectionDate IS NULL OR SafetyInspections.InspectionDate < DATEADD(day, -90, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 얼마나 많은 우주 임무가 발사되었나요?\n\nDDL statements:\nCREATE TABLE SpaceMissions (id INT, name VARCHAR(255), country VARCHAR(255), launch_date DATE); INSERT INTO SpaceMissions (id, name, country, launch_date) VALUES (1, 'Apollo 11', 'United States', '1969-07-16'); INSERT INTO SpaceMissions (id, name, country, launch_date) VALUES (2, 'Soyuz T-15', 'Russia', '1986-03-13');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) FROM SpaceMissions GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: rural_infrastructure_status' 테이블에서 프로젝트 유형과 프로젝트 상태별로 농촌 인프라 프로젝트의 수를 표시합니다.\n\nDDL statements:\nCREATE TABLE rural_infrastructure_status (project_type VARCHAR(255), project_status VARCHAR(255), number_of_projects INT); INSERT INTO rural_infrastructure_status (project_type, project_status, number_of_projects) VALUES ('Bridge', 'Under Construction', 2), ('Road', 'Completed', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_type, project_status, COUNT(*) FROM rural_infrastructure_status GROUP BY project_type, project_status;"
    },
    {
        "instruction": "입력 텍스트: green_buildings' 테이블에 데이터를 추가하세요\n\nDDL statements:\nCREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size_sqft INT, certification_level VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO green_buildings (id, name, location, size_sqft, certification_level) VALUES (1, 'GreenHQ', 'NYC', 50000, 'Platinum');"
    },
    {
        "instruction": "입력 텍스트: 미국에서 생산된 항공기의 평균 제조 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE AircraftManufacturing (id INT, manufacturer VARCHAR(255), country VARCHAR(255), cost FLOAT); INSERT INTO AircraftManufacturing VALUES (1, 'Boeing', 'USA', 120000000), (2, 'Airbus', 'Europe', 150000000), (3, 'Lockheed Martin', 'USA', 200000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(cost) FROM AircraftManufacturing WHERE country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: R&D 부서의 각 위험 카테고리별 최대 및 최소 위험 점수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE risk_scores (score_id INT, department VARCHAR(50), risk_category VARCHAR(50), value DECIMAL(10, 2)); INSERT INTO risk_scores (score_id, department, risk_category, value) VALUES (1, 'R&D', 'Operational Risk', 7.25), (2, 'R&D', 'Compliance Risk', 7.50), (3, 'Marketing', 'Operational Risk', 6.75), (4, 'Marketing', 'Compliance Risk', 7.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, risk_category, MAX(value) AS max_score, MIN(value) AS min_score FROM risk_scores GROUP BY department, risk_category;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 각 주에는 몇 개의 농촌 병원이 있나요?\n\nDDL statements:\nCREATE TABLE canadian_hospitals (id INT, name VARCHAR(50), hospital_type VARCHAR(50), province VARCHAR(50)); INSERT INTO canadian_hospitals (id, name, hospital_type, province) VALUES (1, 'Hospital A', 'Rural', 'Ontario');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT province, COUNT(*) as hospital_count FROM canadian_hospitals WHERE hospital_type = 'Rural' GROUP BY province;"
    },
    {
        "instruction": "입력 텍스트: 영국에서 온 단일 관광객이 런던에서 지출한 최대 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE tourism_stats (visitor_country VARCHAR(20), destination VARCHAR(20), expenditure DECIMAL(10,2)); INSERT INTO tourism_stats (visitor_country, destination, expenditure) VALUES ('United Kingdom', 'London', 1500.00), ('United Kingdom', 'London', 1200.00), ('United Kingdom', 'London', 1800.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(expenditure) FROM tourism_stats WHERE visitor_country = 'United Kingdom' AND destination = 'London';"
    },
    {
        "instruction": "입력 텍스트: 회원ID, 이름, 나이, 성별, 평균 운동 시간을 평균 운동 시간의 내림차순으로 조회하세요. 회원 테이블과 운동 테이블은 회원ID를 기준으로 조인됩니다.\n\nDDL statements:\nCREATE TABLE Members (MemberID INT, Name VARCHAR(50), Age INT, Gender VARCHAR(10), City VARCHAR(50), State VARCHAR(20)); INSERT INTO Members (MemberID, Name, Age, Gender, City, State) VALUES (1003, 'Aisha Patel', 32, 'Female', 'Chicago', 'IL'); INSERT INTO Members (MemberID, Name, Age, Gender, City, State) VALUES (1004, 'Hiroshi Nakamura', 45, 'Male', 'Tokyo', 'JP');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MemberID, WorkoutType, COUNT(*) as WorkoutCount FROM Workouts GROUP BY MemberID, WorkoutType ORDER BY WorkoutCount DESC;"
    },
    {
        "instruction": "입력 텍스트: military_equipment' 테이블에서 'equipment_status'가 'Active'인 모든 기록에 대해 'equipment_name'과 'equipment_type'을 가져오세요.\n\nDDL statements:\nCREATE TABLE military_equipment (equipment_id INT PRIMARY KEY, equipment_name VARCHAR(100), equipment_type VARCHAR(50), equipment_status VARCHAR(20)); INSERT INTO military_equipment (equipment_id, equipment_name, equipment_type, equipment_status) VALUES (1, 'F-16 Fighting Falcon', 'Aircraft', 'Active'), (2, 'M1 Abrams', 'Tank', 'Retired'), (3, 'Tomahawk Cruise Missile', 'Missile', 'Active');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_name, equipment_type FROM military_equipment WHERE equipment_status = 'Active';"
    },
    {
        "instruction": "입력 텍스트: 교통 산업에서 LGBTQ+ 창업자들을 위한 총 펀딩 금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE investment (id INT, company_id INT, investor TEXT, year INT, amount FLOAT); INSERT INTO investment (id, company_id, investor, year, amount) VALUES (1, 1, 'Tesla', 2021, 75000000.0); CREATE TABLE company (id INT, name TEXT, industry TEXT, founder TEXT, PRIMARY KEY (id)); INSERT INTO company (id, name, industry, founder) VALUES (1, 'GreenMotion', 'Transportation', 'LGBTQ+');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(i.amount) FROM investment i JOIN company c ON i.company_id = c.id WHERE c.founder = 'LGBTQ+' AND c.industry = 'Transportation';"
    },
    {
        "instruction": "입력 텍스트: 헬스케어 분야 기업들의 평균 ESG 등급은 얼마인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, sector TEXT, ESG_rating FLOAT); INSERT INTO companies (id, name, sector, ESG_rating) VALUES (1, 'Innovative Healthcare', 'Healthcare', 8.3); INSERT INTO companies (id, name, sector, ESG_rating) VALUES (2, 'GreenTech Medical', 'Healthcare', 7.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(ESG_rating) FROM companies WHERE sector = 'Healthcare';"
    },
    {
        "instruction": "입력 텍스트: 모든 전시회와 각각의 큐레이터를 나열하세요.\n\nDDL statements:\nCREATE TABLE Exhibitions (id INT, name VARCHAR(100), curator VARCHAR(100)); INSERT INTO Exhibitions (id, name, curator) VALUES (1, 'Modern Art', 'Charlie'); INSERT INTO Exhibitions (id, name, curator) VALUES (2, 'Ancient Civilizations', 'Delta');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, curator FROM Exhibitions;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 각 역에서 지하철이 도착한 가장 이른 시간과 가장 늦은 시간은 무엇인가요?\n\nDDL statements:\nCREATE TABLE metro_stations (id INT, station_id INT, arrival_time TIME); INSERT INTO metro_stations (id, station_id, arrival_time) VALUES (1, 1, '07:00:00'), (2, 2, '08:00:00'), (3, 1, '18:00:00');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(arrival_time) as earliest_time, MAX(arrival_time) as latest_time, station_id FROM metro_stations WHERE arrival_time >= DATEADD(day, -30, GETDATE()) GROUP BY station_id;"
    },
    {
        "instruction": "입력 텍스트: 2022년 3분기에 멕시코와 대한민국 사용자들로부터 '패션' 제품 카테고리로 얻은 총 수익은 얼마였습니까?\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(255), category VARCHAR(255)); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Dress 1', 'fashion'), (2, 'Shirt 1', 'fashion'); CREATE TABLE users (user_id INT, user_country VARCHAR(255)); INSERT INTO users (user_id, user_country) VALUES (1, 'Mexico'), (2, 'South Korea'); CREATE TABLE orders (order_id INT, user_id INT, product_id INT, order_date DATE, revenue DECIMAL(10, 2)); INSERT INTO orders (order_id, user_id, product_id, order_date, revenue) VALUES (1, 1, 1, '2022-07-01', 50), (2, 2, 1, '2022-07-05', 60);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM orders o JOIN products p ON o.product_id = p.product_id JOIN users u ON o.user_id = u.user_id WHERE u.user_country IN ('Mexico', 'South Korea') AND p.category = 'fashion' AND o.order_date BETWEEN '2022-07-01' AND '2022-09-30';"
    },
    {
        "instruction": "입력 텍스트: 각 과목 분야에서 제공되는 전문 개발 과정은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE subject_areas (id INT, name VARCHAR(255)); CREATE TABLE courses (id INT, subject_area_id INT, name VARCHAR(255), provider_id INT); INSERT INTO subject_areas (id, name) VALUES (1, 'Mathematics'), (2, 'Science'), (3, 'Humanities'); INSERT INTO courses (id, subject_area_id, name, provider_id) VALUES (1, 1, 'Algebra', 1), (2, 1, 'Geometry', 1), (3, 2, 'Biology', 2), (4, 2, 'Chemistry', 2), (5, 3, 'History', 3), (6, 3, 'Literature', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sa.name AS subject_area_name, COUNT(c.id) AS num_courses FROM subject_areas sa JOIN courses c ON sa.id = c.subject_area_id GROUP BY sa.name;"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2020년 사이에 뉴욕에서 라틴 아메리카 출신 이민자들에 의해 설립된 스타트업은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE companies (id INT, name TEXT, founding_year INT, city TEXT, country_of_origin TEXT); INSERT INTO companies (id, name, founding_year, city, country_of_origin) VALUES (1, 'CleanRide', 2017, 'New York', 'Mexico'); INSERT INTO companies (id, name, founding_year, city, country_of_origin) VALUES (2, 'GreenCycle', 2016, 'Los Angeles', 'Brazil');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM companies WHERE city = 'New York' AND country_of_origin IN ('Mexico', 'Brazil', 'Colombia', 'Argentina', 'Chile', 'Peru') AND founding_year BETWEEN 2015 AND 2020;"
    },
    {
        "instruction": "입력 텍스트: 남아메리카'에서 '인프라 프로젝트'의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE projects (id INT, name TEXT, region TEXT, budget FLOAT); INSERT INTO projects (id, name, region, budget) VALUES (1, 'Project 1', 'South America', 500000), (2, 'Project 2', 'North America', 750000), (3, 'Project 3', 'South America', 1000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(projects.budget) FROM projects WHERE projects.region = 'South America' AND projects.name LIKE 'infrastructure%';"
    },
    {
        "instruction": "입력 텍스트: 북극과 남극 해양에서 가장 깊고 얕은 해양보호구역이 있는 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (name TEXT, depth FLOAT, country TEXT, ocean TEXT); INSERT INTO marine_protected_areas (name, depth, country, ocean) VALUES ('Nordic Seas', 3500.0, 'Norway', 'Arctic'), ('Fram Strait', 4000.0, 'Russia', 'Arctic'), ('Amundsen Sea', 5000.0, 'Chile', 'Antarctic'), ('Bellingshausen Sea', 6000.0, 'Argentina', 'Antarctic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(depth) FROM marine_protected_areas WHERE ocean = 'Arctic' UNION ALL SELECT MIN(depth) FROM marine_protected_areas WHERE ocean = 'Antarctic';"
    },
    {
        "instruction": "입력 텍스트: 2022년 1월 첫째 주의 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE menu_sales_3 (sale_date DATE, revenue INT); INSERT INTO menu_sales_3 (sale_date, revenue) VALUES ('2022-01-01', 1200), ('2022-01-02', 1500), ('2022-01-03', 1000), ('2022-01-04', 1800), ('2022-01-05', 1300), ('2022-01-06', 2000), ('2022-01-07', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM menu_sales_3 WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-07';"
    },
    {
        "instruction": "입력 텍스트: 2021년 각 월별 프로그램 지출 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE ProgramExpenses (ExpenseID int, ProgramID int, ExpenseAmount numeric, ExpenseDate date);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(ExpenseDate, '%Y-%m') as Month, SUM(ExpenseAmount) as TotalExpenses FROM ProgramExpenses WHERE YEAR(ExpenseDate) = 2021 GROUP BY Month;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 교통 서비스에 대한 최대 예산 배정액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE budget (region varchar(20), service varchar(20), allocation int); INSERT INTO budget (region, service, allocation) VALUES ('North', 'Transportation', 8000000), ('South', 'Transportation', 10000000), ('North', 'Education', 6000000), ('South', 'Education', 7000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, MAX(allocation) FROM budget WHERE service = 'Transportation' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 숲의 평균 헥타르는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Forests ( ForestID INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50), Hectares FLOAT ); CREATE VIEW AverageHectares AS SELECT Country, AVG(Hectares) AS AvgHectares FROM Forests GROUP BY Country;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, AvgHectares FROM Forests INNER JOIN AverageHectares ON Forests.Country = AverageHectares.Country;"
    },
    {
        "instruction": "입력 텍스트: 1970년 이전에 텍사스에서 건설된 댐의 목록을 나열하시오.\n\nDDL statements:\nCREATE TABLE Dams(id INT, name TEXT, location TEXT, built DATE); INSERT INTO Dams(id, name, location, built) VALUES (1, 'Amistad Dam', 'Texas', '1969-09-28');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM Dams WHERE location = 'Texas' AND built < '1970-01-01';"
    },
    {
        "instruction": "입력 텍스트: 지난 2년 동안 각 교수진에게 수여된 연구 보조금은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE if not exists FACULTY(id INT, name TEXT, department TEXT, position TEXT, salary INT);CREATE TABLE if not exists GRANTS(id INT, faculty_id INT, grant_name TEXT, grant_amount INT, grant_date DATE, college TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT faculty_id, COUNT(*) FROM GRANTS WHERE grant_date >= DATE('now','-2 year') GROUP BY faculty_id;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 DDoS 공격에 연루된 고유 IP 주소의 수를 확인하세요.\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, ip_address VARCHAR(50), incident_date DATE, incident_type VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT ip_address) as num_unique_ips FROM security_incidents WHERE incident_date >= DATEADD(month, -1, GETDATE()) AND incident_type = 'DDoS';"
    },
    {
        "instruction": "입력 텍스트: community_development' 테이블에서 예산이 75000을 초과하는 커뮤니티 개발 계획은 무엇인가요?\n\nDDL statements:\nCREATE TABLE community_development (id INT, initiative_name VARCHAR(50), budget DECIMAL(10, 2)); INSERT INTO community_development (id, initiative_name, budget) VALUES (1, 'Clean Water Initiative', 50000.00), (2, 'Renewable Energy', 100000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT initiative_name, budget FROM community_development WHERE budget > 75000;"
    },
    {
        "instruction": "입력 텍스트: 남중국해에 있는 각 국가의 해양 플랫폼 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE offshore_platforms (country VARCHAR(255), region VARCHAR(255), num_platforms INT); INSERT INTO offshore_platforms (country, region, num_platforms) VALUES ('Vietnam', 'South China Sea', 25), ('China', 'South China Sea', 30), ('Malaysia', 'South China Sea', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(num_platforms) FROM offshore_platforms WHERE region = 'South China Sea' GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 함대에서 가장 오래된 컨테이너선은 무엇인가요?\n\nDDL statements:\nCREATE TABLE fleets (fleet_id INT, ship_name VARCHAR(50), ship_type VARCHAR(50), build_year INT); INSERT INTO fleets VALUES (1, 'MSC Maya', 'Container Ship', 2015); INSERT INTO fleets VALUES (2, 'OOCL Hong Kong', 'Container Ship', 2017); INSERT INTO fleets VALUES (3, 'Ever Given', 'Container Ship', 2010); INSERT INTO fleets VALUES (4, 'Cosco Shipping Universe', 'Container Ship', 2011);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ship_name, MIN(build_year) FROM fleets WHERE ship_type = 'Container Ship';"
    },
    {
        "instruction": "입력 텍스트: 알고리즘 공정성 테이블의 각 대륙별로 그룹화된 각 알고리즘의 최대 처리 시간은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Algorithmic_Fairness (algorithm_id INT, algorithm_name VARCHAR(50), processing_time FLOAT, continent VARCHAR(50)); INSERT INTO Algorithmic_Fairness (algorithm_id, algorithm_name, processing_time, continent) VALUES (1, 'AlgoA', 0.15, 'North America'), (2, 'AlgoB', 0.22, 'Europe'), (3, 'AlgoC', 0.31, 'Asia'), (4, 'AlgoD', 0.17, 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT continent, MAX(processing_time) FROM Algorithmic_Fairness GROUP BY continent;"
    },
    {
        "instruction": "입력 텍스트: CA'에서 가장 높은 보험료를 가진 상위 3개의 보험 유형을 확인하세요.\n\nDDL statements:\nCREATE TABLE policyholders (id INT, name TEXT, state TEXT, policy_type TEXT, premium FLOAT); INSERT INTO policyholders (id, name, state, policy_type, premium) VALUES (1, 'John Doe', 'CA', 'Auto', 1200.00), (2, 'Jane Smith', 'CA', 'Home', 2500.00), (3, 'Jim Brown', 'CA', 'Health', 3000.00), (4, 'Karen Green', 'CA', 'Auto', 1500.00), (5, 'Mark Red', 'CA', 'Home', 3500.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT policy_type, SUM(premium) as total_premium FROM policyholders WHERE state = 'CA' GROUP BY policy_type ORDER BY total_premium DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 캐나다의 회사들이 획득한 인력 개발 인증서의 최대 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE certifications (id INT, company VARCHAR(50), country VARCHAR(50), workforce_development INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(workforce_development) FROM certifications WHERE country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 언어 보존 프로그램 중에서 평균 예산보다 적은 예산을 가진 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE LanguagePreservation (ProgramName varchar(100), Budget decimal(10,2)); INSERT INTO LanguagePreservation (ProgramName, Budget) VALUES ('Rosetta Stone', 150000.00), ('Endangered Languages Project', 250000.00), ('Talking Dictionaries', 120000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ProgramName FROM LanguagePreservation WHERE Budget < (SELECT AVG(Budget) FROM LanguagePreservation);"
    },
    {
        "instruction": "입력 텍스트: 알고리즘 공정성 모델의 최대 안전 등급은 무엇인가요?\n\nDDL statements:\nCREATE TABLE fairness_models (model_name TEXT, safety_rating INTEGER); INSERT INTO fairness_models (model_name, safety_rating) VALUES ('Model X', 9), ('Model Y', 8), ('Model Z', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(safety_rating) FROM fairness_models WHERE model_name LIKE '%fairness%';"
    },
    {
        "instruction": "입력 텍스트: 30세 미만의 남성 및 여성 독자의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Readers (ReaderID INT, Name VARCHAR(50), Age INT, Gender VARCHAR(10), SubscriptionDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(CASE WHEN Gender = 'Male' THEN 1 ELSE 0 END) + SUM(CASE WHEN Gender = 'Female' THEN 1 ELSE 0 END) AS TotalReaders FROM Readers WHERE Age < 30;"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 새로운 규제를 도입한 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE regulatory_updates (update_id INT PRIMARY KEY, country VARCHAR(50), update_time TIMESTAMP, update_description TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country FROM regulatory_updates WHERE update_time >= NOW() - INTERVAL '1 week';"
    },
    {
        "instruction": "입력 텍스트: 각 우주 기관이 수행한 우주 임무의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE SpaceAgencies (Id INT, Agency VARCHAR(50), Missions INT); INSERT INTO SpaceAgencies (Id, Agency, Missions) VALUES (1, 'NASA', 200), (2, 'ESA', 150), (3, 'Roscosmos', 120), (4, 'CNSA', 60), (5, 'ISRO', 100), (6, 'JAXA', 40);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Agency, SUM(Missions) FROM SpaceAgencies GROUP BY Agency;"
    },
    {
        "instruction": "입력 텍스트: Player_Demographics'에 ID 201인 플레이어의 데이터를 입력하세요.\n\nDDL statements:\nCREATE TABLE Player_Demographics (id INT PRIMARY KEY, player_id INT, age INT, gender VARCHAR(255), country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO Player_Demographics (id, player_id, age, gender, country) VALUES (1, 201, 25, 'Female', 'Canada');"
    },
    {
        "instruction": "입력 텍스트: 미술관' 테이블에 있는 일본 출신 작가의 작품을 소장하고 있는 모든 미술관을 나열하세요.\n\nDDL statements:\nCREATE TABLE Artists (ArtistID INT, Name TEXT, Nationality TEXT); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (1, 'Yayoi Kusama', 'Japan'), (2, 'Takashi Murakami', 'Japan'), (3, 'Hiroshi Sugimoto', 'Japan'); CREATE TABLE Artworks (ArtworkID INT, Title TEXT, ArtistID INT, MuseumID INT); INSERT INTO Artworks (ArtworkID, Title, ArtistID, MuseumID) VALUES (1, 'Infinity Nets', 1, 1), (2, 'Superflat', 2, 2); CREATE TABLE Museums (MuseumID INT, Name TEXT); INSERT INTO Museums (MuseumID, Name) VALUES (1, 'Museum of Modern Art'), (2, 'Guggenheim Museum');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Museums.Name FROM Museums INNER JOIN Artworks ON Museums.MuseumID = Artworks.MuseumID INNER JOIN Artists ON Artists.ArtistID = Artworks.ArtistID WHERE Artists.Nationality = 'Japan';"
    },
    {
        "instruction": "입력 텍스트: 한국 드라마 TV 프로그램의 평균 평점이 장르별로 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE tv_show (id INT, title VARCHAR(100), country VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2)); INSERT INTO tv_show (id, title, country, genre, rating) VALUES (1, 'TVShow1', 'South Korea', 'Drama', 8.5); INSERT INTO tv_show (id, title, country, genre, rating) VALUES (2, 'TVShow2', 'South Korea', 'Comedy', 7.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT genre, AVG(rating) FROM tv_show WHERE country = 'South Korea' AND genre LIKE '%Drama%' GROUP BY genre;"
    },
    {
        "instruction": "입력 텍스트: 멕시코 각 주의 비만율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE MexicanStates (State VARCHAR(50), Population INT, Obese INT); INSERT INTO MexicanStates (State, Population, Obese) VALUES ('Jalisco', 8000000, 1600000), ('Mexico City', 9000000, 2000000), ('Veracruz', 7000000, 1400000), ('Puebla', 6000000, 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, (SUM(Obese) / SUM(Population)) * 100 AS ObesityRate FROM MexicanStates GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: 인도 뭄바이의 인프라 프로젝트 유형별로 그룹화된 총 비용과 연도는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Infrastructure (Id INT, City VARCHAR(50), Type VARCHAR(50), Cost FLOAT, Year INT); INSERT INTO Infrastructure (Id, City, Type, Cost, Year) VALUES (1, 'Mumbai', 'Bridge', 2000000, 2010); INSERT INTO Infrastructure (Id, City, Type, Cost, Year) VALUES (2, 'Mumbai', 'Road', 5000000, 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT City, Type, SUM(Cost) as Total_Cost, Year FROM Infrastructure GROUP BY City, Type, Year;"
    },
    {
        "instruction": "입력 텍스트: 지난 3년 동안 발사된 위성들을 발사 날짜 순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE satellites (satellite_name VARCHAR(255), launch_date DATE); INSERT INTO satellites (satellite_name, launch_date) VALUES ('Sat1', '2020-01-01'), ('Sat2', '2019-06-15'), ('Sat3', '2021-08-27'), ('Sat4', '2018-03-04');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM satellites WHERE launch_date >= DATEADD(year, -3, CURRENT_DATE) ORDER BY launch_date;"
    },
    {
        "instruction": "입력 텍스트: 휴스턴 시에 있는 평균 예산보다 많은 예산을 가진 모든 공립학교의 이름과 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE public_schools (name VARCHAR(255), city VARCHAR(255), state VARCHAR(255), type VARCHAR(255), budget FLOAT); INSERT INTO public_schools (name, city, state, type, budget) VALUES ('John Adams Middle School', 'Houston', 'TX', 'Public', 123456.78); INSERT INTO public_schools (name, city, state, type, budget) VALUES ('George Washington Middle School', 'Houston', 'TX', 'Public', 987654.32);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, type FROM public_schools WHERE city = 'Houston' AND budget > (SELECT AVG(budget) FROM public_schools WHERE city = 'Houston');"
    },
    {
        "instruction": "입력 텍스트: 2021년 아시아에 있는 재단에서 기부한 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50), AmountDonated float); INSERT INTO Donors (DonorID, DonorName, Country, AmountDonated) VALUES (1, 'John Doe', 'USA', 15000.00), (2, 'Jane Smith', 'Canada', 20000.00), (3, 'Asia Foundation', 'Asia', 30000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(AmountDonated) FROM Donors WHERE Country = 'Asia' AND YEAR(DonationDate) = 2021 AND DonorType = 'Foundation';"
    },
    {
        "instruction": "입력 텍스트: 2019년 미국에서 보고된 각각의 전염병 유형별 발생 건수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE InfectiousDiseases (Type VARCHAR(50), Country VARCHAR(50), Year INT, InfectiousDiseases INT); INSERT INTO InfectiousDiseases (Type, Country, Year, InfectiousDiseases) VALUES ('Influenza', 'USA', 2019, 12000), ('Measles', 'USA', 2019, 300), ('Malaria', 'USA', 2019, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Type, SUM(InfectiousDiseases) FROM InfectiousDiseases WHERE Country = 'USA' AND Year = 2019 GROUP BY Type;"
    },
    {
        "instruction": "입력 텍스트: 산업 4.0 기술을 도입한 모든 공장의 이름과 위치는 무엇인가요?\n\nDDL statements:\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT, industry40 BOOLEAN); INSERT INTO factories (factory_id, name, location, industry40) VALUES (1, 'Flex Factory', 'USA', TRUE), (2, 'GreenTech Plant', 'Germany', FALSE), (3, 'Smart Manufacturing Co.', 'Japan', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, location FROM factories WHERE industry40 = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 미국에서 개발된 창의적인 AI 애플리케이션은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE apps_us (app_id INT, name VARCHAR(255), category VARCHAR(255), country VARCHAR(255)); INSERT INTO apps_us (app_id, name, category, country) VALUES (1, 'App1', 'Creative', 'USA'), (2, 'App2', 'Safety', 'Canada'), (3, 'App3', 'Creative', 'USA'), (4, 'App4', 'Explainable', 'USA'), (5, 'App5', 'Creative', 'USA');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM apps_us WHERE category = 'Creative' AND country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 캘리포니아 주의 교육 부문에 대한 최소 예산 배정액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE state_budget (state VARCHAR(20), sector VARCHAR(20), allocation INT); INSERT INTO state_budget (state, sector, allocation) VALUES ('New York', 'Education', 12000), ('New York', 'Healthcare', 15000), ('California', 'Education', 10000), ('California', 'Healthcare', 18000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(allocation) FROM state_budget WHERE state = 'California' AND sector = 'Education';"
    },
    {
        "instruction": "입력 텍스트: 각 요리의 평균 평점을 찾아주세요.\n\nDDL statements:\nCREATE TABLE sales (sale_id INT, dish_id INT, sale_price DECIMAL(5,2), country VARCHAR(255)); INSERT INTO sales (sale_id, dish_id, sale_price, country) VALUES (1, 1, 9.99, 'USA'), (2, 3, 7.99, 'Mexico'), (3, 2, 12.99, 'USA'), (4, 3, 11.99, 'Mexico'), (5, 1, 10.99, 'USA'); CREATE TABLE dishes (dish_id INT, dish_name VARCHAR(255), cuisine VARCHAR(255)); INSERT INTO dishes (dish_id, dish_name, cuisine) VALUES (1, 'Quinoa Salad', 'Mediterranean'), (2, 'Chicken Caesar Wrap', 'Mediterranean'), (3, 'Tacos', 'Mexican'); CREATE TABLE feedback (feedback_id INT, dish_id INT, customer_id INT, rating INT, comment TEXT); INSERT INTO feedback (feedback_id, dish_id, customer_id, rating, comment) VALUES (1, 1, 1, 5, 'Delicious'), (2, 3, 2, 5, 'Great'), (3, 2, 3, 4, 'Okay');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT d.dish_name, AVG(f.rating) as avg_rating FROM dishes d INNER JOIN feedback f ON d.dish_id = f.dish_id GROUP BY d.dish_name;"
    },
    {
        "instruction": "입력 텍스트: 2022년 Q3 분기에 아시아 태평양 지역으로 군사 장비를 가장 많이 공급한 상위 2개 업체는 누구인가요?\n\nDDL statements:\nCREATE TABLE military_sales (id INT, supplier VARCHAR(50), region VARCHAR(20), quarter VARCHAR(10), year INT, quantity INT); INSERT INTO military_sales (id, supplier, region, quarter, year, quantity) VALUES (1, 'Supplier X', 'Asia-Pacific', 'Q3', 2022, 400); INSERT INTO military_sales (id, supplier, region, quarter, year, quantity) VALUES (2, 'Supplier Y', 'Asia-Pacific', 'Q3', 2022, 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT supplier, SUM(quantity) as total_quantity FROM military_sales WHERE region = 'Asia-Pacific' AND quarter = 'Q3' AND year = 2022 GROUP BY supplier ORDER BY total_quantity DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 새로운 해양 생물 종에 대한 기록을 'MarineLife' 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE MarineLife (id INT, species VARCHAR(50), population INT, last_sighting DATE); INSERT INTO MarineLife (id, species, population, last_sighting) VALUES (1, 'Shark', 500, '2019-01-01'), (2, 'Starfish', 3000, '2020-05-15'), (3, 'Jellyfish', 1500, '2018-12-27'), (4, 'Lionfish', 800, '2020-07-08');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO MarineLife (id, species, population, last_sighting) VALUES (5, 'Blue Whale', 2000, '2021-09-22');"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 여성 플레이어는 몇 명이며, 그들이 플레이한 게임의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), GamesPlayed INT, Country VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, COUNT(*) as FemalePlayers, SUM(GamesPlayed) as TotalGames FROM Players WHERE Gender = 'Female' GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: 2021년 모든 댐 유지보수 활동의 총 비용은 얼마입니까?\n\nDDL statements:\nCREATE TABLE DamMaintenance (MaintenanceID int, Year int, Cost decimal(10,2)); INSERT INTO DamMaintenance (MaintenanceID, Year, Cost) VALUES (1, 2021, 15000), (2, 2022, 20000), (3, 2021, 12000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Cost) FROM DamMaintenance WHERE Year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 차량 제조사별 평균 마력은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Vehicles (Id INT, Make VARCHAR(255), Model VARCHAR(255), Year INT, Horsepower INT); INSERT INTO Vehicles (Id, Make, Model, Year, Horsepower) VALUES (1, 'Toyota', 'Corolla', 2020, 139); INSERT INTO Vehicles (Id, Make, Model, Year, Horsepower) VALUES (2, 'Toyota', 'Camry', 2020, 203); INSERT INTO Vehicles (Id, Make, Model, Year, Horsepower) VALUES (3, 'Honda', 'Civic', 2020, 158);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Make, AVG(Horsepower) AS Avg_Horsepower FROM Vehicles GROUP BY Make;"
    },
    {
        "instruction": "입력 텍스트: 도시 지역에 있는 병원과 클리닉의 수를 주별로 그룹화하여 알려주세요.\n\nDDL statements:\nCREATE TABLE states (state_id INT PRIMARY KEY, state_name VARCHAR(50)); INSERT INTO states (state_id, state_name) VALUES (1, 'California'), (2, 'Texas'); CREATE TABLE facilities (facility_id INT PRIMARY KEY, facility_name VARCHAR(50), location VARCHAR(50), state_id INT, FOREIGN KEY (state_id) REFERENCES states(state_id)); INSERT INTO facilities (facility_id, facility_name, location, state_id) VALUES (1, 'General Hospital', 'urban', 1), (2, 'Downtown Clinic', 'urban', 1), (3, 'Rural Medical Center', 'rural', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.state_name, COUNT(f.facility_id) FROM states s INNER JOIN facilities f ON s.state_id = f.state_id WHERE f.location = 'urban' GROUP BY s.state_name;"
    },
    {
        "instruction": "입력 텍스트: 미국 메인 주에 있는 양식장은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE FishFarms (State TEXT, FarmName TEXT); INSERT INTO FishFarms (State, FarmName) VALUES ('Maine', 'Acadian Seaplants'), ('Maine', 'Cooke Aquaculture'), ('Maine', 'Maine Aquaculture Innovation Center'), ('Maine', 'Ocean Approved'), ('Maine', 'Springtide Seaweed'), ('Massachusetts', 'Atlantic Capes Fisheries'), ('Massachusetts', 'Barnstable Sea Farms'), ('Massachusetts', 'Cape Cod Shellfish'), ('Massachusetts', 'Freshwater Institute'), ('Vermont', 'Green Mountain Aquaculture');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM FishFarms WHERE State = 'Maine';"
    },
    {
        "instruction": "입력 텍스트: 1000kg 이상의 질량을 가진 위성을 발사한 국가와 그들의 최대 페이로드 질량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE heavy_satellites(satellite_id INT, name VARCHAR(50), country VARCHAR(50), launch_date DATE, launch_success BOOLEAN, payload_mass FLOAT); INSERT INTO heavy_satellites VALUES (1, 'HeavySat1', 'USA', '2000-01-01', true, 2000.5); INSERT INTO heavy_satellites VALUES (2, 'HeavySat2', 'USA', '2001-01-01', false, 1500.3); INSERT INTO heavy_satellites VALUES (3, 'HeavySat3', 'China', '2002-01-01', true, 2500.2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, MAX(payload_mass) as max_payload_mass FROM heavy_satellites WHERE payload_mass > 1000 GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 정신 건강 문제로 치료받은 환자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE RegionMentalHealth (RegionID int, PatientID int);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT RegionID, COUNT(PatientID) as PatientCount FROM RegionMentalHealth GROUP BY RegionID;"
    },
    {
        "instruction": "입력 텍스트: 각 구별 평균 일일 물 사용량을 가장 많은 것부터 적은 순으로 나열해주세요.\n\nDDL statements:\nCREATE TABLE districts (id INT, district_name VARCHAR(50), total_population INT, water_usage_gallons_per_day INT); INSERT INTO districts (id, district_name, total_population, water_usage_gallons_per_day) VALUES (1, 'Central', 50000, 1200000); INSERT INTO districts (id, district_name, total_population, water_usage_gallons_per_day) VALUES (2, 'North', 60000, 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT id, district_name, AVG(water_usage_gallons_per_day) as avg_water_usage, ROW_NUMBER() OVER (ORDER BY AVG(water_usage_gallons_per_day) DESC) as rank FROM districts GROUP BY id, district_name;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 동물 실험을 하지 않고 유기농인 화장품 제품의 평균 판매량으로 상위 3개 지역을 확인하세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, product_name VARCHAR(100), is_cruelty_free BOOLEAN, region VARCHAR(50), sales INT, launch_year INT, launch_quarter INT, is_organic BOOLEAN); INSERT INTO products (product_id, product_name, is_cruelty_free, region, sales, launch_year, launch_quarter, is_organic) VALUES (1, 'Lipstick', true, 'USA', 500, 2022, 2, true), (2, 'Mascara', false, 'Canada', 700, 2021, 4, true), (3, 'Foundation', true, 'USA', 800, 2022, 3, false), (4, 'Eyeshadow', true, 'USA', 600, 2021, 2, true), (5, 'Blush', false, 'Canada', 400, 2022, 1, true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(sales) AS avg_sales FROM products WHERE is_cruelty_free = true AND is_organic = true AND launch_year = 2022 GROUP BY region ORDER BY avg_sales DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 프랑스에서 저탄소 발자국을 가진 뷰티 제품의 총 매출과 거래 당 평균 매출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE beauty_products_france (low_carbon_footprint BOOLEAN, sale_date DATE, sales_quantity INT, unit_price DECIMAL(5,2)); INSERT INTO beauty_products_france (low_carbon_footprint, sale_date, sales_quantity, unit_price) VALUES (TRUE, '2022-01-01', 100, 20.99), (FALSE, '2022-01-01', 150, 15.99);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales_quantity * unit_price) AS total_sales, AVG(sales_quantity) AS avg_sales_per_transaction FROM beauty_products_france WHERE low_carbon_footprint = TRUE AND sale_date BETWEEN '2022-01-01' AND '2022-12-31';"
    },
    {
        "instruction": "입력 텍스트: 재고 목록에서 '사과'의 총 무게는 얼마입니까?\n\nDDL statements:\nCREATE TABLE inventory (item TEXT, weight INT); INSERT INTO inventory (item, weight) VALUES ('Apples', 2500), ('Bananas', 1800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(weight) FROM inventory WHERE item = 'Apples';"
    },
    {
        "instruction": "입력 텍스트: Brown Security'의 '무인 항공기' 프로젝트의 'start_date'를 현재 시작 날짜가 2024-01-01 이전이라면 2024-01-01로 변경하세요.\n\nDDL statements:\nCREATE TABLE BrownSecurityProjects(id INT, contractor VARCHAR(255), project VARCHAR(255), start_date DATE, end_date DATE);INSERT INTO BrownSecurityProjects(id, contractor, project, start_date, end_date) VALUES (1, 'Brown Security', 'Unmanned Aerial Vehicle', '2023-01-01', '2025-12-31');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE BrownSecurityProjects SET start_date = '2024-01-01' WHERE contractor = 'Brown Security' AND project = 'Unmanned Aerial Vehicle' AND start_date < '2024-01-01';"
    },
    {
        "instruction": "입력 텍스트: 2019년 각 주에서 시행된 물 보존 계획은 몇 개였습니까?\n\nDDL statements:\nCREATE TABLE conservation_initiatives (state VARCHAR(50), year INT, initiatives INT); INSERT INTO conservation_initiatives (state, year, initiatives) VALUES ('California', 2019, 10), ('Texas', 2019, 8), ('Florida', 2019, 7), ('Georgia', 2019, 6), ('New York', 2019, 5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.state, s.initiatives FROM conservation_initiatives s WHERE s.year = 2019;"
    },
    {
        "instruction": "입력 텍스트: 2018-01-01' 이전의 유효 날짜를 가진 policy 테이블의 모든 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE policy (policy_number INT, policy_type VARCHAR(255), effective_date DATE); INSERT INTO policy (policy_number, policy_type, effective_date) VALUES (1, 'Commercial Auto', '2018-01-01'); INSERT INTO policy (policy_number, policy_type, effective_date) VALUES (2, 'Home', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM policy WHERE effective_date < '2018-01-01';"
    },
    {
        "instruction": "입력 텍스트: 1000미터 이상 깊이에 있는 연구소가 2개 이상 있는 위치는 어디인가요?\n\nDDL statements:\nCREATE TABLE Locations ( id INT PRIMARY KEY, name VARCHAR(50), region VARCHAR(50), depth INT ); INSERT INTO Locations (id, name, region, depth) VALUES (1, 'Atlantis Trench', 'Atlantic Ocean', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT l.name FROM Locations l INNER JOIN Research_Stations r ON l.name = r.location WHERE l.depth > 1000 GROUP BY l.name HAVING COUNT(*) > 2;"
    },
    {
        "instruction": "입력 텍스트: 교육 분야에서 여성이 창업한 스타트업이 받은 총 자금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE startups(id INT, name TEXT, industry TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups (id, name, industry, founder_gender, funding) VALUES (1, 'EduWomen', 'Education', 'Female', 10000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(funding) FROM startups WHERE industry = 'Education' AND founder_gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 인도양에 있는 해양보호구역 중 최대 크기는 얼마인가요?\n\nDDL statements:\nCREATE TABLE marine_protected_areas (id INT, name VARCHAR(255), location VARCHAR(255), size FLOAT); INSERT INTO marine_protected_areas (id, name, location, size) VALUES (1, 'Area A', 'Indian Ocean', 100000); INSERT INTO marine_protected_areas (id, name, location, size) VALUES (2, 'Area B', 'Atlantic Ocean', 200000); INSERT INTO marine_protected_areas (id, name, location, size) VALUES (3, 'Area C', 'Indian Ocean', 300000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(size) FROM marine_protected_areas WHERE location = 'Indian Ocean';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 LA 지역의 주거 사용자들이 소비한 물의 총량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE ResidentialWaterUsage (UserID INT, Region VARCHAR(50), UsageVolume DECIMAL(10,2), UsageDate DATE); INSERT INTO ResidentialWaterUsage (UserID, Region, UsageVolume, UsageDate) VALUES (1, 'LA', 500, '2022-01-01'), (2, 'LA', 450, '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(UsageVolume) FROM ResidentialWaterUsage WHERE Region = 'LA' AND UsageDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"
    },
    {
        "instruction": "입력 텍스트: transportation_infrastructure' 테이블에서 완료된 프로젝트의 총 비용을 보여주세요.\n\nDDL statements:\nCREATE TABLE transportation_infrastructure (id INT, project_name VARCHAR(50), location VARCHAR(50), cost FLOAT, status VARCHAR(20)); INSERT INTO transportation_infrastructure (id, project_name, location, cost, status) VALUES (1, 'Bridge Construction', 'City U', 12000000.00, 'completed'), (2, 'Traffic Signal Upgrade', 'Region V', 500000.00, 'in_progress');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(cost) FROM transportation_infrastructure WHERE status = 'completed';"
    },
    {
        "instruction": "입력 텍스트: 파리에 있는 AI 기술을 도입한 호텔의 총 수익을 찾으세요.\n\nDDL statements:\nCREATE TABLE hotels (hotel_id INT, city TEXT, ai_adoption BOOLEAN, revenue FLOAT); INSERT INTO hotels (hotel_id, city, ai_adoption, revenue) VALUES (1, 'Paris', TRUE, 200.0), (2, 'London', FALSE, 150.0), (3, 'Paris', TRUE, 250.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue) FROM hotels WHERE city = 'Paris' AND ai_adoption = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 각 도시의 학교와 병원에 할당된 총 예산을 가장 높은 것부터 낮은 순으로 보여주세요.\n\nDDL statements:\nCREATE TABLE cities (city_id INT, city_name VARCHAR(255)); CREATE TABLE schools (school_id INT, school_name VARCHAR(255), city_id INT, budget INT); CREATE TABLE hospitals (hospital_id INT, hospital_name VARCHAR(255), city_id INT, budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.city_name, SUM(s.budget) as total_school_budget, SUM(h.budget) as total_hospital_budget FROM cities c LEFT JOIN schools s ON c.city_id = s.city_id LEFT JOIN hospitals h ON c.city_id = h.city_id GROUP BY c.city_name ORDER BY total_school_budget + total_hospital_budget DESC;"
    },
    {
        "instruction": "입력 텍스트: farms' 테이블에 있는 농장 중 최대 면적은 몇 에이커인가요?\n\nDDL statements:\nCREATE TABLE farms (id INT, name VARCHAR(255), acres INT); INSERT INTO farms (id, name, acres) VALUES (1, 'Smith Farm', 100), (2, 'Jones Farm', 200), (3, 'Brown Farm', 250);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(acres) as max_acres FROM farms;"
    },
    {
        "instruction": "입력 텍스트: 2020년 네오디뮴을 생산하는 상위 5개 업체의 평균 생산량(톤 단위)은 얼마입니까?\n\nDDL statements:\nCREATE TABLE producers (producer_id INT, name VARCHAR(100), element VARCHAR(10), quantity FLOAT, year INT); INSERT INTO producers (producer_id, name, element, quantity, year) VALUES (1, 'Bayan Obo Mine', 'Neodymium', 12000.0, 2020), (2, 'Mount Weld Mine', 'Neodymium', 3500.0, 2020), (3, 'Inner Mongolia Baotou Steel Rare-Earth', 'Neodymium', 9500.0, 2020), (4, 'Lynas Corporation', 'Neodymium', 6000.0, 2020), (5, 'China Minmetals Corporation', 'Neodymium', 7000.0, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(quantity) FROM (SELECT quantity, ROW_NUMBER() OVER (ORDER BY quantity DESC) rn FROM producers WHERE element = 'Neodymium' AND year = 2020) t WHERE rn <= 5;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 지역에서 발생한 정신 건강 동등 위반 사례는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE mental_health_parity (violation_id INT, violation_date DATE, region VARCHAR(20)); INSERT INTO mental_health_parity (violation_id, violation_date, region) VALUES (1, '2021-01-01', 'Northeast'), (2, '2021-02-01', 'Southeast'), (3, '2021-03-01', 'Northeast');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) as num_violations FROM mental_health_parity WHERE violation_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 프랑스의 순환 경제 이니셔티브 진행 상황은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE circular_economy (country VARCHAR(255), initiative VARCHAR(255), progress FLOAT); INSERT INTO circular_economy (country, initiative, progress) VALUES ('France', 'Recycling Program', 0.75);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT progress FROM circular_economy WHERE country = 'France' AND initiative = 'Recycling Program';"
    },
    {
        "instruction": "입력 텍스트: 출석률이 가장 높은 교육 프로그램은 무엇인가요?\n\nDDL statements:\nCREATE TABLE education_programs (id INT, name VARCHAR(50), attendance INT); CREATE VIEW program_attendance AS SELECT name, MAX(attendance) FROM education_programs GROUP BY name;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name FROM education_programs WHERE attendance = (SELECT MAX(attendance) FROM education_programs);"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 화물 운송 비용이 가장 높은 국가는 어디인가요?\n\nDDL statements:\nCREATE TABLE freight_expenses (country VARCHAR(255), amount DECIMAL(10,2), quarter INT, year INT); INSERT INTO freight_expenses (country, amount, quarter, year) VALUES ('USA', 5000.00, 1, 2022), ('Canada', 3500.00, 1, 2022), ('Mexico', 2800.00, 1, 2022);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(amount) as total_expenses FROM freight_expenses WHERE quarter = 1 AND year = 2022 GROUP BY country ORDER BY total_expenses DESC;"
    },
    {
        "instruction": "입력 텍스트: 노스이스트 지역에서 판매된 해산물의 최소 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE sales (id INT, location VARCHAR(20), quantity INT, price DECIMAL(5,2)); INSERT INTO sales (id, location, quantity, price) VALUES (1, 'Northeast', 50, 12.99), (2, 'Midwest', 75, 19.99), (3, 'West', 35, 14.49);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(quantity) FROM sales WHERE location = 'Northeast';"
    },
    {
        "instruction": "입력 텍스트: 도움을 가장 많이 기록한 상위 3명의 선수를 내림차순으로 찾으세요.\n\nDDL statements:\nCREATE TABLE players (player_id INT, name VARCHAR(50), age INT, position VARCHAR(50), team VARCHAR(50), assists INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, assists FROM (SELECT name, SUM(assists) AS assists FROM players GROUP BY name) AS subquery ORDER BY assists DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년 영국의 군인 총 인원수는 얼마였나요?\n\nDDL statements:\nCREATE TABLE military_personnel (id INT, country VARCHAR(255), year INT, personnel INT); INSERT INTO military_personnel (id, country, year, personnel) VALUES (1, 'United Kingdom', 2018, 180000), (2, 'United Kingdom', 2019, 185000), (3, 'United Kingdom', 2020, 182000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(personnel) FROM military_personnel WHERE country = 'United Kingdom' AND year IN (2019, 2020);"
    },
    {
        "instruction": "입력 텍스트: 바이오테크 스타트업들의 누적 자금 조달액은 얼마인가요?\n\nDDL statements:\nCREATE SCHEMA if not exists biotech;CREATE TABLE if not exists biotech.startups (id INT, name VARCHAR(255), country VARCHAR(255), funding_amount DECIMAL(10,2)); INSERT INTO biotech.startups (id, name, country, funding_amount) VALUES (1, 'Genetix', 'USA', 2000000.00), (2, 'BioSense', 'Canada', 1500000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT id, name, country, SUM(funding_amount) OVER (ORDER BY id) cumulative_funding FROM biotech.startups;"
    },
    {
        "instruction": "입력 텍스트: 북미 지역의 각 해운 회사가 운송한 화물의 총 중량은 얼마이며, 화물을 운송하지 않은 회사를 포함한 수치인가요?\n\nDDL statements:\nCREATE TABLE shipping_lines(line_id INT, line_name TEXT, region TEXT);CREATE TABLE cargo(cargo_id INT, line_id INT, tonnage INT);INSERT INTO shipping_lines VALUES (1,'Line A','North America'),(2,'Line B','North America'),(3,'Line C','Asia');INSERT INTO cargo VALUES (1,1,500),(2,1,800),(3,2,300);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT s.line_name, COALESCE(SUM(c.tonnage), 0) as total_tonnage FROM shipping_lines s LEFT JOIN cargo c ON s.line_id = c.line_id WHERE s.region = 'North America' GROUP BY s.line_name;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서의 교통 프로젝트 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE infrastructure_projects (id INT, project_name VARCHAR(50), location VARCHAR(50), category VARCHAR(50)); INSERT INTO infrastructure_projects (id, project_name, location, category) VALUES (1, 'Light Rail Transit', 'Toronto', 'Transportation'), (2, 'Highway Expansion', 'Montreal', 'Transportation'), (3, 'Bridge Construction', 'Quebec', 'Transportation'), (4, 'Water Treatment Plant', 'Ottawa', 'Utilities');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) as num_transportation_projects FROM infrastructure_projects WHERE category = 'Transportation' AND location = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: 시카고 창고에서 해상 운송을 통해 아프리카로 보낸 화물의 평균 배송 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Warehouse (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO Warehouse (id, name, location) VALUES (1, 'Chicago', 'USA'); CREATE TABLE Shipment (id INT, warehouse_id INT, region VARCHAR(50), delivery_time INT, freight_type VARCHAR(50)); INSERT INTO Shipment (id, warehouse_id, region, delivery_time, freight_type) VALUES (1, 1, 'Africa', 30, 'Sea'), (2, 1, 'Africa', 25, 'Air'), (3, 1, 'Europe', 15, 'Sea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(delivery_time) FROM Shipment WHERE warehouse_id = (SELECT id FROM Warehouse WHERE location = 'Chicago') AND region = 'Africa' AND freight_type = 'Sea';"
    },
    {
        "instruction": "입력 텍스트: 캐나다에서 만들어진 동물 실험을 하지 않는 화장품의 수를 세어보세요.\n\nDDL statements:\nCREATE TABLE cosmetics (id INT, name TEXT, is_cruelty_free BOOLEAN, country TEXT); INSERT INTO cosmetics (id, name, is_cruelty_free, country) VALUES (1, 'Lipstick', true, 'Canada'); INSERT INTO cosmetics (id, name, is_cruelty_free, country) VALUES (2, 'Eyeshadow', false, 'Canada'); INSERT INTO cosmetics (id, name, is_cruelty_free, country) VALUES (3, 'Mascara', true, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM cosmetics WHERE is_cruelty_free = true AND country = 'Canada';"
    },
    {
        "instruction": "입력 텍스트: Navigation' 별자리에 있는 독일 위성은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE Satellites (satellite_id INT, name VARCHAR(255), country VARCHAR(255), altitude FLOAT, constellation VARCHAR(255)); INSERT INTO Satellites (satellite_id, name, country, altitude, constellation) VALUES (1, 'Galileo-1', 'Germany', 23222, 'Navigation'), (2, 'TerraSAR-X', 'Germany', 514, 'Earth Observation'), (3, 'TanDEM-X', 'Germany', 514, 'Earth Observation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Satellites WHERE constellation = 'Navigation' AND country = 'Germany';"
    },
    {
        "instruction": "입력 텍스트: 2021년에 가장 많이 판매된 상위 3개의 군사 장비 유형은 무엇인가요?\n\nDDL statements:\nCREATE TABLE MilitaryEquipmentSales (Id INT, EquipmentType VARCHAR(255), Quantity INT, SaleDate DATE); INSERT INTO MilitaryEquipmentSales (Id, EquipmentType, Quantity, SaleDate) VALUES (3, 'Warships', 30, '2021-01-01'); INSERT INTO MilitaryEquipmentSales (Id, EquipmentType, Quantity, SaleDate) VALUES (4, 'Armored Vehicles', 40, '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EquipmentType, SUM(Quantity) as TotalSales, ROW_NUMBER() OVER (ORDER BY SUM(Quantity) DESC) as Rank FROM MilitaryEquipmentSales WHERE YEAR(SaleDate) = 2021 GROUP BY EquipmentType HAVING SUM(Quantity) >= (SELECT SUM(Quantity) FROM MilitaryEquipmentSales WHERE YEAR(SaleDate) = 2021 GROUP BY EquipmentType ORDER BY SUM(Quantity) DESC LIMIT 1 OFFSET 2) ORDER BY TotalSales DESC;"
    },
    {
        "instruction": "입력 텍스트: 유럽 연합 출신 고객들로부터 지난 1년간 로밍 서비스로 발생한 총 수익을 찾아주세요.\n\nDDL statements:\nCREATE TABLE roaming_revenue (revenue_id INT, revenue_amount FLOAT, roaming_date DATE, customer_region TEXT); INSERT INTO roaming_revenue (revenue_id, revenue_amount, roaming_date, customer_region) VALUES (1, 4000, '2022-02-01', 'European Union');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(revenue_amount) FROM roaming_revenue WHERE roaming_date >= DATEADD(year, -1, CURRENT_DATE) AND customer_region = 'European Union';"
    },
    {
        "instruction": "입력 텍스트: crime_statistics' 테이블에서 'crime_type'이 'Burglary'이고 'date'가 '2022-06-14'인 레코드의 'status' 컬럼을 'Solved'로 표시하십시오.\n\nDDL statements:\nCREATE TABLE crime_statistics (crime_type VARCHAR(255), crime_count INT, date DATE, status VARCHAR(255)); INSERT INTO crime_statistics (crime_type, crime_count, date, status) VALUES (NULL, NULL, NULL, NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE crime_statistics SET status = 'Solved' WHERE crime_type = 'Burglary' AND date = '2022-06-14';"
    },
    {
        "instruction": "입력 텍스트: 플로리다 주에서 하루 물 소비량이 2,500,000리터를 초과하는 정수장은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE WaterTreatmentPlants (plant_id INT, state VARCHAR(20), water_consumption_per_day FLOAT); INSERT INTO WaterTreatmentPlants (plant_id, state, water_consumption_per_day) VALUES (1, 'Florida', 2500000), (2, 'Florida', 1500000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM WaterTreatmentPlants WHERE state = 'Florida' AND water_consumption_per_day > 2500000;"
    },
    {
        "instruction": "입력 텍스트: 각 스포츠별 선수들의 평균 나이가 어떻게 되며, 평균 나이 순으로 정렬해주세요.\n\nDDL statements:\nCREATE TABLE athletes (athlete_id INT, name VARCHAR(50), age INT, sport VARCHAR(30)); INSERT INTO athletes (athlete_id, name, age, sport) VALUES (1, 'John Doe', 25, 'Basketball'), (2, 'Jane Smith', 30, 'Soccer');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT sport, AVG(age) as avg_age FROM athletes GROUP BY sport ORDER BY avg_age;"
    },
    {
        "instruction": "입력 텍스트: 특정 IP 주소와 관련된 모든 사이버 보안 사건의 위협 수준을 업데이트하세요.\n\nDDL statements:\n CREATE TABLE IPIncidentThreatLevel (IncidentID INT, IncidentIP VARCHAR(50), ThreatLevel INT); INSERT INTO IPIncidentThreatLevel (IncidentID, IncidentIP, ThreatLevel) VALUES (1, '192.168.1.1', 3), (2, '10.0.0.1', 5), (3, '172.16.0.1', 4), (4, '172.31.0.1', 2), (5, '10.1.1.1', 3), (6, '172.16.1.1', 5), (7, '172.31.1.1', 5), (8, '10.0.1.1', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE IPIncidentThreatLevel SET ThreatLevel = 6 WHERE IncidentIP = '10.0.0.1';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 기부자 수를 찾으세요.\n\nDDL statements:\nCREATE TABLE donors (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO donors (id, name, country) VALUES (1, 'John Doe', 'USA'); INSERT INTO donors (id, name, country) VALUES (2, 'Jane Smith', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(*) as num_donors FROM donors GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 남성 직원들의 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), Salary FLOAT); INSERT INTO Employees (EmployeeID, Gender, Salary) VALUES (1, 'Female', 75000.0), (2, 'Male', 80000.0), (3, 'Male', 85000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM Employees WHERE Gender = 'Male';"
    },
    {
        "instruction": "입력 텍스트: 바이오센서 테이블에 민감도 0.99 및 특이도 0.99를 가진 새로운 바이오센서 기록을 추가하세요.\n\nDDL statements:\nCREATE TABLE biosensors (id INT, name VARCHAR(50), type VARCHAR(50), sensitivity FLOAT, specificity FLOAT, company_name VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO biosensors (id, name, type, sensitivity, specificity, company_name) VALUES (4, 'BioPH', 'pH', 0.99, 0.99, 'BioCorp');"
    },
    {
        "instruction": "입력 텍스트: 아프리카에 있는 녹색 건물의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Green_Buildings (id INT, region VARCHAR(20), number_of_buildings INT); INSERT INTO Green_Buildings (id, region, number_of_buildings) VALUES (1, 'Europe', 5000), (2, 'Asia', 7000), (3, 'Africa', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(number_of_buildings) FROM Green_Buildings WHERE region = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 뉴욕에 있는 휠체어 접근이 불가능한 기차역을 찾으세요.\n\nDDL statements:\nCREATE TABLE Railway_stations (Name VARCHAR(255), Wheelchair_accessible BOOLEAN, State VARCHAR(255)); INSERT INTO Railway_stations (Name, Wheelchair_accessible, State) VALUES ('Penn Station', FALSE, 'New York');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name FROM Railway_stations WHERE Wheelchair_accessible = FALSE AND State = 'New York';"
    },
    {
        "instruction": "입력 텍스트: Customers' 테이블에서 ID가 'C1001'인 고객 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE Customers (CustomerID VARCHAR(5), Name VARCHAR(20), City VARCHAR(20), State VARCHAR(10), ZipCode VARCHAR(10)); INSERT INTO Customers (CustomerID, Name, City, State, ZipCode) VALUES ('C1001', 'John', 'Chicago', 'IL', '60601'), ('C1002', 'Jane', 'New York', 'NY', '10001');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Customers WHERE CustomerID = 'C1001';"
    },
    {
        "instruction": "입력 텍스트: 각 네트워크에서 제작된 코미디 장르의 TV 프로그램은 몇 개입니까?\n\nDDL statements:\nCREATE TABLE networks (id INT, name TEXT); CREATE TABLE shows (id INT, title TEXT, genre TEXT, network_id INT); INSERT INTO networks (id, name) VALUES (1, 'Network A'), (2, 'Network B'); INSERT INTO shows (id, title, genre, network_id) VALUES (1, 'Show 1', 'Comedy', 1), (2, 'Show 2', 'Drama', 1), (3, 'Show 3', 'Comedy', 2), (4, 'Show 4', 'Action', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT networks.name, COUNT(shows.id) as num_shows FROM networks JOIN shows ON networks.id = shows.network_id WHERE shows.genre = 'Comedy' GROUP BY networks.name;"
    },
    {
        "instruction": "입력 텍스트: 어떤 지역사회 보건 근로자가 문화 역량 점수가 가장 낮은가요?\n\nDDL statements:\nCREATE TABLE community_health_workers (id INT, name VARCHAR(50), cultural_competency_score INT); INSERT INTO community_health_workers (id, name, cultural_competency_score) VALUES (1, 'John Doe', 90), (2, 'Jane Smith', 85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, cultural_competency_score, RANK() OVER (ORDER BY cultural_competency_score ASC) as rank FROM community_health_workers;"
    },
    {
        "instruction": "입력 텍스트: 중동 지역 개발자들이 실행한 Solana 및 Algorand 스마트 계약의 초당 최대 거래 횟수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Smart_Contracts (Contract_ID INT, Transactions_Per_Second DECIMAL(10,2), Developer_Location VARCHAR(50), Blockchain VARCHAR(50)); INSERT INTO Smart_Contracts (Contract_ID, Transactions_Per_Second, Developer_Location, Blockchain) VALUES (1, 6500.00, 'UAE', 'Solana'), (2, 1000.00, 'Saudi Arabia', 'Algorand');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Blockchain, MAX(Transactions_Per_Second) FROM Smart_Contracts WHERE Developer_Location = 'Middle East' GROUP BY Blockchain;"
    },
    {
        "instruction": "입력 텍스트: 남미 지역에서 유기농 뷰티 제품에 대한 소비자 선호도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE sales_data (sale_id INT, product_id INT, country VARCHAR(50), is_organic BOOLEAN, sale_date DATE, revenue DECIMAL(10,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, YEAR(sale_date) as year, MONTH(sale_date) as month, 100.0 * SUM(CASE WHEN is_organic THEN revenue ELSE 0 END) / SUM(revenue) as organic_preference FROM sales_data WHERE sale_date >= '2018-01-01' AND country LIKE 'South America%' GROUP BY country, year, month;"
    },
    {
        "instruction": "입력 텍스트: 2023-03-15'에 정비 이벤트가 있었던 모든 노선을 나열합니다.\n\nDDL statements:\nCREATE TABLE routes (route_id INT, route_name VARCHAR(20)); CREATE TABLE vehicle_maintenance (maintenance_id INT, route_id INT, maintenance_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT routes.route_name FROM routes JOIN vehicle_maintenance ON routes.route_id = vehicle_maintenance.route_id WHERE vehicle_maintenance.maintenance_date = '2023-03-15';"
    },
    {
        "instruction": "입력 텍스트: 우주 임무에 참여한 모든 우주비행사와 그들의 의료 기록을 나열하시오.\n\nDDL statements:\nCREATE TABLE Astronauts (id INT, name VARCHAR(255), age INT); CREATE TABLE SpaceMissions (id INT, astronaut_id INT, mission VARCHAR(255)); CREATE TABLE MedicalRecords (id INT, astronaut_id INT, medical_condition VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Astronauts.name, SpaceMissions.mission, MedicalRecords.medical_condition FROM Astronauts INNER JOIN SpaceMissions ON Astronauts.id = SpaceMissions.astronaut_id INNER JOIN MedicalRecords ON Astronauts.id = MedicalRecords.astronaut_id;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 총 기부금액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE donations_country (donation_id INT, donor_id INT, donation_amount DECIMAL, donor_country TEXT); INSERT INTO donations_country (donation_id, donor_id, donation_amount, donor_country) VALUES (1, 1, 150.00, 'Canada'), (2, 2, 50.00, 'USA'), (3, 1, 200.00, 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT donor_country, SUM(donation_amount) FROM donations_country GROUP BY donor_country;"
    },
    {
        "instruction": "입력 텍스트: energy_storage' 테이블에서 'technology'가 '리튬이온'인 경우 'capacity_mw' 값을 30으로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE energy_storage (id INT PRIMARY KEY, technology VARCHAR(255), capacity_mw FLOAT, country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE energy_storage SET capacity_mw = 30 WHERE technology = 'Lithium-ion';"
    },
    {
        "instruction": "입력 텍스트: social_equity_trends' 테이블에 'Oregon' 주를 위한 새로운 기록을 diversity_score 90으로 삽입하세요.\n\nDDL statements:\nCREATE TABLE social_equity_trends (id INT, state VARCHAR(20), diversity_score INT); INSERT INTO social_equity_trends (id, state, diversity_score) VALUES (1, 'California', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO social_equity_trends (state, diversity_score) VALUES ('Oregon', 90);"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달간 경보의 최대 위협 수준은 무엇인가요?\n\nDDL statements:\nCREATE TABLE threat_intelligence (id INT, country VARCHAR(50), alert_date DATE, alert_level INT); INSERT INTO threat_intelligence (id, country, alert_date, alert_level) VALUES (1, 'X', '2022-01-05', 3), (2, 'Y', '2022-01-07', 4), (3, 'X', '2022-01-10', 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(alert_level) FROM threat_intelligence WHERE alert_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"
    },
    {
        "instruction": "입력 텍스트: Life' 유형의 보험 정책에 대한 청구 금액을 null로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Policy (PolicyID INT, PolicyType VARCHAR(50)); INSERT INTO Policy VALUES (1, 'Auto'), (2, 'Home'), (3, 'Life'); CREATE TABLE Claims (ClaimID INT, PolicyID INT, ClaimAmount DECIMAL(10,2)); INSERT INTO Claims VALUES (1, 1, 500.00), (2, 1, 200.00), (3, 2, 750.00), (4, 3, 15000.00), (5, 1, 300.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Claims SET ClaimAmount = NULL WHERE PolicyID IN (SELECT PolicyID FROM Policy WHERE PolicyType = 'Life');"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 도시 구역에서 가장 많은 커뮤니티 참여를 보인 상위 세 가지 재난 대비 활동을 확인하세요.\n\nDDL statements:\nCREATE TABLE CityWards (WardID INT, WardName VARCHAR(255)); CREATE TABLE DisasterPreparednessActivities (ActivityID INT, Activity VARCHAR(255)); CREATE TABLE CommunityParticipation (ParticipationID INT, ActivityID INT, WardID INT, ParticipationDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT WardName, Activity, COUNT(ParticipationID) as ParticipationCount FROM CommunityParticipation cp JOIN CityWards w ON cp.WardID = w.WardID JOIN DisasterPreparednessActivities a ON cp.ActivityID = a.ActivityID WHERE cp.ParticipationDate >= DATEADD(year, -1, GETDATE()) GROUP BY WardName, Activity ORDER BY WardName, ParticipationCount DESC;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에서의 최소 매립지 용량은 기가톤 단위로 얼마입니까?\n\nDDL statements:\nCREATE TABLE landfill_capacity (id INT, state VARCHAR(20), capacity FLOAT); INSERT INTO landfill_capacity (id, state, capacity) VALUES (1, 'Texas', 50.1), (2, 'California', 70.2), (3, 'Texas', 45.9);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(capacity) FROM landfill_capacity WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 4월에 모든 처리 시설에서 처리되지 않은 폐수의 비율은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wastewater_treatment(plant_id INT, treated_volume FLOAT, not_treated_volume FLOAT, month DATE); INSERT INTO wastewater_treatment(plant_id, treated_volume, not_treated_volume, month) VALUES (1, 10000, 2000, '2022-04-01'), (2, 15000, 3000, '2022-04-01'), (3, 12000, 1500, '2022-04-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * SUM(not_treated_volume) / (SUM(treated_volume) + SUM(not_treated_volume)) AS percentage FROM wastewater_treatment WHERE month = '2022-04-01';"
    },
    {
        "instruction": "입력 텍스트: 아나다코 분지와 바넷 셰일에 있는 가스 우물의 평균 생산률은 얼마인가요?\n\nDDL statements:\nCREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), production_rate DECIMAL(5,2)); INSERT INTO wells (id, region, well_type, production_rate) VALUES (1, 'Anadarko Basin', 'Gas', 75.0), (2, 'Anadarko Basin', 'Oil', 100.0), (3, 'Barnett Shale', 'Gas', 90.0), (4, 'Barnett Shale', 'Oil', 120.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_rate) as avg_gas_production_rate FROM wells WHERE region IN ('Anadarko Basin', 'Barnett Shale') AND well_type = 'Gas';"
    },
    {
        "instruction": "입력 텍스트: 샌프란시스코에 있는 레스토랑의 메뉴 항목과 그 가격은 무엇인가요?\n\nDDL statements:\nCREATE TABLE Restaurants (RestaurantID INT, Name VARCHAR(50), Location VARCHAR(50)); CREATE TABLE MenuItems (MenuItemID INT, RestaurantID INT, Name VARCHAR(50), Price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MenuItems.Name, MenuItems.Price FROM MenuItems JOIN Restaurants ON MenuItems.RestaurantID = Restaurants.RestaurantID WHERE Restaurants.Location = 'San Francisco';"
    },
    {
        "instruction": "입력 텍스트: 북해에서 각 운영 유형별로 등록된 선박은 몇 척인가요?\n\nDDL statements:\nCREATE TABLE vessels (id INT, name TEXT, type TEXT, region TEXT); INSERT INTO vessels (id, name, type, region) VALUES (1, 'Fishing Vessel 1', 'Fishing', 'North Sea'), (2, 'Research Vessel 1', 'Research', 'North Sea'), (3, 'Tourist Vessel 1', 'Tourism', 'Mediterranean Sea'), (4, 'Fishing Vessel 2', 'Fishing', 'North Sea'), (5, 'Research Vessel 2', 'Research', 'North Sea'), (6, 'Tourist Vessel 2', 'Tourism', 'Mediterranean Sea');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT type, COUNT(type) FROM vessels WHERE region = 'North Sea' GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스 내 특정 학교들의 접근성 등급을 업데이트하세요.\n\nDDL statements:\nCREATE TABLE schools (id INT, name VARCHAR(255), accessibility_rating INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE schools SET accessibility_rating = 5 WHERE id IN (101, 103, 105);"
    },
    {
        "instruction": "입력 텍스트: feeds' 테이블에 있는 모든 어종과 해당하는 사료 전환 비율을 나열하세요.\n\nDDL statements:\nCREATE TABLE feeds (id INT, fish_species TEXT, feed_conversion_ratio FLOAT); INSERT INTO feeds (id, fish_species, feed_conversion_ratio) VALUES (1, 'Salmon', 1.2); INSERT INTO feeds (id, fish_species, feed_conversion_ratio) VALUES (2, 'Tilapia', 1.5);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT fish_species, feed_conversion_ratio FROM feeds;"
    },
    {
        "instruction": "입력 텍스트: 2020년에 미국에서 여성 소유 및 소수 민족 소유 기업에 수여된 방위 계약은 계약 유형별로 얼마나 되나요?\n\nDDL statements:\nCREATE TABLE defense_contracts (contract_id INT, contract_type VARCHAR(255), contract_amount DECIMAL(10,2), contract_date DATE, business_owner VARCHAR(255)); INSERT INTO defense_contracts (contract_id, contract_type, contract_amount, contract_date, business_owner) VALUES (1, 'Services', 600000.00, '2020-03-01', 'Women-Owned'); INSERT INTO defense_contracts (contract_id, contract_type, contract_amount, contract_date, business_owner) VALUES (2, 'Equipment', 800000.00, '2020-07-15', 'Minority-Owned');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT contract_type, SUM(contract_amount) FROM defense_contracts WHERE contract_date BETWEEN '2020-01-01' AND '2020-12-31' AND business_owner IN ('Women-Owned', 'Minority-Owned') GROUP BY contract_type;"
    },
    {
        "instruction": "입력 텍스트: CulturalEvents' 테이블에서 문화 행사가 가장 많은 상위 3개 국가를 찾으세요.\n\nDDL statements:\nCREATE TABLE CulturalEvents (id INT, name VARCHAR(100), location VARCHAR(100), date DATE, type VARCHAR(50), PRIMARY KEY (id));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, COUNT(*) AS event_count FROM CulturalEvents GROUP BY location ORDER BY event_count DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 유럽' 지역에서 AI 기술을 도입한 호텔은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE hotel_ai_adoption (hotel_id INT, hotel_name TEXT, region TEXT, ai_adoption BOOLEAN); INSERT INTO hotel_ai_adoption (hotel_id, hotel_name, region, ai_adoption) VALUES (1, 'Hotel E', 'Europe', TRUE), (2, 'Hotel F', 'Europe', FALSE), (3, 'Hotel G', 'Europe', TRUE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hotel_ai_adoption WHERE region = 'Europe' AND ai_adoption = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 여름 2021' 컬렉션의 의류 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE garment_prices (collection VARCHAR(20), garment_name VARCHAR(30), price INT); INSERT INTO garment_prices (collection, garment_name, price) VALUES ('Summer 2021', 'Linen Shirt', 60), ('Summer 2021', 'Jeans', 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM garment_prices WHERE collection = 'Summer 2021';"
    },
    {
        "instruction": "입력 텍스트: 소셜 미디어 스키마에서 최소 한 번 이상 게시한 적이 있고 팔로워가 100명 이상인 사용자들의 총 게시물 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, name VARCHAR(50), posts_count INT, followers INT); CREATE TABLE posts (id INT, user_id INT, post_text VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(posts_count) FROM users JOIN posts ON users.id = posts.user_id WHERE posts_count > 0 AND followers > 100;"
    },
    {
        "instruction": "입력 텍스트: 장난감' 카테고리의 제품 중 최소 수량을 보여주세요.\n\nDDL statements:\nCREATE TABLE products (product_id INT, category VARCHAR(20), quantity INT); INSERT INTO products (product_id, category, quantity) VALUES (1, 'toys', 5), (2, 'toys', 10), (3, 'toys', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(quantity) FROM products WHERE category = 'toys';"
    },
    {
        "instruction": "입력 텍스트: 북미에서 탄소 배출량을 최소 35만 톤 이상 감소시킨 커뮤니케이션 전략을 찾아주세요.\n\nDDL statements:\nCREATE TABLE communication_strategies (strategy VARCHAR(50), location VARCHAR(50), reduction_emissions INT); INSERT INTO communication_strategies (strategy, location, reduction_emissions) VALUES ('Public transportation campaigns', 'North America', 400000), ('Tree planting drives', 'North America', 300000), ('Solar energy awareness programs', 'North America', 350000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT strategy, reduction_emissions FROM communication_strategies WHERE location = 'North America' AND reduction_emissions >= 350000;"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 거주하는 홈 보험 가입자들의 평균 보험료는 얼마인가요?\n\nDDL statements:\nCREATE TABLE policyholders (id INT, name VARCHAR(255), state VARCHAR(255), policy_type VARCHAR(255), premium FLOAT); INSERT INTO policyholders (id, name, state, policy_type, premium) VALUES (1, 'John Doe', 'New York', 'Auto', 1200), (2, 'Jane Smith', 'California', 'Home', 2000), (3, 'Bob Johnson', 'California', 'Auto', 1500), (4, 'Alice Williams', 'California', 'Auto', 1800), (5, 'Charlie Brown', 'Texas', 'Home', 2500), (6, 'Lucy Van Pelt', 'Texas', 'Auto', 1000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(premium) FROM policyholders WHERE state = 'Texas' AND policy_type = 'Home';"
    },
    {
        "instruction": "입력 텍스트: 베테랑 아이디가 456이고, 직무명이 '소프트웨어 엔지니어', 직무 시작 날짜가 '2021-06-01'인 베테랑에 대한 새로운 기록을 veteran_employment 테이블에 추가하세요.\n\nDDL statements:\nCREATE TABLE veteran_employment (veteran_id INT, job_title VARCHAR(50), job_start_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO veteran_employment (veteran_id, job_title, job_start_date) VALUES (456, 'Software Engineer', '2021-06-01');"
    },
    {
        "instruction": "입력 텍스트: EMEA' 지역에서 모바일 키 기술을 도입한 호텔의 총 수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE hotel_tech (hotel_id INT, hotel_name TEXT, region TEXT, mobile_key BOOLEAN); INSERT INTO hotel_tech (hotel_id, hotel_name, region, mobile_key) VALUES (1, 'Hotel X', 'EMEA', true), (2, 'Hotel Y', 'EMEA', true), (3, 'Hotel Z', 'EMEA', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM hotel_tech WHERE region = 'EMEA' AND mobile_key = true;"
    },
    {
        "instruction": "입력 텍스트: 각 원인별 기부자 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), DonationAmount decimal(10,2), CauseID int); CREATE TABLE Causes (CauseID int, CauseName varchar(50)); INSERT INTO Donors (DonorID, DonorName, DonationAmount, CauseID) VALUES (1, 'John Doe', 1000, 1), (2, 'Jane Smith', 2000, 2), (3, 'Mike Johnson', 3000, 3), (4, 'Sara Connor', 500, 1), (5, 'David Lee', 1500, 2); INSERT INTO Causes (CauseID, CauseName) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.CauseName, COUNT(DISTINCT d.DonorID) as NumberOfDonors FROM Donors d JOIN Causes c ON d.CauseID = c.CauseID GROUP BY c.CauseName;"
    },
    {
        "instruction": "입력 텍스트: \"reporters\" 테이블에 있는 각 기자가 발행한 뉴스 기사의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, country VARCHAR(50)); CREATE TABLE published_stories (reporter_id INT, news_id INT); CREATE TABLE news (id INT, title VARCHAR(100), views INT, date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.name, COUNT(*) AS total_stories FROM reporters r INNER JOIN published_stories ps ON r.id = ps.reporter_id INNER JOIN news n ON ps.news_id = n.id GROUP BY r.name;"
    },
    {
        "instruction": "입력 텍스트: 남미의 각 기후 적응 프로젝트에서 평균적으로 감소된 이산화탄소 배출량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE climate_adaptation (project_name VARCHAR(255), region VARCHAR(255), co2_reduction_tonnes INT); INSERT INTO climate_adaptation (project_name, region, co2_reduction_tonnes) VALUES ('Coastal Protection', 'South America', 2000); INSERT INTO climate_adaptation (project_name, region, co2_reduction_tonnes) VALUES ('Water Management', 'South America', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(co2_reduction_tonnes) as avg_co2_reduction FROM climate_adaptation WHERE region = 'South America' GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 각 원인별로 기부금 총액이 얼마인지, 기부금과 원인 테이블을 조인하여 알려주세요.\n\nDDL statements:\nCREATE TABLE causes (id INT, name VARCHAR(255)); INSERT INTO causes (id, name) VALUES (1, 'Education'), (2, 'Health'); CREATE TABLE donations (id INT, cause_id INT, amount DECIMAL(10, 2)); INSERT INTO donations (id, cause_id, amount) VALUES (1, 1, 500), (2, 1, 250), (3, 2, 750);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.name, SUM(d.amount) as total_donation FROM causes c JOIN donations d ON c.id = d.cause_id GROUP BY c.name;"
    },
    {
        "instruction": "입력 텍스트: OilRigs' 테이블에 다음 데이터에 대한 새로운 레코드를 삽입하세요: (RigID, 위치, 상태, 유형) - ('Rig02', '바렌츠 해', '비활성', '해상'), ('Rig03', '북해', '가동 중', '육상')\n\nDDL statements:\nCREATE TABLE OilRigs (RigID VARCHAR(10), Location VARCHAR(20), Status VARCHAR(20), Type VARCHAR(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO OilRigs (RigID, Location, Status, Type) VALUES ('Rig02', 'Barents Sea', 'Inactive', 'Offshore'), ('Rig03', 'North Sea', 'Operational', 'Onshore');"
    },
    {
        "instruction": "입력 텍스트: food_safety_violations' 테이블에서 'violation_description'이 'Improper food temperature'인 모든 기록을 삭제하세요.\n\nDDL statements:\nCREATE TABLE food_safety_violations (id INT, restaurant_name TEXT, violation_date DATE, violation_description TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM food_safety_violations WHERE violation_description = 'Improper food temperature';"
    },
    {
        "instruction": "입력 텍스트: 호주에서 조울증을 앓고 있는 환자 중 전기경련요법을 받은 환자의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE patients (id INT, condition VARCHAR(50), country VARCHAR(50)); INSERT INTO patients (id, condition, country) VALUES (1, 'Anxiety', 'Australia'), (2, 'Bipolar Disorder', 'Australia'), (3, 'Depression', 'Australia'), (4, 'Anxiety', 'USA'); CREATE TABLE treatments (id INT, patient_id INT, treatment VARCHAR(50)); INSERT INTO treatments (id, patient_id, treatment) VALUES (1, 1, 'Medication'), (2, 2, 'Electroconvulsive Therapy'), (3, 3, 'Talk Therapy'), (4, 4, 'Medication');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patients WHERE country = 'Australia' AND condition = 'Bipolar Disorder')) AS percentage FROM treatments INNER JOIN patients ON treatments.patient_id = patients.id WHERE patients.country = 'Australia' AND patients.condition = 'Bipolar Disorder' AND treatments.treatment = 'Electroconvulsive Therapy';"
    },
    {
        "instruction": "입력 텍스트: 2020년 중국 각 성의 순환 경제 이니셔티브 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE circular_economy_china (province VARCHAR(50), year INT, initiatives INT); INSERT INTO circular_economy_china (province, year, initiatives) VALUES ('Anhui', 2020, 12), ('Beijing', 2020, 15), ('Chongqing', 2020, 18), ('Fujian', 2020, 10), ('Gansu', 2020, 20);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT province, initiatives FROM circular_economy_china WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: British Columbia'에 위치한 환경 영향 점수가 60과 75인 두 개의 새로운 광산 사이트에 대한 레코드를 추가합니다.\n\nDDL statements:\nCREATE TABLE MiningSites (SiteID INT, SiteName VARCHAR(50), Location VARCHAR(50), EnvironmentalImpactScore INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO MiningSites (SiteName, Location, EnvironmentalImpactScore) VALUES ('New Site 1', 'British Columbia', 60), ('New Site 2', 'British Columbia', 75);"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 지역의 농부들이 헥타르당 평균 얼마나 수확했습니까?\n\nDDL statements:\nCREATE TABLE crops (farmer_id INT, region VARCHAR(255), crop_yield INT, year INT); INSERT INTO crops (farmer_id, region, crop_yield, year) VALUES (1, 'Rural North', 5000, 2020), (2, 'Rural South', 6000, 2020), (3, 'Rural West', 4500, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(crop_yield) FROM crops WHERE year = 2020 GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 지난 1년간 각 회사의 총 이산화탄소 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE company (id INT, name TEXT); CREATE TABLE co2_emission (id INT, company_id INT, date DATE, amount INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT company.name, SUM(co2_emission.amount) as total_emissions FROM company INNER JOIN co2_emission ON company.id = co2_emission.company_id WHERE co2_emission.date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE GROUP BY company.name;"
    },
    {
        "instruction": "입력 텍스트: Smithville Library'에서 모든 기부 내역을 삭제하세요.\n\nDDL statements:\nCREATE TABLE Donations (donation_id INT, donor_name VARCHAR(50), location VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO Donations (donation_id, donor_name, location, amount) VALUES (1, 'John Smith', 'Smithville Library', 50.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Donations WHERE location = 'Smithville Library';"
    },
    {
        "instruction": "입력 텍스트: 플로리다 주에 있는 지속 가능한 도시주의 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE project (id INT, state VARCHAR(20), sustainable_urbanism BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM project WHERE state = 'Florida' AND sustainable_urbanism = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 2015-2016 NBA 시즌 동안 골든 스테이트 워리어스가 한 경기에서 득점한 최대 점수는 몇 점인가요?\n\nDDL statements:\nCREATE TABLE matches (team VARCHAR(50), opponent VARCHAR(50), points_team INTEGER, points_opponent INTEGER, season VARCHAR(10)); INSERT INTO matches (team, opponent, points_team, points_opponent, season) VALUES ('Golden State Warriors', 'Los Angeles Lakers', 116, 105, '2015-2016'), ('Golden State Warriors', 'Boston Celtics', 123, 112, '2015-2016');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(points_team) FROM matches WHERE team = 'Golden State Warriors' AND season = '2015-2016';"
    },
    {
        "instruction": "입력 텍스트: 지난 달에 가장 많이 등장한 상위 5개의 위협 행위자는 각각 몇 번씩 등장했나요?\n\nDDL statements:\nCREATE TABLE threat_actors (id INT, actor VARCHAR(50));INSERT INTO threat_actors (id, actor) VALUES (1, 'Actor 1');INSERT INTO threat_actors (id, actor) VALUES (2, 'Actor 2');INSERT INTO threat_actors (id, actor) VALUES (3, 'Actor 3');INSERT INTO threat_actors (id, actor) VALUES (4, 'Actor 4');INSERT INTO threat_actors (id, actor) VALUES (5, 'Actor 5');INSERT INTO threat_actors (id, actor) VALUES (6, 'Actor 6');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT actor, COUNT(*) FROM threat_actors WHERE date >= DATEADD(month, -1, GETDATE()) GROUP BY actor ORDER BY COUNT(*) DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주에서 2019년과 2020년에 교육에 할당된 총 예산을 보여주세요.\n\nDDL statements:\nCREATE TABLE Budget (State VARCHAR(255), Category VARCHAR(255), Amount DECIMAL(18,2), Year INT); INSERT INTO Budget (State, Category, Amount, Year) VALUES ('TX', 'Education', 500000.00, 2019), ('TX', 'Healthcare', 600000.00, 2019), ('TX', 'Education', 550000.00, 2020);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT State, SUM(Amount) FROM Budget WHERE Category = 'Education' AND Year IN (2019, 2020) AND State = 'TX' GROUP BY State;"
    },
    {
        "instruction": "입력 텍스트: boutique_hotels' 테이블에 있는 호텔의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE boutique_hotels (id INT PRIMARY KEY, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM boutique_hotels;"
    },
    {
        "instruction": "입력 텍스트: 2021년 '대서양' 항구에서 발생한 화물 취급 사고는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE Ports (ID INT, Name TEXT, Location TEXT); CREATE TABLE Incidents (ID INT, PortID INT, IncidentDate DATE); INSERT INTO Ports (ID, Name, Location) VALUES (1, 'Port 1', 'Atlantic'), (2, 'Port 2', 'Pacific'); INSERT INTO Incidents (ID, PortID, IncidentDate) VALUES (1, 1, '2021-01-01'), (2, 1, '2021-02-01'), (3, 2, '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Incidents INNER JOIN Ports ON Incidents.PortID = Ports.ID WHERE Ports.Location = 'Atlantic' AND YEAR(IncidentDate) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 오레곤 주의 약국에서 판매된 대마초의 그램당 최소 가격은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Dispensaries (id INT, dispensary_name VARCHAR(255), state VARCHAR(255), income DECIMAL(10, 2)); INSERT INTO Dispensaries (id, dispensary_name, state, income) VALUES (1, 'Beaver State Dispensary', 'Oregon', 175000.00); CREATE TABLE Cannabis_Sales (id INT, dispensary_id INT, sale_year INT, sale_price DECIMAL(10, 2), sale_weight DECIMAL(10, 2), sale_type VARCHAR(255)); INSERT INTO Cannabis_Sales (id, dispensary_id, sale_year, sale_price, sale_weight, sale_type) VALUES (1, 1, 2021, 30.00, 3.50, 'Flower');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(sale_price / 3.5) FROM Dispensaries d JOIN Cannabis_Sales s ON d.id = s.dispensary_id WHERE d.state = 'Oregon';"
    },
    {
        "instruction": "입력 텍스트: \"articles\" 테이블에서 각 월별로 몇 개의 기사가 출판되었는지?\n\nDDL statements:\nCREATE TABLE articles (id INT, publish_date DATE); INSERT INTO articles (id, publish_date) VALUES (1, '2021-01-01'), (2, '2021-02-01'), (3, '2021-03-01'), (4, '2021-01-15'), (5, '2021-02-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DATE_FORMAT(publish_date, '%Y-%m') AS month, COUNT(*) AS articles_count FROM articles GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 사건 유형과 법원 위치별로 30일 이내에 종결된 사건의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cases (id INT, date DATE, case_type VARCHAR(50), court_location VARCHAR(50), close_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT case_type, court_location, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cases) as pct_closed_within_30_days FROM cases WHERE close_date >= DATEADD(DAY, 30, date) GROUP BY case_type, court_location;"
    },
    {
        "instruction": "입력 텍스트: 각 구별로 교육부 서비스에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE EducationBudget (Service VARCHAR(255), Borough VARCHAR(255), Budget INT); INSERT INTO EducationBudget (Service, Borough, Budget) VALUES ('Primary Education', 'Manhattan', 800000), ('Secondary Education', 'Brooklyn', 1000000), ('Higher Education', 'Queens', 1200000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Budget), Borough FROM EducationBudget GROUP BY Borough;"
    },
    {
        "instruction": "입력 텍스트: 스포츠 게임을 하는 플레이어들의 평균 나이는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Players (PlayerID INT, Age INT, GamePreference VARCHAR(20)); INSERT INTO Players (PlayerID, Age, GamePreference) VALUES (1, 25, 'Sports');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Age) FROM Players WHERE GamePreference = 'Sports';"
    },
    {
        "instruction": "입력 텍스트: 기부자 ID가 1인 기부자의 주소를 '789 Oak St'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, Name TEXT, Address TEXT); INSERT INTO Donors (DonorID, Name, Address) VALUES (1, 'John Doe', '123 Main St'); INSERT INTO Donors (DonorID, Name, Address) VALUES (2, 'Jane Smith', '456 Elm St');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE Donors SET Address = '789 Oak St' WHERE DonorID = 1;"
    },
    {
        "instruction": "입력 텍스트: 시애틀 시에 있는 전기 자전거의 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE if not exists bike_share (id INT, city VARCHAR(20), bike_type VARCHAR(20), quantity INT);INSERT INTO bike_share (id, city, bike_type, quantity) VALUES (1, 'Seattle', 'electric_bike', 500), (2, 'Portland', 'electric_bike', 350), (3, 'Seattle', 'classic_bike', 800);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM bike_share WHERE city = 'Seattle' AND bike_type = 'electric_bike';"
    },
    {
        "instruction": "입력 텍스트: 인도의 문화 유산 보존 사업별로 창출된 지역 일자리의 최소 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE cultural_heritage_jobs (id INT, initiative VARCHAR(20), country VARCHAR(20), local_jobs INT); INSERT INTO cultural_heritage_jobs (id, initiative, country, local_jobs) VALUES (1, 'Temple Restoration', 'India', 8), (2, 'Monument Preservation', 'India', 10), (3, 'Museum Development', 'India', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(local_jobs) FROM cultural_heritage_jobs WHERE country = 'India';"
    },
    {
        "instruction": "입력 텍스트: 예술 및 인문학대학에 몇 명의 여성 교수진이 있습니까?\n\nDDL statements:\nCREATE TABLE faculty (id INT, name VARCHAR(255), department VARCHAR(255), gender VARCHAR(10));CREATE VIEW vw_arts_humanities AS SELECT * FROM faculty WHERE department LIKE '%Arts%' OR department LIKE '%Humanities%';\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM vw_arts_humanities WHERE gender = 'Female';"
    },
    {
        "instruction": "입력 텍스트: 상위 5명의 득점자 목록\n\nDDL statements:\ntop_5_goal_scorers\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM top_5_goal_scorers WHERE rank <= 5;"
    },
    {
        "instruction": "입력 텍스트: category' 열에 'investigation'이라는 단어가 포함된 기사를 찾으세요.\n\nDDL statements:\nCREATE TABLE articles (id INT, title VARCHAR(100), content TEXT, category VARCHAR(50), publication_date DATE); INSERT INTO articles (id, title, content, category, publication_date) VALUES (1, 'Article...', '...', 'investigation', '2022-03-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM articles WHERE category LIKE '%investigation%';"
    },
    {
        "instruction": "입력 텍스트: 인권 분야의 단체들에 기부된 총액은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Organizations (OrgID INT PRIMARY KEY, OrgName TEXT, Sector TEXT); INSERT INTO Organizations (OrgID, OrgName, Sector) VALUES (1, 'Effective Altruism Funds', 'Effective Altruism'); INSERT INTO Organizations (OrgID, OrgName, Sector) VALUES (2, 'Human Rights Watch', 'Human Rights'); CREATE TABLE Donors_Organizations (DonorID INT, OrgID INT, DonationAmount DECIMAL(10,2), DonationDate DATE); INSERT INTO Donors_Organizations (DonorID, OrgID, DonationAmount, DonationDate) VALUES (1, 1, 500.00, '2021-01-01'); INSERT INTO Donors_Organizations (DonorID, OrgID, DonationAmount, DonationDate) VALUES (2, 2, 1000.00, '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(DonationAmount) FROM Donors_Organizations WHERE OrgID IN (SELECT OrgID FROM Organizations WHERE Sector = 'Human Rights');"
    },
    {
        "instruction": "입력 텍스트: 지난 5년간 아프리카 국가들의 평균 사이버보안 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cybersecurity_budgets (id INT, country VARCHAR(255), budget DECIMAL(10,2), year INT); INSERT INTO cybersecurity_budgets (id, country, budget, year) VALUES (1, 'Nigeria', 500000, 2018); INSERT INTO cybersecurity_budgets (id, country, budget, year) VALUES (2, 'Egypt', 700000, 2019);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) AS avg_budget FROM cybersecurity_budgets WHERE year BETWEEN 2016 AND 2021 AND country IN ('Nigeria', 'Egypt', 'South Africa', 'Kenya', 'Morocco');"
    },
    {
        "instruction": "입력 텍스트: 럭셔리 호텔의 가상 투어 참여도는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE virtual_tours (tour_id INT, hotel_id INT, type TEXT, engagement FLOAT); CREATE TABLE luxury_hotels (hotel_id INT, name TEXT, city TEXT, rating FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(virtual_tours.engagement) FROM virtual_tours INNER JOIN luxury_hotels ON virtual_tours.hotel_id = luxury_hotels.hotel_id WHERE luxury_hotels.rating >= 4.5;"
    },
    {
        "instruction": "입력 텍스트: 2021년 'StateX' 지역의 최소 가뭄 영향을 찾으세요.\n\nDDL statements:\nCREATE TABLE Drought_Impact (id INT, impact FLOAT, year INT, state VARCHAR(20)); INSERT INTO Drought_Impact (id, impact, year, state) VALUES (1, 5.6, 2020, 'StateZ'), (2, 6.2, 2019, 'StateZ'), (3, 4.1, 2021, 'StateX');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(impact) FROM Drought_Impact WHERE year = 2021 AND state = 'StateX';"
    },
    {
        "instruction": "입력 텍스트: fans' 테이블에 있는 각 주별 팬들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE fans (fan_id INT, fan_name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, AVG(age) FROM fans GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 러시아에 있는 모든 백금 광산의 최소 깊이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE platinum_mines (id INT, name TEXT, country TEXT, depth FLOAT); INSERT INTO platinum_mines (id, name, country, depth) VALUES (1, 'Platinum Mine 1', 'Russia', 1000.3); INSERT INTO platinum_mines (id, name, country, depth) VALUES (2, 'Platinum Mine 2', 'Russia', 1200.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MIN(depth) FROM platinum_mines WHERE country = 'Russia';"
    },
    {
        "instruction": "입력 텍스트: 스페인에서 차량 유형별 평균 이산화탄소 배출량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE vehicle_emissions (id INT, type VARCHAR(50), country VARCHAR(50), co2_emissions FLOAT); INSERT INTO vehicle_emissions (id, type, country, co2_emissions) VALUES (1, 'Car', 'Spain', 120.5); INSERT INTO vehicle_emissions (id, type, country, co2_emissions) VALUES (2, 'SUV', 'Spain', 150.3); INSERT INTO vehicle_emissions (id, type, country, co2_emissions) VALUES (3, 'Truck', 'Spain', 180.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(co2_emissions) FROM vehicle_emissions WHERE country = 'Spain' GROUP BY type;"
    },
    {
        "instruction": "입력 텍스트: 데이터베이스에 있는 모든 정신 건강 동등법을 나열합니다.\n\nDDL statements:\nCREATE TABLE MentalHealthParity (LawID INT PRIMARY KEY, LawName TEXT, LawDescription TEXT, PassedDate DATE); INSERT INTO MentalHealthParity (LawID, LawName, LawDescription, PassedDate) VALUES (1, 'Parity Act 2020', 'Requires insurers to cover mental health at the same level as physical health', '2020-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM MentalHealthParity;"
    },
    {
        "instruction": "입력 텍스트: Intelligence_Ops' 테이블에 있는 정보 작전들의 평균 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Intelligence_Ops (id INT, name VARCHAR(50), location VARCHAR(20), type VARCHAR(20), budget INT); INSERT INTO Intelligence_Ops (id, name, location, type, budget) VALUES (1, 'Operation Red Falcon', 'Asia', 'Surveillance', 2000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(budget) FROM Intelligence_Ops;"
    },
    {
        "instruction": "입력 텍스트: 2021년 프랑스 파리시의 플라스틱 폐기물 양을 11000으로 업데이트하세요\n\nDDL statements:\nCREATE TABLE waste_types (type VARCHAR(20), quantity INT); INSERT INTO waste_types (type, quantity) VALUES ('organic', 18000), ('plastic', 10000), ('glass', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE waste_types SET quantity = 11000 WHERE type = 'plastic' AND YEAR(date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 제조사별 항공기 평균 납품 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE Manufacturer (ID INT, Name VARCHAR(50)); INSERT INTO Manufacturer (ID, Name) VALUES (1, 'Boeing'), (2, 'Airbus'); CREATE TABLE Aircraft (ID INT, ManufacturerID INT, DeliveryDate DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.Name, AVG(DATEDIFF(d, a.DeliveryDate, GETDATE())) AS AvgDeliveryTime FROM Aircraft a JOIN Manufacturer m ON a.ManufacturerID = m.ID GROUP BY m.Name;"
    },
    {
        "instruction": "입력 텍스트: 2021년 군사 장비 판매액이 가장 높은 상위 5개 방위산업 계약업체는 누구인가요?\n\nDDL statements:\nCREATE TABLE contractors (corp varchar(255), year int, sales int); INSERT INTO contractors (corp, year, sales) VALUES ('ABC Corp', 2021, 1000000), ('DEF Corp', 2021, 1200000), ('GHI Corp', 2021, 1500000), ('JKL Corp', 2021, 1100000), ('MNO Corp', 2021, 1300000), ('PQR Corp', 2021, 900000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT corp, SUM(sales) FROM contractors WHERE year = 2021 GROUP BY corp ORDER BY SUM(sales) DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 2022년 미국에서 가장 많이 스트리밍된 라틴 음악 아티스트 상위 5명은 누구인가요?\n\nDDL statements:\nCREATE TABLE Streams (StreamID INT, UserID INT, ArtistID INT, SongID INT, Country VARCHAR(50), StreamDate DATE); INSERT INTO Streams VALUES (1, 10, 3, 5, 'United States', '2022-01-01'), (2, 12, 4, 6, 'Canada', '2022-01-02');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ArtistID, COUNT(*) AS StreamCount FROM Streams WHERE Country = 'United States' AND StreamDate >= '2022-01-01' AND Genre = 'Latin' GROUP BY ArtistID ORDER BY StreamCount DESC LIMIT 5;"
    },
    {
        "instruction": "입력 텍스트: 어떤 유럽 국가들이 자율 주행 연구를 가장 많이 수행했나요?\n\nDDL statements:\nCREATE TABLE AutonomousDrivingStudies (Country VARCHAR(50), Studies INT); INSERT INTO AutonomousDrivingStudies (Country, Studies) VALUES ('Germany', 30), ('France', 25), ('Italy', 20), ('Spain', 15), ('UK', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, Studies FROM AutonomousDrivingStudies WHERE Country IN ('Germany', 'France', 'Italy', 'Spain', 'UK') ORDER BY Studies DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 기부자가 기부한 총액을 기부 총액이 많은 순으로 정렬하여 알려주세요.\n\nDDL statements:\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, TotalDonation DECIMAL(10,2)); INSERT INTO Donors (DonorID, DonorName, TotalDonation) VALUES (1, 'John Doe', 500.00), (2, 'Jane Smith', 350.00), (3, 'Mike Johnson', 200.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DonorName, SUM(TotalDonation) AS TotalDonated FROM Donors GROUP BY DonorName ORDER BY TotalDonated DESC;"
    },
    {
        "instruction": "입력 텍스트: 화물 처리 테이블에서 총 중량이 가장 높은 상위 3개의 화물 유형과 그들의 총 중량을 나열하세요.\n\nDDL statements:\nCREATE TABLE cargo_handling(cargo_id INT, cargo_type VARCHAR(50), weight FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cargo_type, SUM(weight) as total_weight FROM cargo_handling GROUP BY cargo_type ORDER BY total_weight DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 국가의 에너지 효율(1000 USD당 kWh 기준)을 계산하세요.\n\nDDL statements:\nCREATE TABLE energy_efficiency (country VARCHAR(50), year INT, energy_efficiency FLOAT); INSERT INTO energy_efficiency (country, year, energy_efficiency) VALUES ('USA', 2020, 3.2), ('China', 2020, 4.5), ('India', 2020, 5.6), ('Germany', 2020, 2.9), ('Japan', 2020, 3.7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.country, e.energy_efficiency FROM energy_efficiency e WHERE e.year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 지난 분기에 판매된 비건 아이섀도의 평균 가격은 얼마인가요?\n\nDDL statements:\nCREATE TABLE cosmetics_sales(product_name TEXT, price DECIMAL, is_vegan BOOLEAN, sale_date DATE); INSERT INTO cosmetics_sales(product_name, price, is_vegan, sale_date) VALUES('Vegan Eyeshadow 1', 25.99, true, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(price) FROM cosmetics_sales WHERE is_vegan = true AND sale_date >= DATEADD(quarter, -1, CURRENT_DATE) AND product_name LIKE '%eyeshadow%';"
    },
    {
        "instruction": "입력 텍스트: ocean_health 테이블에서 Nitrate 지표에 해당하는 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE ocean_health (id INT PRIMARY KEY, metric VARCHAR(255), value DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM ocean_health WHERE metric = 'Nitrate';"
    },
    {
        "instruction": "입력 텍스트: 지난 1년 동안 각 교사가 전문 개발 과정에 평균적으로 투자한 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE teachers (id INT, name VARCHAR(255)); INSERT INTO teachers VALUES (1, 'TeacherA'), (2, 'TeacherB'); CREATE TABLE course_completions (id INT, teacher_id INT, course_id INT, completion_date DATE, duration INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT teacher_id, AVG(duration) as avg_duration FROM (SELECT teacher_id, duration, completion_date, ROW_NUMBER() OVER(PARTITION BY teacher_id ORDER BY completion_date DESC) as rn FROM course_completions WHERE completion_date >= DATEADD(year, -1, GETDATE())) t WHERE rn = 1 GROUP BY teacher_id;"
    },
    {
        "instruction": "입력 텍스트: 각 종의 총 개체 수를 보여주세요.\n\nDDL statements:\nocean_species;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species, SUM(population) FROM ocean_species GROUP BY species;"
    },
    {
        "instruction": "입력 텍스트: 마이애미에 있는 지속 가능 인증이 없는 부동산을 삭제하세요.\n\nDDL statements:\nCREATE TABLE properties(id INT, city TEXT, sustainable_certification TEXT); INSERT INTO properties(id, city, sustainable_certification) VALUES (1, 'Miami', NULL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM properties WHERE city = 'Miami' AND sustainable_certification IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 미국의 에너지 저장 용량 중 배터리가 차지하는 비율을 찾으세요.\n\nDDL statements:\nCREATE TABLE Energy_Storage (Type VARCHAR(20), Country VARCHAR(20), Capacity INT); INSERT INTO Energy_Storage VALUES ('Batteries', 'USA', 5000), ('Flywheels', 'USA', 1000), ('Pumped Hydro', 'USA', 15000), ('CAES', 'USA', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT (SUM(CASE WHEN Type = 'Batteries' THEN Capacity ELSE 0 END) * 100.0 / SUM(Capacity)) AS Battery_Percentage FROM Energy_Storage WHERE Country = 'USA';"
    },
    {
        "instruction": "입력 텍스트: 난민 지원' 기관이 받은 기부금 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE refugee_support (donation_id INT, donor VARCHAR(50), amount DECIMAL(10,2), donation_date DATE); INSERT INTO refugee_support (donation_id, donor, amount, donation_date) VALUES (1, 'John Doe', 50.00, '2021-01-01'), (2, 'Jane Smith', 100.00, '2021-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(amount) FROM refugee_support;"
    },
    {
        "instruction": "입력 텍스트: 각 교사가 지난 1년 동안 완료한 연수 과정 수를 수강한 과정 수에 따라 정렬하여 나타내세요.\n\nDDL statements:\nCREATE TABLE teacher_pd (teacher_id INT, course_id INT, course_date DATE); INSERT INTO teacher_pd (teacher_id, course_id, course_date) VALUES (1, 1001, '2022-01-01'), (2, 1002, '2021-06-15'), (3, 1003, '2022-03-01'), (4, 1004, '2021-12-30'), (5, 1005, '2022-02-14');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT teacher_id, COUNT(course_id) as num_courses FROM teacher_pd WHERE course_date >= DATEADD(year, -1, GETDATE()) GROUP BY teacher_id ORDER BY num_courses DESC;"
    },
    {
        "instruction": "입력 텍스트: renewable_projects 테이블에서 각 기술별로 재생 가능 에너지 프로젝트의 총 설치 용량을 나열하세요.\n\nDDL statements:\nCREATE TABLE renewable_projects (project_id INT, project_name VARCHAR(255), location VARCHAR(255), technology VARCHAR(255), installed_capacity FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT technology, SUM(installed_capacity) AS total_capacity FROM renewable_projects GROUP BY technology;"
    },
    {
        "instruction": "입력 텍스트: 케냐에서 800칼로리 미만인 식사의 비율을 보여주세요.\n\nDDL statements:\nCREATE TABLE meals (user_id INT, meal_date DATE, calories INT); INSERT INTO meals (user_id, meal_date, calories) VALUES (1, '2022-01-01', 750), (1, '2022-01-02', 900), (2, '2022-01-01', 600); CREATE TABLE users (user_id INT, country VARCHAR(255)); INSERT INTO users (user_id, country) VALUES (1, 'Kenya'), (2, 'USA'), (3, 'Kenya');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM meals JOIN users ON meals.user_id = users.user_id WHERE users.country = 'Kenya') as pct_meals FROM meals JOIN users ON meals.user_id = users.user_id WHERE users.country = 'Kenya' AND calories < 800;"
    },
    {
        "instruction": "입력 텍스트: 예술 및 인문학 프로그램의 대학원생들이 받은 연구 지원금 총액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE GraduateStudents(Id INT, Name VARCHAR(100), Program VARCHAR(50), GrantsReceived INT); INSERT INTO GraduateStudents(Id, Name, Program, GrantsReceived) VALUES (1, 'Grace', 'Arts and Humanities', 2), (2, 'Harry', 'Arts and Humanities', 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(GrantsReceived) FROM GraduateStudents WHERE Program = 'Arts and Humanities';"
    },
    {
        "instruction": "입력 텍스트: 멸종 위기에 처한 태평양에 서식하는 모든 해양 생물을 나열하세요.\n\nDDL statements:\nCREATE TABLE marine_species (species_name TEXT, endangered BOOLEAN, region TEXT); INSERT INTO marine_species (species_name, endangered, region) VALUES ('Hawaiian Monk Seal', TRUE, 'Pacific'), ('Leatherback Sea Turtle', TRUE, 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT species_name FROM marine_species WHERE endangered = TRUE AND region = 'Pacific';"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 판매된 동물 실험을 하지 않은 제품의 수량은 얼마이며, 판매량에 따라 정렬된 순서대로 나타내세요.\n\nDDL statements:\nCREATE TABLE sales (product_id INT, quantity INT, region TEXT, cruelty_free BOOLEAN); INSERT INTO sales (product_id, quantity, region, cruelty_free) VALUES (1, 500, 'Europe', true), (2, 250, 'North America', false), (3, 750, 'Asia', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, SUM(quantity) AS total_sales, ROW_NUMBER() OVER (ORDER BY total_sales DESC) AS rn FROM sales WHERE cruelty_free = true GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 대륙별 방문객 연령 분포를 5년 간격으로 그룹화하고, 가장 많이 방문한 박물관 순위는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE Continent (Id INT, Continent VARCHAR(50)); INSERT INTO Continent (Id, Continent) VALUES (1, 'Africa'), (2, 'Asia'), (3, 'Europe'), (4, 'North America'), (5, 'South America'), (6, 'Australia'); CREATE TABLE Visitor (Id INT, Age INT, ContinentId INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT RANK() OVER (ORDER BY TotalVisitors DESC) as MuseumRank, m.Name, c.Continent, FLOOR(m.AverageAge/5)*5 as AgeGroup, COUNT(v.Id) as TotalVisitors  FROM Museum m  JOIN Visitor v ON m.Id = v.MuseumId JOIN Continent c ON v.ContinentId = c.Id GROUP BY MuseumRank, m.Name, c.Continent, AgeGroup ORDER BY MuseumRank, TotalVisitors DESC;"
    },
    {
        "instruction": "입력 텍스트: 어느 주에 가장 많은 노조 회원이 있나요?\n\nDDL statements:\nCREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), joined_date DATE); INSERT INTO union_members (id, name, state, joined_date) VALUES (1, 'John Doe', 'NY', '2020-01-01'); INSERT INTO union_members (id, name, state, joined_date) VALUES (2, 'Jane Smith', 'CA', '2019-06-15'); INSERT INTO union_members (id, name, state, joined_date) VALUES (3, 'Maria Rodriguez', 'CA', '2018-12-21'); INSERT INTO union_members (id, name, state, joined_date) VALUES (4, 'David Kim', 'NY', '2019-04-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, COUNT(*) FROM union_members GROUP BY state ORDER BY COUNT(*) DESC;"
    },
    {
        "instruction": "입력 텍스트: 지속 가능한 커뮤니티 뷰에 있는 속성 중에서 도보 접근성 점수가 75점을 초과하는 속성은 몇 개입니까?\n\nDDL statements:\nCREATE VIEW sustainable_communities AS SELECT * FROM properties WHERE walkability_score > 70;\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM sustainable_communities WHERE walkability_score > 75;"
    },
    {
        "instruction": "입력 텍스트: AI for Good 팀의 직원들 중 최대 입사 날짜는 무엇인가요?\n\nDDL statements:\nCREATE TABLE employee_details (id INT, name VARCHAR(50), team VARCHAR(50), recruitment_date DATE); INSERT INTO employee_details (id, name, team, recruitment_date) VALUES (1, 'Kamran', 'AI for Good', '2022-02-15'), (2, 'Leila', 'Data Analytics', '2022-09-01'), (3, 'Marcus', 'AI for Good', '2022-03-10');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(recruitment_date) FROM employee_details WHERE team = 'AI for Good';"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 정보 요원의 총 인원 수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE IntelligencePersonnel (Country VARCHAR(50), Personnel INT); INSERT INTO IntelligencePersonnel (Country, Personnel) VALUES ('USA', 20000), ('China', 15000), ('Russia', 12000), ('UK', 9000), ('Germany', 7000), ('France', 6000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Country, SUM(Personnel) as Total_Personnel FROM IntelligencePersonnel GROUP BY Country;"
    },
    {
        "instruction": "입력 텍스트: \"research_grants\" 테이블에서 금액이 $40,000보다 큰 연구 보조금만을 포함하는 \"major_grants\"라는 이름의 뷰를 생성하세요.\n\nDDL statements:\nCREATE TABLE students (student_id INT, name VARCHAR(255), major VARCHAR(255), gpa DECIMAL(3,2)); CREATE TABLE research_grants (grant_id INT, title VARCHAR(255), amount DECIMAL(10,2), department VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW major_grants AS SELECT * FROM research_grants WHERE amount > 40000;"
    },
    {
        "instruction": "입력 텍스트: 각 재난 유형별 최소, 최대, 평균 대비 수준은 무엇이며, 평균 대비 수준에 따라 정렬된 순서대로 나타내세요.\n\nDDL statements:\nCREATE TABLE DisasterPreparedness (Id INT, Disaster VARCHAR(20), Preparedness INT, City VARCHAR(20), State VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Disaster, MIN(Preparedness) as MinPreparedness, MAX(Preparedness) as MaxPreparedness, AVG(Preparedness) as AvgPreparedness FROM DisasterPreparedness GROUP BY Disaster ORDER BY AvgPreparedness DESC;"
    },
    {
        "instruction": "입력 텍스트: 사회를 위한 기술' 분야에는 몇 개의 조직이 있나요?\n\nDDL statements:\nCREATE TABLE organizations (org_id INT, name VARCHAR(50), sector VARCHAR(50)); INSERT INTO organizations (org_id, name, sector) VALUES (1, 'DoGood Tech', 'technology for social good'); INSERT INTO organizations (org_id, name, sector) VALUES (2, 'Tech4Good', 'technology for social good'); INSERT INTO organizations (org_id, name, sector) VALUES (3, 'Equalize Tech', 'digital divide');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM organizations WHERE sector = 'technology for social good';"
    },
    {
        "instruction": "입력 텍스트: 유럽연합(EU) 내에서 유기농 면 판매의 총 수익을 계산하세요.\n\nDDL statements:\nCREATE TABLE sales (id INT, garment_id INT, price DECIMAL(5,2), country VARCHAR(255)); CREATE TABLE garments (id INT, garment_type VARCHAR(255), material VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(sales.price) FROM sales JOIN garments ON sales.garment_id = garments.id WHERE garments.material = 'Organic Cotton' AND sales.country IN ('Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Republic of Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden');"
    },
    {
        "instruction": "입력 텍스트: Low Risk' 심사 그룹에서 가장 높은 청구 금액을 가진 보험 계약자를 확인하세요.\n\nDDL statements:\nCREATE TABLE underwriting (id INT, group VARCHAR(10), name VARCHAR(20), claim_amount DECIMAL(10,2)); INSERT INTO underwriting (id, group, name, claim_amount) VALUES (1, 'High Risk', 'John Doe', 5000.00), (2, 'Medium Risk', 'Sophia Gonzalez', 6000.00), (3, 'Medium Risk', 'Javier Rodriguez', 7000.00), (4, 'Low Risk', 'Emma White', 8000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, claim_amount FROM (SELECT name, claim_amount, ROW_NUMBER() OVER (PARTITION BY group ORDER BY claim_amount DESC) rn FROM underwriting WHERE group = 'Low Risk') sub WHERE rn = 1;"
    },
    {
        "instruction": "입력 텍스트: 모든 제품에서 사용된 '로즈힙 오일'의 총량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE product_ingredients (product_id INT, ingredient_name VARCHAR(255), quantity FLOAT); INSERT INTO product_ingredients (product_id, ingredient_name, quantity) VALUES (1, 'Rosehip Oil', 50), (2, 'Rosehip Oil', 75), (3, 'Jojoba Oil', 100);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM product_ingredients WHERE ingredient_name = 'Rosehip Oil';"
    },
    {
        "instruction": "입력 텍스트: 유럽에서 각 AI 애플리케이션의 알고리즘 공정성 사건 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE FairnessIncidents (id INT, app VARCHAR(255), region VARCHAR(255), incidents INT); INSERT INTO FairnessIncidents (id, app, region, incidents) VALUES (1, 'AI Writer', 'Europe', 12), (2, 'AI Artist', 'Europe', 15), (3, 'AI Composer', 'Europe', 8), (4, 'AI Explainer', 'Europe', 5), (5, 'AI Writer', 'Africa', 2), (6, 'AI Composer', 'Africa', 10), (7, 'AI Writer', 'Asia', 18), (8, 'AI Writer', 'North America', 9), (9, 'AI Writer', 'South America', 7);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT app, SUM(incidents) as total_incidents FROM FairnessIncidents WHERE region = 'Europe' GROUP BY app;"
    },
    {
        "instruction": "입력 텍스트: threat_intelligence 테이블에 threat_id가 111이고, threat_level이 'Medium', report_date가 '2022-01-01'인 새로운 위협을 추가하세요.\n\nDDL statements:\nCREATE TABLE threat_intelligence (threat_id INT, threat_level VARCHAR(50), report_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO threat_intelligence (threat_id, threat_level, report_date) VALUES (111, 'Medium', '2022-01-01');"
    },
    {
        "instruction": "입력 텍스트: 2020년도에 열린 미술 전시회와 댄스 이벤트의 총 방문객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE ArtExhibitions (id INT, year INT, visitors INT); INSERT INTO ArtExhibitions (id, year, visitors) VALUES (1, 2018, 500), (2, 2019, 700), (3, 2020, 600), (4, 2021, 800); CREATE TABLE DanceEvents (id INT, year INT, visitors INT); INSERT INTO DanceEvents (id, year, visitors) VALUES (1, 2019, 300), (2, 2020, 400), (3, 2021, 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(visitors) FROM ArtExhibitions WHERE year = 2020; SELECT SUM(visitors) FROM DanceEvents WHERE year = 2020;"
    },
    {
        "instruction": "입력 텍스트: 2022년 2월에 각 카테고리별로 발행된 뉴스 기사는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE news_articles (id INT, category VARCHAR(20), publication_date DATE); INSERT INTO news_articles (id, category, publication_date) VALUES (1, 'investigative', '2022-01-05'), (2, 'politics', '2022-02-10'), (3, 'investigative', '2022-01-15'), (4, 'politics', '2022-03-01'), (5, 'sports', '2022-02-20'), (6, 'sports', '2022-02-25');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, COUNT(*) FROM news_articles WHERE EXTRACT(MONTH FROM publication_date) = 2 AND EXTRACT(YEAR FROM publication_date) = 2022 GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: NASA에서 발사한 화성 탐사 임무는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE mars_missions (id INT, name VARCHAR(50), agency VARCHAR(50), year INT); INSERT INTO mars_missions (id, name, agency, year) VALUES (1, 'Mariner 4', 'NASA', 1964); INSERT INTO mars_missions (id, name, agency, year) VALUES (2, 'Viking 1', 'NASA', 1975); INSERT INTO mars_missions (id, name, agency, year) VALUES (3, 'Phoenix', 'NASA', 2007);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mars_missions WHERE agency = 'NASA';"
    },
    {
        "instruction": "입력 텍스트: 각 AI 안전 사고 유형별로 사용된 알고리즘 공정성 방법의 평균 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE ai_safety_incidents (incident_id INT, incident_type VARCHAR(255), method_id INT);CREATE TABLE algorithmic_fairness_methods (method_id INT, method_name VARCHAR(255), description TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT aasi.incident_type, AVG(COUNT(aasi.method_id)) AS avg_methods FROM ai_safety_incidents aasi INNER JOIN algorithmic_fairness_methods afm ON aasi.method_id = afm.method_id GROUP BY aasi.incident_type;"
    },
    {
        "instruction": "입력 텍스트: 2020년 각 주별 총 물 소비량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE water_consumption (state VARCHAR(20), year INT, consumption FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT state, SUM(consumption) FROM water_consumption WHERE year=2020 GROUP BY state;"
    },
    {
        "instruction": "입력 텍스트: 대서양에서 해양 산성화 위험에 처한 종의 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE species_at_risk (ocean VARCHAR(255), count INT); INSERT INTO species_at_risk (ocean, count) VALUES ('Atlantic Ocean', 1500), ('Pacific Ocean', 2200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT count FROM species_at_risk WHERE ocean = 'Atlantic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 2017년과 2018년 유럽에서의 국방 외교 이벤트에 할당된 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE defense_diplomacy (id INT, event_name VARCHAR(50), region VARCHAR(50), year INT, budget INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(budget) FROM defense_diplomacy WHERE region = 'Europe' AND year IN (2017, 2018);"
    },
    {
        "instruction": "입력 텍스트: 태평양에 서식하는 해양 생물종의 평균 개체 수는 서식지별로 어떻게 나뉘어져 있나요?\n\nDDL statements:\nCREATE TABLE pacific_species (id INT, species_name VARCHAR(255), population INT, habitat VARCHAR(255), ocean VARCHAR(255)); INSERT INTO pacific_species (id, species_name, population, habitat, ocean) VALUES (1, 'Giant Pacific Octopus', 20000, 'Deep Sea', 'Pacific');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT habitat, AVG(population) AS avg_population FROM pacific_species WHERE ocean = 'Pacific' GROUP BY habitat;"
    },
    {
        "instruction": "입력 텍스트: 국제 뉴스를 선호하는 사용자들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE users (id INT, age INT, preference VARCHAR(20)); INSERT INTO users (id, age, preference) VALUES (1, 35, 'sports'), (2, 45, 'politics'), (3, 28, 'international'), (4, 50, 'international');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM users WHERE preference = 'international';"
    },
    {
        "instruction": "입력 텍스트: 지난 주에 판매된 '유기농 아보카도'의 총 판매량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE produce (id INT, name VARCHAR(255), qty_sold INT); INSERT INTO produce (id, name, qty_sold) VALUES (1, 'Organic Apples', 350), (2, 'Organic Avocados', 420), (3, 'Bananas', 500); CREATE TABLE date (id INT, date DATE); INSERT INTO date (id, date) VALUES (1, '2022-01-01'), (2, '2022-01-08'), (3, '2022-01-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(qty_sold) AS total_qty_sold FROM produce WHERE name = 'Organic Avocados' AND date IN (SELECT date FROM date WHERE date BETWEEN DATE_SUB(NOW(), INTERVAL 1 WEEK) AND NOW());"
    },
    {
        "instruction": "입력 텍스트: 천체물리학 연구 분야와 가장 많은 논문을 출판한 해당 연구자를 확인하세요.\n\nDDL statements:\nCREATE TABLE research_areas (id INT, name VARCHAR(50), researcher_id INT);CREATE TABLE researchers (id INT, name VARCHAR(50), papers INT); INSERT INTO research_areas VALUES (1, 'Black Holes', 201); INSERT INTO researchers VALUES (1, 'Alex Vogel', 15);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT research_areas.name, researchers.name as researcher_name, COUNT(researchers.papers) as publications FROM research_areas INNER JOIN researchers ON research_areas.researcher_id = researchers.id GROUP BY research_areas.name, researchers.name ORDER BY publications DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 AI 응용 분야별로 기록된 AI 안전 사고 건수를 빈도수가 높은 순으로 내림차순으로 몇 건인지?\n\nDDL statements:\nCREATE TABLE ai_safety_incidents (incident_id INT, incident_description TEXT, domain_id INT);CREATE TABLE ai_application_domains (domain_id INT, domain VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT aad.domain, COUNT(asi.incident_id) AS incident_count FROM ai_safety_incidents asi INNER JOIN ai_application_domains aad ON asi.domain_id = aad.domain_id GROUP BY asi.domain_id ORDER BY incident_count DESC;"
    },
    {
        "instruction": "입력 텍스트: 다양성 교육 테이블에서 각 교육 유형별로 가장 빠른 완료 날짜를 보여주세요.\n\nDDL statements:\nCREATE TABLE diversity_training (id INT PRIMARY KEY, employee_id INT, training_type VARCHAR(255), completion_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT training_type, MIN(completion_date) as earliest_date FROM diversity_training GROUP BY training_type;"
    },
    {
        "instruction": "입력 텍스트: 캐나다에 위치한 식당에서 제공하는 칼로리가 700 이상인 일반 식사의 모든 기록을 삭제합니다.\n\nDDL statements:\nCREATE TABLE Restaurants (id INT, name TEXT, country TEXT); CREATE TABLE Meals (id INT, name TEXT, type TEXT, calories INT, RestaurantId INT, FOREIGN KEY (RestaurantId) REFERENCES Restaurants(id)); INSERT INTO Restaurants (id, name, country) VALUES (1, 'Restaurant A', 'Canada'), (2, 'Restaurant B', 'Canada'), (3, 'Restaurant C', 'USA'); INSERT INTO Meals (id, name, type, calories, RestaurantId) VALUES (1, 'Meal 1', 'Conventional', 800, 1), (2, 'Meal 2', 'Conventional', 700, 1), (3, 'Meal 3', 'Organic', 600, 1), (4, 'Meal 4', 'Conventional', 500, 2), (5, 'Meal 5', 'Organic', 400, 2), (6, 'Meal 6', 'Conventional', 900, 3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Meals WHERE Meals.type = 'Conventional' AND Meals.calories > 700 AND RestaurantId IN (SELECT id FROM Restaurants WHERE Restaurants.country = 'Canada');"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 지속 가능한 방법으로 양식된 어종과 그 수량을 나열하세요.\n\nDDL statements:\nCREATE TABLE FarmD (species VARCHAR(20), country VARCHAR(20), quantity INT, farming_method VARCHAR(20)); INSERT INTO FarmD (species, country, quantity, farming_method) VALUES ('Salmon', 'Norway', 8000, 'Sustainable'); INSERT INTO FarmD (species, country, quantity, farming_method) VALUES ('Trout', 'Norway', 3000, 'Conventional'); INSERT INTO FarmD (species, country, quantity, farming_method) VALUES ('Salmon', 'Scotland', 6000, 'Sustainable'); INSERT INTO FarmD (species, country, quantity, farming_method) VALUES ('Trout', 'Scotland', 2000, 'Sustainable'); INSERT INTO FarmD (species, country, quantity, farming_method) VALUES ('Cod', 'Canada', 4000, 'Conventional');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, species, SUM(quantity) FROM FarmD WHERE farming_method = 'Sustainable' GROUP BY country, species;"
    },
    {
        "instruction": "입력 텍스트: 에어버스 항공기의 최대 승객 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE Aircraft (AircraftID INT, Name VARCHAR(50), Manufacturer VARCHAR(50), Passengers INT); INSERT INTO Aircraft (AircraftID, Name, Manufacturer, Passengers) VALUES (1, 'A320', 'Airbus', 180), (2, 'A380', 'Airbus', 555);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Passengers) FROM Aircraft WHERE Manufacturer = 'Airbus';"
    },
    {
        "instruction": "입력 텍스트: 지난 3년 동안 파트너 국가들과 실시한 군사 훈련의 총 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE exercises (exercise_name VARCHAR(255), partner_country VARCHAR(255), exercise_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT partner_country, COUNT(*) as total_exercises FROM exercises WHERE exercise_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND CURDATE() GROUP BY partner_country;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 플로리다에서 기록된 정신 건강 동등 위반 사례는 몇 건입니까?\n\nDDL statements:\nCREATE TABLE mental_health_parity (id INT, location VARCHAR(50), violation_date DATE); INSERT INTO mental_health_parity (id, location, violation_date) VALUES (1, 'New York', '2021-01-01'), (2, 'California', '2021-02-15'), (3, 'New York', '2021-06-10'), (4, 'Texas', '2021-03-20'), (5, 'Florida', '2021-04-01'), (6, 'Florida', '2021-07-15');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM mental_health_parity WHERE location = 'Florida' AND YEAR(violation_date) = 2021;"
    },
    {
        "instruction": "입력 텍스트: 지난 10년간 미국 래퍼와 협업한 아프리카 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE Artists (ArtistID int, ArtistName varchar(100), Country varchar(50)); CREATE TABLE Collaborations (CollaborationID int, CollaborationDate date, ArtistID1 int, ArtistID2 int); INSERT INTO Artists VALUES (1, 'Artist G', 'Nigeria'); INSERT INTO Artists VALUES (2, 'Artist H', 'USA'); INSERT INTO Collaborations VALUES (1, '2019-01-01', 1, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Artists.ArtistName FROM Artists JOIN Collaborations ON Artists.ArtistID = Collaborations.ArtistID1 JOIN Artists AS Collaborator ON Collaborations.ArtistID2 = Collaborator.ArtistID WHERE Country = 'Nigeria' AND Collaborator.Country = 'USA' AND Collaborations.CollaborationDate >= DATEADD(year, -10, GETDATE());"
    },
    {
        "instruction": "입력 텍스트: 화성 탐사 로버 Curiosity가 기록한 최고 온도는 무엇인가요?\n\nDDL statements:\nCREATE TABLE mars_weather (id INT, rover VARCHAR(255), date DATE, max_temp INT); INSERT INTO mars_weather (id, rover, date, max_temp) VALUES (1, 'Curiosity', '2022-03-12', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(max_temp) FROM mars_weather WHERE rover = 'Curiosity';"
    },
    {
        "instruction": "입력 텍스트: 아메리카스 지역의 호텔에서 모바일 체크인 기술의 도입률은 얼마입니까?\n\nDDL statements:\nCREATE TABLE technology_adoption_mobile (hotel_id INT, technology TEXT, region TEXT, adoption_date DATE, adopted BOOLEAN); INSERT INTO technology_adoption_mobile (hotel_id, technology, region, adoption_date, adopted) VALUES (1, 'mobile check-in', 'Americas', '2022-02-10', true), (2, 'mobile check-in', 'Americas', '2021-11-25', false);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT technology, region, COUNT(*) FILTER (WHERE adopted = true) / COUNT(*) AS adoption_rate FROM technology_adoption_mobile WHERE technology = 'mobile check-in' AND region = 'Americas' GROUP BY technology, region;"
    },
    {
        "instruction": "입력 텍스트: 미국 출신이 아닌 여성 우주비행사 중에서 천체물리학 실험을 수행한 사람은 누구인가요?\n\nDDL statements:\nCREATE TABLE Astronauts (Name TEXT, Age INT, Gender TEXT, Nationality TEXT); INSERT INTO Astronauts (Name, Age, Gender, Nationality) VALUES ('Isabelle Morin', 42, 'Female', 'French'); CREATE TABLE Research_Data (Astronaut TEXT, Experiment TEXT, Result TEXT); INSERT INTO Research_Data (Astronaut, Experiment, Result) VALUES ('Isabelle Morin', 'Astrophysics', 'Completed');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Astronaut FROM Astronauts WHERE Gender = 'Female' AND Nationality != 'American' INTERSECT SELECT Astronaut FROM Research_Data WHERE Experiment = 'Astrophysics';"
    },
    {
        "instruction": "입력 텍스트: intelligence_agency' 테이블에서 'agency_location'이 'Washington DC'인 경우 'commanding_officer' 필드를 'J. Smith'로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE intelligence_agency (agency_id INT PRIMARY KEY, agency_name VARCHAR(30), commanding_officer VARCHAR(30), agency_location VARCHAR(20));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE intelligence_agency SET commanding_officer = 'J. Smith' WHERE agency_location = 'Washington DC';"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 보고된 보안 사고 건수와 각 지역별로 영향을 받은 자산의 총 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE security_incidents (id INT, incident_date DATE, region VARCHAR(255), incident_type VARCHAR(255), affected_assets INT); INSERT INTO security_incidents (id, incident_date, region, incident_type, affected_assets) VALUES (1, '2021-01-01', 'Europe', 'Data breach', 50);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(DISTINCT incident_date) as incidents_count, SUM(affected_assets) as total_affected_assets FROM security_incidents GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: Pop' 장르에서 가장 많은 노래를 가진 아티스트는 누구인가요?\n\nDDL statements:\nCREATE TABLE artists (id INT, name VARCHAR(255), genre VARCHAR(255), number_of_songs INT); INSERT INTO artists (id, name, genre, number_of_songs) VALUES (1, 'Artist 1', 'Hip Hop', 15), (2, 'Artist 2', 'Pop', 20), (3, 'Artist 3', 'R&B', 10);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name AS artist_name, number_of_songs AS songs_count FROM artists WHERE genre = 'Pop' AND number_of_songs = (SELECT MAX(number_of_songs) FROM artists WHERE genre = 'Pop');"
    },
    {
        "instruction": "입력 텍스트: 보험 인수 부서 중 1000개 이상의 레코드를 입력한 부서는 어디인가요?\n\nDDL statements:\nCREATE TABLE UnderwritingDepartments (DeptID INT, DeptName TEXT, EmployeeID INT); INSERT INTO UnderwritingDepartments (DeptID, DeptName, EmployeeID) VALUES (1, 'Life', 100); INSERT INTO UnderwritingDepartments (DeptID, DeptName, EmployeeID) VALUES (2, 'Health', 1100); INSERT INTO UnderwritingDepartments (DeptID, DeptName, EmployeeID) VALUES (3, 'Property', 500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DeptName FROM UnderwritingDepartments GROUP BY DeptName HAVING COUNT(*) > 1000;"
    },
    {
        "instruction": "입력 텍스트: 분산형 애플리케이션이 가장 많이 등록된 상위 3개 국가와 각 국가에 등록된 애플리케이션의 총 거래 횟수를 확인하세요.\n\nDDL statements:\nCREATE TABLE dapps (dapp_id INT, dapp_name VARCHAR(255), total_transactions INT, industry_category VARCHAR(255), country_name VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country_name, SUM(total_transactions) as total_transactions, COUNT(dapp_id) as num_dapps FROM dapps GROUP BY country_name ORDER BY total_transactions DESC, num_dapps DESC;"
    },
    {
        "instruction": "입력 텍스트: customer_data_plans'라는 이름의 뷰를 생성하여 모바일과 광대역 고객의 데이터 요금제를 보여주는 뷰를 만드세요.\n\nDDL statements:\nCREATE SCHEMA telecom; CREATE TABLE mobile_subscribers (id INT, name TEXT, data_plan TEXT); CREATE TABLE broadband_subscribers (customer_id INT, data_usage FLOAT, data_plan TEXT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: CREATE VIEW customer_data_plans AS SELECT * FROM telecom.mobile_subscribers UNION ALL SELECT customer_id, name, data_plan FROM telecom.broadband_subscribers;"
    },
    {
        "instruction": "입력 텍스트: 가장 친환경적인 건물 유형 상위 3개를 보여주세요.\n\nDDL statements:\nCREATE TABLE building_types (building_type VARCHAR(50), avg_sustainability_rating FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT building_type FROM building_types ORDER BY avg_sustainability_rating DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: \"cultural_heritage\" 테이블에서 \"region\"이 \"Asia\"인 모든 레코드의 \"description\"을 \"Experience the rich culture and history\"로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE cultural_heritage (id INT, name VARCHAR(50), region VARCHAR(50), description VARCHAR(100));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE cultural_heritage SET description = 'Experience the rich culture and history' WHERE region = 'Asia';"
    },
    {
        "instruction": "입력 텍스트: 각 시스템 카테고리별 보안 사고의 총 건수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE security_incidents_2 (id INT, severity VARCHAR(20), category VARCHAR(20)); INSERT INTO security_incidents_2 (id, severity, category) VALUES (1, 'low', 'Network'), (2, 'high', 'Software'), (3, 'medium', 'Hardware');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT category, COUNT(*) as total_incidents FROM security_incidents_2 GROUP BY category;"
    },
    {
        "instruction": "입력 텍스트: 인도네시아의 지속 가능한 관광의 총 경제적 영향은 얼마입니까?\n\nDDL statements:\nCREATE TABLE sustainable_tourism_id (region VARCHAR(255), year INT, economic_impact DECIMAL(10,2)); INSERT INTO sustainable_tourism_id (region, year, economic_impact) VALUES ('Bali', 2021, 150000); INSERT INTO sustainable_tourism_id (region, year, economic_impact) VALUES ('Java', 2021, 200000); INSERT INTO sustainable_tourism_id (region, year, economic_impact) VALUES ('Sumatra', 2021, 120000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(economic_impact) FROM sustainable_tourism_id WHERE year = 2021;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별 위성의 평균 배송 시간은 얼마인가요?\n\nDDL statements:\nCREATE TABLE satellites (satellite_id INT, country VARCHAR(50), delivery_time DATETIME);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, AVG(DATEDIFF(day, delivery_time, GETDATE())) as avg_delivery_time FROM satellites GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2015년 이전에 설치된 태양광 발전소의 발전소 소유주별 총 에너지 발전량(MWh)을 보여주세요.\n\nDDL statements:\nCREATE TABLE solar_power_plants (id INT, owner VARCHAR(100), name VARCHAR(100), installation_year INT, energy_generation_mwh FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT owner, SUM(energy_generation_mwh) FROM solar_power_plants WHERE installation_year < 2015 GROUP BY owner;"
    },
    {
        "instruction": "입력 텍스트: international_visitors' 테이블에서 목적지 이름과 총 방문객 수를 나열하세요.\n\nDDL statements:\nCREATE TABLE international_visitors (destination_name VARCHAR(50), visitor_count INT); INSERT INTO international_visitors (destination_name, visitor_count) VALUES ('Paris', 2000000), ('Rome', 1500000), ('Barcelona', 1800000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT destination_name, SUM(visitor_count) FROM international_visitors GROUP BY destination_name;"
    },
    {
        "instruction": "입력 텍스트: 1월 북극해의 평균 해수면 온도는 얼마입니까?\n\nDDL statements:\nCREATE TABLE sea_surface_temperature (id INT, month TEXT, location TEXT, temperature FLOAT); INSERT INTO sea_surface_temperature (id, month, location, temperature) VALUES (1, 'January', 'Arctic Ocean', -1.8);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(temperature) FROM sea_surface_temperature WHERE month = 'January' AND location = 'Arctic Ocean';"
    },
    {
        "instruction": "입력 텍스트: 농촌 지역에 있는 병원과 클리닉의 수를 주별로 나누어서 알려주세요.\n\nDDL statements:\nCREATE TABLE hospitals (id INT, name TEXT, location TEXT, type TEXT); INSERT INTO hospitals (id, name, location, type) VALUES (1, 'Hospital A', 'City A, State A', 'Hospital'); INSERT INTO hospitals (id, name, location, type) VALUES (2, 'Clinic A', 'City B, State A', 'Clinic'); CREATE TABLE clinics (id INT, name TEXT, location TEXT, type TEXT); INSERT INTO clinics (id, name, location, type) VALUES (1, 'Clinic B', 'City A, State B', 'Clinic');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT h.state, COUNT(h.id) as hospital_count, COUNT(c.id) as clinic_count FROM hospitals h OUTER JOIN clinics c ON h.state = c.state WHERE h.location LIKE '%rural%' GROUP BY h.state;"
    },
    {
        "instruction": "입력 텍스트: 단일 게임으로 발생한 최대 수익은 얼마입니까?\n\nDDL statements:\nCREATE TABLE Games (GameID INT, GameName VARCHAR(20), Genre VARCHAR(20), Revenue DECIMAL(10, 2)); INSERT INTO Games (GameID, GameName, Genre, Revenue) VALUES (1, 'Space Explorer', 'VR', 1000), (2, 'Galactic War', 'Action', 2000), (3, 'Mystery Island', 'Adventure', 3000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(Revenue) as MaxRevenue FROM Games;"
    },
    {
        "instruction": "입력 텍스트: 매출 기준으로 지속 가능성 점수가 80점 이상인 상위 3개 브랜드는 무엇인가요?\n\nDDL statements:\nCREATE TABLE brand_sales (brand_name TEXT, revenue INT, sustainability_score INT); INSERT INTO brand_sales (brand_name, revenue, sustainability_score) VALUES ('Brand A', 1000000, 90), ('Brand B', 1200000, 70), ('Brand C', 800000, 85), ('Brand D', 900000, 95), ('Brand E', 750000, 80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT brand_name, revenue, NTILE(4) OVER (ORDER BY revenue DESC) as revenue_tile FROM brand_sales WHERE sustainability_score >= 80;"
    },
    {
        "instruction": "입력 텍스트: DrugA'의 'CountryX'에서의 시장 진입 전략이 무엇이었나요?\n\nDDL statements:\nCREATE TABLE market_access (drug varchar(20), country varchar(20), strategy varchar(50)); INSERT INTO market_access (drug, country, strategy) VALUES ('DrugA', 'CountryX', 'Direct Sales');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT strategy FROM market_access WHERE drug = 'DrugA' AND country = 'CountryX';"
    },
    {
        "instruction": "입력 텍스트: 2022년 각 월의 평균 온도를 arctic_weather 테이블에서 찾으세요.\n\nDDL statements:\nCREATE TABLE arctic_weather (id INT, date DATE, temperature FLOAT); INSERT INTO arctic_weather (id, date, temperature) VALUES (1, '2022-01-01', 10), (2, '2022-01-02', 12);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT EXTRACT(MONTH FROM date) as month, AVG(temperature) as avg_temp FROM arctic_weather WHERE YEAR(date) = 2022 GROUP BY month;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 수익을 기준으로 가장 수익성이 높은 메뉴 아이템 상위 5개를 찾아주세요.\n\nDDL statements:\nCREATE TABLE MenuItems (MenuID int, Name varchar(50), Category varchar(50), Price decimal(5,2)); CREATE TABLE Revenues (RevenueID int, MenuID int, Revenue decimal(5,2), Date date); INSERT INTO MenuItems (MenuID, Name, Category, Price) VALUES (1, 'Big Burger', 'Main', 12.99); INSERT INTO Revenues (RevenueID, MenuID, Revenue, Date) VALUES (1, 1, 1500.00, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT m.Name, SUM(r.Revenue) as TotalRevenue FROM MenuItems m JOIN Revenues r ON m.MenuID = r.MenuID WHERE r.Date >= DATEADD(month, -1, GETDATE()) GROUP BY m.Name ORDER BY TotalRevenue DESC;"
    },
    {
        "instruction": "입력 텍스트: Region C' 지역에 있는 그린 빌딩의 평균 에너지 효율 등급은 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE GreenBuildings (BuildingID INT, BuildingName VARCHAR(255), Region VARCHAR(255), EnergyEfficiencyRating FLOAT); INSERT INTO GreenBuildings (BuildingID, BuildingName, Region, EnergyEfficiencyRating) VALUES (1, 'Green Building 1', 'Region C', 90.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(EnergyEfficiencyRating) FROM GreenBuildings WHERE Region = 'Region C';"
    },
    {
        "instruction": "입력 텍스트: 오세아니아 지역에 있는 유산지의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE HeritageSites (SiteID INT, SiteName VARCHAR(100), Location VARCHAR(100), Visits INT); INSERT INTO HeritageSites (SiteID, SiteName, Location, Visits) VALUES (1, 'Sydney Opera House', 'Australia', 8000000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM HeritageSites WHERE Location LIKE 'Oceania%';"
    },
    {
        "instruction": "입력 텍스트: 매립지 용량이 300,000톤에서 700,000톤 사이인 매립지의 용량 데이터를 용량이 낮은 순으로 정렬하여 보여주세요.\n\nDDL statements:\nCREATE TABLE Landfills (id INT, name VARCHAR(255), capacity INT); INSERT INTO Landfills (id, name, capacity) VALUES (1, 'SiteA', 600000), (2, 'SiteB', 400000), (3, 'SiteC', 700000), (4, 'SiteD', 300000), (5, 'SiteE', 550000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM Landfills WHERE capacity BETWEEN 300000 AND 700000 ORDER BY capacity ASC;"
    },
    {
        "instruction": "입력 텍스트: 지역별 커뮤니티 참여 활동의 분포는 어떻게 되나요?\n\nDDL statements:\nCREATE TABLE CommunityEngagement (id INT, activity VARCHAR(255), region VARCHAR(255)); INSERT INTO CommunityEngagement (id, activity, region) VALUES (1, 'Cultural Festival', 'Asia'), (2, 'Language Workshop', 'Europe'), (3, 'Dance Class', 'Africa');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, COUNT(*) FROM CommunityEngagement GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 아시아-태평양 지역에서 50대 이상 판매된 군사 장비 모델은 무엇인가요?\n\nDDL statements:\nCREATE TABLE EquipmentSales (id INT, equipment_model VARCHAR(255), region VARCHAR(255), quantity INT); INSERT INTO EquipmentSales (id, equipment_model, region, quantity) VALUES (1, 'M1 Abrams', 'Asia-Pacific', 75), (2, 'F-35', 'Asia-Pacific', 120), (3, 'M2 Bradley', 'Europe', 35);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT equipment_model, SUM(quantity) as total_sold FROM EquipmentSales WHERE region = 'Asia-Pacific' GROUP BY equipment_model HAVING total_sold > 50;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 '재활용' 프로그램을 가진 회사는 몇 개인가요?\n\nDDL statements:\nCREATE TABLE companies (company_id INT, country VARCHAR(20), recycling_program BOOLEAN, recycling_program_start_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT companies.country, COUNT(companies.company_id) FROM companies WHERE companies.recycling_program = TRUE GROUP BY companies.country;"
    },
    {
        "instruction": "입력 텍스트: 텍사스 주의 재생 가능 에너지 프로젝트들의 총 탄소 상쇄량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE renewable_energy_projects (id INT, project_name VARCHAR(50), state VARCHAR(50), carbon_offset FLOAT); INSERT INTO renewable_energy_projects (id, project_name, state, carbon_offset) VALUES (1, 'Texas Wind Farm', 'Texas', 50000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(carbon_offset) FROM renewable_energy_projects WHERE state = 'Texas';"
    },
    {
        "instruction": "입력 텍스트: 텍사스에 있는 각 우물의 평균 생산량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE wells (well_id INT, well_name TEXT, location TEXT, production_rate FLOAT); INSERT INTO wells (well_id, well_name, location, production_rate) VALUES (1, 'Well A', 'Texas', 500), (2, 'Well B', 'California', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(production_rate) FROM wells WHERE location = 'Texas'"
    },
    {
        "instruction": "입력 텍스트: 중동에서 발생하고 지상군이 관여된 군사 작전의 세부 사항은 무엇인가요?\n\nDDL statements:\nCREATE TABLE MilitaryOperations (OperationID INT, OperationType VARCHAR(20), OperationLocation VARCHAR(30), OperationYear INT); INSERT INTO MilitaryOperations (OperationID, OperationType, OperationLocation, OperationYear) VALUES (1, 'Ground Forces', 'Iraq', 2010), (2, 'Air Strikes', 'Syria', 2012), (3, 'Naval Blockade', 'Iran', 2015);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT * FROM MilitaryOperations WHERE OperationType = 'Ground Forces' AND OperationLocation LIKE 'Middle East%';"
    },
    {
        "instruction": "입력 텍스트: 2015년부터 2018년 사이에 인도 우타르 프라데시 주에서 완료된 농촌 인프라 프로젝트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE rural_infrastructure (id INT, project_name VARCHAR(255), completion_date DATE, country VARCHAR(50), state VARCHAR(50)); INSERT INTO rural_infrastructure (id, project_name, completion_date, country, state) VALUES (1, 'Road Construction', '2016-04-15', 'India', 'Uttar Pradesh'), (2, 'Water Treatment Plant', '2017-11-28', 'India', 'Uttar Pradesh'), (3, 'Electricity Distribution', '2015-08-06', 'India', 'Uttar Pradesh');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM rural_infrastructure WHERE country = 'India' AND state = 'Uttar Pradesh' AND completion_date BETWEEN '2015-01-01' AND '2018-12-31'"
    },
    {
        "instruction": "입력 텍스트: concert_tours' 테이블에서 특정 아티스트의 콘서트 티켓 판매로 인한 총 수익은 얼마인가요?\n\nDDL statements:\nCREATE TABLE concert_tours (concert_id INT, concert_name TEXT, artist_id INT, location TEXT, date DATE, price DECIMAL(5,2)); CREATE TABLE ticket_sales (sale_id INT, concert_id INT, quantity INT, price DECIMAL(5,2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(ticket_sales.quantity * concert_tours.price) FROM concert_tours JOIN ticket_sales ON concert_tours.concert_id = ticket_sales.concert_id WHERE concert_tours.artist_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 일본에서 전기차의 이산화탄소 배출 감소량(메트릭톤 단위) 중 최대값은 얼마입니까?\n\nDDL statements:\nCREATE TABLE japan_ev_emissions (ev_id INT, co2_reduction FLOAT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(co2_reduction) FROM japan_ev_emissions;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 각 약품의 평균 연간 매출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE drugs (drug_id INT, drug_name TEXT, sales FLOAT, region TEXT); INSERT INTO drugs (drug_id, drug_name, sales, region) VALUES (1, 'DrugA', 5000000, 'North'), (2, 'DrugB', 6000000, 'South');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, AVG(sales) as avg_annual_sales FROM drugs GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 2021년에 입사한 직원들의 평균 급여는 얼마인가요?\n\nDDL statements:\nCREATE TABLE EmployeeTimeline (EmployeeID INT, HireDate DATE, Salary REAL); INSERT INTO EmployeeTimeline (EmployeeID, HireDate, Salary) VALUES (1, '2021-01-01', 60000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(Salary) FROM EmployeeTimeline WHERE HireDate BETWEEN '2021-01-01' AND '2021-12-31';"
    },
    {
        "instruction": "입력 텍스트: 기술 및 헬스케어 분야에 영향력 투자를 한 고유 기부자는 몇 명입니까?\n\nDDL statements:\nCREATE TABLE donors (donor_id INT, name TEXT);CREATE TABLE investments (investment_id INT, donor_id INT, sector TEXT, amount FLOAT);INSERT INTO donors VALUES (1, 'Alice Johnson'), (2, 'Bob Brown'), (3, 'Charlie Davis');INSERT INTO investments VALUES (1, 1, 'technology', 5000.00), (2, 1, 'healthcare', 7000.00), (3, 2, 'technology', 6000.00), (4, 2, 'healthcare', 8000.00), (5, 3, 'technology', 9000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT donors.name) FROM donors INNER JOIN investments donations_tech ON donors.donor_id = donations_tech.donor_id AND donations_tech.sector = 'technology' INNER JOIN investments donations_health ON donors.donor_id = donations_health.donor_id AND donations_health.sector = 'healthcare' HAVING COUNT(DISTINCT donations_tech.investment_id) > 0 AND COUNT(DISTINCT donations_health.investment_id) > 0;"
    },
    {
        "instruction": "입력 텍스트: 2022 시즌 각 농구 선수가 기록한 연속 자유투 성공 횟수 중 최대값은 무엇인가요?\n\nDDL statements:\nCREATE TABLE free_throws (player_id INT, player_name VARCHAR(50), consecutive_successful_free_throws INT); INSERT INTO free_throws (player_id, player_name, consecutive_successful_free_throws) VALUES (1, 'LeBron James', 56), (2, 'Stephen Curry', 62), (3, 'Nikola Jokic', 45), (4, 'James Harden', 72), (5, 'Luka Doncic', 58);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player_name, MAX(consecutive_successful_free_throws) as max_consecutive_successful_free_throws FROM free_throws GROUP BY player_name;"
    },
    {
        "instruction": "입력 텍스트: A'로 시작하는 이름을 가진 선수들의 총 점수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Player (PlayerID INT, Name VARCHAR(50), Country VARCHAR(50), Score INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(Score) FROM Player WHERE Name LIKE 'A%';"
    },
    {
        "instruction": "입력 텍스트: 어느 바다에 해양 생물이 가장 적게 살고 있나요?\n\nDDL statements:\nCREATE TABLE marine_life_counts (id INT, ocean VARCHAR(255), num_species INT); INSERT INTO marine_life_counts (id, ocean, num_species) VALUES (1, 'Pacific', 20000), (2, 'Atlantic', 15000), (3, 'Indian', 10000), (4, 'Arctic', 5000), (5, 'Southern', 8000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT ocean, num_species FROM marine_life_counts ORDER BY num_species ASC;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 프랑스 파리에서 진행된 가상 투어의 평균 지속 시간이 최소 60분 이상일 경우, 월별 평균 가상 투어 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE VirtualTours (location VARCHAR(20), year INT, month INT, duration INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(duration) FROM VirtualTours WHERE location = 'Paris' AND year = 2022 AND month BETWEEN 1 AND 12 HAVING AVG(duration) >= 60;"
    },
    {
        "instruction": "입력 텍스트: 북극 국립 야생동물 보호구역에 있는 북극곰은 몇 마리인가요?\n\nDDL statements:\nCREATE TABLE Animals (name VARCHAR(50), species VARCHAR(50), location VARCHAR(50)); INSERT INTO Animals (name, species, location) VALUES ('Polar Bear 1', 'Polar Bear', 'Arctic National Wildlife Refuge'), ('Polar Bear 2', 'Polar Bear', 'Arctic National Wildlife Refuge');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM Animals WHERE species = 'Polar Bear' AND location = 'Arctic National Wildlife Refuge';"
    },
    {
        "instruction": "입력 텍스트: 지역별 육류 배송의 총 무게를 확인하세요\n\nDDL statements:\nCREATE TABLE regions (region_id INT, name VARCHAR(50)); INSERT INTO regions (region_id, name) VALUES (1, 'north'), (2, 'south'), (3, 'east'), (4, 'west'); CREATE TABLE shipments (shipment_id INT, region_id INT, weight INT, product VARCHAR(50), organic BOOLEAN); INSERT INTO shipments (shipment_id, region_id, weight, product, organic) VALUES (1, 1, 100, 'beef', false), (2, 1, 200, 'chicken', true), (3, 2, 50, 'turkey', false), (4, 3, 300, 'pork', false), (5, 4, 150, 'lamb', true);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region_id, SUM(weight) as total_weight FROM shipments WHERE product LIKE '%meat%' GROUP BY region_id;"
    },
    {
        "instruction": "입력 텍스트: 동부 컨퍼런스의 농구 선수들의 평균 나이는 얼마인가요?\n\nDDL statements:\nCREATE TABLE conference (conference_id INT, name VARCHAR(20)); INSERT INTO conference VALUES (1, 'Eastern Conference'), (2, 'Western Conference');   CREATE TABLE players (player_id INT, name VARCHAR(30), age INT, conference_id INT);   INSERT INTO players VALUES (1, 'John Doe', 25, 1), (2, 'Jane Smith', 28, 1), (3, 'Mike Johnson', 22, 2), (4, 'Sara Williams', 27, 2);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(age) FROM players WHERE conference_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 2019년과 2020년 각 부서에 할당된 총 예산은 얼마인가요?\n\nDDL statements:\nCREATE TABLE department_budget (department TEXT, year INT, budget FLOAT); INSERT INTO department_budget (department, year, budget) VALUES ('Education', 2019, 7000.0), ('Education', 2020, 8000.0), ('Defense', 2019, 12000.0), ('Defense', 2020, 15000.0);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT department, SUM(budget) as total_budget FROM department_budget WHERE year IN (2019, 2020) GROUP BY department;"
    },
    {
        "instruction": "입력 텍스트: agriculture_innovation' 테이블에 있는 모든 농업 혁신 프로젝트의 이름과 예산 배정은 무엇인가요?\n\nDDL statements:\nCREATE TABLE agriculture_innovation (id INT, project_name VARCHAR(50), budget DECIMAL(10, 2)); INSERT INTO agriculture_innovation (id, project_name, budget) VALUES (1, 'Precision Agriculture', 75000.00), (2, 'Vertical Farming', 125000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, budget FROM agriculture_innovation;"
    },
    {
        "instruction": "입력 텍스트: 저렴한 주택' 테이블에서 재산세가 $4000 미만인 부동산의 총 개수는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE affordable_housing (id INT, property_tax FLOAT); INSERT INTO affordable_housing (id, property_tax) VALUES (1, 5000), (2, 3000), (3, 4000), (4, 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM affordable_housing WHERE property_tax < 4000;"
    },
    {
        "instruction": "입력 텍스트: rural_infrastructure' 스키마에 있는 모든 농업 혁신 프로젝트의 이름과 설명은 무엇인가요?\n\nDDL statements:\nCREATE SCHEMA rural_infrastructure; Use rural_infrastructure; CREATE TABLE agri_innovation (project_id INT, project_name VARCHAR(50), project_desc TEXT); INSERT INTO agri_innovation (project_id, project_name, project_desc) VALUES (1, 'Sample Project 1', 'Description 1'), (2, 'Sample Project 2', 'Description 2');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_name, project_desc FROM rural_infrastructure.agri_innovation;"
    },
    {
        "instruction": "입력 텍스트: 교육 중심 조직에 가장 많은 투자를 한 상위 2명의 투자자는 누구인가요?\n\nDDL statements:\nCREATE TABLE investments (investment_id INT, investor_id INT, org_id INT, investment_amount INT); INSERT INTO investments (investment_id, investor_id, org_id, investment_amount) VALUES (1, 1, 4, 60000), (2, 2, 5, 80000), (3, 1, 3, 110000), (4, 3, 4, 40000), (5, 2, 3, 70000); CREATE TABLE investors (investor_id INT, investor_name TEXT); INSERT INTO investors (investor_id, investor_name) VALUES (1, 'Investor D'), (2, 'Investor E'), (3, 'Investor F'); CREATE TABLE organizations (org_id INT, org_name TEXT, focus_topic TEXT); INSERT INTO organizations (org_id, org_name, focus_topic) VALUES (3, 'Org 3', 'Education'), (4, 'Org 4', 'Education'), (5, 'Org 5', 'Healthcare');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT investors.investor_name, SUM(investments.investment_amount) AS total_invested FROM investments JOIN investors ON investments.investor_id = investors.investor_id JOIN organizations ON investments.org_id = organizations.org_id WHERE focus_topic = 'Education' GROUP BY investors.investor_name ORDER BY total_invested DESC LIMIT 2;"
    },
    {
        "instruction": "입력 텍스트: 특정 캠페인의 기부금을 삭제하세요\n\nDDL statements:\nCREATE TABLE Donations (id INT, campaign_id INT, donor_id INT, amount DECIMAL, donation_date DATE); INSERT INTO Donations (id, campaign_id, donor_id, amount, donation_date) VALUES (1, 101, 1001, 50.00, '2021-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM Donations WHERE campaign_id = 101;"
    },
    {
        "instruction": "입력 텍스트: New York'에서 열린 이벤트의 총 참석자 수를 계산하세요\n\nDDL statements:\nCREATE TABLE Events (id INT, name TEXT, city TEXT, attendance INT); INSERT INTO Events (id, name, city, attendance) VALUES (1, 'Art Exhibition', 'New York', 500), (2, 'Theater Performance', 'Los Angeles', 300), (3, 'Music Concert', 'Chicago', 700);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(attendance) FROM Events WHERE city = 'New York';"
    },
    {
        "instruction": "입력 텍스트: 2022년 3월 'Organic Oasis' 식당의 일일 평균 매출이 가장 높은 메뉴 항목을 확인하세요.\n\nDDL statements:\nCREATE TABLE revenue (restaurant_id INT, date DATE, menu_item VARCHAR(50), revenue INT); INSERT INTO revenue (restaurant_id, date, menu_item, revenue) VALUES (4, '2022-03-01', 'Quinoa Salad', 500), (4, '2022-03-02', 'Quinoa Salad', 700), (4, '2022-03-01', 'Tofu Wrap', 800), (4, '2022-03-02', 'Tofu Wrap', 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT menu_item, AVG(revenue) as avg_daily_revenue FROM revenue WHERE restaurant_id = 4 AND MONTH(date) = 3 GROUP BY menu_item ORDER BY avg_daily_revenue DESC;"
    },
    {
        "instruction": "입력 텍스트: expenses' 테이블에 있는 각 도시별 방문객의 평균 지출은 얼마인가요?\n\nDDL statements:\nCREATE TABLE expenses (visitor_id INT, city VARCHAR(50), expenditure INT); INSERT INTO expenses (visitor_id, city, expenditure) VALUES (1, 'Tokyo', 2000), (2, 'New York', 3000), (3, 'Sydney', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT city, AVG(expenditure) FROM expenses GROUP BY city;"
    },
    {
        "instruction": "입력 텍스트: 미국 독자들 사이에서 가장 인기 있는 뉴스 카테고리는 무엇인가요?\n\nDDL statements:\nCREATE TABLE categories (id INT, name VARCHAR(50), popularity INT); CREATE TABLE reader_category_preferences (id INT, reader_id INT, category_id INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT categories.name, AVG(categories.popularity) as avg_popularity FROM categories JOIN reader_category_preferences ON categories.id = reader_category_preferences.category_id JOIN readers ON readers.id = reader_category_preferences.reader_id WHERE readers.country = 'US' GROUP BY categories.name ORDER BY avg_popularity DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: employees' 테이블의 '0003'번 레코드의 'hourly_wage'를 $40로 업데이트하세요.\n\nDDL statements:\nCREATE TABLE employees (id VARCHAR(10), name VARCHAR(50), role VARCHAR(50), hourly_wage DECIMAL(5,2)); INSERT INTO employees (id, name, role, hourly_wage) VALUES ('0001', 'John Doe', 'Engineer', 35.00); INSERT INTO employees (id, name, role, hourly_wage) VALUES ('0002', 'Jane Smith', 'Manager', 50.00); INSERT INTO employees (id, name, role, hourly_wage) VALUES ('0003', 'Robert Johnson', 'Operator', 30.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE employees SET hourly_wage = 40.00 WHERE id = '0003';"
    },
    {
        "instruction": "입력 텍스트: 남대서양' 지역에서 잡힌 어류의 총 어획량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE fish_species (id INT, species TEXT, region TEXT); INSERT INTO fish_species (id, species, region) VALUES (1, 'Tuna', 'South Atlantic'), (2, 'Sardines', 'South Atlantic'), (3, 'Mackerel', 'North Atlantic'); CREATE TABLE catch_data (id INT, species TEXT, weight FLOAT); INSERT INTO catch_data (id, species, weight) VALUES (1, 'Tuna', 400), (2, 'Sardines', 600), (3, 'Mackerel', 350);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(catch_data.weight) FROM catch_data INNER JOIN fish_species ON catch_data.species = fish_species.species WHERE fish_species.region = 'South Atlantic';"
    },
    {
        "instruction": "입력 텍스트: 20골 이상 득점한 축구 선수 명단을 나열하세요.\n\nDDL statements:\nCREATE TABLE football_players (player_name VARCHAR(255), sport VARCHAR(255)); INSERT INTO football_players (player_name, sport) VALUES ('Lionel Messi', 'Football'); INSERT INTO football_players (player_name, sport) VALUES ('Cristiano Ronaldo', 'Football'); CREATE TABLE football_goals (player_name VARCHAR(255), goal_id INT); INSERT INTO football_goals (player_name, goal_id) VALUES ('Lionel Messi', 1); INSERT INTO football_goals (player_name, goal_id) VALUES ('Lionel Messi', 2); INSERT INTO football_goals (player_name, goal_id) VALUES ('Cristiano Ronaldo', 3); INSERT INTO football_goals (player_name, goal_id) VALUES ('Cristiano Ronaldo', 4);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT player_name FROM (SELECT player_name, COUNT(*) as goals FROM football_goals GROUP BY player_name) AS subquery WHERE goals > 20;"
    },
    {
        "instruction": "입력 텍스트: 피드백이 없는 공공 서비스를 찾으세요.\n\nDDL statements:\nCREATE TABLE citizen_feedback (id INT PRIMARY KEY, city VARCHAR(255), age INT, feedback TEXT); CREATE TABLE public_services (id INT PRIMARY KEY, service VARCHAR(255), location VARCHAR(255), budget DECIMAL(10, 2), provider VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT p.* FROM public_services p LEFT JOIN citizen_feedback f ON p.location = f.city WHERE f.id IS NULL;"
    },
    {
        "instruction": "입력 텍스트: 2022년에 \"난민 지원\"을 위해 기부한 독특한 기부자들의 총 기부금액은 얼마입니까?\n\nDDL statements:\nCREATE TABLE donations (id INT, donor_id INT, category VARCHAR(255), donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO donations (id, donor_id, category, donation_amount, donation_date) VALUES (1, 1001, 'refugee_support', 50.00, '2022-01-01'); INSERT INTO donations (id, donor_id, category, donation_amount, donation_date) VALUES (2, 1002, 'refugee_support', 75.00, '2022-02-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(donation_amount) FROM donations WHERE category = 'refugee_support' AND YEAR(donation_date) = 2022 GROUP BY donor_id HAVING COUNT(donor_id) = 1;"
    },
    {
        "instruction": "입력 텍스트: \"chemical_safety_incidents\" 테이블을 업데이트하여 2022년 1월 5일에 발생한 화학물질 C005에 대한 사고 1234가 부적절한 취급으로 인한 것임을 반영하세요.\n\nDDL statements:\nCREATE TABLE chemical_safety_incidents (incident_id int,incident_date date,incident_description varchar(255),chemical_id varchar(10));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: UPDATE chemical_safety_incidents SET incident_description = 'Improper handling', incident_date = '2022-01-05' WHERE incident_id = 1234 AND chemical_id = 'C005';"
    },
    {
        "instruction": "입력 텍스트: 총 수익으로 본 상위 3개의 요리 종류를 나열하세요.\n\nDDL statements:\nCREATE TABLE restaurant_revenue (restaurant_id INT, cuisine VARCHAR(255), revenue FLOAT); INSERT INTO restaurant_revenue (restaurant_id, cuisine, revenue) VALUES (1, 'Italian', 5000.00), (2, 'Mexican', 6000.00), (3, 'Italian', 4000.00), (4, 'Italian', 7000.00), (5, 'Mexican', 8000.00), (6, 'Mexican', 9000.00), (7, 'Chinese', 10000.00), (8, 'Chinese', 11000.00), (9, 'Chinese', 12000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT cuisine, SUM(revenue) as total_revenue FROM restaurant_revenue GROUP BY cuisine ORDER BY total_revenue DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 중동 지역에서 각 완성 단계별 방위 프로젝트 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Project_Status (project_id INT, project_stage VARCHAR(50), project_region VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT project_stage, project_region, COUNT(project_id) as project_count FROM Project_Status WHERE project_region = 'Middle East' GROUP BY project_stage, project_region;"
    },
    {
        "instruction": "입력 텍스트: 아프리카의 섬유 산업에는 몇 명의 근로자가 고용되어 있습니까?\n\nDDL statements:\nCREATE TABLE industries (id INT, name VARCHAR(50), location VARCHAR(50), employees INT); INSERT INTO industries (id, name, location, employees) VALUES (1, 'Textile', 'Africa', 500), (2, 'Metal', 'Europe', 800), (3, 'Textile', 'Asia', 1200);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT employees FROM industries WHERE name = 'Textile' AND location = 'Africa';"
    },
    {
        "instruction": "입력 텍스트: 대서양에 있는 가장 깊은 해구 3곳과 그 평균 깊이를 나열하세요.\n\nDDL statements:\nCREATE TABLE ocean_trenches (trench_name TEXT, location TEXT, average_depth FLOAT); INSERT INTO ocean_trenches (trench_name, location, average_depth) VALUES ('Puerto Rico Trench', 'Atlantic Ocean', 8605), ('South Sandwich Trench', 'Atlantic Ocean', 8428), ('Cayman Trough', 'Atlantic Ocean', 7686);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT trench_name, average_depth FROM (SELECT trench_name, average_depth, ROW_NUMBER() OVER (ORDER BY average_depth DESC) as rn FROM ocean_trenches WHERE location = 'Atlantic Ocean') x WHERE rn <= 3;"
    },
    {
        "instruction": "입력 텍스트: 요가' 또는 '명상' 수업에 참여한 회원들의 고유한 연령대를 확인하세요.\n\nDDL statements:\nCREATE TABLE member_demographics (member_id INT, age INT, gender VARCHAR(6), language VARCHAR(10)); INSERT INTO member_demographics (member_id, age, gender, language) VALUES (1, 35, 'Female', 'English'), (2, 45, 'Male', 'Spanish'), (3, 25, 'Female', 'French'), (4, 30, 'Male', 'English'), (5, 40, 'Female', 'English'), (6, 55, 'Female', 'English'), (7, 60, 'Male', 'English'); CREATE TABLE member_classes (member_id INT, class_type VARCHAR(50)); INSERT INTO member_classes (member_id, class_type) VALUES (1, 'yoga'), (2, 'meditation'), (3, 'spinning'), (4, 'yoga'), (5, 'meditation'), (6, 'yoga'), (7, 'meditation');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT FLOOR(age / 10) * 10 AS age_range FROM member_demographics INNER JOIN member_classes ON member_demographics.member_id = member_classes.member_id WHERE class_type IN ('yoga', 'meditation');"
    },
    {
        "instruction": "입력 텍스트: 정신 건강 장애를 가진 학생들이 지원 그룹에 몇 명이 등록되어 있고, 각각의 장애 유형별로 지원금은 얼마인가요?\n\nDDL statements:\nCREATE TABLE MentalHealth (StudentID INT, StudentName VARCHAR(50), Disability VARCHAR(20), Group VARCHAR(20), Funding INT); INSERT INTO MentalHealth (StudentID, StudentName, Disability, Group, Funding) VALUES (9, 'Grace Lee', 'Anxiety', 'Support Group', 3000); INSERT INTO MentalHealth (StudentID, StudentName, Disability, Group, Funding) VALUES (10, 'Lucas Kim', 'Depression', 'Support Group', 3500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Disability, COUNT(StudentID), SUM(Funding) FROM MentalHealth GROUP BY Disability;"
    },
    {
        "instruction": "입력 텍스트: shelters' 테이블에서 ID가 '1'인 보호소를 삭제하세요.\n\nDDL statements:\nCREATE TABLE shelters (shelter_id INT); INSERT INTO shelters (shelter_id) VALUES (1), (2), (3);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM shelters WHERE shelter_id = 1;"
    },
    {
        "instruction": "입력 텍스트: 연도별로 가장 흔한 유물 유형을 찾으세요.\n\nDDL statements:\nCREATE TABLE artifacts (id INT, excavation_site_id INT, year INT, type VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT a.year, type, COUNT(*) as count FROM artifacts a JOIN (SELECT year, type, COUNT(*) as inner_count FROM artifacts GROUP BY year, type) b ON a.year = b.year AND a.type = b.type GROUP BY a.year, a.type ORDER BY count DESC LIMIT 1;"
    },
    {
        "instruction": "입력 텍스트: 설명이 있는 모든 장애 지원 프로그램을 나열합니다\n\nDDL statements:\nCREATE TABLE disability_programs (id INT PRIMARY KEY, name VARCHAR(255), description TEXT, website VARCHAR(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT name, description FROM disability_programs WHERE description IS NOT NULL;"
    },
    {
        "instruction": "입력 텍스트: 각 지역별로 재정적으로 능력이 있는 개인의 비율은 얼마인가요?\n\nDDL statements:\nCREATE TABLE financial_capability_regions (region TEXT, capable BOOLEAN); INSERT INTO financial_capability_regions (region, capable) VALUES ('North', TRUE), ('South', FALSE), ('East', TRUE), ('West', FALSE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, (COUNT(*) FILTER (WHERE capable = TRUE)) * 100.0 / COUNT(*) AS percentage FROM financial_capability_regions GROUP BY region;"
    },
    {
        "instruction": "입력 텍스트: 축구와 농구 경기에 판매된 티켓의 총 수는 얼마입니까?\n\nDDL statements:\nCREATE TABLE games (game_id INT, game_type VARCHAR(10)); INSERT INTO games (game_id, game_type) VALUES (1, 'Football'), (2, 'Basketball'); CREATE TABLE ticket_sales (ticket_id INT, game_id INT, quantity INT); INSERT INTO ticket_sales (ticket_id, game_id, quantity) VALUES (1, 1, 500), (2, 1, 300), (3, 2, 400), (4, 2, 600);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(quantity) FROM ticket_sales WHERE game_id IN (SELECT game_id FROM games WHERE game_type IN ('Football', 'Basketball'));"
    },
    {
        "instruction": "입력 텍스트: Harvard U'와 'MIT' 양쪽에서 모두 수업을 들은 학생들의 이름을 확인하세요.\n\nDDL statements:\nCREATE TABLE student_university (student_id INT, university VARCHAR(20)); INSERT INTO student_university (student_id, university) VALUES (1, 'Harvard U'), (2, 'MIT'), (3, 'Harvard U'), (4, 'MIT');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT student_id FROM student_university WHERE university IN ('Harvard U', 'MIT') GROUP BY student_id HAVING COUNT(DISTINCT university) = 2;"
    },
    {
        "instruction": "입력 텍스트: rural_development' 데이터베이스에서 국가별로 그룹화된 완료된 농촌 인프라 프로젝트의 총 예산은 얼마입니까?\n\nDDL statements:\nCREATE TABLE rural_infrastructure_project (project_id INT, country VARCHAR(50), project_name VARCHAR(50), budget INT, completed BOOLEAN); INSERT INTO rural_infrastructure_project (project_id, country, project_name, budget, completed) VALUES (1, 'India', 'Rural Electrification', 1500000, true); CREATE TABLE country (country_id INT, country VARCHAR(50), continent VARCHAR(50)); INSERT INTO country (country_id, country, continent) VALUES (1, 'India', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country.country, SUM(rural_infrastructure_project.budget) FROM rural_infrastructure_project INNER JOIN country ON rural_infrastructure_project.country = country.country WHERE rural_infrastructure_project.completed = true GROUP BY country.country;"
    },
    {
        "instruction": "입력 텍스트: 각 지역에서 열린 국방 외교 이벤트의 총 개수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE Defense_Diplomacy (Event_ID INT, Event_Name VARCHAR(50), Start_Date DATE, Region VARCHAR(50)); INSERT INTO Defense_Diplomacy (Event_ID, Event_Name, Start_Date, Region) VALUES (1, 'Defense Summit', '2000-01-01', 'North America');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Region, COUNT(*) as Total_Events FROM Defense_Diplomacy GROUP BY Region;"
    },
    {
        "instruction": "입력 텍스트: 아시아에서 이루어지는 모든 독특한 광산 작업을 나열하십시오.\n\nDDL statements:\nCREATE TABLE MiningOperations (Company VARCHAR(50), Operation VARCHAR(50), Location VARCHAR(10)); INSERT INTO MiningOperations (Company, Operation, Location) VALUES ('XYZ Corp', 'Gold', 'Asia'), ('ABC Enterprises', 'Diamonds', 'Asia'), ('GHI Mines', 'Coal', 'Asia');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT DISTINCT Operation FROM MiningOperations WHERE Location = 'Asia'"
    },
    {
        "instruction": "입력 텍스트: 2022년 1분기에 각 영업사원이 윤리적 제품 카테고리에서 발생시킨 총 수익이 무엇인지, 수익이 높은 순으로 정렬해서 알려주세요.\n\nDDL statements:\nCREATE TABLE sales(id INT, salesperson VARCHAR(255), product VARCHAR(255), revenue FLOAT, date DATE); INSERT INTO sales(id, salesperson, product, revenue, date) VALUES (1, 'John Doe', 'Eco-friendly T-Shirt', 50.00, '2022-01-01');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT salesperson, SUM(revenue) as total_revenue FROM sales WHERE product LIKE 'ethical%' AND date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY salesperson ORDER BY total_revenue DESC;"
    },
    {
        "instruction": "입력 텍스트: 각 선박의 연료 유형별 일일 평균 연료 소비량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE vessels (vessel_id INT, vessel_name VARCHAR(50), flag_state VARCHAR(50)); CREATE TABLE fuel_types (fuel_type_id INT, fuel_type VARCHAR(50)); CREATE TABLE fuel_consumption (id INT, vessel_id INT, fuel_type_id INT, consumption FLOAT, consumption_date DATE);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT v.vessel_name, ft.fuel_type, AVG(fc.consumption) as avg_daily_consumption FROM fuel_consumption fc JOIN vessels v ON fc.vessel_id = v.vessel_id JOIN fuel_types ft ON fc.fuel_type_id = ft.fuel_type_id GROUP BY v.vessel_name, ft.fuel_type;"
    },
    {
        "instruction": "입력 텍스트: astrobiology_experiments 테이블에서 단일 우주선이 수행한 실험의 최대 횟수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE astrobiology_experiments (experiment_id INT, name VARCHAR(100), spacecraft VARCHAR(100), launch_date DATE, experiments_conducted INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT MAX(experiments_conducted) FROM astrobiology_experiments;"
    },
    {
        "instruction": "입력 텍스트: California'에 있는 water_treatment 플랜트는 몇 개입니까?\n\nDDL statements:\nCREATE TABLE water_treatment (id INT, name VARCHAR(255), location VARCHAR(255)); INSERT INTO water_treatment (id, name, location) VALUES (1, 'Sample Plant', 'California');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM water_treatment WHERE location = 'California';"
    },
    {
        "instruction": "입력 텍스트: 지난 주 동안 각 회원의 운동에서 기록된 최대 심박수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE member_workouts (workout_id INT, member_id INT, heart_rate INT, date DATE); INSERT INTO member_workouts VALUES (4,6,160,'2022-02-15'); INSERT INTO member_workouts VALUES (5,7,150,'2022-02-16');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT member_workouts.member_id, MAX(member_workouts.heart_rate) AS max_heart_rate FROM member_workouts WHERE member_workouts.date >= DATEADD(week, -1, GETDATE()) GROUP BY member_workouts.member_id;"
    },
    {
        "instruction": "입력 텍스트: ID 1인 시설의 위치와 용량은 무엇인가요?\n\nDDL statements:\nCREATE TABLE WasteTypes (waste_type_id INT PRIMARY KEY, name VARCHAR, description VARCHAR); CREATE TABLE Facilities (facility_id INT PRIMARY KEY, name VARCHAR, location VARCHAR, capacity INT, waste_type_id INT, FOREIGN KEY (waste_type_id) REFERENCES WasteTypes(waste_type_id)); INSERT INTO WasteTypes (waste_type_id, name, description) VALUES (1, 'Recyclable Waste', 'Waste that can be recycled');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT location, capacity FROM Facilities WHERE facility_id = 1;"
    },
    {
        "instruction": "입력 텍스트: employees' 테이블에 'UK' 출신의 'Bruce Wayne'이라는 새 직원 레코드를 추가하세요.\n\nDDL statements:\nCREATE TABLE employees (id INT, name VARCHAR(255), country VARCHAR(255)); INSERT INTO employees (id, name, country) VALUES (1, 'John Doe', 'USA'); INSERT INTO employees (id, name, country) VALUES (2, 'Jane Smith', 'Canada');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: INSERT INTO employees (id, name, country) VALUES (4, 'Bruce Wayne', 'UK');"
    },
    {
        "instruction": "입력 텍스트: 동부 지역에서 예산이 500000을 초과하는 모든 농촌 인프라 프로젝트를 삭제하세요.\n\nDDL statements:\nCREATE TABLE projects (project_id INT, district_id INT, budget FLOAT, project_type VARCHAR(50)); INSERT INTO projects (project_id, district_id, budget, project_type) VALUES (1, 4, 600000, 'Irrigation System'), (2, 4, 300000, 'Electricity'), (3, 5, 150000, 'Bridge'), (4, 6, 250000, 'Water Supply');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM projects WHERE budget > 500000 AND district_id IN (SELECT district_id FROM districts WHERE region = 'Eastern');"
    },
    {
        "instruction": "입력 텍스트: 아시아 태평양 지역의 모든 채굴 장비와 그들의 유지보수 날짜를 나열하세요.\n\nDDL statements:\nCREATE TABLE Equipment (id INT, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO Equipment (id, name, type, location) VALUES (1, 'Bulldozer', 'Heavy', 'Asia Pacific'), (2, 'Excavator', 'Heavy', 'North America'), (3, 'Crane', 'Medium', 'Asia Pacific'), (4, 'Pickup Truck', 'Light', 'South America'); CREATE TABLE Maintenance (id INT, equipment_id INT, date DATE); INSERT INTO Maintenance (id, equipment_id, date) VALUES (1, 1, '2022-01-01'), (2, 1, '2022-04-01'), (3, 3, '2022-02-15'), (4, 3, '2022-07-20');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Equipment.name, Maintenance.date FROM Equipment INNER JOIN Maintenance ON Equipment.id = Maintenance.equipment_id WHERE Equipment.location = 'Asia Pacific';"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 게임을 플레이한 고유 플레이어 수를 찾으세요.\n\nDDL statements:\ngame_stats(player_id, game_id, score, date_played)\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(DISTINCT player_id) as unique_players FROM game_stats WHERE date_played >= CURDATE() - INTERVAL 1 MONTH;"
    },
    {
        "instruction": "입력 텍스트: 기부금이 500 이상인 기부자의 이름과 이메일을 나열하세요.\n\nDDL statements:\nCREATE TABLE Donors (ID INT PRIMARY KEY, Name TEXT, Donation INT);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT Name, Email FROM Donors WHERE Donation > 500;"
    },
    {
        "instruction": "입력 텍스트: 2021년 7월에 최고 기온이 30도 이상인 모든 필드를 나열하시오.\n\nDDL statements:\nCREATE TABLE field_temperatures (field_id VARCHAR(10), temperature INT, reading_date DATE); INSERT INTO field_temperatures (field_id, temperature, reading_date) VALUES ('A', 25, '2021-07-01'), ('B', 32, '2021-07-02'), ('C', 28, '2021-07-03');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT field_id FROM field_temperatures WHERE temperature > 30 AND reading_date BETWEEN '2021-07-01' AND '2021-07-31';"
    },
    {
        "instruction": "입력 텍스트: 2020년에 캘리포니아와 뉴욕에서 판매된 전기차 총 수량은 얼마인가요?\n\nDDL statements:\nCREATE TABLE EVSales (Id INT PRIMARY KEY, Model VARCHAR(100), Year INT, State VARCHAR(2), UnitsSold INT); INSERT INTO EVSales (Id, Model, Year, State, UnitsSold) VALUES (1, 'Tesla Model 3', 2020, 'CA', 50000), (2, 'Tesla Model Y', 2020, 'CA', 45000), (3, 'Tesla Model S', 2020, 'CA', 15000), (4, 'Tesla Model X', 2020, 'CA', 12000), (5, 'Chevrolet Bolt', 2020, 'CA', 8000), (6, 'Nissan Leaf', 2020, 'CA', 7000), (7, 'Tesla Model 3', 2020, 'NY', 25000), (8, 'Tesla Model Y', 2020, 'NY', 20000), (9, 'Tesla Model S', 2020, 'NY', 5000), (10, 'Tesla Model X', 2020, 'NY', 4000), (11, 'Chevrolet Bolt', 2020, 'NY', 3000), (12, 'Nissan Leaf', 2020, 'NY', 2000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(UnitsSold) FROM EVSales WHERE Year = 2020 AND State IN ('CA', 'NY');"
    },
    {
        "instruction": "입력 텍스트: 지역별로 보호받는 숲과 해당 면적을 모두 나열하세요.\n\nDDL statements:\nCREATE TABLE forests (id INT, name VARCHAR(255), region VARCHAR(255), area FLOAT, protected BOOLEAN);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT region, name, area FROM forests WHERE protected = TRUE;"
    },
    {
        "instruction": "입력 텍스트: 지난 한 달 동안 시카고에서 발급된 건축 허가증의 총 개수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE Permits (PermitID int, PermitNumber varchar(255), IssueDate date, City varchar(255));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(PermitNumber) as TotalPermits FROM Permits WHERE IssueDate >= DATEADD(month, -1, GETDATE()) AND City = 'Chicago';"
    },
    {
        "instruction": "입력 텍스트: 파리에서 공유 스쿠터가 이동한 총 거리는 얼마인가요?\n\nDDL statements:\nCREATE TABLE shared_scooters (scooter_id INT, trip_distance INT, trip_date DATE); INSERT INTO shared_scooters (scooter_id, trip_distance, trip_date) VALUES (1, 12, '2022-01-01'), (2, 17, '2022-01-02'); CREATE TABLE city_coordinates (city VARCHAR(50), latitude DECIMAL(9,6), longitude DECIMAL(9,6)); INSERT INTO city_coordinates (city, latitude, longitude) VALUES ('Paris', 48.8566, 2.3514);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT SUM(trip_distance) FROM shared_scooters, city_coordinates WHERE city_coordinates.city = 'Paris';"
    },
    {
        "instruction": "입력 텍스트: 인도 내 노선에 대한 상위 3개 화물 무게를 확인하세요.\n\nDDL statements:\nCREATE TABLE freight_routes (id INT, freight_id INT, route_id INT, weight INT); INSERT INTO freight_routes VALUES (1, 1, 1, 500), (2, 2, 2, 400), (3, 3, 3, 600); CREATE TABLE routes (id INT, start_location VARCHAR(50), end_location VARCHAR(50), distance INT, country VARCHAR(50)); INSERT INTO routes VALUES (1, 'Location A', 'Location B', 100, 'India'), (2, 'Location A', 'Location C', 200, 'France'), (3, 'Location B', 'Location C', 150, 'India');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT r.start_location, r.end_location, fr.weight FROM freight_routes fr INNER JOIN routes r ON fr.route_id = r.id WHERE r.country = 'India' ORDER BY fr.weight DESC LIMIT 3;"
    },
    {
        "instruction": "입력 텍스트: 2019년에 각 대륙에서 파리를 방문한 관광객 수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE continent_map (continent VARCHAR(255), country VARCHAR(255)); INSERT INTO continent_map (continent, country) VALUES ('Europe', 'France'), ('North America', 'Canada'), ('South America', 'Brazil'), ('Asia', 'China'), ('Africa', 'Egypt'), ('Australia', 'Australia'); CREATE TABLE tourism_stats (country VARCHAR(255), city VARCHAR(255), year INT, tourists INT); INSERT INTO tourism_stats (country, city, year, tourists) VALUES ('France', 'Paris', 2019, 1000000), ('France', 'Paris', 2019, 1200000), ('France', 'Paris', 2019, 900000);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT c.continent, COUNT(t.tourists) AS num_tourists FROM tourism_stats t JOIN continent_map c ON t.country = c.country WHERE t.city = 'Paris' AND t.year = 2019 GROUP BY c.continent;"
    },
    {
        "instruction": "입력 텍스트: 각 판사가 지난 한 달 동안 형사 법정에서 심리한 사건의 총 건수는 무엇인가요?\n\nDDL statements:\nCREATE TABLE cases (id INT, date DATE, judge_id INT, court_type VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT judge_id, COUNT(*) as total_cases_heard FROM cases WHERE court_type = 'Criminal' AND date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY judge_id;"
    },
    {
        "instruction": "입력 텍스트: ai_ethics 테이블에서 tool이 'DeepMind'인 레코드를 삭제하세요.\n\nDDL statements:\nCREATE TABLE ai_ethics (tool VARCHAR(255), method VARCHAR(255), year INT, ethical_rating FLOAT); INSERT INTO ai_ethics (tool, method, year, ethical_rating) VALUES ('DeepMind', 'Reinforcement Learning', 2016, 0.9), ('TensorFlow', 'Supervised Learning', 2015, 0.8), ('PyTorch', 'Deep Learning', 2017, 0.85);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: DELETE FROM ai_ethics WHERE tool = 'DeepMind';"
    },
    {
        "instruction": "입력 텍스트: 모든 해양 분지의 평균 깊이는 얼마입니까?\n\nDDL statements:\nCREATE TABLE ocean_basins (name TEXT, avg_depth REAL);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT AVG(avg_depth) FROM ocean_basins;"
    },
    {
        "instruction": "입력 텍스트: 1997년 이후로 몇 대의 화성 탐사 로버가 배치되었나요?\n\nDDL statements:\nCREATE TABLE MarsRovers (name TEXT, launch_year INTEGER); INSERT INTO MarsRovers (name, launch_year) VALUES ('Sojourner', 1997), ('Spirit', 2004), ('Opportunity', 2004), ('Curiosity', 2012), ('Perseverance', 2021);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM MarsRovers WHERE launch_year >= 1997;"
    },
    {
        "instruction": "입력 텍스트: 창의적 AI 애플리케이션 중 어느 것보다 높은 안전 점수를 가진 모든 AI 애플리케이션의 이름과 안전 점수를 보여주세요.\n\nDDL statements:\nCREATE TABLE ai_applications (app_id INT, app_name VARCHAR(255), app_type VARCHAR(255), safety_score DECIMAL(3,2), creativity_score DECIMAL(3,2)); INSERT INTO ai_applications (app_id, app_name, app_type, safety_score, creativity_score) VALUES (1, 'App1', 'Safety', 0.95, 0.75), (2, 'App2', 'Creativity', 0.85, 0.92), (3, 'App3', 'Safety', 0.90, 0.65), (4, 'App4', 'Creativity', 0.75, 0.80);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT app_name, safety_score FROM ai_applications WHERE safety_score > (SELECT MAX(creativity_score) FROM ai_applications WHERE app_type = 'Creativity');"
    },
    {
        "instruction": "입력 텍스트: 2015년에 설립된 회사들이 받은 총 펀딩 금액을 업종별로 그룹화하여 보여주세요.\n\nDDL statements:\nCREATE TABLE company_founding (id INT, company_name VARCHAR(50), year INT, industry VARCHAR(50)); CREATE TABLE funding_records (id INT, company_name VARCHAR(50), funding_amount DECIMAL(10, 2));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT f.industry, SUM(r.funding_amount) AS total_funding FROM company_founding f JOIN funding_records r ON f.company_name = r.company_name WHERE f.year = 2015 GROUP BY f.industry;"
    },
    {
        "instruction": "입력 텍스트: 2020년 3분기에 채용된 국가 안보 인력은 몇 명입니까?\n\nDDL statements:\nCREATE TABLE national_security_hr (id INT, hire_date DATE, position VARCHAR(255)); INSERT INTO national_security_hr (id, hire_date, position) VALUES (1, '2020-07-15', 'Security Analyst'), (2, '2020-10-01', 'Cybersecurity Specialist');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM national_security_hr WHERE hire_date BETWEEN '2020-07-01' AND '2020-09-30';"
    },
    {
        "instruction": "입력 텍스트: 각 국가에서 판매된 뷰티 제품의 총 수량은 얼마입니까?\n\nDDL statements:\nCREATE TABLE product_sales (country VARCHAR(255), product_count INTEGER); INSERT INTO product_sales (country, product_count) VALUES ('France', 2000), ('USA', 3000), ('Canada', 1000), ('Australia', 1500);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, SUM(product_count) as total_products FROM product_sales GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 각 부서별로 직급에 따라 포지션 채용까지 평균적으로 얼마나 걸리는지 알려주세요.\n\nDDL statements:\nCREATE TABLE Applications (ApplicationID int, Position varchar(50), Department varchar(50), ApplicationDate date, HireDate date); CREATE TABLE Positions (PositionID int, Position varchar(50), Department varchar(50), JobLevel int);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT e.Department, p.JobLevel, AVG(DATEDIFF('day', a.ApplicationDate, a.HireDate)) as AvgTimeToFill FROM Applications a JOIN Positions p ON a.Position = p.Position GROUP BY e.Department, p.JobLevel;"
    },
    {
        "instruction": "입력 텍스트: 각 국가별로 시작된 공익 캠페인은 몇 개인가요?\n\nDDL statements:\nCREATE TABLE campaigns (campaign_id INT, name VARCHAR(50), country VARCHAR(50));\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT country, COUNT(campaign_id) AS campaigns_launched FROM campaigns GROUP BY country;"
    },
    {
        "instruction": "입력 텍스트: 2023년 2분기 각 약품의 총 매출액을 지역별로 구분하여 알려주세요.\n\nDDL statements:\nCREATE TABLE sales (drug VARCHAR(20), region VARCHAR(20), date DATE, revenue NUMERIC(12, 2)); INSERT INTO sales (drug, region, date, revenue) VALUES ('DrugX', 'North', '2023-04-01', 750000.00), ('DrugY', 'North', '2023-04-01', 850000.00), ('DrugX', 'South', '2023-04-01', 650000.00), ('DrugY', 'South', '2023-04-01', 750000.00);\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT drug, SUM(CASE WHEN region = 'North' THEN revenue ELSE 0 END) AS north_revenue, SUM(CASE WHEN region = 'South' THEN revenue ELSE 0 END) AS south_revenue FROM sales WHERE date BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY drug;"
    },
    {
        "instruction": "입력 텍스트: 북극해에서의 고래 목격 횟수는 얼마인가요?\n\nDDL statements:\nCREATE TABLE whale_sightings (sighting_date DATE, ocean TEXT); INSERT INTO whale_sightings (sighting_date, ocean) VALUES ('2021-01-01', 'Arctic Ocean'), ('2021-02-01', 'Antarctic Ocean');\n\n위의 테이블 명세와 사용자의 입력 텍스트를 바탕으로 SQL 쿼리를 작성합니다.",
        "input": "",
        "output": "쿼리 작성: SELECT COUNT(*) FROM whale_sightings WHERE ocean = 'Arctic Ocean';"
    }
]